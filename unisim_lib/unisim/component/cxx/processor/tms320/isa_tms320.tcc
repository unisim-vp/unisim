#include "isa_tms320.hh"
#include <cassert>
#line 70 "isa/tms320.isa"

/* code to be included at the beginning of the implementation of the library */
#include <iostream>
#include <string>
#include "unisim/component/cxx/processor/tms320/exception.hh"

namespace unisim {
	namespace component {
		namespace cxx {
			namespace processor {
				namespace tms320 {

					using std::ostream;
					using std::hex;
					using std::dec;
					using std::endl;
					using std::string;

					static const char *REG_NAME[] = {
						"R0",  "R1",  "R2",  "R3",  "R4",  "R5",  "R6",  "R7",
						"AR0", "AR1", "AR2", "AR3", "AR4", "AR5", "AR6", "AR7",
						"DP", "IR0", "IR1",  "BK",  "SP",  "ST",  "IE",  "IF",
						"IOF",  "RS",  "RE",  "RC",    0,     0,     0,     0
					};

					static const char *COND_NAME[] = {
						"U",    // 00000
						"LO",   // 00001
						"LS",   // 00010
						"HI",   // 00011
						"HS",   // 00100
						"EQ",   // 00101
						"NE",   // 00110
						"LT",   // 00111
						"LE",   // 01000
						"GT",   // 01001
						"GE",   // 01010
						0,      // 01011
						"NV",   // 01100
						"V",    // 01101
						"NUF",  // 01110
						"UF",   // 01111
						"NLV",  // 10000
						"LV",   // 10001
						"NLUF", // 10010
						"LUF",  // 10011
						"ZUF",  // 10100
						0,      // 10101
						0,      // 10110
						0,      // 10111
						0,      // 11000
						0,      // 11001
						0,      // 11010
						0,      // 11011
						0,      // 11100
						0,      // 11101
						0,      // 11110
						0       // 11111
					};

					using unisim::util::arithmetic::Add32;
					using unisim::util::arithmetic::SignedSatAdd32;
					using unisim::util::arithmetic::Sub32;
					using unisim::util::arithmetic::SignedSatSub32;
					using unisim::util::arithmetic::RotateLeft;
					using unisim::util::arithmetic::RotateRight;
					using unisim::util::arithmetic::ShiftLeft;
					using unisim::util::arithmetic::ShiftRight;
					using unisim::util::arithmetic::ShiftArithmeticRight;
					using unisim::util::arithmetic::SignExtend;

				} // end of namespace tms320
			} // end of namespace processor
		} // end of namespace cxx
	} // end of namespace component
} // end of namespace unisim

#line 82 "isa_tms320.tcc"
namespace unisim { namespace component { namespace cxx { namespace processor { namespace tms320 { namespace isa { namespace tms320 {
template <
#line 45 "isa/tms320.isa"
class
#line 87 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106 "isa_tms320.tcc"
>::Operation(CodeType _code, typename CONFIG::address_t _addr, const char *_name)
:
encoding(_code),
addr(_addr),
name(_name)
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 118 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 121 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 125 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 128 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 137 "isa_tms320.tcc"
>::~Operation()
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 152 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 155 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 159 "isa_tms320.tcc"
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 163 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 167 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 171 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 174 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 178 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 181 "isa_tms320.tcc"
)
{
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	{
		return false;
	}
#line 188 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 193 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 196 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 200 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 203 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 207 "isa_tms320.tcc"
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 211 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 215 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 219 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 222 "isa_tms320.tcc"
)
{
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	{
		throw UnknownOpcodeException<CONFIG, DEBUG>(this);
	}
#line 229 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 244 "isa_tms320.tcc"
>
class OpLDE_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 253 "isa_tms320.tcc"
>
{
public:
	OpLDE_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 263 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 267 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 270 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 274 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 277 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 357 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 361 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 364 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 372 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 375 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 379 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 382 "isa_tms320.tcc"
>
class OpLDE_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 391 "isa_tms320.tcc"
>
{
public:
	OpLDE_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 401 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 405 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 408 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 412 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 415 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 495 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 499 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 502 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 510 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 513 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 517 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 520 "isa_tms320.tcc"
>
class OpLDE_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 529 "isa_tms320.tcc"
>
{
public:
	OpLDE_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 541 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 545 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 548 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 552 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 555 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 635 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 639 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 642 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 653 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 657 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 660 "isa_tms320.tcc"
>
class OpLDE_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 665 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 669 "isa_tms320.tcc"
>
{
public:
	OpLDE_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 679 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 683 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 686 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 690 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 693 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 773 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 777 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 780 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 798 "isa_tms320.tcc"
>
class OpLDF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 807 "isa_tms320.tcc"
>
{
public:
	OpLDF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 817 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 821 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 824 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 828 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 831 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 911 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 915 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 918 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 926 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 929 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 933 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 936 "isa_tms320.tcc"
>
class OpLDF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 941 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 945 "isa_tms320.tcc"
>
{
public:
	OpLDF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 955 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 959 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 962 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 966 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 969 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1049 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1053 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1056 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1064 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1067 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1071 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1074 "isa_tms320.tcc"
>
class OpLDF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1079 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1083 "isa_tms320.tcc"
>
{
public:
	OpLDF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1095 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1099 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1102 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1106 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1109 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1189 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1193 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1196 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1204 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1207 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1211 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1214 "isa_tms320.tcc"
>
class OpLDF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1219 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1223 "isa_tms320.tcc"
>
{
public:
	OpLDF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1233 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1237 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1240 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1244 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1247 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1327 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1331 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1334 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1342 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1349 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1352 "isa_tms320.tcc"
>
class OpLDFcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1357 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1361 "isa_tms320.tcc"
>
{
public:
	OpLDFcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1372 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1376 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1379 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1383 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1386 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1466 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1470 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1473 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1481 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1491 "isa_tms320.tcc"
>
class OpLDFcond_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1500 "isa_tms320.tcc"
>
{
public:
	OpLDFcond_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1511 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1515 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1518 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1522 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1525 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1605 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1609 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1612 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1620 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1627 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1630 "isa_tms320.tcc"
>
class OpLDFcond_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1635 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1639 "isa_tms320.tcc"
>
{
public:
	OpLDFcond_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1652 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1656 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1659 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1663 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1666 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1746 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1750 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1753 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1761 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1768 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1771 "isa_tms320.tcc"
>
class OpLDFcond_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1780 "isa_tms320.tcc"
>
{
public:
	OpLDFcond_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1791 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1795 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1798 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1802 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1805 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1885 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1889 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1892 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1900 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1903 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1907 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1910 "isa_tms320.tcc"
>
class OpLDI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1915 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1919 "isa_tms320.tcc"
>
{
public:
	OpLDI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1929 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1933 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1936 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1940 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1943 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2023 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2027 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2030 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2038 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2041 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2045 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2048 "isa_tms320.tcc"
>
class OpLDI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2053 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2057 "isa_tms320.tcc"
>
{
public:
	OpLDI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2067 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2071 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2074 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2078 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2081 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2161 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2165 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2168 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2176 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2179 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2183 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2186 "isa_tms320.tcc"
>
class OpLDI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2191 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2195 "isa_tms320.tcc"
>
{
public:
	OpLDI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2207 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2211 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2214 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2218 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2221 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2301 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2305 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2308 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2316 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2319 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2323 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2326 "isa_tms320.tcc"
>
class OpLDI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2331 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2335 "isa_tms320.tcc"
>
{
public:
	OpLDI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2345 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2349 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2352 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2356 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2359 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2439 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2443 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2446 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2457 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2461 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2464 "isa_tms320.tcc"
>
class OpLDIcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2469 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2473 "isa_tms320.tcc"
>
{
public:
	OpLDIcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2484 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2488 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2491 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2495 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2498 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2578 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2582 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2585 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2593 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2600 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2603 "isa_tms320.tcc"
>
class OpLDIcond_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2608 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2612 "isa_tms320.tcc"
>
{
public:
	OpLDIcond_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2623 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2627 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2630 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2634 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2637 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2717 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2721 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2724 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2732 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2735 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2739 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2742 "isa_tms320.tcc"
>
class OpLDIcond_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2747 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2751 "isa_tms320.tcc"
>
{
public:
	OpLDIcond_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2764 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2768 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2771 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2775 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2778 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2858 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2862 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2865 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2873 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2880 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2883 "isa_tms320.tcc"
>
class OpLDIcond_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2888 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2892 "isa_tms320.tcc"
>
{
public:
	OpLDIcond_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2903 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2907 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2910 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2914 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2917 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2997 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3001 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3004 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3022 "isa_tms320.tcc"
>
class OpLDM_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3031 "isa_tms320.tcc"
>
{
public:
	OpLDM_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3041 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3045 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3048 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3052 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3055 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3135 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3139 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3142 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3157 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3160 "isa_tms320.tcc"
>
class OpLDM_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3165 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3169 "isa_tms320.tcc"
>
{
public:
	OpLDM_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3179 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3183 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3186 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3190 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3193 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3273 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3277 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3280 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3288 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3295 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3298 "isa_tms320.tcc"
>
class OpLDM_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3303 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3307 "isa_tms320.tcc"
>
{
public:
	OpLDM_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3319 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3323 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3326 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3330 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3333 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3413 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3417 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3420 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3428 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3431 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3435 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3438 "isa_tms320.tcc"
>
class OpLDM_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3447 "isa_tms320.tcc"
>
{
public:
	OpLDM_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3457 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3461 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3464 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3468 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3471 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3551 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3555 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3558 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3566 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3576 "isa_tms320.tcc"
>
class OpLDP : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3581 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3585 "isa_tms320.tcc"
>
{
public:
	OpLDP(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3594 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3598 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3601 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3605 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3608 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3688 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3692 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3695 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3703 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3706 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3710 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3713 "isa_tms320.tcc"
>
class OpPOP : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3718 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3722 "isa_tms320.tcc"
>
{
public:
	OpPOP(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3731 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3735 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3738 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3742 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3745 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3825 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3829 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3832 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3850 "isa_tms320.tcc"
>
class OpPOPF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3855 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3859 "isa_tms320.tcc"
>
{
public:
	OpPOPF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3868 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3872 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3875 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3879 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3882 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3962 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3966 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3969 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3984 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3987 "isa_tms320.tcc"
>
class OpPUSH : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3992 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3996 "isa_tms320.tcc"
>
{
public:
	OpPUSH(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4005 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4009 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4012 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4016 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4019 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4099 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4103 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4106 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4114 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4117 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4121 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4124 "isa_tms320.tcc"
>
class OpPUSHF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4129 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4133 "isa_tms320.tcc"
>
{
public:
	OpPUSHF(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4142 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4146 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4149 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4153 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4156 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4236 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4240 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4243 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4258 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4261 "isa_tms320.tcc"
>
class OpSTF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4266 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4270 "isa_tms320.tcc"
>
{
public:
	OpSTF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4280 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4284 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4287 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4291 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4294 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4374 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4378 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4381 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4389 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4392 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4396 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4399 "isa_tms320.tcc"
>
class OpSTF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4404 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4408 "isa_tms320.tcc"
>
{
public:
	OpSTF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4420 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4424 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4427 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4431 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4434 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4514 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4518 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4521 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4532 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4536 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4539 "isa_tms320.tcc"
>
class OpSTI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4548 "isa_tms320.tcc"
>
{
public:
	OpSTI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4558 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4562 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4565 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4569 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4572 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4652 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4656 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4659 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4677 "isa_tms320.tcc"
>
class OpSTI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4682 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4686 "isa_tms320.tcc"
>
{
public:
	OpSTI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4698 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4702 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4705 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4709 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4712 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4792 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4796 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4799 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4807 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4810 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4814 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4817 "isa_tms320.tcc"
>
class OpABSF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4826 "isa_tms320.tcc"
>
{
public:
	OpABSF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4836 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4840 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4843 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4847 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4850 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4930 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4934 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4937 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4945 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4948 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4952 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4955 "isa_tms320.tcc"
>
class OpABSF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4960 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4964 "isa_tms320.tcc"
>
{
public:
	OpABSF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4974 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4978 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4981 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4985 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4988 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5068 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5072 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5075 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5083 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5090 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5093 "isa_tms320.tcc"
>
class OpABSF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5098 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5102 "isa_tms320.tcc"
>
{
public:
	OpABSF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5114 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5118 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5121 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5125 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5128 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5208 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5212 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5215 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5223 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5226 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5233 "isa_tms320.tcc"
>
class OpABSF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5242 "isa_tms320.tcc"
>
{
public:
	OpABSF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5252 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5256 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5259 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5263 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5266 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5346 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5350 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5353 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5361 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5364 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5371 "isa_tms320.tcc"
>
class OpABSI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5380 "isa_tms320.tcc"
>
{
public:
	OpABSI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5390 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5394 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5397 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5401 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5404 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5484 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5488 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5491 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5509 "isa_tms320.tcc"
>
class OpABSI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5514 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5518 "isa_tms320.tcc"
>
{
public:
	OpABSI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5528 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5532 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5535 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5539 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5542 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5622 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5626 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5629 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5640 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5644 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5647 "isa_tms320.tcc"
>
class OpABSI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5652 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5656 "isa_tms320.tcc"
>
{
public:
	OpABSI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5668 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5672 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5675 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5679 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5682 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5762 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5766 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5769 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5777 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5780 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5784 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5787 "isa_tms320.tcc"
>
class OpABSI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5796 "isa_tms320.tcc"
>
{
public:
	OpABSI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5806 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5810 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5813 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5817 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5820 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5900 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5904 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5907 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5915 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5918 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5922 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5925 "isa_tms320.tcc"
>
class OpADDC_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5934 "isa_tms320.tcc"
>
{
public:
	OpADDC_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5944 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5948 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5951 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5955 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5958 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6038 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6042 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6045 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6053 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6060 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6063 "isa_tms320.tcc"
>
class OpADDC_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6068 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6072 "isa_tms320.tcc"
>
{
public:
	OpADDC_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6082 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6086 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6089 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6093 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6096 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6176 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6180 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6183 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6191 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6194 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6201 "isa_tms320.tcc"
>
class OpADDC_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6206 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6210 "isa_tms320.tcc"
>
{
public:
	OpADDC_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6222 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6226 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6229 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6233 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6236 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6316 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6320 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6323 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6331 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6334 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6338 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6341 "isa_tms320.tcc"
>
class OpADDC_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6350 "isa_tms320.tcc"
>
{
public:
	OpADDC_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6360 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6364 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6367 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6371 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6374 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6454 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6458 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6461 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6476 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6479 "isa_tms320.tcc"
>
class OpADDF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6488 "isa_tms320.tcc"
>
{
public:
	OpADDF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6498 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6502 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6505 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6509 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6512 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6592 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6596 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6599 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6607 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6610 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6614 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6617 "isa_tms320.tcc"
>
class OpADDF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6622 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6626 "isa_tms320.tcc"
>
{
public:
	OpADDF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6636 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6640 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6643 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6647 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6650 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6730 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6734 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6737 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6745 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6748 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6752 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6755 "isa_tms320.tcc"
>
class OpADDF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6760 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6764 "isa_tms320.tcc"
>
{
public:
	OpADDF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6776 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6780 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6783 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6787 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6790 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6870 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6874 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6877 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6885 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6888 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6892 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6895 "isa_tms320.tcc"
>
class OpADDF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6904 "isa_tms320.tcc"
>
{
public:
	OpADDF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6914 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6918 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6921 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6925 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6928 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7008 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7012 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7015 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7023 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7026 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7030 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7033 "isa_tms320.tcc"
>
class OpADDI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7042 "isa_tms320.tcc"
>
{
public:
	OpADDI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7052 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7056 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7059 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7063 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7066 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7146 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7150 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7153 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7161 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7164 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7171 "isa_tms320.tcc"
>
class OpADDI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7176 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7180 "isa_tms320.tcc"
>
{
public:
	OpADDI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7190 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7194 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7197 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7201 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7204 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7284 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7288 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7291 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7299 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7302 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7306 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7309 "isa_tms320.tcc"
>
class OpADDI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7314 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7318 "isa_tms320.tcc"
>
{
public:
	OpADDI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7330 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7334 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7337 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7341 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7344 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7424 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7428 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7431 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7439 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7446 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7449 "isa_tms320.tcc"
>
class OpADDI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7458 "isa_tms320.tcc"
>
{
public:
	OpADDI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7468 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7472 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7475 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7479 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7482 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7562 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7566 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7569 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7577 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7580 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7584 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7587 "isa_tms320.tcc"
>
class OpAND_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7596 "isa_tms320.tcc"
>
{
public:
	OpAND_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7606 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7610 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7613 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7617 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7620 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7700 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7704 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7707 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7715 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7718 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7725 "isa_tms320.tcc"
>
class OpAND_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7734 "isa_tms320.tcc"
>
{
public:
	OpAND_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7744 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7748 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7751 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7755 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7758 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7838 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7842 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7845 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7853 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7856 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7860 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7863 "isa_tms320.tcc"
>
class OpAND_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7872 "isa_tms320.tcc"
>
{
public:
	OpAND_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7884 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7888 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7891 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7895 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7898 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7978 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7982 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7985 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7993 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7996 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8003 "isa_tms320.tcc"
>
class OpAND_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8008 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8012 "isa_tms320.tcc"
>
{
public:
	OpAND_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8022 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8026 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8029 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8033 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8036 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8116 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8120 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8123 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8131 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8134 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8138 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8141 "isa_tms320.tcc"
>
class OpANDN_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8150 "isa_tms320.tcc"
>
{
public:
	OpANDN_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8160 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8164 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8167 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8171 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8174 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8254 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8258 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8261 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8269 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8272 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8279 "isa_tms320.tcc"
>
class OpANDN_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8284 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8288 "isa_tms320.tcc"
>
{
public:
	OpANDN_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8298 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8302 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8305 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8309 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8312 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8392 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8396 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8399 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8407 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8410 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8414 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8417 "isa_tms320.tcc"
>
class OpANDN_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8422 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8426 "isa_tms320.tcc"
>
{
public:
	OpANDN_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8438 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8442 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8445 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8449 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8452 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8532 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8536 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8539 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8547 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8550 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8554 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8557 "isa_tms320.tcc"
>
class OpANDN_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8562 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8566 "isa_tms320.tcc"
>
{
public:
	OpANDN_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8576 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8580 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8583 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8587 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8590 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8670 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8674 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8677 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8685 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8688 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8692 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8695 "isa_tms320.tcc"
>
class OpASH_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8704 "isa_tms320.tcc"
>
{
public:
	OpASH_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8714 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8718 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8721 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8725 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8728 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8808 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8812 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8815 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8823 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8826 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8830 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8833 "isa_tms320.tcc"
>
class OpASH_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8838 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8842 "isa_tms320.tcc"
>
{
public:
	OpASH_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8852 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8856 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8859 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8863 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8866 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8946 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8950 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8953 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8961 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8968 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8971 "isa_tms320.tcc"
>
class OpASH_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8976 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8980 "isa_tms320.tcc"
>
{
public:
	OpASH_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8992 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8996 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8999 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9003 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9006 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9086 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9090 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9093 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9111 "isa_tms320.tcc"
>
class OpASH_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9120 "isa_tms320.tcc"
>
{
public:
	OpASH_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9130 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9134 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9137 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9141 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9144 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9224 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9228 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9231 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9239 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9242 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9246 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9249 "isa_tms320.tcc"
>
class OpCMPF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9258 "isa_tms320.tcc"
>
{
public:
	OpCMPF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9268 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9272 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9275 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9279 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9282 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9362 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9366 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9369 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9377 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9384 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9387 "isa_tms320.tcc"
>
class OpCMPF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9392 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9396 "isa_tms320.tcc"
>
{
public:
	OpCMPF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9406 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9410 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9413 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9417 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9420 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9500 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9504 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9507 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9515 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9518 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9522 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9525 "isa_tms320.tcc"
>
class OpCMPF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9530 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9534 "isa_tms320.tcc"
>
{
public:
	OpCMPF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9546 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9550 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9553 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9557 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9560 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9640 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9644 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9647 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9662 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9665 "isa_tms320.tcc"
>
class OpCMPF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9674 "isa_tms320.tcc"
>
{
public:
	OpCMPF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9684 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9688 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9691 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9695 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9698 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9778 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9782 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9785 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9793 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9800 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9803 "isa_tms320.tcc"
>
class OpCMPI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9812 "isa_tms320.tcc"
>
{
public:
	OpCMPI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9822 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9826 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9829 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9833 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9836 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9916 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9920 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9923 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9931 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9934 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9938 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9941 "isa_tms320.tcc"
>
class OpCMPI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9946 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9950 "isa_tms320.tcc"
>
{
public:
	OpCMPI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9960 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9964 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9967 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9971 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9974 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10054 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10058 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10061 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10069 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10072 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10076 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10079 "isa_tms320.tcc"
>
class OpCMPI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10084 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10088 "isa_tms320.tcc"
>
{
public:
	OpCMPI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10100 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10104 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10107 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10111 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10114 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10194 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10198 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10201 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10219 "isa_tms320.tcc"
>
class OpCMPI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10228 "isa_tms320.tcc"
>
{
public:
	OpCMPI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10238 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10242 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10245 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10249 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10252 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10332 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10336 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10339 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10347 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10350 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10354 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10357 "isa_tms320.tcc"
>
class OpFIX_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10362 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10366 "isa_tms320.tcc"
>
{
public:
	OpFIX_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10376 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10380 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10383 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10387 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10390 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10470 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10474 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10477 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10495 "isa_tms320.tcc"
>
class OpFIX_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10500 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10504 "isa_tms320.tcc"
>
{
public:
	OpFIX_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10514 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10518 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10521 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10525 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10528 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10608 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10612 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10615 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10626 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10633 "isa_tms320.tcc"
>
class OpFIX_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10642 "isa_tms320.tcc"
>
{
public:
	OpFIX_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10654 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10658 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10661 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10665 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10668 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10748 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10752 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10755 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10766 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10770 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10773 "isa_tms320.tcc"
>
class OpFIX_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10778 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10782 "isa_tms320.tcc"
>
{
public:
	OpFIX_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10792 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10796 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10799 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10803 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10806 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10886 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10890 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10893 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10901 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10908 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10911 "isa_tms320.tcc"
>
class OpFLOAT_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10916 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10920 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10930 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10934 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10937 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10941 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10944 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11024 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11028 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11031 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11039 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11046 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11049 "isa_tms320.tcc"
>
class OpFLOAT_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11054 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11058 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11068 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11072 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11075 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11079 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11082 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11162 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11166 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11169 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11177 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11180 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11184 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11187 "isa_tms320.tcc"
>
class OpFLOAT_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11196 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11208 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11212 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11215 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11219 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11222 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11302 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11306 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11309 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11317 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11324 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11327 "isa_tms320.tcc"
>
class OpFLOAT_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11332 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11336 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11346 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11350 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11353 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11357 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11360 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11440 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11444 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11447 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11455 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11458 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11462 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11465 "isa_tms320.tcc"
>
class OpLSH_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11470 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11474 "isa_tms320.tcc"
>
{
public:
	OpLSH_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11484 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11488 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11491 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11495 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11498 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11578 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11582 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11585 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11593 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11600 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11603 "isa_tms320.tcc"
>
class OpLSH_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11608 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11612 "isa_tms320.tcc"
>
{
public:
	OpLSH_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11622 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11626 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11629 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11633 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11636 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11716 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11720 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11723 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11731 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11734 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11738 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11741 "isa_tms320.tcc"
>
class OpLSH_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11746 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11750 "isa_tms320.tcc"
>
{
public:
	OpLSH_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11762 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11766 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11769 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11773 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11776 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11856 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11860 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11863 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11871 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11874 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11878 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11881 "isa_tms320.tcc"
>
class OpLSH_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11886 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11890 "isa_tms320.tcc"
>
{
public:
	OpLSH_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11900 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11904 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11907 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11911 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11914 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11994 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11998 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12001 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12009 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12012 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12016 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12019 "isa_tms320.tcc"
>
class OpMPYF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12024 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12028 "isa_tms320.tcc"
>
{
public:
	OpMPYF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12038 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12042 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12045 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12049 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12052 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12132 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12136 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12139 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12150 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12154 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12157 "isa_tms320.tcc"
>
class OpMPYF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12162 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12166 "isa_tms320.tcc"
>
{
public:
	OpMPYF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12176 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12180 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12183 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12187 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12190 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12270 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12274 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12277 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12285 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12292 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12295 "isa_tms320.tcc"
>
class OpMPYF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12300 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12304 "isa_tms320.tcc"
>
{
public:
	OpMPYF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12316 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12320 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12323 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12327 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12330 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12410 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12414 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12417 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12425 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12428 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12432 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12435 "isa_tms320.tcc"
>
class OpMPYF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12440 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12444 "isa_tms320.tcc"
>
{
public:
	OpMPYF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12454 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12458 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12461 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12465 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12468 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12548 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12552 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12555 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12563 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12566 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12570 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12573 "isa_tms320.tcc"
>
class OpMPYI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12578 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12582 "isa_tms320.tcc"
>
{
public:
	OpMPYI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12592 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12596 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12599 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12603 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12606 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12686 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12690 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12693 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12701 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12708 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12711 "isa_tms320.tcc"
>
class OpMPYI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12716 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12720 "isa_tms320.tcc"
>
{
public:
	OpMPYI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12730 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12734 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12737 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12741 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12744 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12824 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12828 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12831 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12839 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12842 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12846 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12849 "isa_tms320.tcc"
>
class OpMPYI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12854 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12858 "isa_tms320.tcc"
>
{
public:
	OpMPYI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12870 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12874 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12877 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12881 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12884 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12964 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12968 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12971 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12979 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12982 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12986 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12989 "isa_tms320.tcc"
>
class OpMPYI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12994 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12998 "isa_tms320.tcc"
>
{
public:
	OpMPYI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13008 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13012 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13015 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13019 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13022 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13102 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13106 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13109 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13117 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13120 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13127 "isa_tms320.tcc"
>
class OpNEGB_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13132 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13136 "isa_tms320.tcc"
>
{
public:
	OpNEGB_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13146 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13150 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13153 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13157 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13160 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13240 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13244 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13247 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13255 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13258 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13262 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13265 "isa_tms320.tcc"
>
class OpNEGB_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13270 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13274 "isa_tms320.tcc"
>
{
public:
	OpNEGB_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13284 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13288 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13291 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13295 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13298 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13378 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13382 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13385 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13393 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13396 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13400 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13403 "isa_tms320.tcc"
>
class OpNEGB_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13408 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13412 "isa_tms320.tcc"
>
{
public:
	OpNEGB_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13424 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13428 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13431 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13435 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13438 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13518 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13522 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13525 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13533 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13536 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13543 "isa_tms320.tcc"
>
class OpNEGB_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13548 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13552 "isa_tms320.tcc"
>
{
public:
	OpNEGB_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13562 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13566 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13569 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13573 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13576 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13656 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13660 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13663 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13671 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13674 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13678 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13681 "isa_tms320.tcc"
>
class OpNEGF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13686 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13690 "isa_tms320.tcc"
>
{
public:
	OpNEGF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13700 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13704 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13707 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13711 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13714 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13794 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13798 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13801 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13809 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13812 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13819 "isa_tms320.tcc"
>
class OpNEGF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13824 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13828 "isa_tms320.tcc"
>
{
public:
	OpNEGF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13838 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13842 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13845 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13849 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13852 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13932 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13936 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13939 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13947 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13950 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13954 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13957 "isa_tms320.tcc"
>
class OpNEGF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13962 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13966 "isa_tms320.tcc"
>
{
public:
	OpNEGF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13978 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13982 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13985 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13989 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13992 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14072 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14076 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14079 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14094 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14097 "isa_tms320.tcc"
>
class OpNEGF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14106 "isa_tms320.tcc"
>
{
public:
	OpNEGF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14116 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14120 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14123 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14127 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14130 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14210 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14214 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14217 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14225 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14228 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14232 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14235 "isa_tms320.tcc"
>
class OpNEGI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14240 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14244 "isa_tms320.tcc"
>
{
public:
	OpNEGI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14254 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14258 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14261 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14265 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14268 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14348 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14352 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14355 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14363 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14366 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14370 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14373 "isa_tms320.tcc"
>
class OpNEGI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14382 "isa_tms320.tcc"
>
{
public:
	OpNEGI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14392 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14396 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14399 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14403 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14406 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14486 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14490 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14493 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14501 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14504 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14508 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14511 "isa_tms320.tcc"
>
class OpNEGI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14520 "isa_tms320.tcc"
>
{
public:
	OpNEGI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14532 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14536 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14539 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14543 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14546 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14626 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14630 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14633 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14641 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14651 "isa_tms320.tcc"
>
class OpNEGI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14656 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14660 "isa_tms320.tcc"
>
{
public:
	OpNEGI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14670 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14674 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14677 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14681 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14684 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14764 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14768 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14771 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14779 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14782 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14786 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14789 "isa_tms320.tcc"
>
class OpNORM_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14794 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14798 "isa_tms320.tcc"
>
{
public:
	OpNORM_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14808 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14812 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14815 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14819 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14822 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14902 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14906 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14909 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14917 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14920 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14924 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14927 "isa_tms320.tcc"
>
class OpNORM_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14932 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14936 "isa_tms320.tcc"
>
{
public:
	OpNORM_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14946 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14950 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14953 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14957 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14960 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15040 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15044 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15047 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15055 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15058 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15062 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15065 "isa_tms320.tcc"
>
class OpNORM_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15074 "isa_tms320.tcc"
>
{
public:
	OpNORM_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15086 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15090 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15093 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15097 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15100 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15180 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15184 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15187 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15205 "isa_tms320.tcc"
>
class OpNORM_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15210 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15214 "isa_tms320.tcc"
>
{
public:
	OpNORM_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15224 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15228 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15231 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15235 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15238 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15318 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15322 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15325 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15333 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15336 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15340 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15343 "isa_tms320.tcc"
>
class OpNOT_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15352 "isa_tms320.tcc"
>
{
public:
	OpNOT_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15362 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15366 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15369 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15373 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15376 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15456 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15460 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15463 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15471 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15474 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15478 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15481 "isa_tms320.tcc"
>
class OpNOT_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15486 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15490 "isa_tms320.tcc"
>
{
public:
	OpNOT_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15500 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15504 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15507 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15511 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15514 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15594 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15598 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15601 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15609 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15612 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15619 "isa_tms320.tcc"
>
class OpNOT_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15624 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15628 "isa_tms320.tcc"
>
{
public:
	OpNOT_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15640 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15644 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15647 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15651 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15654 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15734 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15738 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15741 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15749 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15752 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15756 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15759 "isa_tms320.tcc"
>
class OpNOT_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15768 "isa_tms320.tcc"
>
{
public:
	OpNOT_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15778 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15782 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15785 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15789 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15792 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15872 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15876 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15879 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15887 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15890 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15894 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15897 "isa_tms320.tcc"
>
class OpOR_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15902 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15906 "isa_tms320.tcc"
>
{
public:
	OpOR_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15916 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15920 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15923 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15927 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15930 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16010 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16014 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16017 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16025 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16028 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16032 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16035 "isa_tms320.tcc"
>
class OpOR_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16040 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16044 "isa_tms320.tcc"
>
{
public:
	OpOR_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16054 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16058 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16061 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16065 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16068 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16148 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16152 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16155 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16163 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16166 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16170 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16173 "isa_tms320.tcc"
>
class OpOR_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16182 "isa_tms320.tcc"
>
{
public:
	OpOR_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16194 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16198 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16201 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16205 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16208 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16288 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16292 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16295 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16303 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16306 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16310 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16313 "isa_tms320.tcc"
>
class OpOR_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16318 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16322 "isa_tms320.tcc"
>
{
public:
	OpOR_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16332 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16336 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16339 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16343 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16346 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16426 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16430 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16433 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16441 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16444 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16448 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16451 "isa_tms320.tcc"
>
class OpRND_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16456 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16460 "isa_tms320.tcc"
>
{
public:
	OpRND_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16470 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16474 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16477 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16481 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16484 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16564 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16568 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16571 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16579 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16582 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16589 "isa_tms320.tcc"
>
class OpRND_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16594 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16598 "isa_tms320.tcc"
>
{
public:
	OpRND_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16608 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16612 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16615 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16619 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16622 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16702 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16706 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16709 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16717 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16720 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16724 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16727 "isa_tms320.tcc"
>
class OpRND_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16736 "isa_tms320.tcc"
>
{
public:
	OpRND_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16748 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16752 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16755 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16759 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16762 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16842 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16846 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16849 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16857 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16860 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16864 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16867 "isa_tms320.tcc"
>
class OpRND_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16876 "isa_tms320.tcc"
>
{
public:
	OpRND_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16886 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16890 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16893 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16897 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16900 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16980 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16984 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16987 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16995 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17002 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17005 "isa_tms320.tcc"
>
class OpROL : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17014 "isa_tms320.tcc"
>
{
public:
	OpROL(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17023 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17027 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17030 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17034 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17037 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17117 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17121 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17124 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17132 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17135 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17139 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17142 "isa_tms320.tcc"
>
class OpROLC : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17147 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17151 "isa_tms320.tcc"
>
{
public:
	OpROLC(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17160 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17164 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17167 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17171 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17174 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17254 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17258 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17261 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17269 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17272 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17279 "isa_tms320.tcc"
>
class OpROR : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17284 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17288 "isa_tms320.tcc"
>
{
public:
	OpROR(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17297 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17301 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17304 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17308 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17311 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17391 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17395 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17398 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17406 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17409 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17413 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17416 "isa_tms320.tcc"
>
class OpRORC : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17421 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17425 "isa_tms320.tcc"
>
{
public:
	OpRORC(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17434 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17438 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17441 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17445 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17448 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17528 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17532 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17535 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17543 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17546 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17550 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17553 "isa_tms320.tcc"
>
class OpSUBB_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17558 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17562 "isa_tms320.tcc"
>
{
public:
	OpSUBB_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17572 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17576 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17579 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17583 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17586 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17666 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17670 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17673 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17691 "isa_tms320.tcc"
>
class OpSUBB_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17700 "isa_tms320.tcc"
>
{
public:
	OpSUBB_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17710 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17714 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17717 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17721 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17724 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17804 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17808 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17811 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17819 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17826 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17829 "isa_tms320.tcc"
>
class OpSUBB_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17834 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17838 "isa_tms320.tcc"
>
{
public:
	OpSUBB_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17850 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17854 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17857 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17861 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17864 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17944 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17948 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17951 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17959 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17962 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17966 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17969 "isa_tms320.tcc"
>
class OpSUBB_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17974 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17978 "isa_tms320.tcc"
>
{
public:
	OpSUBB_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17988 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17992 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17995 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17999 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18002 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18082 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18086 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18089 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18097 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18100 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18104 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18107 "isa_tms320.tcc"
>
class OpSUBC_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18112 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18116 "isa_tms320.tcc"
>
{
public:
	OpSUBC_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18126 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18130 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18133 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18137 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18140 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18220 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18224 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18227 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18242 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18245 "isa_tms320.tcc"
>
class OpSUBC_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18250 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18254 "isa_tms320.tcc"
>
{
public:
	OpSUBC_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18264 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18268 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18271 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18275 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18278 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18358 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18362 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18365 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18373 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18380 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18383 "isa_tms320.tcc"
>
class OpSUBC_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18388 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18392 "isa_tms320.tcc"
>
{
public:
	OpSUBC_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18404 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18408 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18411 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18415 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18418 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18498 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18502 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18505 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18513 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18523 "isa_tms320.tcc"
>
class OpSUBC_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18528 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18532 "isa_tms320.tcc"
>
{
public:
	OpSUBC_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18542 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18546 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18549 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18553 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18556 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18636 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18640 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18643 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18654 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18661 "isa_tms320.tcc"
>
class OpSUBF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18666 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18670 "isa_tms320.tcc"
>
{
public:
	OpSUBF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18680 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18684 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18687 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18691 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18694 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18774 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18778 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18781 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18796 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18799 "isa_tms320.tcc"
>
class OpSUBF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18808 "isa_tms320.tcc"
>
{
public:
	OpSUBF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18818 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18822 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18825 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18829 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18832 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18912 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18916 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18919 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18927 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18934 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18937 "isa_tms320.tcc"
>
class OpSUBF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18946 "isa_tms320.tcc"
>
{
public:
	OpSUBF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18958 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18962 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18965 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18969 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18972 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19052 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19056 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19059 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19067 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19077 "isa_tms320.tcc"
>
class OpSUBF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19086 "isa_tms320.tcc"
>
{
public:
	OpSUBF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19096 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19100 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19103 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19107 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19110 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19190 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19194 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19197 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19208 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19212 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19215 "isa_tms320.tcc"
>
class OpSUBI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19220 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19224 "isa_tms320.tcc"
>
{
public:
	OpSUBI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19234 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19238 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19241 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19245 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19248 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19328 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19332 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19335 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19343 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19350 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19353 "isa_tms320.tcc"
>
class OpSUBI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19358 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19362 "isa_tms320.tcc"
>
{
public:
	OpSUBI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19372 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19376 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19379 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19383 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19386 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19466 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19470 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19473 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19481 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19491 "isa_tms320.tcc"
>
class OpSUBI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19500 "isa_tms320.tcc"
>
{
public:
	OpSUBI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19512 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19516 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19519 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19523 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19526 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19606 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19610 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19613 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19621 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19624 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19628 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19631 "isa_tms320.tcc"
>
class OpSUBI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19636 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19640 "isa_tms320.tcc"
>
{
public:
	OpSUBI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19650 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19654 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19657 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19661 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19664 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19744 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19748 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19751 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19759 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19762 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19766 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19769 "isa_tms320.tcc"
>
class OpSUBRB_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19778 "isa_tms320.tcc"
>
{
public:
	OpSUBRB_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19788 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19792 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19795 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19799 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19802 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19882 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19886 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19889 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19897 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19904 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19907 "isa_tms320.tcc"
>
class OpSUBRB_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19912 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19916 "isa_tms320.tcc"
>
{
public:
	OpSUBRB_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19926 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19930 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19933 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19937 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19940 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20020 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20024 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20027 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20035 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20042 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20045 "isa_tms320.tcc"
>
class OpSUBRB_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20050 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20054 "isa_tms320.tcc"
>
{
public:
	OpSUBRB_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20066 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20070 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20073 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20077 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20080 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20160 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20164 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20167 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20182 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20185 "isa_tms320.tcc"
>
class OpSUBRB_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20190 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20194 "isa_tms320.tcc"
>
{
public:
	OpSUBRB_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20204 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20208 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20211 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20215 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20218 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20298 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20302 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20305 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20313 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20316 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20320 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20323 "isa_tms320.tcc"
>
class OpSUBRF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20332 "isa_tms320.tcc"
>
{
public:
	OpSUBRF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20342 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20346 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20349 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20353 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20356 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20436 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20440 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20443 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20458 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20461 "isa_tms320.tcc"
>
class OpSUBRF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20466 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20470 "isa_tms320.tcc"
>
{
public:
	OpSUBRF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20480 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20484 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20487 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20491 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20494 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20574 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20578 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20581 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20589 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20599 "isa_tms320.tcc"
>
class OpSUBRF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20608 "isa_tms320.tcc"
>
{
public:
	OpSUBRF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20620 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20624 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20627 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20631 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20634 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20714 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20718 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20721 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20736 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20739 "isa_tms320.tcc"
>
class OpSUBRF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20748 "isa_tms320.tcc"
>
{
public:
	OpSUBRF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20758 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20762 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20765 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20769 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20772 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20852 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20856 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20859 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20867 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20870 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20874 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20877 "isa_tms320.tcc"
>
class OpSUBRI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20882 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20886 "isa_tms320.tcc"
>
{
public:
	OpSUBRI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20896 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20900 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20903 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20907 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20910 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20990 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20994 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20997 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21005 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21008 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21015 "isa_tms320.tcc"
>
class OpSUBRI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21020 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21024 "isa_tms320.tcc"
>
{
public:
	OpSUBRI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21034 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21038 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21041 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21045 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21048 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21128 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21132 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21135 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21143 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21153 "isa_tms320.tcc"
>
class OpSUBRI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21158 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21162 "isa_tms320.tcc"
>
{
public:
	OpSUBRI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21174 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21178 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21181 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21185 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21188 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21268 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21272 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21275 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21283 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21286 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21290 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21293 "isa_tms320.tcc"
>
class OpSUBRI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21298 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21302 "isa_tms320.tcc"
>
{
public:
	OpSUBRI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21312 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21316 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21319 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21323 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21326 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21406 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21410 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21413 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21421 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21424 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21428 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21431 "isa_tms320.tcc"
>
class OpTSTB_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21436 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21440 "isa_tms320.tcc"
>
{
public:
	OpTSTB_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21450 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21454 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21457 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21461 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21464 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21544 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21548 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21551 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21559 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21562 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21566 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21569 "isa_tms320.tcc"
>
class OpTSTB_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21574 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21578 "isa_tms320.tcc"
>
{
public:
	OpTSTB_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21588 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21592 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21595 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21599 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21602 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21682 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21686 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21689 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21697 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21704 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21707 "isa_tms320.tcc"
>
class OpTSTB_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21716 "isa_tms320.tcc"
>
{
public:
	OpTSTB_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21728 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21732 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21735 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21739 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21742 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21822 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21826 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21829 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21837 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21840 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21844 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21847 "isa_tms320.tcc"
>
class OpTSTB_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21852 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21856 "isa_tms320.tcc"
>
{
public:
	OpTSTB_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21866 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21870 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21873 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21877 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21880 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21960 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21964 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21967 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21975 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21978 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21982 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21985 "isa_tms320.tcc"
>
class OpXOR_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21990 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21994 "isa_tms320.tcc"
>
{
public:
	OpXOR_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22004 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22008 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22011 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22015 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22018 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22098 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22102 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22105 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22113 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22120 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22123 "isa_tms320.tcc"
>
class OpXOR_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22128 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22132 "isa_tms320.tcc"
>
{
public:
	OpXOR_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22142 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22146 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22149 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22153 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22156 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22236 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22240 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22243 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22258 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22261 "isa_tms320.tcc"
>
class OpXOR_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22266 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22270 "isa_tms320.tcc"
>
{
public:
	OpXOR_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22282 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22286 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22289 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22293 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22296 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22376 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22380 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22383 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22391 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22394 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22398 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22401 "isa_tms320.tcc"
>
class OpXOR_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22406 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22410 "isa_tms320.tcc"
>
{
public:
	OpXOR_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22420 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22424 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22427 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22431 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22434 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22514 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22518 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22521 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22532 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22536 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22539 "isa_tms320.tcc"
>
class OpADDC3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22548 "isa_tms320.tcc"
>
{
public:
	OpADDC3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22559 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22563 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22566 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22570 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22573 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22653 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22657 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22660 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22668 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22671 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22675 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22678 "isa_tms320.tcc"
>
class OpADDC3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22683 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22687 "isa_tms320.tcc"
>
{
public:
	OpADDC3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22699 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22703 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22706 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22710 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22713 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22793 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22797 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22800 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22811 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22815 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22818 "isa_tms320.tcc"
>
class OpADDC3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22827 "isa_tms320.tcc"
>
{
public:
	OpADDC3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22839 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22843 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22846 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22850 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22853 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22933 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22937 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22940 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22948 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22951 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22955 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22958 "isa_tms320.tcc"
>
class OpADDC3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22963 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22967 "isa_tms320.tcc"
>
{
public:
	OpADDC3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22980 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22984 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22987 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22991 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22994 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23074 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23078 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23081 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23089 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23092 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23096 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23099 "isa_tms320.tcc"
>
class OpADDF3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23108 "isa_tms320.tcc"
>
{
public:
	OpADDF3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23119 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23123 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23126 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23130 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23133 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23213 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23217 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23220 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23228 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23231 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23238 "isa_tms320.tcc"
>
class OpADDF3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23247 "isa_tms320.tcc"
>
{
public:
	OpADDF3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23259 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23263 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23266 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23270 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23273 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23353 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23357 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23360 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23371 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23375 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23378 "isa_tms320.tcc"
>
class OpADDF3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23387 "isa_tms320.tcc"
>
{
public:
	OpADDF3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23399 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23403 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23406 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23410 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23413 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23493 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23497 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23500 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23508 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23511 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23515 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23518 "isa_tms320.tcc"
>
class OpADDF3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23527 "isa_tms320.tcc"
>
{
public:
	OpADDF3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23540 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23544 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23547 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23551 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23554 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23634 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23638 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23641 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23649 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23652 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23656 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23659 "isa_tms320.tcc"
>
class OpADDI3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23664 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23668 "isa_tms320.tcc"
>
{
public:
	OpADDI3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23679 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23683 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23686 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23690 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23693 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23773 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23777 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23780 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23798 "isa_tms320.tcc"
>
class OpADDI3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23807 "isa_tms320.tcc"
>
{
public:
	OpADDI3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23819 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23823 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23826 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23830 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23833 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23913 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23917 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23920 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23931 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23935 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23938 "isa_tms320.tcc"
>
class OpADDI3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23947 "isa_tms320.tcc"
>
{
public:
	OpADDI3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23959 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23963 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23966 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23970 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23973 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24053 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24057 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24060 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24078 "isa_tms320.tcc"
>
class OpADDI3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24087 "isa_tms320.tcc"
>
{
public:
	OpADDI3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24100 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24104 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24107 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24111 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24114 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24194 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24198 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24201 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24219 "isa_tms320.tcc"
>
class OpAND3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24228 "isa_tms320.tcc"
>
{
public:
	OpAND3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24239 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24243 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24246 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24250 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24253 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24333 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24337 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24340 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24348 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24351 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24355 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24358 "isa_tms320.tcc"
>
class OpAND3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24363 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24367 "isa_tms320.tcc"
>
{
public:
	OpAND3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24379 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24383 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24386 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24390 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24393 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24473 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24477 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24480 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24491 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24495 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24498 "isa_tms320.tcc"
>
class OpAND3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24507 "isa_tms320.tcc"
>
{
public:
	OpAND3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24519 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24523 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24526 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24530 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24533 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24613 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24617 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24620 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24628 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24631 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24635 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24638 "isa_tms320.tcc"
>
class OpAND3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24647 "isa_tms320.tcc"
>
{
public:
	OpAND3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24660 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24664 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24667 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24671 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24674 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24754 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24758 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24761 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24769 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24772 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24776 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24779 "isa_tms320.tcc"
>
class OpANDN3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24784 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24788 "isa_tms320.tcc"
>
{
public:
	OpANDN3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24799 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24803 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24806 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24810 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24813 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24893 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24897 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24900 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24908 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24911 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24915 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24918 "isa_tms320.tcc"
>
class OpANDN3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24923 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24927 "isa_tms320.tcc"
>
{
public:
	OpANDN3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24939 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24943 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24946 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24950 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24953 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25033 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25037 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25040 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25051 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25055 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25058 "isa_tms320.tcc"
>
class OpANDN3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25063 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25067 "isa_tms320.tcc"
>
{
public:
	OpANDN3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25079 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25083 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25086 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25090 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25093 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25173 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25177 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25180 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25188 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25191 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25198 "isa_tms320.tcc"
>
class OpANDN3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25203 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25207 "isa_tms320.tcc"
>
{
public:
	OpANDN3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25220 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25224 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25227 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25231 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25234 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25314 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25318 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25321 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25329 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25332 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25336 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25339 "isa_tms320.tcc"
>
class OpASH3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25344 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25348 "isa_tms320.tcc"
>
{
public:
	OpASH3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25359 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25363 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25366 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25370 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25373 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25453 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25457 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25460 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25468 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25471 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25475 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25478 "isa_tms320.tcc"
>
class OpASH3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25483 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25487 "isa_tms320.tcc"
>
{
public:
	OpASH3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25499 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25503 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25506 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25510 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25513 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25593 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25597 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25600 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25608 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25611 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25615 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25618 "isa_tms320.tcc"
>
class OpASH3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25627 "isa_tms320.tcc"
>
{
public:
	OpASH3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25639 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25643 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25646 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25650 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25653 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25733 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25737 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25740 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25748 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25751 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25755 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25758 "isa_tms320.tcc"
>
class OpASH3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25763 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25767 "isa_tms320.tcc"
>
{
public:
	OpASH3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25780 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25784 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25787 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25791 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25794 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25874 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25878 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25881 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25899 "isa_tms320.tcc"
>
class OpCMPF3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25908 "isa_tms320.tcc"
>
{
public:
	OpCMPF3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25918 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25922 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25925 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25929 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25932 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26012 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26016 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26019 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26037 "isa_tms320.tcc"
>
class OpCMPF3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26046 "isa_tms320.tcc"
>
{
public:
	OpCMPF3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26057 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26061 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26064 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26068 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26071 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26151 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26155 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26158 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26166 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26169 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26173 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26176 "isa_tms320.tcc"
>
class OpCMPF3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26181 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26185 "isa_tms320.tcc"
>
{
public:
	OpCMPF3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26196 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26200 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26203 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26207 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26210 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26290 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26294 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26297 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26305 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26308 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26312 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26315 "isa_tms320.tcc"
>
class OpCMPF3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26324 "isa_tms320.tcc"
>
{
public:
	OpCMPF3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26336 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26340 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26343 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26347 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26350 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26430 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26434 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26437 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26445 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26448 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26452 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26455 "isa_tms320.tcc"
>
class OpCMPI3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26460 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26464 "isa_tms320.tcc"
>
{
public:
	OpCMPI3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26474 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26478 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26481 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26485 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26488 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26568 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26572 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26575 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26583 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26586 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26590 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26593 "isa_tms320.tcc"
>
class OpCMPI3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26598 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26602 "isa_tms320.tcc"
>
{
public:
	OpCMPI3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26613 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26617 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26620 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26624 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26627 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26707 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26711 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26714 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26725 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26732 "isa_tms320.tcc"
>
class OpCMPI3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26737 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26741 "isa_tms320.tcc"
>
{
public:
	OpCMPI3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26752 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26756 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26759 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26763 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26766 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26846 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26850 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26853 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26861 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26864 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26868 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26871 "isa_tms320.tcc"
>
class OpCMPI3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26880 "isa_tms320.tcc"
>
{
public:
	OpCMPI3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26892 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26896 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26899 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26903 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26906 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26986 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26990 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26993 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27001 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27004 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27008 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27011 "isa_tms320.tcc"
>
class OpLSH3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27016 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27020 "isa_tms320.tcc"
>
{
public:
	OpLSH3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27031 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27035 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27038 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27042 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27045 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27125 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27129 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27132 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27140 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27143 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27150 "isa_tms320.tcc"
>
class OpLSH3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27155 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27159 "isa_tms320.tcc"
>
{
public:
	OpLSH3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27171 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27175 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27178 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27182 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27185 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27265 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27269 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27272 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27283 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27287 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27290 "isa_tms320.tcc"
>
class OpLSH3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27295 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27299 "isa_tms320.tcc"
>
{
public:
	OpLSH3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27311 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27315 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27318 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27322 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27325 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27405 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27409 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27412 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27420 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27423 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27427 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27430 "isa_tms320.tcc"
>
class OpLSH3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27435 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27439 "isa_tms320.tcc"
>
{
public:
	OpLSH3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27452 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27456 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27459 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27463 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27466 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27546 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27550 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27553 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27561 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27564 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27568 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27571 "isa_tms320.tcc"
>
class OpMPYF3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27580 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27591 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27595 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27598 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27602 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27605 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27685 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27689 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27692 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27700 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27703 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27707 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27710 "isa_tms320.tcc"
>
class OpMPYF3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27719 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27731 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27735 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27738 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27742 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27745 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27825 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27829 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27832 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27850 "isa_tms320.tcc"
>
class OpMPYF3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27855 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27859 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27871 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27875 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27878 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27882 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27885 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27965 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27969 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27972 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27980 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27990 "isa_tms320.tcc"
>
class OpMPYF3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27999 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28012 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28016 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28019 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28023 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28026 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28106 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28110 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28113 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28121 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28124 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28128 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28131 "isa_tms320.tcc"
>
class OpMPYI3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28136 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28140 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28151 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28155 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28158 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28162 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28165 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28245 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28249 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28252 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28260 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28263 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28267 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28270 "isa_tms320.tcc"
>
class OpMPYI3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28275 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28279 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28291 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28295 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28298 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28302 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28305 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28385 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28389 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28392 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28400 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28407 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28410 "isa_tms320.tcc"
>
class OpMPYI3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28415 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28419 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28431 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28435 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28438 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28442 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28445 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28525 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28529 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28532 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28543 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28547 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28550 "isa_tms320.tcc"
>
class OpMPYI3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28555 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28559 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28572 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28576 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28579 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28583 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28586 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28666 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28670 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28673 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28691 "isa_tms320.tcc"
>
class OpOR3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28700 "isa_tms320.tcc"
>
{
public:
	OpOR3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28711 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28715 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28718 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28722 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28725 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28805 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28809 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28812 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28820 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28827 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28830 "isa_tms320.tcc"
>
class OpOR3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28839 "isa_tms320.tcc"
>
{
public:
	OpOR3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28851 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28855 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28858 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28862 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28865 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28945 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28949 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28952 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28960 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28963 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28967 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28970 "isa_tms320.tcc"
>
class OpOR3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28975 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28979 "isa_tms320.tcc"
>
{
public:
	OpOR3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28991 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28995 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28998 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29002 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29005 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29085 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29089 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29092 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29100 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29103 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29107 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29110 "isa_tms320.tcc"
>
class OpOR3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29115 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29119 "isa_tms320.tcc"
>
{
public:
	OpOR3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29132 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29136 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29139 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29143 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29146 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29226 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29230 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29233 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29244 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29248 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29251 "isa_tms320.tcc"
>
class OpSUBB3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29256 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29260 "isa_tms320.tcc"
>
{
public:
	OpSUBB3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29271 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29275 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29278 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29282 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29285 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29365 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29369 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29372 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29380 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29390 "isa_tms320.tcc"
>
class OpSUBB3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29395 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29399 "isa_tms320.tcc"
>
{
public:
	OpSUBB3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29411 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29415 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29418 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29422 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29425 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29505 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29509 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29512 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29530 "isa_tms320.tcc"
>
class OpSUBB3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29539 "isa_tms320.tcc"
>
{
public:
	OpSUBB3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29551 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29555 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29558 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29562 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29565 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29645 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29649 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29652 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29660 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29670 "isa_tms320.tcc"
>
class OpSUBB3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29675 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29679 "isa_tms320.tcc"
>
{
public:
	OpSUBB3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29692 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29696 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29699 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29703 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29706 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29786 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29790 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29793 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29801 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29811 "isa_tms320.tcc"
>
class OpSUBF3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29816 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29820 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29831 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29835 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29838 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29842 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29845 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29925 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29929 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29932 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29940 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29947 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29950 "isa_tms320.tcc"
>
class OpSUBF3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29955 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29959 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29971 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29975 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29978 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29982 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29985 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30065 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30069 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30072 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30080 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30090 "isa_tms320.tcc"
>
class OpSUBF3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30095 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30099 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30111 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30115 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30118 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30122 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30125 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30205 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30209 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30212 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30220 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30223 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30227 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30230 "isa_tms320.tcc"
>
class OpSUBF3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30235 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30239 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30252 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30256 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30259 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30263 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30266 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30346 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30350 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30353 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30361 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30364 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30371 "isa_tms320.tcc"
>
class OpSUBI3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30380 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30391 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30395 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30398 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30402 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30405 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30485 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30489 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30492 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30510 "isa_tms320.tcc"
>
class OpSUBI3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30519 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30531 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30535 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30538 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30542 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30545 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30625 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30629 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30632 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30647 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30650 "isa_tms320.tcc"
>
class OpSUBI3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30655 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30659 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30671 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30675 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30678 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30682 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30685 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30765 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30769 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30772 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30783 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30787 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30790 "isa_tms320.tcc"
>
class OpSUBI3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30795 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30799 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30812 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30816 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30819 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30823 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30826 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30906 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30910 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30913 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30921 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30924 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30931 "isa_tms320.tcc"
>
class OpTSTB3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30940 "isa_tms320.tcc"
>
{
public:
	OpTSTB3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30950 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30954 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30957 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30961 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30964 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31044 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31048 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31051 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31059 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31062 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31066 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31069 "isa_tms320.tcc"
>
class OpTSTB3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31074 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31078 "isa_tms320.tcc"
>
{
public:
	OpTSTB3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31089 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31093 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31096 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31100 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31103 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31183 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31187 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31190 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31201 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31208 "isa_tms320.tcc"
>
class OpTSTB3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31217 "isa_tms320.tcc"
>
{
public:
	OpTSTB3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31228 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31232 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31235 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31239 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31242 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31322 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31326 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31329 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31337 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31340 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31347 "isa_tms320.tcc"
>
class OpTSTB3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31352 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31356 "isa_tms320.tcc"
>
{
public:
	OpTSTB3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31368 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31372 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31375 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31379 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31382 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31462 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31466 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31469 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31477 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31480 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31487 "isa_tms320.tcc"
>
class OpXOR3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31492 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31496 "isa_tms320.tcc"
>
{
public:
	OpXOR3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31507 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31511 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31514 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31518 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31521 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31601 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31605 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31608 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31619 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31626 "isa_tms320.tcc"
>
class OpXOR3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31631 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31635 "isa_tms320.tcc"
>
{
public:
	OpXOR3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31647 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31651 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31654 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31658 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31661 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31741 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31745 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31748 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31756 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31759 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31766 "isa_tms320.tcc"
>
class OpXOR3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31771 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31775 "isa_tms320.tcc"
>
{
public:
	OpXOR3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31787 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31791 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31794 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31798 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31801 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31881 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31885 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31888 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31899 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31903 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31906 "isa_tms320.tcc"
>
class OpXOR3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31911 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31915 "isa_tms320.tcc"
>
{
public:
	OpXOR3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31928 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31932 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31935 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31939 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31942 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32022 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32026 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32029 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32037 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32040 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32044 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32047 "isa_tms320.tcc"
>
class OpBcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32052 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32056 "isa_tms320.tcc"
>
{
public:
	OpBcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t reg;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32066 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32070 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32073 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32077 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32080 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32160 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32164 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32167 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32182 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32185 "isa_tms320.tcc"
>
class OpBcond_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32190 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32194 "isa_tms320.tcc"
>
{
public:
	OpBcond_disp(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32204 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32208 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32211 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32215 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32218 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32298 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32302 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32305 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32313 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32316 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32320 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32323 "isa_tms320.tcc"
>
class OpBcondD_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32332 "isa_tms320.tcc"
>
{
public:
	OpBcondD_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t reg;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32342 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32346 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32349 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32353 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32356 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32436 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32440 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32443 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32458 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32461 "isa_tms320.tcc"
>
class OpBcondD_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32466 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32470 "isa_tms320.tcc"
>
{
public:
	OpBcondD_disp(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32480 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32484 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32487 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32491 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32494 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32574 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32578 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32581 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32589 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32599 "isa_tms320.tcc"
>
class OpBR : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32608 "isa_tms320.tcc"
>
{
public:
	OpBR(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32617 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32621 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32624 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32628 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32631 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32711 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32715 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32718 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32726 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32729 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32733 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32736 "isa_tms320.tcc"
>
class OpBRD : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32741 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32745 "isa_tms320.tcc"
>
{
public:
	OpBRD(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32754 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32758 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32761 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32765 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32768 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32848 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32852 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32855 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32863 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32866 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32870 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32873 "isa_tms320.tcc"
>
class OpCALL : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32878 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32882 "isa_tms320.tcc"
>
{
public:
	OpCALL(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32891 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32895 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32898 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32902 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32905 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32985 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32989 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32992 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33010 "isa_tms320.tcc"
>
class OpCALLcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33019 "isa_tms320.tcc"
>
{
public:
	OpCALLcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t reg;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33029 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33033 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33036 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33040 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33043 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33123 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33127 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33130 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33138 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33141 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33148 "isa_tms320.tcc"
>
class OpCALLcond_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33157 "isa_tms320.tcc"
>
{
public:
	OpCALLcond_disp(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33167 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33171 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33174 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33178 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33181 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33261 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33265 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33268 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33283 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33286 "isa_tms320.tcc"
>
class OpDBcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33295 "isa_tms320.tcc"
>
{
public:
	OpDBcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar;
	uint32_t cond;
	uint32_t reg;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33306 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33310 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33313 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33317 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33320 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33400 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33404 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33407 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33422 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33425 "isa_tms320.tcc"
>
class OpDBcond_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33434 "isa_tms320.tcc"
>
{
public:
	OpDBcond_disp(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar;
	uint32_t cond;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33445 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33449 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33452 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33456 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33459 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33539 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33543 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33546 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33554 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33557 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33561 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33564 "isa_tms320.tcc"
>
class OpDBcondD_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33573 "isa_tms320.tcc"
>
{
public:
	OpDBcondD_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar;
	uint32_t cond;
	uint32_t reg;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33584 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33588 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33591 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33595 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33598 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33678 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33682 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33685 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33693 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33700 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33703 "isa_tms320.tcc"
>
class OpDBcondD_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33708 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33712 "isa_tms320.tcc"
>
{
public:
	OpDBcondD_disp(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar;
	uint32_t cond;
	int32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33723 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33727 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33730 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33734 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33737 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33817 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33821 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33824 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33832 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33839 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33842 "isa_tms320.tcc"
>
class OpIACK_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33851 "isa_tms320.tcc"
>
{
public:
	OpIACK_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33860 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33864 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33867 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33871 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33874 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33954 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33958 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33961 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33976 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33979 "isa_tms320.tcc"
>
class OpIACK_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33984 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33988 "isa_tms320.tcc"
>
{
public:
	OpIACK_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33999 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34003 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34006 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34010 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34013 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34093 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34097 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34100 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34111 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34115 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34118 "isa_tms320.tcc"
>
class OpIDLE : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34123 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34127 "isa_tms320.tcc"
>
{
public:
	OpIDLE(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34135 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34139 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34142 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34146 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34149 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34229 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34233 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34236 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34244 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34247 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34254 "isa_tms320.tcc"
>
class OpNOP_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34259 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34263 "isa_tms320.tcc"
>
{
public:
	OpNOP_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t reg;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34272 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34276 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34279 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34283 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34286 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34366 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34370 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34373 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34381 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34384 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34388 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34391 "isa_tms320.tcc"
>
class OpNOP_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34396 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34400 "isa_tms320.tcc"
>
{
public:
	OpNOP_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34411 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34415 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34418 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34422 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34425 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34505 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34509 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34512 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34530 "isa_tms320.tcc"
>
class OpRETIcond : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34539 "isa_tms320.tcc"
>
{
public:
	OpRETIcond(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34548 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34552 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34555 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34559 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34562 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34642 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34646 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34649 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34657 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34660 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34664 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34667 "isa_tms320.tcc"
>
class OpRETScond : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34672 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34676 "isa_tms320.tcc"
>
{
public:
	OpRETScond(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34685 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34689 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34692 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34696 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34699 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34779 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34783 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34786 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34794 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34797 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34801 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34804 "isa_tms320.tcc"
>
class OpRPTB : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34809 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34813 "isa_tms320.tcc"
>
{
public:
	OpRPTB(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34822 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34826 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34829 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34833 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34836 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34916 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34920 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34923 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34931 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34934 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34938 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34941 "isa_tms320.tcc"
>
class OpRPTS_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34946 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34950 "isa_tms320.tcc"
>
{
public:
	OpRPTS_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34959 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34963 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34966 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34970 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34973 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35053 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35057 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35060 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35078 "isa_tms320.tcc"
>
class OpRPTS_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35087 "isa_tms320.tcc"
>
{
public:
	OpRPTS_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35096 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35100 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35103 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35107 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35110 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35190 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35194 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35197 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35208 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35212 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35215 "isa_tms320.tcc"
>
class OpRPTS_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35220 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35224 "isa_tms320.tcc"
>
{
public:
	OpRPTS_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35235 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35239 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35242 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35246 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35249 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35329 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35333 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35336 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35347 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35354 "isa_tms320.tcc"
>
class OpRPTS_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35359 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35363 "isa_tms320.tcc"
>
{
public:
	OpRPTS_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t imm;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35372 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35376 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35379 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35383 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35386 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35466 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35470 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35473 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35481 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35491 "isa_tms320.tcc"
>
class OpSWI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35500 "isa_tms320.tcc"
>
{
public:
	OpSWI(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35508 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35512 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35515 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35519 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35522 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35602 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35606 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35609 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35617 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35620 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35624 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35627 "isa_tms320.tcc"
>
class OpTRAPcond : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35632 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35636 "isa_tms320.tcc"
>
{
public:
	OpTRAPcond(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t n;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35646 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35650 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35653 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35657 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35660 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35740 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35744 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35747 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35755 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35758 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35762 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35765 "isa_tms320.tcc"
>
class OpIDLE2 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35770 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35774 "isa_tms320.tcc"
>
{
public:
	OpIDLE2(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35782 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35786 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35789 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35793 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35796 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35876 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35880 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35883 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35891 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35898 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35901 "isa_tms320.tcc"
>
class OpLOPOWER : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35906 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35910 "isa_tms320.tcc"
>
{
public:
	OpLOPOWER(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35918 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35922 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35925 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35929 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35932 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36012 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36016 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36019 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36037 "isa_tms320.tcc"
>
class OpMAXSPEED : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36046 "isa_tms320.tcc"
>
{
public:
	OpMAXSPEED(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 36054 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36058 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36061 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 36065 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 36068 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36148 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36152 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36155 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36163 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36166 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36170 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36173 "isa_tms320.tcc"
>
class OpLDFI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36182 "isa_tms320.tcc"
>
{
public:
	OpLDFI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36267 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36271 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36274 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36282 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36285 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36289 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36292 "isa_tms320.tcc"
>
class OpLDFI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36297 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36301 "isa_tms320.tcc"
>
{
public:
	OpLDFI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36388 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36392 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36395 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36403 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36406 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36410 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36413 "isa_tms320.tcc"
>
class OpLDII_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36422 "isa_tms320.tcc"
>
{
public:
	OpLDII_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36507 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36511 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36514 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36522 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36532 "isa_tms320.tcc"
>
class OpLDII_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36537 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36541 "isa_tms320.tcc"
>
{
public:
	OpLDII_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36628 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36632 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36635 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36643 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36646 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36653 "isa_tms320.tcc"
>
class OpSIGI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36662 "isa_tms320.tcc"
>
{
public:
	OpSIGI(CodeType code, typename CONFIG::address_t addr);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36745 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36749 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36752 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36760 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36763 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36767 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36770 "isa_tms320.tcc"
>
class OpSTFI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36775 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36779 "isa_tms320.tcc"
>
{
public:
	OpSTFI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t direct;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36864 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36868 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36871 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36879 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36882 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36886 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36889 "isa_tms320.tcc"
>
class OpSTFI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36898 "isa_tms320.tcc"
>
{
public:
	OpSTFI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36985 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36989 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36992 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37010 "isa_tms320.tcc"
>
class OpSTII_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37019 "isa_tms320.tcc"
>
{
public:
	OpSTII_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t direct;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37104 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37108 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37111 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37119 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37122 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37126 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37129 "isa_tms320.tcc"
>
class OpSTII_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37134 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37138 "isa_tms320.tcc"
>
{
public:
	OpSTII_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37225 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37229 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37232 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37240 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37247 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37250 "isa_tms320.tcc"
>
class OpABSF_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37255 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37259 "isa_tms320.tcc"
>
{
public:
	OpABSF_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37273 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37277 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37280 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37284 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37287 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37367 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37371 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37374 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37382 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37385 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37389 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37392 "isa_tms320.tcc"
>
class OpABSF_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37397 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37401 "isa_tms320.tcc"
>
{
public:
	OpABSF_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37414 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37418 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37421 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37425 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37428 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37508 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37512 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37515 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37523 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37526 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37530 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37533 "isa_tms320.tcc"
>
class OpABSI_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37538 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37542 "isa_tms320.tcc"
>
{
public:
	OpABSI_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37556 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37560 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37563 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37567 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37570 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37650 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37654 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37657 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37665 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37668 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37672 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37675 "isa_tms320.tcc"
>
class OpABSI_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37680 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37684 "isa_tms320.tcc"
>
{
public:
	OpABSI_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37697 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37701 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37704 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37708 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37711 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37791 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37795 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37798 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37806 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37809 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37813 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37816 "isa_tms320.tcc"
>
class OpADDF3_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37821 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37825 "isa_tms320.tcc"
>
{
public:
	OpADDF3_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37840 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37844 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37847 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37851 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37854 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37934 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37938 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37941 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37949 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37956 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37959 "isa_tms320.tcc"
>
class OpADDF3_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37968 "isa_tms320.tcc"
>
{
public:
	OpADDF3_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37982 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37986 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37989 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37993 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37996 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38076 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38080 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38083 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38091 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38094 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38098 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38101 "isa_tms320.tcc"
>
class OpADDI3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38106 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38110 "isa_tms320.tcc"
>
{
public:
	OpADDI3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38125 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38129 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38132 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38136 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38139 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38219 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38223 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38226 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38244 "isa_tms320.tcc"
>
class OpADDI3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38253 "isa_tms320.tcc"
>
{
public:
	OpADDI3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38267 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38271 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38274 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38278 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38281 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38361 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38365 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38368 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38383 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38386 "isa_tms320.tcc"
>
class OpAND3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38395 "isa_tms320.tcc"
>
{
public:
	OpAND3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38410 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38414 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38417 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38421 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38424 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38504 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38508 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38511 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38519 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38522 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38526 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38529 "isa_tms320.tcc"
>
class OpAND3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38534 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38538 "isa_tms320.tcc"
>
{
public:
	OpAND3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38552 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38556 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38559 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38563 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38566 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38646 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38650 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38653 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38661 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38664 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38668 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38671 "isa_tms320.tcc"
>
class OpASH3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38676 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38680 "isa_tms320.tcc"
>
{
public:
	OpASH3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t count;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38695 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38699 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38702 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38706 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38709 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38789 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38793 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38796 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38804 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38807 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38811 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38814 "isa_tms320.tcc"
>
class OpASH3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38819 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38823 "isa_tms320.tcc"
>
{
public:
	OpASH3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t count;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38837 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38841 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38844 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38848 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38851 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38931 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38935 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38938 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38946 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38949 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38953 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38956 "isa_tms320.tcc"
>
class OpFIX_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38961 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38965 "isa_tms320.tcc"
>
{
public:
	OpFIX_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38979 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38983 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38986 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38990 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38993 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39073 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39077 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39080 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39088 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39091 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39095 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39098 "isa_tms320.tcc"
>
class OpFIX_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39103 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39107 "isa_tms320.tcc"
>
{
public:
	OpFIX_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39120 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39124 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39127 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39131 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39134 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39214 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39218 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39221 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39229 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39232 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39236 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39239 "isa_tms320.tcc"
>
class OpFLOAT_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39244 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39248 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39262 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39266 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39269 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39273 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39276 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39356 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39360 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39363 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39371 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39374 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39378 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39381 "isa_tms320.tcc"
>
class OpFLOAT_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39386 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39390 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39403 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39407 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39410 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39414 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39417 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39497 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39501 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39504 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39512 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39519 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39522 "isa_tms320.tcc"
>
class OpLDF_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39531 "isa_tms320.tcc"
>
{
public:
	OpLDF_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39545 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39549 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39552 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39556 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39559 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39639 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39643 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39646 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39654 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39657 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39661 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39664 "isa_tms320.tcc"
>
class OpLDF_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39669 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39673 "isa_tms320.tcc"
>
{
public:
	OpLDF_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39686 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39690 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39693 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39697 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39700 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39780 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39784 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39787 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39798 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39802 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39805 "isa_tms320.tcc"
>
class OpLDI_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39810 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39814 "isa_tms320.tcc"
>
{
public:
	OpLDI_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39828 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39832 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39835 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39839 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39842 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39922 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39926 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39929 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39937 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39944 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39947 "isa_tms320.tcc"
>
class OpLDI_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39956 "isa_tms320.tcc"
>
{
public:
	OpLDI_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39969 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39973 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39976 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39980 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39983 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40063 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40067 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40070 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40078 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40081 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40085 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40088 "isa_tms320.tcc"
>
class OpLSH3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40093 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40097 "isa_tms320.tcc"
>
{
public:
	OpLSH3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t count;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40112 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40116 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40119 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40123 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40126 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40206 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40210 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40213 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40221 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40228 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40231 "isa_tms320.tcc"
>
class OpLSH3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40236 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40240 "isa_tms320.tcc"
>
{
public:
	OpLSH3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t count;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40254 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40258 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40261 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40265 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40268 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40348 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40352 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40355 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40363 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40366 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40370 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40373 "isa_tms320.tcc"
>
class OpMPYF3_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40382 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40397 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40401 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40404 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40408 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40411 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40491 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40495 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40498 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40509 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40513 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40516 "isa_tms320.tcc"
>
class OpMPYF3_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40521 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40525 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40539 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40543 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40546 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40550 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40553 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40633 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40637 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40640 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40651 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40658 "isa_tms320.tcc"
>
class OpMPYI3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40667 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40682 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40686 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40689 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40693 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40696 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40776 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40780 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40783 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40791 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40794 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40798 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40801 "isa_tms320.tcc"
>
class OpMPYI3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40806 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40810 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40824 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40828 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40831 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40835 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40838 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40918 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40922 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40925 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40933 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40940 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40943 "isa_tms320.tcc"
>
class OpNEGF_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40948 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40952 "isa_tms320.tcc"
>
{
public:
	OpNEGF_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40966 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40970 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40973 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40977 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40980 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41060 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41064 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41067 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41078 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41082 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41085 "isa_tms320.tcc"
>
class OpNEGF_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41094 "isa_tms320.tcc"
>
{
public:
	OpNEGF_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41107 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41111 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41114 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41118 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41121 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41201 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41205 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41208 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41219 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41223 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41226 "isa_tms320.tcc"
>
class OpNEGI_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41231 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41235 "isa_tms320.tcc"
>
{
public:
	OpNEGI_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41249 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41253 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41256 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41260 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41263 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41343 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41347 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41350 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41358 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41361 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41365 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41368 "isa_tms320.tcc"
>
class OpNEGI_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41373 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41377 "isa_tms320.tcc"
>
{
public:
	OpNEGI_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41390 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41394 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41397 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41401 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41404 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41484 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41488 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41491 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41509 "isa_tms320.tcc"
>
class OpNOT_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41514 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41518 "isa_tms320.tcc"
>
{
public:
	OpNOT_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41532 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41536 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41539 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41543 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41546 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41626 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41630 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41633 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41641 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41651 "isa_tms320.tcc"
>
class OpNOT_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41656 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41660 "isa_tms320.tcc"
>
{
public:
	OpNOT_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41673 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41677 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41680 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41684 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41687 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41767 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41771 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41774 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41792 "isa_tms320.tcc"
>
class OpOR3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41797 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41801 "isa_tms320.tcc"
>
{
public:
	OpOR3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41816 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41820 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41823 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41827 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41830 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41910 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41914 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41917 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41932 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41935 "isa_tms320.tcc"
>
class OpOR3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41944 "isa_tms320.tcc"
>
{
public:
	OpOR3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41958 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41962 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41965 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41969 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41972 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42052 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42056 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42059 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42067 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42077 "isa_tms320.tcc"
>
class OpSTF_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42086 "isa_tms320.tcc"
>
{
public:
	OpSTF_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t d1_mod;
	uint32_t d1_ar;
	uint32_t d2_mod;
	uint32_t d2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42100 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42104 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42107 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42111 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42114 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42194 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42198 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42201 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42219 "isa_tms320.tcc"
>
class OpSTF_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42228 "isa_tms320.tcc"
>
{
public:
	OpSTF_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t d1_mod;
	uint32_t d1_ar;
	uint32_t dst2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42241 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42245 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42248 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42252 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42255 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42335 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42339 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42342 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42350 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42353 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42357 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42360 "isa_tms320.tcc"
>
class OpSTI_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42365 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42369 "isa_tms320.tcc"
>
{
public:
	OpSTI_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t d1_mod;
	uint32_t d1_ar;
	uint32_t d2_mod;
	uint32_t d2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42383 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42387 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42390 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42394 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42397 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42477 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42481 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42484 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42495 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42502 "isa_tms320.tcc"
>
class OpSTI_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42511 "isa_tms320.tcc"
>
{
public:
	OpSTI_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t d1_mod;
	uint32_t d1_ar;
	uint32_t dst2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42524 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42528 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42531 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42535 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42538 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42618 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42622 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42625 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42633 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42636 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42643 "isa_tms320.tcc"
>
class OpSUBF3_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42648 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42652 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42667 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42671 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42674 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42678 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42681 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42761 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42765 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42768 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42776 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42779 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42783 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42786 "isa_tms320.tcc"
>
class OpSUBF3_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42795 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42809 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42813 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42816 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42820 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42823 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42903 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42907 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42910 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42918 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42928 "isa_tms320.tcc"
>
class OpSUBI3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42933 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42937 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42952 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42956 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42959 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42963 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42966 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43046 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43050 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43053 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43061 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43064 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43071 "isa_tms320.tcc"
>
class OpSUBI3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43076 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43080 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43094 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43098 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43101 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43105 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43108 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43188 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43192 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43195 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43203 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43206 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43210 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43213 "isa_tms320.tcc"
>
class OpXOR3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43218 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43222 "isa_tms320.tcc"
>
{
public:
	OpXOR3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43237 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43241 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43244 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43248 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43251 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43331 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43335 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43338 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43346 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43349 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43353 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43356 "isa_tms320.tcc"
>
class OpXOR3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43361 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43365 "isa_tms320.tcc"
>
{
public:
	OpXOR3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43379 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43383 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43386 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43390 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43393 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43473 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43477 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43480 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43491 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43495 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43498 "isa_tms320.tcc"
>
class OpLDF_LDF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43507 "isa_tms320.tcc"
>
{
public:
	OpLDF_LDF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst2;
	uint32_t dst1;
	uint32_t s1_mod;
	uint32_t s1_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43521 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43525 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43528 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43532 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43535 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43615 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43619 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43622 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43633 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43640 "isa_tms320.tcc"
>
class OpLDF_LDF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43645 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43649 "isa_tms320.tcc"
>
{
public:
	OpLDF_LDF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst2;
	uint32_t dst1;
	uint32_t s1_mod;
	uint32_t s1_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43662 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43666 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43669 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43673 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43676 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43756 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43760 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43763 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43771 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43778 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43781 "isa_tms320.tcc"
>
class OpLDI_LDI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43786 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43790 "isa_tms320.tcc"
>
{
public:
	OpLDI_LDI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst2;
	uint32_t dst1;
	uint32_t s1_mod;
	uint32_t s1_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43804 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43808 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43811 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43815 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43818 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43898 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43902 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43905 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43913 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43916 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43920 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43923 "isa_tms320.tcc"
>
class OpLDI_LDI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43932 "isa_tms320.tcc"
>
{
public:
	OpLDI_LDI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst2;
	uint32_t dst1;
	uint32_t s1_mod;
	uint32_t s1_ar;
	uint32_t src2;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43945 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43949 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43952 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43956 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43959 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44039 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44043 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44046 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44054 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44057 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44061 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44064 "isa_tms320.tcc"
>
class OpMPYF3_ADDF3 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44069 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44073 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_ADDF3(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t s3_mod;
	uint32_t s3_ar;
	uint32_t s4_mod;
	uint32_t s4_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44090 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44094 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44097 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44101 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44104 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44184 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44188 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44191 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44199 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44202 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44206 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44209 "isa_tms320.tcc"
>
class OpMPYF3_ADDF3_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44214 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44218 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_ADDF3_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t src3;
	uint32_t src4;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44233 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44237 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44240 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44244 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44247 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44327 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44331 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44334 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44342 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44349 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44352 "isa_tms320.tcc"
>
class OpMPYF3_SUBF3 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44357 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44361 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_SUBF3(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t s3_mod;
	uint32_t s3_ar;
	uint32_t s4_mod;
	uint32_t s4_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44378 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44382 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44385 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44389 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44392 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44472 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44476 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44479 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44487 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44490 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44494 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44497 "isa_tms320.tcc"
>
class OpMPYF3_SUBF3_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44506 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_SUBF3_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t src3;
	uint32_t src4;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44521 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44525 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44528 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44532 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44535 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44615 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44619 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44622 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44633 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44640 "isa_tms320.tcc"
>
class OpMPYI3_ADDI3 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44645 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44649 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_ADDI3(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t s3_mod;
	uint32_t s3_ar;
	uint32_t s4_mod;
	uint32_t s4_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44666 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44670 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44673 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44677 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44680 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44760 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44764 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44767 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44775 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44778 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44785 "isa_tms320.tcc"
>
class OpMPYI3_ADDI3_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44790 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44794 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_ADDI3_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t src3;
	uint32_t src4;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44809 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44813 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44816 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44820 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44823 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44903 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44907 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44910 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44918 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44928 "isa_tms320.tcc"
>
class OpMPYI3_SUBI3 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44933 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44937 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_SUBI3(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t s3_mod;
	uint32_t s3_ar;
	uint32_t s4_mod;
	uint32_t s4_ar;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44954 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44958 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44961 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44965 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44968 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 45048 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 45052 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 45055 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 45063 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45066 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45070 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45073 "isa_tms320.tcc"
>
class OpMPYI3_SUBI3_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45078 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45082 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_SUBI3_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t src3;
	uint32_t src4;
	virtual
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 45097 "isa_tms320.tcc"
	disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 45101 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 45104 "isa_tms320.tcc"
	,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 45108 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 45111 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 45191 "isa_tms320.tcc"
	execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 45195 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 45198 "isa_tms320.tcc"
	);
private:
};

/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of load/store operations:
* - LDE          load floating-point exponent
* - LDF          load floating-point value
* - LDFcond      load floating-point value conditionally
* - LDI          load integer
* - LDIcond      load integer conditionally
* - LDM          load floating-point mantissa
* - LDP          load data page pointer
* - POP          pop integer from stack
* - POPF         pop floating-point value from stack
* - PUSH         push integer on stack
* - PUSHF        push floating-point value on stack
* - STF          store floating-point value
* - STI          store integer
*/
/************************************************
* LDE (load floating-point exponent)
* op LDE(0b000[3]:0b001101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 45259 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45262 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45266 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45269 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45273 "isa_tms320.tcc"
OpLDE_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 45277 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45281 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45285 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45288 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45292 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45295 "isa_tms320.tcc"
)
{
#line 59 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!dst_reg_name || !src_reg_name) return false;

		os << "LDE " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 45307 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45312 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45315 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45319 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45322 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45326 "isa_tms320.tcc"
OpLDE_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 45330 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45334 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45338 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45341 "isa_tms320.tcc"
)
{
#line 68 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 45348 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45354 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45357 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45361 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45364 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45369 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45373 "isa_tms320.tcc"
> *DecodeOpLDE_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDE_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45379 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45383 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45390 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45393 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45397 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45400 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45404 "isa_tms320.tcc"
OpLDE_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45408 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45412 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45416 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45419 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45423 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45426 "isa_tms320.tcc"
)
{
#line 74 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDE " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;
		return true;
	}
#line 45437 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45442 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45445 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45449 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45452 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45456 "isa_tms320.tcc"
OpLDE_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45460 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45464 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45468 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45471 "isa_tms320.tcc"
)
{
#line 82 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 45478 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45491 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45494 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45499 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45503 "isa_tms320.tcc"
> *DecodeOpLDE_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDE_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45509 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45513 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45530 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45534 "isa_tms320.tcc"
OpLDE_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45538 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45542 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45546 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45549 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45553 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45556 "isa_tms320.tcc"
)
{
#line 88 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDE " << disasm_src_indir << ", " << dst_reg_name;
		return true;
	}
#line 45568 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45580 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45583 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45587 "isa_tms320.tcc"
OpLDE_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45591 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45595 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45599 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45602 "isa_tms320.tcc"
)
{
#line 97 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 45609 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45615 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45618 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45622 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45625 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45630 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45634 "isa_tms320.tcc"
> *DecodeOpLDE_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDE_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45640 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45644 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45654 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45661 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45665 "isa_tms320.tcc"
OpLDE_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 45669 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45673 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45677 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45680 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45684 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45687 "isa_tms320.tcc"
)
{
#line 103 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;
		os << "LDE " << cpu.DisasmShortFloat(imm) << ", " << dst_reg_name;
		return true;
	}
#line 45698 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45703 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45706 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45710 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45713 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45717 "isa_tms320.tcc"
OpLDE_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 45721 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45725 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45729 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45732 "isa_tms320.tcc"
)
{
#line 111 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 45739 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45745 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45748 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45752 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45755 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45760 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45764 "isa_tms320.tcc"
> *DecodeOpLDE_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDE_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45770 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45774 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDE (load floating-point exponent)
*************************************************/
/************************************************
* LDF (load floating-point value)
* op LDF(0b000[3]:0b001110[6]:g[2]:dst[5]:ext<32> src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 45787 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45790 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45794 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45797 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45801 "isa_tms320.tcc"
OpLDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 45805 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45809 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45813 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45816 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45820 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45823 "isa_tms320.tcc"
)
{
#line 125 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!dst_reg_name || !src_reg_name) return false;

		os << "LDF " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 45835 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45850 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45854 "isa_tms320.tcc"
OpLDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 45858 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45862 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45866 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45869 "isa_tms320.tcc"
)
{
#line 134 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 45876 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45882 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45885 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45892 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45897 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45901 "isa_tms320.tcc"
> *DecodeOpLDF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45907 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45911 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45918 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45928 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45932 "isa_tms320.tcc"
OpLDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45940 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45944 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45947 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45951 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45954 "isa_tms320.tcc"
)
{
#line 140 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;
		return true;
	}
#line 45965 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45980 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45984 "isa_tms320.tcc"
OpLDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45988 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45992 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45996 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45999 "isa_tms320.tcc"
)
{
#line 148 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 46006 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46022 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46031 "isa_tms320.tcc"
> *DecodeOpLDF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46037 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46041 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46051 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46055 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46058 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46062 "isa_tms320.tcc"
OpLDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46066 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46070 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46074 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46077 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46081 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46084 "isa_tms320.tcc"
)
{
#line 154 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDF " << disasm_src_indir << ", " << dst_reg_name;
		return true;
	}
#line 46096 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46111 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46115 "isa_tms320.tcc"
OpLDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46119 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46123 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46127 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46130 "isa_tms320.tcc"
)
{
#line 163 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 46137 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46143 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46153 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46158 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46162 "isa_tms320.tcc"
> *DecodeOpLDF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46168 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46172 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46179 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46182 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46186 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46189 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46193 "isa_tms320.tcc"
OpLDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 46197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46201 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46205 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46208 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46212 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46215 "isa_tms320.tcc"
)
{
#line 169 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;
		os << "LDF " << cpu.DisasmShortFloat(imm) << ", " << dst_reg_name;
		return true;
	}
#line 46226 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46231 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46234 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46238 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46241 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46245 "isa_tms320.tcc"
OpLDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 46249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46253 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46257 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46260 "isa_tms320.tcc"
)
{
#line 177 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 46267 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46273 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46276 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46283 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46292 "isa_tms320.tcc"
> *DecodeOpLDF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46298 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46302 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDF (load floating-point value)
*************************************************/
/************************************************
* LDFcond (load floating-point value conditionally)
* op LDFcond(0b0100[4]:cond[4]:g[2]:dst[5]:ext<32> src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 46315 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46318 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46322 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46325 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46329 "isa_tms320.tcc"
OpLDFcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 46333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46337 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46341 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46344 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46348 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46351 "isa_tms320.tcc"
)
{
#line 191 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!cond_name || !dst_reg_name || !src_reg_name) return false;

		os << "LDF" << cond_name << " " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 46364 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46369 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46372 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46379 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46383 "isa_tms320.tcc"
OpLDFcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 46387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46391 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46395 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46398 "isa_tms320.tcc"
)
{
#line 201 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 46405 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46411 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46414 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46418 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46421 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46426 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46430 "isa_tms320.tcc"
> *DecodeOpLDFcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46436 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46440 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46450 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46457 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46461 "isa_tms320.tcc"
OpLDFcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46469 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46473 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46476 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46480 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46483 "isa_tms320.tcc"
)
{
#line 207 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];
		if(!cond_name || !dst_reg_name) return false;

		os << "LDF" << cond_name << " " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;
		return true;
	}
#line 46495 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46510 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46514 "isa_tms320.tcc"
OpLDFcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46518 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46522 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46526 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46529 "isa_tms320.tcc"
)
{
#line 216 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 46536 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46542 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46549 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46552 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46557 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46561 "isa_tms320.tcc"
> *DecodeOpLDFcond_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFcond_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46567 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46571 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46578 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46581 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46588 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46592 "isa_tms320.tcc"
OpLDFcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46600 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46604 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46607 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46611 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46614 "isa_tms320.tcc"
)
{
#line 222 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];
		if(!cond_name || !dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDF" << cond_name << " " << disasm_src_indir << ", " << dst_reg_name;
		return true;
	}
#line 46627 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46632 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46635 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46639 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46642 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46646 "isa_tms320.tcc"
OpLDFcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46650 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46654 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46658 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46661 "isa_tms320.tcc"
)
{
#line 232 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 46668 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46677 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46684 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46689 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46693 "isa_tms320.tcc"
> *DecodeOpLDFcond_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFcond_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46699 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46703 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46710 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46713 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46717 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46720 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46724 "isa_tms320.tcc"
OpLDFcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 46728 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46732 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46736 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46739 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46743 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46746 "isa_tms320.tcc"
)
{
#line 238 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];

		if(!cond_name || !dst_reg_name) return false;
		os << "LDF" << cond_name << " " << cpu.DisasmShortFloat(imm) << ", " << dst_reg_name;
		return true;
	}
#line 46758 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46766 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46770 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46773 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46777 "isa_tms320.tcc"
OpLDFcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 46781 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46785 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46789 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46792 "isa_tms320.tcc"
)
{
#line 247 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 46799 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46805 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46812 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46815 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46820 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46824 "isa_tms320.tcc"
> *DecodeOpLDFcond_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFcond_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46830 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46834 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDFcond (load floating-point value conditionally)
*************************************************/
/*************************************************
* LDI (load integer)
* op LDI(0b000[3]:0b010000[6]:g[2]:dst[5]:ext<32> src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 46847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46854 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46857 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46861 "isa_tms320.tcc"
OpLDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 46865 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46869 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46873 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46876 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46880 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46883 "isa_tms320.tcc"
)
{
#line 261 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!dst_reg_name || !src_reg_name) return false;

		os << "LDI " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 46895 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46900 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46903 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46907 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46910 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46914 "isa_tms320.tcc"
OpLDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 46918 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46922 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46926 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46929 "isa_tms320.tcc"
)
{
#line 270 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source and destination register number are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Write back result in destination operand
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 46957 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46963 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46966 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46973 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46978 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46982 "isa_tms320.tcc"
> *DecodeOpLDI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46988 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46992 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46999 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47002 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47006 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47009 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47013 "isa_tms320.tcc"
OpLDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47017 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47021 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47025 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47028 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47032 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47035 "isa_tms320.tcc"
)
{
#line 297 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;

		return true;
	}
#line 47047 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47052 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47055 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47059 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47062 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47066 "isa_tms320.tcc"
OpLDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47074 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47078 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47081 "isa_tms320.tcc"
)
{
#line 306 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 47112 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47118 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47121 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47125 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47128 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47137 "isa_tms320.tcc"
> *DecodeOpLDI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47143 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47147 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47154 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47157 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47161 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47164 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47168 "isa_tms320.tcc"
OpLDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47172 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47176 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47180 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47183 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47187 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47190 "isa_tms320.tcc"
)
{
#line 336 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDI " << disasm_src_indir << ", " << dst_reg_name;

		return true;
	}
#line 47203 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47208 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47211 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47215 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47218 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47222 "isa_tms320.tcc"
OpLDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47226 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47230 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47234 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47237 "isa_tms320.tcc"
)
{
#line 346 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 47281 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47287 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47290 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47294 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47297 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47302 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47306 "isa_tms320.tcc"
> *DecodeOpLDI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47312 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47316 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47323 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47326 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47330 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47333 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47337 "isa_tms320.tcc"
OpLDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 47341 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47345 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47349 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47352 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47356 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47359 "isa_tms320.tcc"
)
{
#line 389 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDI " << imm << ", " << dst_reg_name;
		return true;
	}
#line 47370 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47375 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47382 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47385 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47389 "isa_tms320.tcc"
OpLDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 47393 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47397 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47401 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47404 "isa_tms320.tcc"
)
{
#line 397 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result
		uint32_t result = imm; // imm has already been sign extended by the decoder

		// Write back result in destination operand
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 47432 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47438 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47441 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47445 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47448 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47453 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47457 "isa_tms320.tcc"
> *DecodeOpLDI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47463 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47467 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDI (load integer)
*************************************************/
/*************************************************
* LDIcond (load integer conditionally)
* op LDIcond(0b0101[4]:cond[4]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 47480 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47483 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47487 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47490 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47494 "isa_tms320.tcc"
OpLDIcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 47498 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47502 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47506 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47509 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47513 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47516 "isa_tms320.tcc"
)
{
#line 432 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *src_reg_name = REG_NAME[src];
		const char *dst_reg_name = REG_NAME[dst];
		if(!cond_name || !src_reg_name || !dst_reg_name) return false;

		os << "LDI" << cond_name << " " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 47529 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47534 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47537 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47541 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47544 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47548 "isa_tms320.tcc"
OpLDIcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 47552 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47556 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47560 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47563 "isa_tms320.tcc"
)
{
#line 442 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source and destination registers, and the condition are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Write back result in destination operand
		cpu.SetReg(dst, result);
	}
#line 47583 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47589 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47599 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47608 "isa_tms320.tcc"
> *DecodeOpLDIcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDIcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47614 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47618 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47625 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47628 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47632 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47635 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47639 "isa_tms320.tcc"
OpLDIcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47647 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47651 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47654 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47658 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47661 "isa_tms320.tcc"
)
{
#line 461 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];
		if(!cond_name || !dst_reg_name) return false;

		os << "LDI" << cond_name << " " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;

		return true;
	}
#line 47674 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47679 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47682 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47686 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47689 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47693 "isa_tms320.tcc"
OpLDIcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47697 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47701 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47705 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47708 "isa_tms320.tcc"
)
{
#line 471 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register and the condition are valid
		if(unlikely(!cpu.HasReg(dst) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea);

		// Write back result
		cpu.SetReg(dst, result);
	}
#line 47731 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47737 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47740 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47744 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47747 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47752 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47756 "isa_tms320.tcc"
> *DecodeOpLDIcond_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDIcond_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47762 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47766 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47773 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47783 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47787 "isa_tms320.tcc"
OpLDIcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47795 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47799 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47802 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47806 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47809 "isa_tms320.tcc"
)
{
#line 493 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];

		if(!cond_name || !dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDI" << cond_name << " " << disasm_src_indir << ", " << dst_reg_name;

		return true;
	}
#line 47824 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47832 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47836 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47839 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47843 "isa_tms320.tcc"
OpLDIcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47851 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47855 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47858 "isa_tms320.tcc"
)
{
#line 505 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register and the condition are valid
		if(unlikely(!cpu.HasReg(dst) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Note: Auxiliary Register Arithmetic
		// The test condition does not affect
		// the auxiliary register arithmetic.
		// (AR modification always occurs.) (pg 13-126)

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea);

		// Write back result
		cpu.SetReg(dst, result);
	}
#line 47899 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47905 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47908 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47912 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47915 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47920 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47924 "isa_tms320.tcc"
> *DecodeOpLDIcond_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDIcond_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47930 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47934 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47941 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47944 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47948 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47951 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47955 "isa_tms320.tcc"
OpLDIcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 47959 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47963 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47967 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47970 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47974 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47977 "isa_tms320.tcc"
)
{
#line 545 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];

		if(!cond_name || !dst_reg_name) return false;

		os << "LDI" << cond_name << " " << imm << ", " << dst_reg_name;
		return true;
	}
#line 47990 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47995 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48002 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48005 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48009 "isa_tms320.tcc"
OpLDIcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 48013 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48017 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48021 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48024 "isa_tms320.tcc"
)
{
#line 555 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register and the condition are valid
		if(unlikely(!cpu.HasReg(dst) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Compute the result
		uint32_t result = imm; // imm has already been sign extended by the decoder

		// Write back result in destination operand
		cpu.SetReg(dst, result);
	}
#line 48044 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48050 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48053 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48057 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48060 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48065 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48069 "isa_tms320.tcc"
> *DecodeOpLDIcond_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDIcond_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48075 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48079 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDIcond (load integer conditionally)
*************************************************/
/*************************************************
* LDM (load floating-point mantissa)
* op LDM(0b000[3]:0b010010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 48092 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48095 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48099 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48102 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48106 "isa_tms320.tcc"
OpLDM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 48110 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48114 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48118 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48121 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48125 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48128 "isa_tms320.tcc"
)
{
#line 582 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!dst_reg_name || !src_reg_name) return false;

		os << "LDM " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 48140 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48152 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48155 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48159 "isa_tms320.tcc"
OpLDM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 48163 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48167 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48171 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48174 "isa_tms320.tcc"
)
{
#line 591 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 48181 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48187 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48190 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48194 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48197 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48202 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48206 "isa_tms320.tcc"
> *DecodeOpLDM_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDM_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48212 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48216 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 48223 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48226 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48233 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48237 "isa_tms320.tcc"
OpLDM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48241 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48245 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48249 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48252 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48256 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48259 "isa_tms320.tcc"
)
{
#line 597 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDM " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;
		return true;
	}
#line 48270 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48275 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48278 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48282 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48285 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48289 "isa_tms320.tcc"
OpLDM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48293 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48297 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48301 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48304 "isa_tms320.tcc"
)
{
#line 605 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 48311 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48317 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48324 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48327 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48332 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48336 "isa_tms320.tcc"
> *DecodeOpLDM_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDM_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48342 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48346 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 48353 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48356 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48360 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48363 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48367 "isa_tms320.tcc"
OpLDM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48371 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48375 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48379 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48382 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48386 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48389 "isa_tms320.tcc"
)
{
#line 611 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDM " << disasm_src_indir << ", " << dst_reg_name;
		return true;
	}
#line 48401 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48406 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48409 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48413 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48416 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48420 "isa_tms320.tcc"
OpLDM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48424 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48428 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48432 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48435 "isa_tms320.tcc"
)
{
#line 620 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 48442 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48448 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48451 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48455 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48458 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48463 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48467 "isa_tms320.tcc"
> *DecodeOpLDM_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDM_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48473 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48477 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 48484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48491 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48494 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48498 "isa_tms320.tcc"
OpLDM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 48502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48506 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48510 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48513 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48517 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48520 "isa_tms320.tcc"
)
{
#line 626 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;
		os << "LDM " << cpu.DisasmShortFloat(imm) << ", " << dst_reg_name;
		return true;
	}
#line 48531 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48536 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48539 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48543 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48546 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48550 "isa_tms320.tcc"
OpLDM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 48554 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48558 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48562 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48565 "isa_tms320.tcc"
)
{
#line 634 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 48572 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48578 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48581 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48588 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48593 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48597 "isa_tms320.tcc"
> *DecodeOpLDM_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDM_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48603 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48607 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDM (load floating-point mantissa)
*************************************************/
/*************************************************
* LDP (load data page pointer)
* op LDP(0b000[3]:0b010000[6]:0b11[2]:0b10000[5]:0b00000000[8]:src[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 48620 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48627 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48630 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48634 "isa_tms320.tcc"
OpLDP<
#line 45 "isa/tms320.isa"
CONFIG
#line 48638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48642 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48646 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48649 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48653 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48656 "isa_tms320.tcc"
)
{
#line 648 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		os << "LDP @0x" << hex << (src << 16) << dec;
		return true;
	}
#line 48664 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48669 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48672 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48676 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48679 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48683 "isa_tms320.tcc"
OpLDP<
#line 45 "isa/tms320.isa"
CONFIG
#line 48687 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48691 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48695 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48698 "isa_tms320.tcc"
)
{
#line 653 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Update DP
		cpu.SetDP(src);
	}
#line 48706 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48712 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48719 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48722 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48727 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48731 "isa_tms320.tcc"
> *DecodeOpLDP(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDP<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48737 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48741 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDP (load data page pointer)
*************************************************/
/*************************************************
* POP (pop integer from stack)
* op POP(0b000[3]:0b011100[6]:0b01[2]:dst[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 48754 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48757 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48761 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48764 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48768 "isa_tms320.tcc"
OpPOP<
#line 45 "isa/tms320.isa"
CONFIG
#line 48772 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48776 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48780 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48783 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48787 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48790 "isa_tms320.tcc"
)
{
#line 668 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;

		os << "POP " << dst_reg_name;

		if(cpu.GetPC() == (Operation<CONFIG, DEBUG>::GetAddr() / 4))
		{
			os << " <" << cpu.GetObjectFriendlyName(cpu.GetSP()) << ">";
		}
		return true;
	}
#line 48807 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48812 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48815 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48819 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48822 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48826 "isa_tms320.tcc"
OpPOP<
#line 45 "isa/tms320.isa"
CONFIG
#line 48830 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48834 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48838 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48841 "isa_tms320.tcc"
)
{
#line 682 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read SP
		typename CONFIG::address_t sp = cpu.GetSP();

		// Read the word at SP from memory
		uint32_t result = cpu.IntLoad(sp & ADDRESS_MASK);

		// Compute the new value of SP
		sp = sp - 1;

		// Write back the result
		cpu.SetReg(dst, result);

		// Update SP
		cpu.SetSP(sp);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 48878 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48884 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48887 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48891 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48894 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48899 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48903 "isa_tms320.tcc"
> *DecodeOpPOP(CodeType code, typename CONFIG::address_t addr)
{
	return new OpPOP<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48909 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48913 "isa_tms320.tcc"
	>(code, addr);
}

/* end of POP (pop integer from stack)
*************************************************/
/*************************************************
* POPF (pop floating-point value from stack)
* op POPF(0b000[3]:0b011101[6]:0b01[2]:dst[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 48926 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48929 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48933 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48936 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48940 "isa_tms320.tcc"
OpPOPF<
#line 45 "isa/tms320.isa"
CONFIG
#line 48944 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48948 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48952 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48955 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48959 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48962 "isa_tms320.tcc"
)
{
#line 726 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;

		os << "POPF " << dst_reg_name;
		return true;
	}
#line 48974 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48979 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48982 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48986 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48989 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48993 "isa_tms320.tcc"
OpPOPF<
#line 45 "isa/tms320.isa"
CONFIG
#line 48997 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49001 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49005 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49008 "isa_tms320.tcc"
)
{
#line 735 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Read SP
		typename CONFIG::address_t sp = cpu.GetSP();

		// Read the word at SP from memory
		uint32_t result = cpu.IntLoad(sp & ADDRESS_MASK);
		uint8_t hi = result >> 24;
		uint32_t lo = result << 8;

		// Compute the new value of SP
		sp = sp - 1;

		// Write back the result
		Register& reg = cpu.GetExtReg(dst);
		reg.SetLo(lo);
		reg.SetHi(hi);

		// Update SP
		cpu.SetSP(sp);

		// Generate flags (into ST)
		cpu.GenFlags(
		reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 49039 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49045 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49048 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49052 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49055 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49060 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49064 "isa_tms320.tcc"
> *DecodeOpPOPF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpPOPF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49070 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49074 "isa_tms320.tcc"
	>(code, addr);
}

/* end of POPF (pop floating-point value from stack)
*************************************************/
/*************************************************
* PUSH (push integer on stack)
* op PUSH(0b000[3]:0b011110[6]:0b01[2]:src[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49094 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49097 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49101 "isa_tms320.tcc"
OpPUSH<
#line 45 "isa/tms320.isa"
CONFIG
#line 49105 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49109 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49113 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49116 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49120 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49123 "isa_tms320.tcc"
)
{
#line 773 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *src_reg_name = REG_NAME[src];

		if(!src_reg_name) return false;

		os << "PUSH " << src_reg_name;

		if(cpu.GetPC() == (Operation<CONFIG, DEBUG>::GetAddr() / 4))
		{
			os << " <" << cpu.GetObjectFriendlyName(cpu.GetSP() + 1) << ">";
		}
		return true;
	}
#line 49140 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49152 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49155 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49159 "isa_tms320.tcc"
OpPUSH<
#line 45 "isa/tms320.isa"
CONFIG
#line 49163 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49167 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49171 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49174 "isa_tms320.tcc"
)
{
#line 787 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source register number is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Store the source operand at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, src_value);

		// Update SP
		cpu.SetSP(sp);
	}
#line 49197 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49203 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49206 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49210 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49213 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49218 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49222 "isa_tms320.tcc"
> *DecodeOpPUSH(CodeType code, typename CONFIG::address_t addr)
{
	return new OpPUSH<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49228 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49232 "isa_tms320.tcc"
	>(code, addr);
}

/* end of POPF (pop floating-point value from stack)
*************************************************/
/*************************************************
* PUSHF (push floating-point value on stack)
* op PUSHF(0b000[3]:0b011111[6]:0b01[2]:src[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49245 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49248 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49252 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49255 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49259 "isa_tms320.tcc"
OpPUSHF<
#line 45 "isa/tms320.isa"
CONFIG
#line 49263 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49267 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49271 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49274 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49278 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49281 "isa_tms320.tcc"
)
{
#line 817 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *src_reg_name = REG_NAME[src];

		if(!src_reg_name) return false;

		os << "PUSHF " << src_reg_name;
		return true;
	}
#line 49293 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49298 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49301 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49305 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49308 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49312 "isa_tms320.tcc"
OpPUSHF<
#line 45 "isa/tms320.isa"
CONFIG
#line 49316 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49320 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49324 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49327 "isa_tms320.tcc"
)
{
#line 826 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Read the source operand
		const Register& src_value = cpu.GetExtRegConst(src);

		// compute the result
		uint32_t result = ((uint32_t)src_value.GetHi() << 24) + (src_value.GetLo() >> 8);

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Store the result at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, result);

		// Update SP
		cpu.SetSP(sp);
	}
#line 49347 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49353 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49356 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49360 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49363 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49368 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49372 "isa_tms320.tcc"
> *DecodeOpPUSHF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpPUSHF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49378 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49382 "isa_tms320.tcc"
	>(code, addr);
}

/* end of PUSHF (push floating-point value on stack)
*************************************************/
/*************************************************
* STF (store floating-point value)
* op STF(0b000[3]:0b101000[6]:g[2]:src[5]:dst[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49395 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49398 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49402 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49405 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49409 "isa_tms320.tcc"
OpSTF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49413 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49417 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49421 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49424 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49428 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49431 "isa_tms320.tcc"
)
{
#line 853 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *src_reg_name = REG_NAME[src];
		if(!src_reg_name) return false;

		os << "STF " << src_reg_name << ", " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec;
		return true;
	}
#line 49442 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49450 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49457 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49461 "isa_tms320.tcc"
OpSTF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49469 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49473 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49476 "isa_tms320.tcc"
)
{
#line 861 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 49483 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49489 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49492 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49496 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49499 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49504 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49508 "isa_tms320.tcc"
> *DecodeOpSTF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49514 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49518 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 49525 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49528 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49532 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49535 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49539 "isa_tms320.tcc"
OpSTF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49543 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49547 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49551 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49554 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49558 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49561 "isa_tms320.tcc"
)
{
#line 867 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_dst_indir;
		const char *src_reg_name = REG_NAME[src];
		if(!src_reg_name || !cpu.DisasmIndir(disasm_dst_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "STF " << src_reg_name << ", " << disasm_dst_indir;
		return true;
	}
#line 49573 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49578 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49581 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49588 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49592 "isa_tms320.tcc"
OpSTF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49600 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49604 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49607 "isa_tms320.tcc"
)
{
#line 876 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 49614 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49620 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49627 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49630 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49635 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49639 "isa_tms320.tcc"
> *DecodeOpSTF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49645 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49649 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STF (store floating-point value)
*************************************************/
/*************************************************
* STI (store integer)
* op STI(0b000[3]:0b101010[6]:g[2]:src[5]:dst[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49662 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49665 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49669 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49672 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49676 "isa_tms320.tcc"
OpSTI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49680 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49684 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49688 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49691 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49695 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49698 "isa_tms320.tcc"
)
{
#line 890 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *src_reg_name = REG_NAME[src];
		if(!src_reg_name) return false;

		os << "STI " << src_reg_name << ", " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec;

		return true;
	}
#line 49710 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49715 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49718 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49725 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49729 "isa_tms320.tcc"
OpSTI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49733 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49737 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49741 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49744 "isa_tms320.tcc"
)
{
#line 899 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source register number is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Store the word into memory
		cpu.IntStore(ea, result);
	}
#line 49764 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49770 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49773 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49777 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49780 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49789 "isa_tms320.tcc"
> *DecodeOpSTI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49795 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49799 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 49806 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49809 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49813 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49816 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49820 "isa_tms320.tcc"
OpSTI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49824 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49828 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49832 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49835 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49839 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49842 "isa_tms320.tcc"
)
{
#line 918 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_dst_indir;
		const char *src_reg_name = REG_NAME[src];
		if(!src_reg_name || !cpu.DisasmIndir(disasm_dst_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "STI " << src_reg_name << ", " << disasm_dst_indir;

		return true;
	}
#line 49855 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49860 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49867 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49870 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49874 "isa_tms320.tcc"
OpSTI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49878 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49882 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49886 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49889 "isa_tms320.tcc"
)
{
#line 928 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source register number is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Store the word into memory
		cpu.IntStore(ea, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}
	}
#line 49922 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49931 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49935 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49938 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49947 "isa_tms320.tcc"
> *DecodeOpSTI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49953 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49957 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STI (store integer)
*************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of 2 operands operations:
* - ABSF         absolute value of a floating-point number
* - ABSI         absolute value of an integer
* - ADDC         add integers with carry
* - ADDF         add floating-point values
* - ADDI         add integers
* - AND          bitwise-logical AND
* - ANDN         bitwise-logical AND with complement
* - ASH          arithmetic shift
* - CMPF         compare floating-point values
* - CMPI         compare integers
* - FIX          convert floating-point value to integer
* - FLOAT        convert integer to floating-point value
* - LSH          logical shift
* - MPYF         multiply floating-point values
* - MPYI         multiply integers
* - NEGB         negate integer with borrow
* - NEGF         negate floating-point value
* - NEGI         negate integer
* - NORM         normalize floating-point value
* - NOT          bitwise-logical complement
* - OR           bitwise-logical OR
* - RND          round floating-point value
* - ROL          rotate left
* - ROLC         rotate left through carry
* - ROR          rotate right
* - RORC         rotate right through carry
* - SUBB         subtract integers with borrow
* - SUBC         subtract integers conditionally
* - SUBF         subtract floating-point values
* - SUBI         subtract integer
* - SUBRB        subtract reverse integer with borrow
* - SUBRF        subtract reverse floating-point value
* - SUBRI        subtract reverse integer
* - TSTB         test bit fields
* - XOR          bitwise-exclusive OR
*/
/**********************************************************
* ABSF (absolute value of a floating-point number)
* op ABSF(0b000[3]:0b000000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 50041 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50051 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50055 "isa_tms320.tcc"
OpABSF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 50059 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50063 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50067 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50070 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50074 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50077 "isa_tms320.tcc"
)
{
#line 84 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ABSF " << src_name << ", " << dst_name;
		return true;
	}
#line 50091 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50096 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50099 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50106 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50110 "isa_tms320.tcc"
OpABSF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 50114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50118 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50122 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50125 "isa_tms320.tcc"
)
{
#line 127 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 50132 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50138 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50141 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50148 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50157 "isa_tms320.tcc"
> *DecodeOpABSF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50163 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50167 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 50174 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50177 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50181 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50184 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50188 "isa_tms320.tcc"
OpABSF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50196 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50200 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50203 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50207 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50210 "isa_tms320.tcc"
)
{
#line 95 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "ABSF @0x" << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 50224 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50229 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50232 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50236 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50239 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50243 "isa_tms320.tcc"
OpABSF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50247 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50251 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50255 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50258 "isa_tms320.tcc"
)
{
#line 131 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 50265 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50271 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50274 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50278 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50281 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50286 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50290 "isa_tms320.tcc"
> *DecodeOpABSF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50296 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50300 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 50307 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50310 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50314 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50317 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50321 "isa_tms320.tcc"
OpABSF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50325 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50329 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50333 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50336 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50340 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50343 "isa_tms320.tcc"
)
{
#line 106 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ABSF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 50357 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50362 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50365 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50369 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50372 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50376 "isa_tms320.tcc"
OpABSF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50384 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50388 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50391 "isa_tms320.tcc"
)
{
#line 135 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 50398 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50404 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50407 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50411 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50414 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50419 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50423 "isa_tms320.tcc"
> *DecodeOpABSF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50429 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50433 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 50440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50450 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50454 "isa_tms320.tcc"
OpABSF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 50458 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50462 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50466 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50469 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50473 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50476 "isa_tms320.tcc"
)
{
#line 117 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ABSF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 50489 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50494 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50497 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50501 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50504 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50508 "isa_tms320.tcc"
OpABSF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 50512 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50516 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50520 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50523 "isa_tms320.tcc"
)
{
#line 139 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 50530 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50536 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50539 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50543 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50546 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50551 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50555 "isa_tms320.tcc"
> *DecodeOpABSF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50561 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50565 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ABSF (absolute value of a floating-point number)
**********************************************************/
/**********************************************************
* ABSI (absolute value of an integer)
* op ABSI(0b000[3]:0b000001[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 50578 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50581 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50588 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50592 "isa_tms320.tcc"
OpABSI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 50596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50600 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50604 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50607 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50611 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50614 "isa_tms320.tcc"
)
{
#line 156 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ABSI " << src_name << ", " << dst_name;
		return true;
	}
#line 50628 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50633 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50636 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50643 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50647 "isa_tms320.tcc"
OpABSI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 50651 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50655 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50659 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50662 "isa_tms320.tcc"
)
{
#line 199 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t overflow;     // the overflow (0 or 1)

		if(src_value == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = ((int32_t) src_value >= 0) ? src_value : -src_value;
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_Z | M_ST_V,    // or mask
			0,
			overflow
			);
		}
	}
#line 50708 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50714 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50717 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50721 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50724 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50729 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50733 "isa_tms320.tcc"
> *DecodeOpABSI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50739 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50743 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 50750 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50753 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50757 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50760 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50764 "isa_tms320.tcc"
OpABSI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50768 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50772 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50776 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50779 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50783 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50786 "isa_tms320.tcc"
)
{
#line 167 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "ABSI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 50800 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50805 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50812 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50815 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50819 "isa_tms320.tcc"
OpABSI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50827 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50831 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50834 "isa_tms320.tcc"
)
{
#line 242 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t overflow;     // the overflow (0 or 1)

		if(src_value == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = ((int32_t) src_value >= 0) ? src_value : -src_value;
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_Z | M_ST_V,    // or mask
			0,
			overflow
			);
		}
	}
#line 50883 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50899 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50908 "isa_tms320.tcc"
> *DecodeOpABSI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50914 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50918 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 50925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50932 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50935 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50939 "isa_tms320.tcc"
OpABSI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50947 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50951 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50954 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50958 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50961 "isa_tms320.tcc"
)
{
#line 178 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ABSI " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 50975 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50980 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50990 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50994 "isa_tms320.tcc"
OpABSI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51002 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51006 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51009 "isa_tms320.tcc"
)
{
#line 288 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t overflow;     // the overflow (0 or 1)

		if(src_value == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = ((int32_t) src_value >= 0) ? src_value : -src_value;
		}

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_Z | M_ST_V,    // or mask
			0,
			overflow
			);
		}
	}
#line 51071 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51077 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51080 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51084 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51087 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51092 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51096 "isa_tms320.tcc"
> *DecodeOpABSI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51102 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51106 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 51113 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51120 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51123 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51127 "isa_tms320.tcc"
OpABSI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 51131 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51135 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51139 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51142 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51146 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51149 "isa_tms320.tcc"
)
{
#line 189 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ABSI " << imm << ", " << dst_name;
		return true;
	}
#line 51162 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51167 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51170 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51174 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51177 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51181 "isa_tms320.tcc"
OpABSI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 51185 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51189 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51193 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51196 "isa_tms320.tcc"
)
{
#line 347 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t overflow;     // the overflow (0 or 1)

		if((uint32_t) imm == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = (imm >= 0) ? imm : -imm;
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_Z | M_ST_V,    // or mask
			0,
			overflow
			);
		}
	}
#line 51242 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51248 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51251 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51255 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51258 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51263 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51267 "isa_tms320.tcc"
> *DecodeOpABSI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51273 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51277 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ABSI (absolute value of an integer)
**********************************************************/
/**********************************************************
* ADDC (add integers with carry)
* op ADDC(0b000[3]:0b000010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 51290 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51293 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51297 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51300 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51304 "isa_tms320.tcc"
OpADDC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 51308 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51312 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51316 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51319 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51323 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51326 "isa_tms320.tcc"
)
{
#line 403 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ADDC " << src_name << ", " << dst_name;
		return true;
	}
#line 51340 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51345 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51352 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51355 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51359 "isa_tms320.tcc"
OpADDC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 51363 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51367 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51371 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51374 "isa_tms320.tcc"
)
{
#line 447 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, carry_in);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, carry_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 51421 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51427 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51434 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51437 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51446 "isa_tms320.tcc"
> *DecodeOpADDC_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51452 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51456 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 51463 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51466 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51470 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51473 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51477 "isa_tms320.tcc"
OpADDC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51481 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51485 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51489 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51492 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51496 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51499 "isa_tms320.tcc"
)
{
#line 414 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "ADDC " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 51513 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51518 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51521 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51525 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51528 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51532 "isa_tms320.tcc"
OpADDC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51536 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51540 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51544 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51547 "isa_tms320.tcc"
)
{
#line 491 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, carry_in);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, carry_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 51597 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51603 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51606 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51610 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51613 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51618 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51622 "isa_tms320.tcc"
> *DecodeOpADDC_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51628 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51632 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 51639 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51642 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51646 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51649 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51653 "isa_tms320.tcc"
OpADDC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51657 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51661 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51665 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51668 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51672 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51675 "isa_tms320.tcc"
)
{
#line 425 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ADDC " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 51690 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51695 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51698 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51702 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51705 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51709 "isa_tms320.tcc"
OpADDC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51713 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51717 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51721 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51724 "isa_tms320.tcc"
)
{
#line 538 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, carry_in);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, carry_in);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 51787 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51793 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51800 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51803 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51812 "isa_tms320.tcc"
> *DecodeOpADDC_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51818 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51822 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 51829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51832 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51836 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51839 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51843 "isa_tms320.tcc"
OpADDC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 51847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51851 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51855 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51858 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51862 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51865 "isa_tms320.tcc"
)
{
#line 437 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ADDC " << imm << ", " << dst_name;
		return true;
	}
#line 51878 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51883 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51886 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51890 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51893 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51897 "isa_tms320.tcc"
OpADDC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 51901 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51905 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51909 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51912 "isa_tms320.tcc"
)
{
#line 598 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, imm, carry_in);
		else
		Add32(result, carry_out, overflow, dst_value, imm, carry_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 51956 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51962 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51965 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51972 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51977 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51981 "isa_tms320.tcc"
> *DecodeOpADDC_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51987 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51991 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDC (add integers with carry)
**********************************************************/
/**********************************************************
* ADDF (add floating-point values)
* op ADDF(0b000[3]:0b000011[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 52004 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52007 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52011 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52014 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52018 "isa_tms320.tcc"
OpADDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 52022 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52026 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52030 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52033 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52037 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52040 "isa_tms320.tcc"
)
{
#line 652 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ADDF " << src_name << ", " << dst_name;
		return true;
	}
#line 52054 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52059 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52062 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52066 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52069 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52073 "isa_tms320.tcc"
OpADDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 52077 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52081 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52085 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52088 "isa_tms320.tcc"
)
{
#line 695 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 52095 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52111 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52120 "isa_tms320.tcc"
> *DecodeOpADDF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52126 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52130 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52144 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52147 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52151 "isa_tms320.tcc"
OpADDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52155 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52159 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52163 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52166 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52170 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52173 "isa_tms320.tcc"
)
{
#line 663 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "ADDF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 52187 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52192 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52195 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52199 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52202 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52206 "isa_tms320.tcc"
OpADDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52210 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52214 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52218 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52221 "isa_tms320.tcc"
)
{
#line 699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 52228 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52244 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52253 "isa_tms320.tcc"
> *DecodeOpADDF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52259 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52263 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52270 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52273 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52277 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52280 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52284 "isa_tms320.tcc"
OpADDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52292 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52296 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52299 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52303 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52306 "isa_tms320.tcc"
)
{
#line 674 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ADDF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 52320 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52325 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52332 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52335 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52339 "isa_tms320.tcc"
OpADDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52343 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52347 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52351 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52354 "isa_tms320.tcc"
)
{
#line 703 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 52361 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52367 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52370 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52374 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52377 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52382 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52386 "isa_tms320.tcc"
> *DecodeOpADDF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52392 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52396 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52403 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52406 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52410 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52413 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52417 "isa_tms320.tcc"
OpADDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 52421 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52425 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52429 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52432 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52436 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52439 "isa_tms320.tcc"
)
{
#line 685 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ADDF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 52452 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52457 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52460 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52464 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52467 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52471 "isa_tms320.tcc"
OpADDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 52475 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52479 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52483 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52486 "isa_tms320.tcc"
)
{
#line 707 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 52493 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52509 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52514 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52518 "isa_tms320.tcc"
> *DecodeOpADDF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52524 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52528 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDF (add floating-point values)
**********************************************************/
/**********************************************************
* ADDI (add integers)
* op ADDI(0b000[3]:0b000100[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 52541 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52548 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52551 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52555 "isa_tms320.tcc"
OpADDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 52559 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52563 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52567 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52570 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52574 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52577 "isa_tms320.tcc"
)
{
#line 724 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ADDI " << src_name << ", " << dst_name;
		return true;
	}
#line 52591 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52599 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52603 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52606 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52610 "isa_tms320.tcc"
OpADDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 52614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52618 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52622 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52625 "isa_tms320.tcc"
)
{
#line 768 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, 0);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 52669 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52675 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52678 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52682 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52685 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52690 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52694 "isa_tms320.tcc"
> *DecodeOpADDI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52700 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52704 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52711 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52714 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52718 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52721 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52725 "isa_tms320.tcc"
OpADDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52729 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52733 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52737 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52740 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52744 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52747 "isa_tms320.tcc"
)
{
#line 735 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "ADDI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 52761 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52766 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52769 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52773 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52776 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52780 "isa_tms320.tcc"
OpADDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52784 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52788 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52792 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52795 "isa_tms320.tcc"
)
{
#line 809 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, 0);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 52842 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52848 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52851 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52855 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52858 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52867 "isa_tms320.tcc"
> *DecodeOpADDI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52873 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52877 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52884 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52887 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52891 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52894 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52898 "isa_tms320.tcc"
OpADDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52902 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52906 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52910 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52913 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52917 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52920 "isa_tms320.tcc"
)
{
#line 746 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ADDI " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 52935 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52940 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52947 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52950 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52954 "isa_tms320.tcc"
OpADDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52958 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52962 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52966 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52969 "isa_tms320.tcc"
)
{
#line 853 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, 0);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 53029 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53035 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53042 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53045 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53050 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53054 "isa_tms320.tcc"
> *DecodeOpADDI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53060 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53064 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 53071 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53074 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53078 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53081 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53085 "isa_tms320.tcc"
OpADDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 53089 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53093 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53097 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53100 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53104 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53107 "isa_tms320.tcc"
)
{
#line 758 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ADDI " << imm << ", " << dst_name;
		return true;
	}
#line 53120 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53125 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53128 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53132 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53135 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53139 "isa_tms320.tcc"
OpADDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 53143 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53147 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53151 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53154 "isa_tms320.tcc"
)
{
#line 910 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, imm, 0);
		else
		Add32(result, carry_out, overflow, dst_value, imm, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 53195 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53201 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53204 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53208 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53211 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53216 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53220 "isa_tms320.tcc"
> *DecodeOpADDI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53226 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53230 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDI (add integers)
**********************************************************/
/**********************************************************
* AND (bitwise-logical AND)
* op AND(0b000[3]:0b000101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 53243 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53246 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53250 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53253 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53257 "isa_tms320.tcc"
OpAND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 53261 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53265 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53269 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53272 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53276 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53279 "isa_tms320.tcc"
)
{
#line 961 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "AND " << src_name << ", " << dst_name;
		return true;
	}
#line 53293 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53298 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53301 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53305 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53308 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53312 "isa_tms320.tcc"
OpAND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 53316 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53320 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53324 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53327 "isa_tms320.tcc"
)
{
#line 1005 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 53361 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53367 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53370 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53374 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53377 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53382 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53386 "isa_tms320.tcc"
> *DecodeOpAND_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53392 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53396 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 53403 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53406 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53410 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53413 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53417 "isa_tms320.tcc"
OpAND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 53421 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53425 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53429 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53432 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53436 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53439 "isa_tms320.tcc"
)
{
#line 972 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "AND " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 53453 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53458 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53461 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53465 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53468 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53472 "isa_tms320.tcc"
OpAND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 53476 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53480 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53484 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53487 "isa_tms320.tcc"
)
{
#line 1036 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 53524 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53530 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53533 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53537 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53540 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53549 "isa_tms320.tcc"
> *DecodeOpAND_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53555 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53559 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 53566 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53576 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53580 "isa_tms320.tcc"
OpAND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 53584 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53588 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53592 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53595 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53599 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53602 "isa_tms320.tcc"
)
{
#line 983 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "AND " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 53617 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53622 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53625 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53629 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53632 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53636 "isa_tms320.tcc"
OpAND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 53640 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53644 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53648 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53651 "isa_tms320.tcc"
)
{
#line 1070 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 53701 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53707 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53710 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53714 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53717 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53722 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53726 "isa_tms320.tcc"
> *DecodeOpAND_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53732 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53736 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 53743 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53746 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53750 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53753 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53757 "isa_tms320.tcc"
OpAND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 53761 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53765 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53769 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53772 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53776 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53779 "isa_tms320.tcc"
)
{
#line 995 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "AND " << imm << ", " << dst_name;
		return true;
	}
#line 53792 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53797 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53800 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53804 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53807 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53811 "isa_tms320.tcc"
OpAND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 53815 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53819 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53823 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53826 "isa_tms320.tcc"
)
{
#line 1117 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = imm & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 53857 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53863 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53866 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53870 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53873 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53878 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53882 "isa_tms320.tcc"
> *DecodeOpAND_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53888 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53892 "isa_tms320.tcc"
	>(code, addr);
}

/* end of AND (bitwise-logical AND)
**********************************************************/
/**********************************************************
* ANDN (bitwise-logical AND with complement)
* op ANDN(0b000[3]:0b000110[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 53905 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53908 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53912 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53915 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53919 "isa_tms320.tcc"
OpANDN_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 53923 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53927 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53931 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53934 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53938 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53941 "isa_tms320.tcc"
)
{
#line 1158 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ANDN " << src_name << ", " << dst_name;
		return true;
	}
#line 53955 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53960 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53963 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53967 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53970 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53974 "isa_tms320.tcc"
OpANDN_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 53978 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53982 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53986 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53989 "isa_tms320.tcc"
)
{
#line 1202 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = ~src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 54023 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54029 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54032 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54036 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54039 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54048 "isa_tms320.tcc"
> *DecodeOpANDN_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54054 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54058 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54065 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54068 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54072 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54075 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54079 "isa_tms320.tcc"
OpANDN_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54087 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54091 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54094 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54098 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54101 "isa_tms320.tcc"
)
{
#line 1169 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "ANDN " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 54115 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 54120 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54123 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54127 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54130 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 54134 "isa_tms320.tcc"
OpANDN_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54138 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54142 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54146 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54149 "isa_tms320.tcc"
)
{
#line 1233 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = ~src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 54186 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54192 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54195 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54199 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54202 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54207 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54211 "isa_tms320.tcc"
> *DecodeOpANDN_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54217 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54221 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54228 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54231 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54238 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54242 "isa_tms320.tcc"
OpANDN_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54246 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54250 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54254 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54257 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54261 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54264 "isa_tms320.tcc"
)
{
#line 1180 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ANDN " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 54279 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 54284 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54287 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54291 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54294 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 54298 "isa_tms320.tcc"
OpANDN_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54302 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54306 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54310 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54313 "isa_tms320.tcc"
)
{
#line 1267 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = ~src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 54363 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54369 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54372 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54379 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54384 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54388 "isa_tms320.tcc"
> *DecodeOpANDN_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54394 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54398 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54405 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54408 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54412 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54415 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54419 "isa_tms320.tcc"
OpANDN_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 54423 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54427 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54431 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54434 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54438 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54441 "isa_tms320.tcc"
)
{
#line 1192 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ANDN " << imm << ", " << dst_name;
		return true;
	}
#line 54454 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 54459 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54462 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54466 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54469 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 54473 "isa_tms320.tcc"
OpANDN_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 54477 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54481 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54485 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54488 "isa_tms320.tcc"
)
{
#line 1314 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = ~imm & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 54519 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54525 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54528 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54532 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54535 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54540 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54544 "isa_tms320.tcc"
> *DecodeOpANDN_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54550 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54554 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ANDN (bitwise-logical AND with complement)
**********************************************************/
/**********************************************************
* ASH (arithmetic shift)
* op ASH(0b000[3]:0b000111[6]:g[2]:dst[5]:count[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 54567 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54570 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54574 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54577 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54581 "isa_tms320.tcc"
OpASH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 54585 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54589 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54593 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54596 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54600 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54603 "isa_tms320.tcc"
)
{
#line 1355 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ASH " << src_name << ", " << dst_name;
		return true;
	}
#line 54617 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 54622 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54625 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54629 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54632 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 54636 "isa_tms320.tcc"
OpASH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 54640 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54644 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54648 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54651 "isa_tms320.tcc"
)
{
#line 1398 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(dst_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 54721 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54727 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54734 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54737 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54742 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54746 "isa_tms320.tcc"
> *DecodeOpASH_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54752 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54756 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54766 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54770 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54773 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54777 "isa_tms320.tcc"
OpASH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54781 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54785 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54789 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54792 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54796 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54799 "isa_tms320.tcc"
)
{
#line 1366 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "ASH " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 54813 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 54818 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54821 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54825 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54828 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 54832 "isa_tms320.tcc"
OpASH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54836 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54840 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54844 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54847 "isa_tms320.tcc"
)
{
#line 1465 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(dst_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 54920 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54926 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54929 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54933 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54936 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54941 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54945 "isa_tms320.tcc"
> *DecodeOpASH_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54951 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54955 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54962 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54965 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54972 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54976 "isa_tms320.tcc"
OpASH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54984 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54988 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54991 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54995 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54998 "isa_tms320.tcc"
)
{
#line 1377 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ASH " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 55012 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55017 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55020 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55024 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55027 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55031 "isa_tms320.tcc"
OpASH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 55035 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55039 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55043 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55046 "isa_tms320.tcc"
)
{
#line 1535 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(dst_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 55126 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55132 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55135 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55139 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55142 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55147 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55151 "isa_tms320.tcc"
> *DecodeOpASH_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55157 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55161 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 55168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55178 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55182 "isa_tms320.tcc"
OpASH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 55186 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55190 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55194 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55197 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55201 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55204 "isa_tms320.tcc"
)
{
#line 1388 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ASH " << imm << ", " << dst_name;
		return true;
	}
#line 55217 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55222 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55225 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55229 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55232 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55236 "isa_tms320.tcc"
OpASH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 55240 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55244 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55248 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55251 "isa_tms320.tcc"
)
{
#line 1612 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Sign extend the 7 LSB of the immediate value to get the shift count
		int32_t count = imm; // imm has alread been sign extended by the decoder

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(dst_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 55318 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55324 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55327 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55331 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55334 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55339 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55343 "isa_tms320.tcc"
> *DecodeOpASH_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55349 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55353 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ASH (arithmetic shift)
**********************************************************/
/**********************************************************
* CMPF (compare floating-point values)
* op CMPF(0b000[3]:0b001000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 55366 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55369 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55373 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55376 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55380 "isa_tms320.tcc"
OpCMPF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 55384 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55388 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55392 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55395 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55399 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55402 "isa_tms320.tcc"
)
{
#line 1689 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "CMPF " << src_name << ", " << dst_name;
		return true;
	}
#line 55416 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55421 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55424 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55428 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55431 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55435 "isa_tms320.tcc"
OpCMPF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 55439 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55443 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55447 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55450 "isa_tms320.tcc"
)
{
#line 1732 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 55457 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55463 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55466 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55470 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55473 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55478 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55482 "isa_tms320.tcc"
> *DecodeOpCMPF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55488 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55492 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 55499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55509 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55513 "isa_tms320.tcc"
OpCMPF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 55517 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55521 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55525 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55528 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55532 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55535 "isa_tms320.tcc"
)
{
#line 1700 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "CMPF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 55549 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55554 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55557 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55561 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55564 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55568 "isa_tms320.tcc"
OpCMPF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 55572 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55576 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55580 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55583 "isa_tms320.tcc"
)
{
#line 1736 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 55590 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55599 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55603 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55606 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55611 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55615 "isa_tms320.tcc"
> *DecodeOpCMPF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55621 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55625 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 55632 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55635 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55639 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55642 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55646 "isa_tms320.tcc"
OpCMPF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 55650 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55654 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55658 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55661 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55665 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55668 "isa_tms320.tcc"
)
{
#line 1711 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "CMPF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 55682 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55687 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55690 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55694 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55697 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55701 "isa_tms320.tcc"
OpCMPF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 55705 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55709 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55713 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55716 "isa_tms320.tcc"
)
{
#line 1740 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 55723 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55736 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55739 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55748 "isa_tms320.tcc"
> *DecodeOpCMPF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55754 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55758 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 55765 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55768 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55772 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55775 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55779 "isa_tms320.tcc"
OpCMPF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 55783 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55787 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55791 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55794 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55798 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55801 "isa_tms320.tcc"
)
{
#line 1722 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "CMPF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 55814 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55819 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55826 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55829 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55833 "isa_tms320.tcc"
OpCMPF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 55837 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55841 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55845 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55848 "isa_tms320.tcc"
)
{
#line 1744 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 55855 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55861 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55864 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55868 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55871 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55880 "isa_tms320.tcc"
> *DecodeOpCMPF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55886 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55890 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CMPF (compare floating-point values)
**********************************************************/
/**********************************************************
* CMPI (compare integers)
* op CMPI(0b000[3]:0b001001[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 55903 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55906 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55910 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55913 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55917 "isa_tms320.tcc"
OpCMPI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 55921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55925 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55929 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55932 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55936 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55939 "isa_tms320.tcc"
)
{
#line 1761 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "CMPI " << src_name << ", " << dst_name;
		return true;
	}
#line 55953 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55958 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55961 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55965 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55968 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55972 "isa_tms320.tcc"
OpCMPI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 55976 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55980 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55984 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55987 "isa_tms320.tcc"
)
{
#line 1805 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 56020 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56026 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56029 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56033 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56036 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56041 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56045 "isa_tms320.tcc"
> *DecodeOpCMPI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56051 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56055 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56062 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56065 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56069 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56072 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56076 "isa_tms320.tcc"
OpCMPI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56080 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56084 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56088 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56091 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56095 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56098 "isa_tms320.tcc"
)
{
#line 1772 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "CMPI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 56112 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56117 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56120 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56127 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56131 "isa_tms320.tcc"
OpCMPI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56135 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56139 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56143 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56146 "isa_tms320.tcc"
)
{
#line 1835 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 56182 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56188 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56191 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56198 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56203 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56207 "isa_tms320.tcc"
> *DecodeOpCMPI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56213 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56217 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56224 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56227 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56231 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56234 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56238 "isa_tms320.tcc"
OpCMPI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56242 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56246 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56250 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56253 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56257 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56260 "isa_tms320.tcc"
)
{
#line 1783 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "CMPI " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 56275 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56283 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56287 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56290 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56294 "isa_tms320.tcc"
OpCMPI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56298 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56302 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56306 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56309 "isa_tms320.tcc"
)
{
#line 1868 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 56358 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56364 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56367 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56371 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56374 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56383 "isa_tms320.tcc"
> *DecodeOpCMPI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56389 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56393 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56400 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56407 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56410 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56414 "isa_tms320.tcc"
OpCMPI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 56418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56422 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56426 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56429 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56433 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56436 "isa_tms320.tcc"
)
{
#line 1795 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "CMPI " << imm << ", " << dst_name;
		return true;
	}
#line 56449 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56457 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56461 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56464 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56468 "isa_tms320.tcc"
OpCMPI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 56472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56476 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56480 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56483 "isa_tms320.tcc"
)
{
#line 1914 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, dst_value, imm, 0);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 56513 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56519 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56522 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56526 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56529 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56534 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56538 "isa_tms320.tcc"
> *DecodeOpCMPI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56544 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56548 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CMPI (compare integers)
**********************************************************/
/**********************************************************
* FIX (convert floating-point value to integer)
* op FIX(0b000[3]:0b001010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 56561 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56564 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56568 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56571 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56575 "isa_tms320.tcc"
OpFIX_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 56579 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56583 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56587 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56590 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56594 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56597 "isa_tms320.tcc"
)
{
#line 1954 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "FIX " << src_name << ", " << dst_name;
		return true;
	}
#line 56611 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56619 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56626 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56630 "isa_tms320.tcc"
OpFIX_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 56634 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56638 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56642 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56645 "isa_tms320.tcc"
)
{
#line 1997 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		Register &src_reg = cpu.GetExtReg(src);

		// Perform computation
		bool overflow;
		uint32_t result = src_reg.Fix(overflow);

		// Set destination register
		cpu.SetReg(dst, result);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V, // or mask
		0, // carry
		overflow
		);
	}
#line 56675 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56691 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56700 "isa_tms320.tcc"
> *DecodeOpFIX_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56706 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56710 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56717 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56720 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56724 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56727 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56731 "isa_tms320.tcc"
OpFIX_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56735 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56739 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56743 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56746 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56750 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56753 "isa_tms320.tcc"
)
{
#line 1965 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "FIX " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 56767 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56772 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56775 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56779 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56782 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56786 "isa_tms320.tcc"
OpFIX_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56790 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56794 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56798 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56801 "isa_tms320.tcc"
)
{
#line 2024 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Convert value into a float
		Register tmp_reg;
		tmp_reg.SetFromSinglePresicionFPFormat(src_value);

		// Perform computation
		bool overflow;
		uint32_t result = tmp_reg.Fix(overflow);

		// Set destination register
		cpu.SetReg(dst, result);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V, // or mask
		0, // carry
		overflow
		);
	}
#line 56838 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56844 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56851 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56854 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56859 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56863 "isa_tms320.tcc"
> *DecodeOpFIX_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56869 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56873 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56880 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56883 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56887 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56890 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56894 "isa_tms320.tcc"
OpFIX_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56898 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56902 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56906 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56909 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56913 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56916 "isa_tms320.tcc"
)
{
#line 1976 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "FIX " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 56930 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56935 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56938 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56942 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56945 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56949 "isa_tms320.tcc"
OpFIX_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56953 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56957 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56961 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56964 "isa_tms320.tcc"
)
{
#line 2058 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Convert value into a float
		Register tmp_reg;
		tmp_reg.SetFromSinglePresicionFPFormat(src_value);

		// Perform computation
		bool overflow;
		uint32_t result = tmp_reg.Fix(overflow);

		// Set destination register
		cpu.SetReg(dst, result);

		// Update AR if necessary
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V, // or mask
		0, // carry
		overflow
		);
	}
#line 57015 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57021 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57024 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57028 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57031 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57036 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57040 "isa_tms320.tcc"
> *DecodeOpFIX_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57046 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57050 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 57057 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57060 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57064 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57067 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57071 "isa_tms320.tcc"
OpFIX_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 57075 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57079 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57083 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57086 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57090 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57093 "isa_tms320.tcc"
)
{
#line 1987 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "FIX " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 57106 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57111 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57118 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57121 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57125 "isa_tms320.tcc"
OpFIX_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 57129 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57133 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57137 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57140 "isa_tms320.tcc"
)
{
#line 2106 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Convert immediate into a float
		Register tmp_reg;
		tmp_reg.SetFromShortFPFormat(imm);

		// Perform computation
		bool overflow;
		uint32_t result = tmp_reg.Fix(overflow);

		// Set destination register
		cpu.SetReg(dst, result);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V, // or mask
		0, // carry
		overflow
		);
	}
#line 57171 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57177 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57180 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57184 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57187 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57196 "isa_tms320.tcc"
> *DecodeOpFIX_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57202 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57206 "isa_tms320.tcc"
	>(code, addr);
}

/* end of FIX (convert floating-point value to integer)
**********************************************************/
/**********************************************************
* FLOAT (convert integer to floating-point value)
* op FLOAT(0b000[3]:0b001011[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 57219 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57222 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57226 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57229 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57233 "isa_tms320.tcc"
OpFLOAT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 57237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57241 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57245 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57248 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57252 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57255 "isa_tms320.tcc"
)
{
#line 2147 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "FLOAT " << src_name << ", " << dst_name;
		return true;
	}
#line 57269 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57274 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57277 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57281 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57284 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57288 "isa_tms320.tcc"
OpFLOAT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 57292 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57296 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57300 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57303 "isa_tms320.tcc"
)
{
#line 2190 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.IsExtReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		Register& dst_reg = cpu.GetExtReg(dst);
		// Perform the conversion
		dst_reg.Float(src_value);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z // or mask
		);
	}
#line 57329 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57335 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57338 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57342 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57345 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57350 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57354 "isa_tms320.tcc"
> *DecodeOpFLOAT_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57360 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57364 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 57371 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57374 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57378 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57381 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57385 "isa_tms320.tcc"
OpFLOAT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 57389 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57393 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57397 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57400 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57404 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57407 "isa_tms320.tcc"
)
{
#line 2158 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "FLOAT " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 57421 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57426 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57429 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57433 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57436 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57440 "isa_tms320.tcc"
OpFLOAT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 57444 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57448 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57452 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57455 "isa_tms320.tcc"
)
{
#line 2213 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read destination operand
		Register& dst_reg = cpu.GetExtReg(dst);
		// Perform the conversion
		dst_reg.Float(src_value);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z // or mask
		);
	}
#line 57484 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57490 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57493 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57497 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57500 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57505 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57509 "isa_tms320.tcc"
> *DecodeOpFLOAT_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57515 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57519 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 57526 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57529 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57533 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57536 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57540 "isa_tms320.tcc"
OpFLOAT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 57544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57548 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57552 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57555 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57559 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57562 "isa_tms320.tcc"
)
{
#line 2169 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "FLOAT " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 57576 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57581 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57584 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57588 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57591 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57595 "isa_tms320.tcc"
OpFLOAT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 57599 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57603 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57607 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57610 "isa_tms320.tcc"
)
{
#line 2239 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read destination operand
		Register& dst_reg = cpu.GetExtReg(dst);
		// Perform the conversion
		dst_reg.Float((uint32_t)src_value);

		// Update AR if necessary
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z // or mask
		);
	}
#line 57653 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57659 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57662 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57666 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57669 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57674 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57678 "isa_tms320.tcc"
> *DecodeOpFLOAT_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57684 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57688 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 57695 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57698 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57702 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57705 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57709 "isa_tms320.tcc"
OpFLOAT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 57713 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57717 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57721 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57724 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57728 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57731 "isa_tms320.tcc"
)
{
#line 2180 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "FLOAT " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 57744 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57749 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57752 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57756 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57759 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57763 "isa_tms320.tcc"
OpFLOAT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 57767 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57771 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57775 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57778 "isa_tms320.tcc"
)
{
#line 2279 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.IsExtReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		Register& dst_reg = cpu.GetExtReg(dst);
		// Perform the conversion
		dst_reg.Float((uint32_t)imm);

		// Generate flags (into ST)
		cpu.GenFlags(
		dst_reg,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z // or mask
		);
	}
#line 57801 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57807 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57810 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57814 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57817 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57826 "isa_tms320.tcc"
> *DecodeOpFLOAT_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57832 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57836 "isa_tms320.tcc"
	>(code, addr);
}

/* end of FLOAT (convert integer to floating-point value)
**********************************************************/
/**********************************************************
* LSH (logical shift)
* op LSH(0b000[3]:0b010011[6]:g[2]:dst[5]:count[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 57849 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57852 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57856 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57859 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57863 "isa_tms320.tcc"
OpLSH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 57867 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57871 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57875 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57878 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57882 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57885 "isa_tms320.tcc"
)
{
#line 2312 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "LSH " << src_name << ", " << dst_name;
		return true;
	}
#line 57899 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57904 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57907 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57911 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57914 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57918 "isa_tms320.tcc"
OpLSH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 57922 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57926 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57930 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57933 "isa_tms320.tcc"
)
{
#line 2355 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t bit_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			bit_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, bit_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftRight(dst_value, count, bit_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			bit_out
			);
		}
	}
#line 58003 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58009 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58012 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58016 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58019 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58024 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58028 "isa_tms320.tcc"
> *DecodeOpLSH_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58034 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58038 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 58045 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58048 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58052 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58055 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58059 "isa_tms320.tcc"
OpLSH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58063 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58067 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58071 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58074 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58078 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58081 "isa_tms320.tcc"
)
{
#line 2323 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "LSH " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 58095 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58100 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58103 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58107 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58110 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58114 "isa_tms320.tcc"
OpLSH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58118 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58122 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58126 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58129 "isa_tms320.tcc"
)
{
#line 2422 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t bit_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			bit_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, bit_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftRight(dst_value, count, bit_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			bit_out
			);
		}
	}
#line 58202 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58208 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58211 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58215 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58218 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58223 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58227 "isa_tms320.tcc"
> *DecodeOpLSH_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58233 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58237 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 58244 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58247 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58254 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58258 "isa_tms320.tcc"
OpLSH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58262 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58266 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58270 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58273 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58277 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58280 "isa_tms320.tcc"
)
{
#line 2334 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "LSH " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 58294 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58299 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58302 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58306 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58309 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58313 "isa_tms320.tcc"
OpLSH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58317 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58321 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58325 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58328 "isa_tms320.tcc"
)
{
#line 2492 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// TODO: check if AR needs to be updated

		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t bit_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			bit_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, bit_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftRight(dst_value, count, bit_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			bit_out
			);
		}
	}
#line 58410 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58416 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58419 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58423 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58426 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58431 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58435 "isa_tms320.tcc"
> *DecodeOpLSH_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58441 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58445 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 58452 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58455 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58459 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58462 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58466 "isa_tms320.tcc"
OpLSH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 58470 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58474 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58478 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58481 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58485 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58488 "isa_tms320.tcc"
)
{
#line 2345 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "LSH " << imm << ", " << dst_name;
		return true;
	}
#line 58501 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58509 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58513 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58516 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58520 "isa_tms320.tcc"
OpLSH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 58524 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58528 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58532 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58535 "isa_tms320.tcc"
)
{
#line 2571 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Sign extend the 7 LSB of the immediate value to get the shift count
		int32_t count = imm; // imm has alread been sign extended by the decoder

		// Compute the result
		uint8_t bit_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			bit_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, bit_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftRight(dst_value, count, bit_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			bit_out
			);
		}
	}
#line 58602 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58608 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58611 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58615 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58618 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58627 "isa_tms320.tcc"
> *DecodeOpLSH_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58633 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58637 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LSH (logical shift)
**********************************************************/
/**********************************************************
* MPYF (multiply floating-point values)
* op MPYF(0b000[3]:0b010100[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 58650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58653 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58657 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58660 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58664 "isa_tms320.tcc"
OpMPYF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 58668 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58672 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58676 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58679 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58683 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58686 "isa_tms320.tcc"
)
{
#line 2648 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "MPYF " << src_name << ", " << dst_name;
		return true;
	}
#line 58700 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58705 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58708 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58712 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58715 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58719 "isa_tms320.tcc"
OpMPYF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 58723 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58727 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58731 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58734 "isa_tms320.tcc"
)
{
#line 2691 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 58741 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58747 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58750 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58754 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58757 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58762 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58766 "isa_tms320.tcc"
> *DecodeOpMPYF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58772 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58776 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 58783 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58786 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58790 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58793 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58797 "isa_tms320.tcc"
OpMPYF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58801 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58805 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58809 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58812 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58816 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58819 "isa_tms320.tcc"
)
{
#line 2659 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "MPYF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 58833 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58838 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58841 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58845 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58848 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58852 "isa_tms320.tcc"
OpMPYF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58856 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58860 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58864 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58867 "isa_tms320.tcc"
)
{
#line 2695 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 58874 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58880 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58883 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58887 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58890 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58895 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58899 "isa_tms320.tcc"
> *DecodeOpMPYF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58905 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58909 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 58916 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58919 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58923 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58926 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58930 "isa_tms320.tcc"
OpMPYF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58934 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58938 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58942 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58945 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58949 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58952 "isa_tms320.tcc"
)
{
#line 2670 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "MPYF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 58966 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58971 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58974 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58978 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58981 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58985 "isa_tms320.tcc"
OpMPYF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58989 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58993 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58997 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59000 "isa_tms320.tcc"
)
{
#line 2699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 59007 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59013 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59016 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59020 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59023 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59028 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59032 "isa_tms320.tcc"
> *DecodeOpMPYF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59038 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59042 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59049 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59052 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59056 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59059 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59063 "isa_tms320.tcc"
OpMPYF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 59067 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59071 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59075 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59078 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59082 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59085 "isa_tms320.tcc"
)
{
#line 2681 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "MPYF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 59098 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59106 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59110 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59113 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59117 "isa_tms320.tcc"
OpMPYF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 59121 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59125 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59129 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59132 "isa_tms320.tcc"
)
{
#line 2703 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 59139 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59152 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59155 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59160 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59164 "isa_tms320.tcc"
> *DecodeOpMPYF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59170 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59174 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF (multiply floating-point values)
**********************************************************/
/**********************************************************
* MPYI (multiply integers)
* op MPYI(0b000[3]:0b010101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 59187 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59190 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59194 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59197 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59201 "isa_tms320.tcc"
OpMPYI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 59205 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59209 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59213 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59216 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59220 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59223 "isa_tms320.tcc"
)
{
#line 2720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "MPYI " << src_name << ", " << dst_name;
		return true;
	}
#line 59237 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59242 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59245 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59249 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59252 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59256 "isa_tms320.tcc"
OpMPYI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 59260 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59264 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59268 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59271 "isa_tms320.tcc"
)
{
#line 2763 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand and sign extend value from 24 bits to 64 bits
		int64_t src_value = SignExtend((uint64_t)(cpu.GetReg(src) & 0xffffff), 24);

		// Read destination operand and sign extend value from 24 bits to 64 bits
		int64_t dst_value = SignExtend((uint64_t)(cpu.GetReg(dst) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src_value * dst_value;   // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 59318 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59324 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59327 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59331 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59334 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59339 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59343 "isa_tms320.tcc"
> *DecodeOpMPYI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59349 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59353 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59360 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59363 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59367 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59370 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59374 "isa_tms320.tcc"
OpMPYI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59382 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59386 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59389 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59393 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59396 "isa_tms320.tcc"
)
{
#line 2731 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "MPYI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 59410 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59422 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59425 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59429 "isa_tms320.tcc"
OpMPYI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59433 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59437 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59441 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59444 "isa_tms320.tcc"
)
{
#line 2807 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand and sign extend value from 24 bits to 64 bits
		int64_t dst_value = SignExtend((uint64_t)(cpu.GetReg(dst) & 0xffffff), 24);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src_value = SignExtend((uint64_t)(cpu.IntLoad(ea) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src_value * dst_value;   // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 59494 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59510 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59519 "isa_tms320.tcc"
> *DecodeOpMPYI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59525 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59529 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59536 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59539 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59543 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59546 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59550 "isa_tms320.tcc"
OpMPYI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59554 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59558 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59562 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59565 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59569 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59572 "isa_tms320.tcc"
)
{
#line 2742 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "MPYI " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 59586 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59591 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59594 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59598 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59601 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59605 "isa_tms320.tcc"
OpMPYI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59609 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59613 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59617 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59620 "isa_tms320.tcc"
)
{
#line 2854 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand and sign extend value from 24 bits to 64 bits
		int64_t dst_value = SignExtend((uint64_t)(cpu.GetReg(dst) & 0xffffff), 24);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory and sign extend value from 24 bits to 64 bits
		uint32_t src_value = SignExtend((uint64_t)(cpu.IntLoad(ea) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src_value * dst_value;   // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 59683 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59689 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59692 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59696 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59699 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59708 "isa_tms320.tcc"
> *DecodeOpMPYI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59714 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59718 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59725 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59728 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59732 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59735 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59739 "isa_tms320.tcc"
OpMPYI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 59743 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59747 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59751 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59754 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59758 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59761 "isa_tms320.tcc"
)
{
#line 2753 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "MPYI " << imm << ", " << dst_name;
		return true;
	}
#line 59774 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59779 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59782 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59786 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59789 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59793 "isa_tms320.tcc"
OpMPYI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 59797 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59801 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59805 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59808 "isa_tms320.tcc"
)
{
#line 2914 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand and sign extend value from 24 bits to 64 bits
		int64_t dst_value = SignExtend((uint64_t)(cpu.GetReg(dst) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		// Note: imm has been sign extended from 16 bits to 32 bits the decoder
		// Below, imm is sign extended from 32 bits to 64 bits
		int64_t result64 = imm * dst_value;         // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 59854 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59860 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59867 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59870 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59875 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59879 "isa_tms320.tcc"
> *DecodeOpMPYI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59885 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59889 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYI (multiply integers)
**********************************************************/
/**********************************************************
* NEGB (negate integer with borrow)
* op NEGB(0b000[3]:0b010110[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 59902 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59905 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59909 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59912 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59916 "isa_tms320.tcc"
OpNEGB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 59920 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59924 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59928 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59931 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59935 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59938 "isa_tms320.tcc"
)
{
#line 2970 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NEGB " << src_name << ", " << dst_name;
		return true;
	}
#line 59952 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59957 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59960 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59964 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59967 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59971 "isa_tms320.tcc"
OpNEGB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 59975 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59979 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59983 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59986 "isa_tms320.tcc"
)
{
#line 3013 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 60030 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60036 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60039 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60043 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60046 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60051 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60055 "isa_tms320.tcc"
> *DecodeOpNEGB_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60061 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60065 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60072 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60075 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60079 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60082 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60086 "isa_tms320.tcc"
OpNEGB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60094 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60098 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60101 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60105 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60108 "isa_tms320.tcc"
)
{
#line 2981 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "NEGB " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 60122 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60127 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60130 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60134 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60137 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60141 "isa_tms320.tcc"
OpNEGB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60145 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60149 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60153 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60156 "isa_tms320.tcc"
)
{
#line 3054 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 60203 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60219 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60228 "isa_tms320.tcc"
> *DecodeOpNEGB_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60234 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60238 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60245 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60248 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60252 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60255 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60259 "isa_tms320.tcc"
OpNEGB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60263 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60267 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60271 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60274 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60278 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60281 "isa_tms320.tcc"
)
{
#line 2992 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "NEGB " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 60295 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60300 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60303 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60307 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60310 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60314 "isa_tms320.tcc"
OpNEGB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60318 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60322 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60326 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60329 "isa_tms320.tcc"
)
{
#line 3098 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 60389 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60395 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60398 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60402 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60405 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60410 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60414 "isa_tms320.tcc"
> *DecodeOpNEGB_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60420 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60424 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60431 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60434 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60438 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60441 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60445 "isa_tms320.tcc"
OpNEGB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 60449 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60453 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60457 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60460 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60464 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60467 "isa_tms320.tcc"
)
{
#line 3003 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NEGB " << imm << ", " << dst_name;
		return true;
	}
#line 60480 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60495 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60499 "isa_tms320.tcc"
OpNEGB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 60503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60507 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60511 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60514 "isa_tms320.tcc"
)
{
#line 3155 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, imm, borrow_in);
		else
		Sub32(result, borrow_out, overflow, 0, imm, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 60555 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60561 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60564 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60568 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60571 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60580 "isa_tms320.tcc"
> *DecodeOpNEGB_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60586 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60590 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGB (negate integer with borrow)
**********************************************************/
/**********************************************************
* NEGF (negate floating-point value)
* op NEGF(0b000[3]:0b010111[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 60603 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60606 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60610 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60613 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60617 "isa_tms320.tcc"
OpNEGF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 60621 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60625 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60629 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60632 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60636 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60639 "isa_tms320.tcc"
)
{
#line 3206 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NEGF " << src_name << ", " << dst_name;
		return true;
	}
#line 60653 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60661 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60665 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60668 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60672 "isa_tms320.tcc"
OpNEGF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 60676 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60680 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60684 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60687 "isa_tms320.tcc"
)
{
#line 3249 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 60694 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60700 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60703 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60707 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60710 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60719 "isa_tms320.tcc"
> *DecodeOpNEGF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60725 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60729 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60736 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60739 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60743 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60746 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60750 "isa_tms320.tcc"
OpNEGF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60754 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60758 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60762 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60765 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60769 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60772 "isa_tms320.tcc"
)
{
#line 3217 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "NEGF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 60786 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60791 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60794 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60798 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60801 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60805 "isa_tms320.tcc"
OpNEGF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60809 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60813 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60817 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60820 "isa_tms320.tcc"
)
{
#line 3253 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 60827 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60833 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60836 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60843 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60852 "isa_tms320.tcc"
> *DecodeOpNEGF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60858 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60862 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60869 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60876 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60879 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60883 "isa_tms320.tcc"
OpNEGF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60887 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60891 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60895 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60898 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60902 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60905 "isa_tms320.tcc"
)
{
#line 3228 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "NEGF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 60919 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60924 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60927 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60931 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60934 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60938 "isa_tms320.tcc"
OpNEGF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60946 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60950 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60953 "isa_tms320.tcc"
)
{
#line 3257 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 60960 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60966 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60969 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60973 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60976 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60981 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60985 "isa_tms320.tcc"
> *DecodeOpNEGF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60991 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60995 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61002 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61005 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61009 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61012 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61016 "isa_tms320.tcc"
OpNEGF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 61020 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61024 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61028 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61031 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61035 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61038 "isa_tms320.tcc"
)
{
#line 3239 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NEGF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 61051 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61056 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61059 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61063 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61066 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61070 "isa_tms320.tcc"
OpNEGF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 61074 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61078 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61082 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61085 "isa_tms320.tcc"
)
{
#line 3261 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 61092 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61098 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61101 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61105 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61108 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61113 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61117 "isa_tms320.tcc"
> *DecodeOpNEGF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61123 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61127 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGF (negate floating-point value)
**********************************************************/
/**********************************************************
* NEGI (negate integer)
* op NEGI(0b000[3]:0b011000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 61140 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61143 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61150 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61154 "isa_tms320.tcc"
OpNEGI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 61158 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61162 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61166 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61169 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61173 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61176 "isa_tms320.tcc"
)
{
#line 3278 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NEGI " << src_name << ", " << dst_name;
		return true;
	}
#line 61190 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61205 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61209 "isa_tms320.tcc"
OpNEGI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 61213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61217 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61221 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61224 "isa_tms320.tcc"
)
{
#line 3321 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 61265 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61271 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61274 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61278 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61281 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61286 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61290 "isa_tms320.tcc"
> *DecodeOpNEGI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61296 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61300 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61307 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61310 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61314 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61317 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61321 "isa_tms320.tcc"
OpNEGI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61325 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61329 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61333 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61336 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61340 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61343 "isa_tms320.tcc"
)
{
#line 3289 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "NEGI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 61357 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61362 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61365 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61369 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61372 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61376 "isa_tms320.tcc"
OpNEGI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61384 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61388 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61391 "isa_tms320.tcc"
)
{
#line 3359 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 61435 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61441 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61444 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61448 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61451 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61456 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61460 "isa_tms320.tcc"
> *DecodeOpNEGI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61466 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61470 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61477 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61480 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61487 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61491 "isa_tms320.tcc"
OpNEGI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61495 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61499 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61503 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61506 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61510 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61513 "isa_tms320.tcc"
)
{
#line 3300 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "NEGI " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 61527 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61532 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61539 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61542 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61546 "isa_tms320.tcc"
OpNEGI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61550 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61554 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61558 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61561 "isa_tms320.tcc"
)
{
#line 3400 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 61618 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61624 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61627 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61631 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61634 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61639 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61643 "isa_tms320.tcc"
> *DecodeOpNEGI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61649 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61653 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61660 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61670 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61674 "isa_tms320.tcc"
OpNEGI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 61678 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61682 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61686 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61689 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61693 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61696 "isa_tms320.tcc"
)
{
#line 3311 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NEGI " << imm << ", " << dst_name;
		return true;
	}
#line 61709 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61714 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61717 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61721 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61724 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61728 "isa_tms320.tcc"
OpNEGI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 61732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61736 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61740 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61743 "isa_tms320.tcc"
)
{
#line 3454 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, imm, 0);
		else
		Sub32(result, borrow_out, overflow, 0, imm, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 61784 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61790 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61793 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61797 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61800 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61805 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61809 "isa_tms320.tcc"
> *DecodeOpNEGI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61815 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61819 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGI (negate integer)
**********************************************************/
/**********************************************************
* NORM (normalize floating-point value)
* op NORM(0b000[3]:0b011010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 61832 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61839 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61842 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61846 "isa_tms320.tcc"
OpNORM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 61850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61854 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61858 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61861 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61865 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61868 "isa_tms320.tcc"
)
{
#line 3505 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NORM " << src_name << ", " << dst_name;
		return true;
	}
#line 61882 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61887 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61890 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61894 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61897 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61901 "isa_tms320.tcc"
OpNORM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 61905 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61909 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61913 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61916 "isa_tms320.tcc"
)
{
#line 3548 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 61923 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61929 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61932 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61936 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61939 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61944 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61948 "isa_tms320.tcc"
> *DecodeOpNORM_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNORM_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61954 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61958 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61965 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61968 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61972 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61975 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61979 "isa_tms320.tcc"
OpNORM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61987 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61991 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61994 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61998 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62001 "isa_tms320.tcc"
)
{
#line 3516 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "NORM " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 62015 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62020 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62023 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62030 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62034 "isa_tms320.tcc"
OpNORM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62042 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62046 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62049 "isa_tms320.tcc"
)
{
#line 3552 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 62056 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62062 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62065 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62069 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62072 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62077 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62081 "isa_tms320.tcc"
> *DecodeOpNORM_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNORM_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62087 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62091 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62098 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62101 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62105 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62108 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62112 "isa_tms320.tcc"
OpNORM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62120 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62124 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62127 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62131 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62134 "isa_tms320.tcc"
)
{
#line 3527 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "NORM " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 62148 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62153 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62156 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62160 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62163 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62167 "isa_tms320.tcc"
OpNORM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62175 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62179 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62182 "isa_tms320.tcc"
)
{
#line 3556 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 62189 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62205 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62210 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62214 "isa_tms320.tcc"
> *DecodeOpNORM_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNORM_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62220 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62224 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62231 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62234 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62238 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62241 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62245 "isa_tms320.tcc"
OpNORM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 62249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62253 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62257 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62260 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62264 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62267 "isa_tms320.tcc"
)
{
#line 3538 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NORM " << imm << ", " << dst_name;
		return true;
	}
#line 62280 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62285 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62292 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62295 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62299 "isa_tms320.tcc"
OpNORM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 62303 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62307 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62311 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62314 "isa_tms320.tcc"
)
{
#line 3560 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 62321 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62327 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62330 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62334 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62337 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62342 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62346 "isa_tms320.tcc"
> *DecodeOpNORM_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNORM_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62352 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62356 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NORM (normalize floating-point value)
**********************************************************/
/**********************************************************
* NOT (bitwise-logical complement)
* op NOT(0b000[3]:0b011011[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 62369 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62372 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62379 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62383 "isa_tms320.tcc"
OpNOT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 62387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62391 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62395 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62398 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62402 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62405 "isa_tms320.tcc"
)
{
#line 3577 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NOT " << src_name << ", " << dst_name;
		return true;
	}
#line 62419 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62424 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62427 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62431 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62434 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62438 "isa_tms320.tcc"
OpNOT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 62442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62446 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62450 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62453 "isa_tms320.tcc"
)
{
#line 3620 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Compute the result
		uint32_t result = ~src_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 62484 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62490 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62493 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62497 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62500 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62505 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62509 "isa_tms320.tcc"
> *DecodeOpNOT_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62515 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62519 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62526 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62529 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62533 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62536 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62540 "isa_tms320.tcc"
OpNOT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62548 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62552 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62555 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62559 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62562 "isa_tms320.tcc"
)
{
#line 3588 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "NOT " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 62576 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62581 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62584 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62588 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62591 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62595 "isa_tms320.tcc"
OpNOT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62599 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62603 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62607 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62610 "isa_tms320.tcc"
)
{
#line 3648 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = ~src_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 62644 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62653 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62657 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62660 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62665 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62669 "isa_tms320.tcc"
> *DecodeOpNOT_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62675 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62679 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62686 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62689 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62693 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62696 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62700 "isa_tms320.tcc"
OpNOT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62708 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62712 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62715 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62719 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62722 "isa_tms320.tcc"
)
{
#line 3599 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "NOT " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 62736 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62741 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62748 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62751 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62755 "isa_tms320.tcc"
OpNOT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62759 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62763 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62767 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62770 "isa_tms320.tcc"
)
{
#line 3679 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = ~src_value;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 62817 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62823 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62826 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62830 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62833 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62838 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62842 "isa_tms320.tcc"
> *DecodeOpNOT_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62848 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62852 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62859 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62862 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62866 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62869 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62873 "isa_tms320.tcc"
OpNOT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 62877 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62881 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62885 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62888 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62892 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62895 "isa_tms320.tcc"
)
{
#line 3610 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NOT " << imm << ", " << dst_name;
		return true;
	}
#line 62908 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62913 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62916 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62920 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62923 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62927 "isa_tms320.tcc"
OpNOT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 62931 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62935 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62939 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62942 "isa_tms320.tcc"
)
{
#line 3723 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = ~imm;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 62973 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62979 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62982 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62986 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62989 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62994 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62998 "isa_tms320.tcc"
> *DecodeOpNOT_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63004 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63008 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NOT (bitwise-logical complement)
**********************************************************/
/**********************************************************
* OR (bitwise-logical OR)
* op OR(0b000[3]:0b100000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 63021 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63024 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63028 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63031 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63035 "isa_tms320.tcc"
OpOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 63039 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63043 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63047 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63050 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63054 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63057 "isa_tms320.tcc"
)
{
#line 3764 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "OR " << src_name << ", " << dst_name;
		return true;
	}
#line 63071 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63076 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63079 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63083 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63086 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63090 "isa_tms320.tcc"
OpOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 63094 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63098 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63102 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63105 "isa_tms320.tcc"
)
{
#line 3807 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = src_value | dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 63139 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63152 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63155 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63160 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63164 "isa_tms320.tcc"
> *DecodeOpOR_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63170 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63174 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63181 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63184 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63188 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63191 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63195 "isa_tms320.tcc"
OpOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63199 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63203 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63207 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63210 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63214 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63217 "isa_tms320.tcc"
)
{
#line 3775 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "OR " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 63231 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63236 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63239 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63243 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63246 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63250 "isa_tms320.tcc"
OpOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63258 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63262 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63265 "isa_tms320.tcc"
)
{
#line 3838 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value | dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 63302 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63308 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63311 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63315 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63318 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63323 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63327 "isa_tms320.tcc"
> *DecodeOpOR_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63333 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63337 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63347 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63354 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63358 "isa_tms320.tcc"
OpOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63362 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63366 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63370 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63373 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63377 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63380 "isa_tms320.tcc"
)
{
#line 3786 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "OR " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 63394 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63399 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63402 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63406 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63409 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63413 "isa_tms320.tcc"
OpOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63417 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63421 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63425 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63428 "isa_tms320.tcc"
)
{
#line 3872 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value | dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 63478 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63491 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63494 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63499 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63503 "isa_tms320.tcc"
> *DecodeOpOR_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63509 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63513 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63530 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63534 "isa_tms320.tcc"
OpOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 63538 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63542 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63546 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63549 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63553 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63556 "isa_tms320.tcc"
)
{
#line 3797 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "OR " << imm << ", " << dst_name;
		return true;
	}
#line 63569 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63574 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63577 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63581 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63584 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63588 "isa_tms320.tcc"
OpOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 63592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63596 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63600 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63603 "isa_tms320.tcc"
)
{
#line 3919 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = imm | dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 63634 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63647 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63650 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63655 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63659 "isa_tms320.tcc"
> *DecodeOpOR_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63665 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63669 "isa_tms320.tcc"
	>(code, addr);
}

/* end of OR (bitwise-logical OR)
**********************************************************/
/**********************************************************
* RND (round floating-point value)
* op RND(0b000[3]:0b100010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 63682 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63685 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63689 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63692 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63696 "isa_tms320.tcc"
OpRND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 63700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63704 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63708 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63711 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63715 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63718 "isa_tms320.tcc"
)
{
#line 3960 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "RND " << src_name << ", " << dst_name;
		return true;
	}
#line 63732 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63737 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63740 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63744 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63747 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63751 "isa_tms320.tcc"
OpRND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 63755 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63759 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63763 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63766 "isa_tms320.tcc"
)
{
#line 4003 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 63773 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63779 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63782 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63786 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63789 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63794 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63798 "isa_tms320.tcc"
> *DecodeOpRND_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRND_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63804 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63808 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63815 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63818 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63822 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63825 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63829 "isa_tms320.tcc"
OpRND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63833 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63837 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63841 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63844 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63848 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63851 "isa_tms320.tcc"
)
{
#line 3971 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "RND " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 63865 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63870 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63873 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63877 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63880 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63884 "isa_tms320.tcc"
OpRND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63888 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63892 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63896 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63899 "isa_tms320.tcc"
)
{
#line 4007 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 63906 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63912 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63915 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63919 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63922 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63927 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63931 "isa_tms320.tcc"
> *DecodeOpRND_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRND_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63937 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63941 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63948 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63951 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63955 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63958 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63962 "isa_tms320.tcc"
OpRND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63966 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63970 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63974 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63977 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63981 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63984 "isa_tms320.tcc"
)
{
#line 3982 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "RND " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 63998 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64003 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64006 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64010 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64013 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64017 "isa_tms320.tcc"
OpRND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64021 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64025 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64029 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64032 "isa_tms320.tcc"
)
{
#line 4011 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 64039 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64045 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64048 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64052 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64055 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64060 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64064 "isa_tms320.tcc"
> *DecodeOpRND_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRND_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64070 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64074 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64081 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64084 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64088 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64091 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64095 "isa_tms320.tcc"
OpRND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 64099 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64103 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64107 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64110 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64114 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64117 "isa_tms320.tcc"
)
{
#line 3993 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "RND " << imm << ", " << dst_name;
		return true;
	}
#line 64130 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64135 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64138 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64142 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64145 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64149 "isa_tms320.tcc"
OpRND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 64153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64157 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64161 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64164 "isa_tms320.tcc"
)
{
#line 4015 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 64171 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64177 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64180 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64184 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64187 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64196 "isa_tms320.tcc"
> *DecodeOpRND_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRND_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64202 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64206 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RND (round floating-point value)
**********************************************************/
/**********************************************************
* ROL (rotate left)
* op ROL(0b000[3]:0b100011[6]:0b11[2]:dst[5]:0b0000000000000001[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 64219 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64222 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64226 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64229 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64233 "isa_tms320.tcc"
OpROL<
#line 45 "isa/tms320.isa"
CONFIG
#line 64237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64241 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64245 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64248 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64252 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64255 "isa_tms320.tcc"
)
{
#line 4029 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ROL " << dst_name;
		return true;
	}
#line 64268 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64273 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64276 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64283 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64287 "isa_tms320.tcc"
OpROL<
#line 45 "isa/tms320.isa"
CONFIG
#line 64291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64295 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64299 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64302 "isa_tms320.tcc"
)
{
#line 4039 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint8_t carry_out;
		uint32_t result = RotateLeft(dst_value, 1, carry_out);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 64335 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64341 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64344 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64348 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64351 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64356 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64360 "isa_tms320.tcc"
> *DecodeOpROL(CodeType code, typename CONFIG::address_t addr)
{
	return new OpROL<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64366 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64370 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ROL (rotate left)
**********************************************************/
/**********************************************************
* ROLC (rotate left through carry)
* op ROLC(0b000[3]:0b100100[6]:0b11[2]:dst[5]:0b0000000000000001[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 64383 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64386 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64390 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64393 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64397 "isa_tms320.tcc"
OpROLC<
#line 45 "isa/tms320.isa"
CONFIG
#line 64401 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64405 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64409 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64412 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64416 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64419 "isa_tms320.tcc"
)
{
#line 4079 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ROLC " << dst_name;
		return true;
	}
#line 64432 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64437 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64440 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64444 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64447 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64451 "isa_tms320.tcc"
OpROLC<
#line 45 "isa/tms320.isa"
CONFIG
#line 64455 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64459 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64463 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64466 "isa_tms320.tcc"
)
{
#line 4089 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint8_t carry_out;
		uint32_t result = RotateLeft(dst_value, 1, carry_in, carry_out);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 64502 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64508 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64511 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64515 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64518 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64527 "isa_tms320.tcc"
> *DecodeOpROLC(CodeType code, typename CONFIG::address_t addr)
{
	return new OpROLC<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64533 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64537 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ROLC (rotate left through carry)
**********************************************************/
/**********************************************************
* ROR (rotate right)
* op ROR(0b000[3]:0b100101[6]:0b11[2]:dst[5]:0b1111111111111111[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 64550 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64553 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64557 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64560 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64564 "isa_tms320.tcc"
OpROR<
#line 45 "isa/tms320.isa"
CONFIG
#line 64568 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64572 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64576 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64579 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64583 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64586 "isa_tms320.tcc"
)
{
#line 4132 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ROR " << dst_name;
		return true;
	}
#line 64599 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64604 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64607 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64611 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64614 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64618 "isa_tms320.tcc"
OpROR<
#line 45 "isa/tms320.isa"
CONFIG
#line 64622 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64626 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64630 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64633 "isa_tms320.tcc"
)
{
#line 4142 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint8_t carry_out;
		uint32_t result = RotateRight(dst_value, 1, carry_out);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 64666 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64672 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64675 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64679 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64682 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64687 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64691 "isa_tms320.tcc"
> *DecodeOpROR(CodeType code, typename CONFIG::address_t addr)
{
	return new OpROR<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64697 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64701 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ROR (rotate right)
**********************************************************/
/**********************************************************
* RORC (rotate right through carry)
* op RORC(0b000[3]:0b100110[6]:0b11[2]:dst[5]:0b1111111111111111[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 64714 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64717 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64721 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64724 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64728 "isa_tms320.tcc"
OpRORC<
#line 45 "isa/tms320.isa"
CONFIG
#line 64732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64736 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64740 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64743 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64747 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64750 "isa_tms320.tcc"
)
{
#line 4182 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "RORC " << dst_name;
		return true;
	}
#line 64763 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64768 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64771 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64775 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64778 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64782 "isa_tms320.tcc"
OpRORC<
#line 45 "isa/tms320.isa"
CONFIG
#line 64786 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64790 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64794 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64797 "isa_tms320.tcc"
)
{
#line 4192 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint8_t carry_out;
		uint32_t result = RotateRight(dst_value, 1, carry_in, carry_out);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 64833 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64839 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64842 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64846 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64849 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64854 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64858 "isa_tms320.tcc"
> *DecodeOpRORC(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRORC<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64864 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64868 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RORC (rotate right through carry)
**********************************************************/
/**********************************************************
* SUBB (subtract integers with borrow)
* op SUBB(0b000[3]:0b101101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 64881 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64884 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64888 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64891 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64895 "isa_tms320.tcc"
OpSUBB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 64899 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64903 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64907 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64910 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64914 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64917 "isa_tms320.tcc"
)
{
#line 4238 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBB " << src_name << ", " << dst_name;
		return true;
	}
#line 64931 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64936 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64939 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64943 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64946 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64950 "isa_tms320.tcc"
OpSUBB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 64954 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64958 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64962 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64965 "isa_tms320.tcc"
)
{
#line 4282 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 65012 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65018 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65021 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65025 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65028 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65033 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65037 "isa_tms320.tcc"
> *DecodeOpSUBB_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65043 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65047 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65054 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65057 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65061 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65064 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 65068 "isa_tms320.tcc"
OpSUBB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65072 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65076 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65080 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65083 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65087 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65090 "isa_tms320.tcc"
)
{
#line 4249 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "SUBB " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 65104 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65109 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65112 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65116 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65119 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65123 "isa_tms320.tcc"
OpSUBB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65127 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65131 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65135 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65138 "isa_tms320.tcc"
)
{
#line 4326 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 65188 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65194 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65201 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65204 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65209 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65213 "isa_tms320.tcc"
> *DecodeOpSUBB_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65219 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65223 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65233 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65237 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65240 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 65244 "isa_tms320.tcc"
OpSUBB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65248 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65252 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65256 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65259 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65263 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65266 "isa_tms320.tcc"
)
{
#line 4260 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBB " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 65281 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65286 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65289 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65293 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65296 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65300 "isa_tms320.tcc"
OpSUBB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65304 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65308 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65312 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65315 "isa_tms320.tcc"
)
{
#line 4373 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 65378 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65384 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65391 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65394 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65399 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65403 "isa_tms320.tcc"
> *DecodeOpSUBB_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65409 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65413 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65420 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65423 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65427 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65430 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 65434 "isa_tms320.tcc"
OpSUBB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 65438 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65442 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65446 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65449 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65453 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65456 "isa_tms320.tcc"
)
{
#line 4272 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBB " << imm << ", " << dst_name;
		return true;
	}
#line 65469 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65474 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65477 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65481 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65484 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65488 "isa_tms320.tcc"
OpSUBB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 65492 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65496 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65500 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65503 "isa_tms320.tcc"
)
{
#line 4433 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, imm, borrow_in);
		else
		Sub32(result, borrow_out, overflow, dst_value, imm, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 65547 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65553 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65556 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65560 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65563 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65568 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65572 "isa_tms320.tcc"
> *DecodeOpSUBB_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65578 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65582 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBB (subtract integers with borrow)
**********************************************************/
/**********************************************************
* SUBC (subtract integers conditionally)
* op SUBC(0b000[3]:0b101110[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 65595 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65598 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65602 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65605 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 65609 "isa_tms320.tcc"
OpSUBC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 65613 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65617 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65621 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65624 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65628 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65631 "isa_tms320.tcc"
)
{
#line 4487 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBC " << src_name << ", " << dst_name;
		return true;
	}
#line 65645 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65653 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65657 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65660 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65664 "isa_tms320.tcc"
OpSUBC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 65668 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65672 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65676 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65679 "isa_tms320.tcc"
)
{
#line 4530 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		int32_t substract_result = dst_value - src_value;
		uint32_t result;
		if (substract_result >= 0)
		result = (substract_result << 1) | 1;
		else
		result = dst_value << 1;

		// Write back result
		cpu.SetReg(dst, result);
	}
#line 65707 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65713 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65716 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65720 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65723 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65728 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65732 "isa_tms320.tcc"
> *DecodeOpSUBC_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBC_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65738 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65742 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65749 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65752 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65756 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65759 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 65763 "isa_tms320.tcc"
OpSUBC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65767 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65771 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65775 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65778 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65782 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65785 "isa_tms320.tcc"
)
{
#line 4498 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "SUBC " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 65799 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65804 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65807 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65811 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65814 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65818 "isa_tms320.tcc"
OpSUBC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65826 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65830 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65833 "isa_tms320.tcc"
)
{
#line 4555 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		int32_t substract_result = dst_value - src_value;
		uint32_t result;
		if (substract_result >= 0)
		result = (substract_result << 1) | 1;
		else
		result = dst_value << 1;

		// Write back result
		cpu.SetReg(dst, result);
	}
#line 65864 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65870 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65873 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65877 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65880 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65885 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65889 "isa_tms320.tcc"
> *DecodeOpSUBC_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBC_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65895 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65899 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65906 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65909 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65913 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65916 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 65920 "isa_tms320.tcc"
OpSUBC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65924 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65928 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65932 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65935 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65939 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65942 "isa_tms320.tcc"
)
{
#line 4509 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBC " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 65956 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65961 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65968 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65971 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65975 "isa_tms320.tcc"
OpSUBC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65979 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65983 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65987 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65990 "isa_tms320.tcc"
)
{
#line 4583 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		int32_t substract_result = dst_value - src_value;
		uint32_t result;
		if (substract_result >= 0)
		result = (substract_result << 1) | 1;
		else
		result = dst_value << 1;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}
	}
#line 66034 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66040 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66043 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66047 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66050 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66055 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66059 "isa_tms320.tcc"
> *DecodeOpSUBC_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBC_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66065 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66069 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66076 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66079 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66083 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66086 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66090 "isa_tms320.tcc"
OpSUBC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 66094 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66098 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66102 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66105 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66109 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66112 "isa_tms320.tcc"
)
{
#line 4520 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBC " << imm << ", " << dst_name;
		return true;
	}
#line 66125 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66130 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66140 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66144 "isa_tms320.tcc"
OpSUBC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 66148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66152 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66156 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66159 "isa_tms320.tcc"
)
{
#line 4624 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		int32_t substract_result = dst_value - imm;
		uint32_t result;
		if (substract_result >= 0)
		result = (substract_result << 1) | 1;
		else
		result = dst_value << 1;

		// Write back result
		cpu.SetReg(dst, result);
	}
#line 66184 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66190 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66193 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66197 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66200 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66205 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66209 "isa_tms320.tcc"
> *DecodeOpSUBC_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBC_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66215 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66219 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBC (subtract integers conditionally)
**********************************************************/
/**********************************************************
* SUBF (subtract floating-point values)
* op SUBF(0b000[3]:0b101111[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 66232 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66235 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66239 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66242 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66246 "isa_tms320.tcc"
OpSUBF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66250 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66254 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66258 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66261 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66265 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66268 "isa_tms320.tcc"
)
{
#line 4659 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBF " << src_name << ", " << dst_name;
		return true;
	}
#line 66282 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66287 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66290 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66294 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66297 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66301 "isa_tms320.tcc"
OpSUBF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66305 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66309 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66313 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66316 "isa_tms320.tcc"
)
{
#line 4702 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 66323 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66329 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66332 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66336 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66339 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66344 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66348 "isa_tms320.tcc"
> *DecodeOpSUBF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66354 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66358 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66365 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66368 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66372 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66375 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66379 "isa_tms320.tcc"
OpSUBF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66387 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66391 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66394 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66398 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66401 "isa_tms320.tcc"
)
{
#line 4670 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "SUBF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 66415 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66420 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66423 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66427 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66430 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66434 "isa_tms320.tcc"
OpSUBF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66438 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66442 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66446 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66449 "isa_tms320.tcc"
)
{
#line 4706 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 66456 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66462 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66472 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66477 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66481 "isa_tms320.tcc"
> *DecodeOpSUBF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66487 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66491 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66498 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66501 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66505 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66508 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66512 "isa_tms320.tcc"
OpSUBF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66520 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66524 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66527 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66531 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66534 "isa_tms320.tcc"
)
{
#line 4681 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 66548 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66553 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66556 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66560 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66563 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66567 "isa_tms320.tcc"
OpSUBF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66571 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66575 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66579 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66582 "isa_tms320.tcc"
)
{
#line 4710 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 66589 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66595 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66598 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66602 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66605 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66610 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66614 "isa_tms320.tcc"
> *DecodeOpSUBF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66620 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66624 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66631 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66634 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66638 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66641 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66645 "isa_tms320.tcc"
OpSUBF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 66649 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66653 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66657 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66660 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66664 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66667 "isa_tms320.tcc"
)
{
#line 4692 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 66680 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66685 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66688 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66692 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66695 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66699 "isa_tms320.tcc"
OpSUBF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 66703 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66707 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66711 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66714 "isa_tms320.tcc"
)
{
#line 4714 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 66721 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66727 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66734 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66737 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66742 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66746 "isa_tms320.tcc"
> *DecodeOpSUBF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66752 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66756 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBF (subtract floating-point values)
**********************************************************/
/**********************************************************
* SUBI (subtract integer)
* op SUBI(0b000[3]:0b110000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 66769 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66772 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66776 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66779 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66783 "isa_tms320.tcc"
OpSUBI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66787 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66791 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66795 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66798 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66802 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66805 "isa_tms320.tcc"
)
{
#line 4731 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBI " << src_name << ", " << dst_name;
		return true;
	}
#line 66819 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66824 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66827 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66831 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66834 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66838 "isa_tms320.tcc"
OpSUBI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66842 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66846 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66850 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66853 "isa_tms320.tcc"
)
{
#line 4775 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 66897 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66903 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66906 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66910 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66913 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66918 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66922 "isa_tms320.tcc"
> *DecodeOpSUBI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66928 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66932 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66939 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66946 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66949 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66953 "isa_tms320.tcc"
OpSUBI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66957 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66961 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66965 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66968 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66972 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66975 "isa_tms320.tcc"
)
{
#line 4742 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "SUBI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 66989 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66994 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66997 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67001 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67004 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67008 "isa_tms320.tcc"
OpSUBI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67012 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67016 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67020 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67023 "isa_tms320.tcc"
)
{
#line 4816 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 67070 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67076 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67079 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67083 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67086 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67091 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67095 "isa_tms320.tcc"
> *DecodeOpSUBI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67101 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67105 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67112 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67115 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67119 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67122 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67126 "isa_tms320.tcc"
OpSUBI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67130 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67134 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67138 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67141 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67145 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 67148 "isa_tms320.tcc"
)
{
#line 4753 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBI " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 67163 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 67168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67178 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67182 "isa_tms320.tcc"
OpSUBI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67186 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67190 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67194 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67197 "isa_tms320.tcc"
)
{
#line 4860 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 67257 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67263 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67266 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67270 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67273 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67278 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67282 "isa_tms320.tcc"
> *DecodeOpSUBI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67288 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67292 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67299 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67302 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67306 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67309 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67313 "isa_tms320.tcc"
OpSUBI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 67317 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67321 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67325 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67328 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67332 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 67335 "isa_tms320.tcc"
)
{
#line 4765 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBI " << imm << ", " << dst_name;
		return true;
	}
#line 67348 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 67353 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67356 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67360 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67363 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67367 "isa_tms320.tcc"
OpSUBI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 67371 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67375 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67379 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67382 "isa_tms320.tcc"
)
{
#line 4917 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, imm, 0);
		else
		Sub32(result, borrow_out, overflow, dst_value, imm, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 67423 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67429 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67432 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67436 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67439 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67444 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67448 "isa_tms320.tcc"
> *DecodeOpSUBI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67454 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67458 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBI (subtract integer)
**********************************************************/
/**********************************************************
* SUBRB (subtract reverse integer with borrow)
* op SUBRB(0b000[3]:0b110001[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 67471 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67474 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67478 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67481 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67485 "isa_tms320.tcc"
OpSUBRB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67489 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67493 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67497 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67500 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67504 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 67507 "isa_tms320.tcc"
)
{
#line 4968 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBRB " << src_name << ", " << dst_name;
		return true;
	}
#line 67521 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 67526 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67529 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67533 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67536 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67540 "isa_tms320.tcc"
OpSUBRB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67548 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67552 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67555 "isa_tms320.tcc"
)
{
#line 5012 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 67602 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67608 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67611 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67615 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67618 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67627 "isa_tms320.tcc"
> *DecodeOpSUBRB_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67633 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67637 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67644 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67647 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67654 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67658 "isa_tms320.tcc"
OpSUBRB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67662 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67666 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67670 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67673 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67677 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 67680 "isa_tms320.tcc"
)
{
#line 4979 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "SUBRB " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 67694 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 67699 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67702 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67706 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67709 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67713 "isa_tms320.tcc"
OpSUBRB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67717 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67721 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67725 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67728 "isa_tms320.tcc"
)
{
#line 5056 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 67778 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67784 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67787 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67791 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67794 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67799 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67803 "isa_tms320.tcc"
> *DecodeOpSUBRB_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67809 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67813 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67820 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67827 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67830 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67834 "isa_tms320.tcc"
OpSUBRB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67838 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67842 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67846 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67849 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67853 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 67856 "isa_tms320.tcc"
)
{
#line 4990 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBRB " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 67871 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 67876 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67879 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67883 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67886 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67890 "isa_tms320.tcc"
OpSUBRB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67898 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67902 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67905 "isa_tms320.tcc"
)
{
#line 5103 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 67968 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67974 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67977 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67981 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67984 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67989 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67993 "isa_tms320.tcc"
> *DecodeOpSUBRB_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67999 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68003 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68010 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68013 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68017 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68020 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68024 "isa_tms320.tcc"
OpSUBRB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 68028 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68032 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68036 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68039 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68043 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68046 "isa_tms320.tcc"
)
{
#line 5002 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBRB " << imm << ", " << dst_name;
		return true;
	}
#line 68059 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68064 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68067 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68071 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68074 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68078 "isa_tms320.tcc"
OpSUBRB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 68082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68086 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68090 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68093 "isa_tms320.tcc"
)
{
#line 5163 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, imm, dst_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, imm, dst_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 68137 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68143 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68153 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68158 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68162 "isa_tms320.tcc"
> *DecodeOpSUBRB_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68168 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68172 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBRB (subtract reverse integer with borrow)
**********************************************************/
/**********************************************************
* SUBRF (subtract reverse floating-point value)
* op SUBRF(0b000[3]:0b110010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 68185 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68188 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68192 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68195 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68199 "isa_tms320.tcc"
OpSUBRF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68203 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68207 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68211 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68214 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68218 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68221 "isa_tms320.tcc"
)
{
#line 5217 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBRF " << src_name << ", " << dst_name;
		return true;
	}
#line 68235 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68240 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68247 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68250 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68254 "isa_tms320.tcc"
OpSUBRF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68258 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68262 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68266 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68269 "isa_tms320.tcc"
)
{
#line 5260 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 68276 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68282 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68285 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68289 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68292 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68297 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68301 "isa_tms320.tcc"
> *DecodeOpSUBRF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68307 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68311 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68318 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68321 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68325 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68328 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68332 "isa_tms320.tcc"
OpSUBRF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68336 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68340 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68344 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68347 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68351 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68354 "isa_tms320.tcc"
)
{
#line 5228 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "SUBRF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 68368 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68373 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68380 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68383 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68387 "isa_tms320.tcc"
OpSUBRF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68395 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68399 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68402 "isa_tms320.tcc"
)
{
#line 5264 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 68409 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68422 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68425 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68434 "isa_tms320.tcc"
> *DecodeOpSUBRF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68440 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68444 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68458 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68461 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68465 "isa_tms320.tcc"
OpSUBRF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68469 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68473 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68477 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68480 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68484 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68487 "isa_tms320.tcc"
)
{
#line 5239 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBRF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 68501 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68509 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68513 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68516 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68520 "isa_tms320.tcc"
OpSUBRF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68524 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68528 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68532 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68535 "isa_tms320.tcc"
)
{
#line 5268 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 68542 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68548 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68551 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68555 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68558 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68563 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68567 "isa_tms320.tcc"
> *DecodeOpSUBRF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68573 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68577 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68584 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68587 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68591 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68594 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68598 "isa_tms320.tcc"
OpSUBRF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 68602 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68606 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68610 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68613 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68617 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68620 "isa_tms320.tcc"
)
{
#line 5250 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBRF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 68633 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68638 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68641 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68645 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68648 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68652 "isa_tms320.tcc"
OpSUBRF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 68656 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68660 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68664 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68667 "isa_tms320.tcc"
)
{
#line 5272 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 68674 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68680 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68683 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68687 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68690 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68695 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68699 "isa_tms320.tcc"
> *DecodeOpSUBRF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68705 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68709 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBRF (subtract reverse floating-point value)
**********************************************************/
/**********************************************************
* SUBRI (subtract reverse integer)
* op SUBRI(0b000[3]:0b110011[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 68722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68725 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68732 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68736 "isa_tms320.tcc"
OpSUBRI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68740 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68744 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68748 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68751 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68755 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68758 "isa_tms320.tcc"
)
{
#line 5289 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBRI " << src_name << ", " << dst_name;
		return true;
	}
#line 68772 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68777 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68780 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68784 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68787 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68791 "isa_tms320.tcc"
OpSUBRI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68795 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68799 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68803 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68806 "isa_tms320.tcc"
)
{
#line 5333 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, 0);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 68850 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68856 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68859 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68863 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68866 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68871 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68875 "isa_tms320.tcc"
> *DecodeOpSUBRI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68881 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68885 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68892 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68895 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68899 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68902 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68906 "isa_tms320.tcc"
OpSUBRI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68910 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68914 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68918 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68921 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68925 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68928 "isa_tms320.tcc"
)
{
#line 5300 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "SUBRI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 68942 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68947 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68950 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68954 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68957 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68961 "isa_tms320.tcc"
OpSUBRI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68965 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68969 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68973 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68976 "isa_tms320.tcc"
)
{
#line 5374 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, 0);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 69023 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69029 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69032 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69036 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69039 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69048 "isa_tms320.tcc"
> *DecodeOpSUBRI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69054 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69058 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69065 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69068 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69072 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69075 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69079 "isa_tms320.tcc"
OpSUBRI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69087 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69091 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69094 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69098 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69101 "isa_tms320.tcc"
)
{
#line 5311 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBRI " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 69116 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69121 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69124 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69128 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69131 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69135 "isa_tms320.tcc"
OpSUBRI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69139 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69143 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69147 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69150 "isa_tms320.tcc"
)
{
#line 5418 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, 0);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 69204 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69210 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69217 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69220 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69225 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69229 "isa_tms320.tcc"
> *DecodeOpSUBRI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69235 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69239 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69246 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69253 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69256 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69260 "isa_tms320.tcc"
OpSUBRI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 69264 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69268 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69272 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69275 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69279 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69282 "isa_tms320.tcc"
)
{
#line 5323 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBRI " << imm << ", " << dst_name;
		return true;
	}
#line 69295 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69300 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69303 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69307 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69310 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69314 "isa_tms320.tcc"
OpSUBRI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 69318 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69322 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69326 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69329 "isa_tms320.tcc"
)
{
#line 5469 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, imm, dst_value, 0);
		else
		Sub32(result, borrow_out, overflow, imm, dst_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 69370 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69383 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69386 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69395 "isa_tms320.tcc"
> *DecodeOpSUBRI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69401 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69405 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBRI (subtract reverse integer)
**********************************************************/
/**********************************************************
* TSTB (test bit fields)
* op TSTB(0b000[3]:0b110100[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 69418 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69421 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69425 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69428 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69432 "isa_tms320.tcc"
OpTSTB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 69436 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69440 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69444 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69447 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69451 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69454 "isa_tms320.tcc"
)
{
#line 5520 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "TSTB " << src_name << ", " << dst_name;
		return true;
	}
#line 69468 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69473 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69476 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69480 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69483 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69487 "isa_tms320.tcc"
OpTSTB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 69491 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69495 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69499 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69502 "isa_tms320.tcc"
)
{
#line 5563 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 69529 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69535 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69538 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69542 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69545 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69550 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69554 "isa_tms320.tcc"
> *DecodeOpTSTB_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69560 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69564 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69571 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69574 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69578 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69581 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69585 "isa_tms320.tcc"
OpTSTB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69589 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69593 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69597 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69600 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69604 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69607 "isa_tms320.tcc"
)
{
#line 5531 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "TSTB " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 69621 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69626 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69629 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69633 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69636 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69640 "isa_tms320.tcc"
OpTSTB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69648 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69652 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69655 "isa_tms320.tcc"
)
{
#line 5587 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 69685 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69691 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69694 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69698 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69701 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69706 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69710 "isa_tms320.tcc"
> *DecodeOpTSTB_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69716 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69720 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69727 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69734 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69737 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69741 "isa_tms320.tcc"
OpTSTB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69745 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69749 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69753 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69756 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69760 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69763 "isa_tms320.tcc"
)
{
#line 5542 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "TSTB " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 69777 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69792 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69796 "isa_tms320.tcc"
OpTSTB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69800 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69804 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69808 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69811 "isa_tms320.tcc"
)
{
#line 5614 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value & dst_value;

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 69854 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69860 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69867 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69870 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69875 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69879 "isa_tms320.tcc"
> *DecodeOpTSTB_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69885 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69889 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69899 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69903 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69906 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69910 "isa_tms320.tcc"
OpTSTB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 69914 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69918 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69922 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69925 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69929 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69932 "isa_tms320.tcc"
)
{
#line 5553 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "TSTB " << imm << ", " << dst_name;
		return true;
	}
#line 69945 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69950 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69953 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69957 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69960 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69964 "isa_tms320.tcc"
OpTSTB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 69968 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69972 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69976 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69979 "isa_tms320.tcc"
)
{
#line 5654 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = imm & dst_value;

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 70003 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 70009 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70012 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70016 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70019 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70024 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70028 "isa_tms320.tcc"
> *DecodeOpTSTB_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70034 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70038 "isa_tms320.tcc"
	>(code, addr);
}

/* end of TSTB (test bit fields)
**********************************************************/
/**********************************************************
* XOR (bitwise-exclusive OR)
* op XOR(0b000[3]:0b110101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 70051 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70054 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70058 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70061 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70065 "isa_tms320.tcc"
OpXOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 70069 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70073 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70077 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70080 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70084 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70087 "isa_tms320.tcc"
)
{
#line 5688 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "XOR " << src_name << ", " << dst_name;
		return true;
	}
#line 70101 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70106 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70109 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70113 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70116 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 70120 "isa_tms320.tcc"
OpXOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 70124 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70128 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70132 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70135 "isa_tms320.tcc"
)
{
#line 5731 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = src_value ^ dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 70169 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 70175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70182 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70185 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70190 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70194 "isa_tms320.tcc"
> *DecodeOpXOR_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70200 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70204 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70211 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70214 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70218 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70221 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70225 "isa_tms320.tcc"
OpXOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 70229 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70233 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70237 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70240 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70244 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70247 "isa_tms320.tcc"
)
{
#line 5699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if(!dst_name)
		return false;

		os << "XOR " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 70261 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70266 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70269 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70273 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70276 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 70280 "isa_tms320.tcc"
OpXOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 70284 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70288 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70292 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70295 "isa_tms320.tcc"
)
{
#line 5762 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value ^ dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 70332 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 70338 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70341 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70345 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70348 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70353 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70357 "isa_tms320.tcc"
> *DecodeOpXOR_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70363 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70367 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70374 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70377 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70381 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70384 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70388 "isa_tms320.tcc"
OpXOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 70392 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70396 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70400 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70403 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70407 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70410 "isa_tms320.tcc"
)
{
#line 5710 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "XOR " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 70424 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70429 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70432 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70436 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70439 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 70443 "isa_tms320.tcc"
OpXOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 70447 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70451 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70455 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70458 "isa_tms320.tcc"
)
{
#line 5796 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value ^ dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 70508 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 70514 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70517 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70521 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70524 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70529 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70533 "isa_tms320.tcc"
> *DecodeOpXOR_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70539 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70543 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70550 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70553 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70557 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70560 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70564 "isa_tms320.tcc"
OpXOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 70568 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70572 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70576 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70579 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70583 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70586 "isa_tms320.tcc"
)
{
#line 5721 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "XOR " << imm << ", " << dst_name;
		return true;
	}
#line 70599 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70604 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70607 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70611 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70614 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 70618 "isa_tms320.tcc"
OpXOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 70622 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70626 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70630 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70633 "isa_tms320.tcc"
)
{
#line 5843 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = imm ^ dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 70664 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 70670 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70673 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70677 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70680 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70685 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70689 "isa_tms320.tcc"
> *DecodeOpXOR_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70695 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70699 "isa_tms320.tcc"
	>(code, addr);
}

/* end of XOR (bitwise-exclusive OR)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of 3 operands operations:
* - ADDC3        add with carry
* - ADDF3        add floating-point values
* - ADDI3        add integers
* - AND3         bitwise-logical AND
* - ANDN3        bitwise-logical AND with complement
* - ASH3         arithmetic shift
* - CMPF3        compare floating-point values
* - CMPI3        compare integers
* - LSH3         logical shift
* - MPYF3        multiply floating-point values
* - MPYI3        multiply integers
* - OR3          bitwise-logical OR
* - SUBB3        subtract integers with borrow
* - SUBF3        subtract floating-point values
* - SUBI3        subtract integers
* - TSTB3        test bit fields
* - XOR3         bitwise-exclusive OR
*/
/**********************************************************
* ADDC3 (add with carry)
* op ADDC3(0b001[3]:0b000000[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 70765 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70768 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70772 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70775 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70779 "isa_tms320.tcc"
OpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 70783 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70787 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70791 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70794 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70798 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70801 "isa_tms320.tcc"
)
{
#line 66 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ADDC3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 70816 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70821 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70824 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70828 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70831 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 70835 "isa_tms320.tcc"
OpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 70839 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70843 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70847 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70850 "isa_tms320.tcc"
)
{
#line 114 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, carry_in);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, carry_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 70897 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 70903 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70906 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70910 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70913 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70918 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70922 "isa_tms320.tcc"
> *DecodeOpADDC3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70928 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70932 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70939 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70946 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70949 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70953 "isa_tms320.tcc"
OpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 70957 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70961 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70965 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70968 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70972 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70975 "isa_tms320.tcc"
)
{
#line 78 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "ADDC3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 70990 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70995 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71002 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71005 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71009 "isa_tms320.tcc"
OpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 71013 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71017 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71021 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71024 "isa_tms320.tcc"
)
{
#line 158 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, carry_in);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, carry_in);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 71088 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71094 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71097 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71104 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71109 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71113 "isa_tms320.tcc"
> *DecodeOpADDC3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71119 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71123 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71130 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71140 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71144 "isa_tms320.tcc"
OpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71152 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71156 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71159 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71163 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71166 "isa_tms320.tcc"
)
{
#line 90 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDC3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 71181 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71186 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71189 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71193 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71196 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71200 "isa_tms320.tcc"
OpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71204 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71208 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71212 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71215 "isa_tms320.tcc"
)
{
#line 219 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, carry_in);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, carry_in);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 71279 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71285 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71292 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71295 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71300 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71304 "isa_tms320.tcc"
> *DecodeOpADDC3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71310 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71314 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71321 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71324 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71328 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71331 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71335 "isa_tms320.tcc"
OpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71339 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71343 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71347 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71350 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71354 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71357 "isa_tms320.tcc"
)
{
#line 102 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDC3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 71372 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71377 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71384 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71387 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71391 "isa_tms320.tcc"
OpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71395 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71399 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71403 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71406 "isa_tms320.tcc"
)
{
#line 280 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, carry_in);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, carry_in);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 71492 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71498 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71501 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71505 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71508 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71513 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71517 "isa_tms320.tcc"
> *DecodeOpADDC3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71523 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71527 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDC3 (add with carry)
**********************************************************/
/**********************************************************
* ADDF3 (add floating-point values)
* op ADDF3(0b001[3]:0b000001[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 71540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71543 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71547 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71550 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71554 "isa_tms320.tcc"
OpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 71558 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71562 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71566 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71569 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71573 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71576 "isa_tms320.tcc"
)
{
#line 376 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ADDF3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 71591 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71599 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71603 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71606 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71610 "isa_tms320.tcc"
OpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 71614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71618 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71622 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71625 "isa_tms320.tcc"
)
{
#line 424 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 71632 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71638 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71641 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71645 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71648 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71653 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71657 "isa_tms320.tcc"
> *DecodeOpADDF3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71663 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71667 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71677 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71684 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71688 "isa_tms320.tcc"
OpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 71692 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71696 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71700 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71703 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71707 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71710 "isa_tms320.tcc"
)
{
#line 388 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "ADDF3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 71725 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71730 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71733 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71737 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71740 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71744 "isa_tms320.tcc"
OpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 71748 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71752 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71756 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71759 "isa_tms320.tcc"
)
{
#line 428 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 71766 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71772 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71775 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71779 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71782 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71787 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71791 "isa_tms320.tcc"
> *DecodeOpADDF3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71797 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71801 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71811 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71815 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71818 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71822 "isa_tms320.tcc"
OpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71826 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71830 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71834 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71837 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71841 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71844 "isa_tms320.tcc"
)
{
#line 400 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 71859 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71864 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71867 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71871 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71874 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71878 "isa_tms320.tcc"
OpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71882 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71886 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71890 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71893 "isa_tms320.tcc"
)
{
#line 432 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 71900 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71906 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71909 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71913 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71916 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71925 "isa_tms320.tcc"
> *DecodeOpADDF3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71931 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71935 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71942 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71945 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71949 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71952 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71956 "isa_tms320.tcc"
OpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71960 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71964 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71968 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71971 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71975 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71978 "isa_tms320.tcc"
)
{
#line 412 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDF3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 71993 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71998 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72001 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72005 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72008 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 72012 "isa_tms320.tcc"
OpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 72016 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72020 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72024 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72027 "isa_tms320.tcc"
)
{
#line 436 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 72034 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 72040 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72043 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72047 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72050 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 72055 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72059 "isa_tms320.tcc"
> *DecodeOpADDF3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72065 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72069 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDF3 (add floating-point values)
**********************************************************/
/**********************************************************
* ADDI3 (add integers)
* op ADDI3(0b001[3]:0b000010[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 72082 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72085 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72089 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72092 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 72096 "isa_tms320.tcc"
OpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 72100 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72104 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72108 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72111 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 72115 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 72118 "isa_tms320.tcc"
)
{
#line 453 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ADDI3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 72133 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 72138 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72141 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72148 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 72152 "isa_tms320.tcc"
OpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 72156 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72160 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72164 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72167 "isa_tms320.tcc"
)
{
#line 501 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 72211 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 72217 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72220 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72224 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72227 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 72232 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72236 "isa_tms320.tcc"
> *DecodeOpADDI3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72242 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72246 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 72253 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72256 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72260 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72263 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 72267 "isa_tms320.tcc"
OpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 72271 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72275 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72279 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72282 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 72286 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 72289 "isa_tms320.tcc"
)
{
#line 465 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "ADDI3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 72304 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 72309 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72312 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72316 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72319 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 72323 "isa_tms320.tcc"
OpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 72327 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72331 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72335 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72338 "isa_tms320.tcc"
)
{
#line 542 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 72399 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 72405 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72408 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72412 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72415 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 72420 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72424 "isa_tms320.tcc"
> *DecodeOpADDI3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72430 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72434 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 72441 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72444 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72448 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72451 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 72455 "isa_tms320.tcc"
OpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 72459 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72463 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72467 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72470 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 72474 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 72477 "isa_tms320.tcc"
)
{
#line 477 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 72492 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 72497 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72500 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72504 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72507 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 72511 "isa_tms320.tcc"
OpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 72515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72519 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72523 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72526 "isa_tms320.tcc"
)
{
#line 600 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 72587 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 72593 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72600 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72603 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 72608 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72612 "isa_tms320.tcc"
> *DecodeOpADDI3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72618 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72622 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 72629 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72632 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72636 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72639 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 72643 "isa_tms320.tcc"
OpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 72647 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72651 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72655 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72658 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 72662 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 72665 "isa_tms320.tcc"
)
{
#line 489 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDI3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 72680 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 72685 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72688 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72692 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72695 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 72699 "isa_tms320.tcc"
OpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 72703 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72707 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72711 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72714 "isa_tms320.tcc"
)
{
#line 658 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 72797 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 72803 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72806 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72810 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72813 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 72818 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72822 "isa_tms320.tcc"
> *DecodeOpADDI3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72828 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72832 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDI3 (add integers)
**********************************************************/
/**********************************************************
* AND3 (bitwise-logical AND)
* op AND3(0b001[3]:0b000011[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 72845 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72852 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72855 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 72859 "isa_tms320.tcc"
OpAND3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 72863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72867 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72871 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72874 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 72878 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 72881 "isa_tms320.tcc"
)
{
#line 752 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "AND3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 72896 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 72901 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72908 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72911 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 72915 "isa_tms320.tcc"
OpAND3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 72919 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72923 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72927 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72930 "isa_tms320.tcc"
)
{
#line 800 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 72964 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 72970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72980 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 72985 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72989 "isa_tms320.tcc"
> *DecodeOpAND3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72995 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72999 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 73006 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73009 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73013 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73016 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73020 "isa_tms320.tcc"
OpAND3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 73024 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73028 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73032 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73035 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73039 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73042 "isa_tms320.tcc"
)
{
#line 764 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "AND3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 73057 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73062 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73065 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73069 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73072 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 73076 "isa_tms320.tcc"
OpAND3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 73080 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73084 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73088 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73091 "isa_tms320.tcc"
)
{
#line 832 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 73142 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 73148 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73151 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73155 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73158 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 73163 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73167 "isa_tms320.tcc"
> *DecodeOpAND3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73173 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73177 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 73184 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73187 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73191 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73194 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73198 "isa_tms320.tcc"
OpAND3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73202 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73206 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73210 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73213 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73217 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73220 "isa_tms320.tcc"
)
{
#line 776 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "AND3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 73235 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73240 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73247 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73250 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 73254 "isa_tms320.tcc"
OpAND3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73258 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73262 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73266 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73269 "isa_tms320.tcc"
)
{
#line 880 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 73320 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 73326 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73329 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73333 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73336 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 73341 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73345 "isa_tms320.tcc"
> *DecodeOpAND3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73351 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73355 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 73362 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73365 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73369 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73372 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73376 "isa_tms320.tcc"
OpAND3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73384 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73388 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73391 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73395 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73398 "isa_tms320.tcc"
)
{
#line 788 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "AND3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 73413 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73418 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73421 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73425 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73428 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 73432 "isa_tms320.tcc"
OpAND3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73436 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73440 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73444 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73447 "isa_tms320.tcc"
)
{
#line 928 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 73520 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 73526 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73529 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73533 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73536 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 73541 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73545 "isa_tms320.tcc"
> *DecodeOpAND3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73551 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73555 "isa_tms320.tcc"
	>(code, addr);
}

/* end of AND3 (bitwise-logical AND)
**********************************************************/
/**********************************************************
* ANDN3 (bitwise-logical AND with complement)
* op ANDN3(0b001[3]:0b000100[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 73568 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73571 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73575 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73578 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73582 "isa_tms320.tcc"
OpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 73586 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73590 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73594 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73597 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73601 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73604 "isa_tms320.tcc"
)
{
#line 1011 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{ const char *dst_name = REG_NAME[dst]; const char *src1_name = REG_NAME[src1]; const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ANDN3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 73616 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73621 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73624 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73628 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73631 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 73635 "isa_tms320.tcc"
OpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 73639 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73643 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73647 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73650 "isa_tms320.tcc"
)
{
#line 1056 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & ~src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 73684 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 73690 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73693 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73697 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73700 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 73705 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73709 "isa_tms320.tcc"
> *DecodeOpANDN3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73715 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73719 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 73726 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73729 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73733 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73736 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73740 "isa_tms320.tcc"
OpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 73744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73748 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73752 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73755 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73759 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73762 "isa_tms320.tcc"
)
{
#line 1020 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "ANDN3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 73777 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73792 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 73796 "isa_tms320.tcc"
OpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 73800 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73804 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73808 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73811 "isa_tms320.tcc"
)
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & ~src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 73862 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 73868 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73871 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73875 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73878 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 73883 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73887 "isa_tms320.tcc"
> *DecodeOpANDN3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73893 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73897 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 73904 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73907 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73911 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73914 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73918 "isa_tms320.tcc"
OpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73922 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73926 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73930 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73933 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73937 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73940 "isa_tms320.tcc"
)
{
#line 1032 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ANDN3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 73955 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73960 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73963 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73967 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73970 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 73974 "isa_tms320.tcc"
OpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73978 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73982 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73986 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73989 "isa_tms320.tcc"
)
{
#line 1136 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src1_value & ~src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 74040 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 74046 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74049 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74053 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74056 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 74061 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74065 "isa_tms320.tcc"
> *DecodeOpANDN3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74071 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74075 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 74082 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74085 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74089 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74092 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 74096 "isa_tms320.tcc"
OpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 74100 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74104 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74108 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74111 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 74115 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 74118 "isa_tms320.tcc"
)
{
#line 1044 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ANDN3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 74133 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 74138 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74141 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74148 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 74152 "isa_tms320.tcc"
OpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 74156 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74160 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74164 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74167 "isa_tms320.tcc"
)
{
#line 1184 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result = src1_value & ~src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 74240 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 74246 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74253 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74256 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 74261 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74265 "isa_tms320.tcc"
> *DecodeOpANDN3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74271 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74275 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ANDN3 (bitwise-logical AND with complement)
**********************************************************/
/**********************************************************
* ASH3 (arithmetic shift)
* op ASH3(0b001[3]:0b000101[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 74288 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74295 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74298 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 74302 "isa_tms320.tcc"
OpASH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 74306 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74310 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74314 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74317 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 74321 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 74324 "isa_tms320.tcc"
)
{
#line 1267 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ASH3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 74339 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 74344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74347 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74354 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 74358 "isa_tms320.tcc"
OpASH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 74362 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74366 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74370 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74373 "isa_tms320.tcc"
)
{
#line 1315 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src1_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 74443 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 74449 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74452 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74456 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74459 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 74464 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74468 "isa_tms320.tcc"
> *DecodeOpASH3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74474 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74478 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 74485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74495 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 74499 "isa_tms320.tcc"
OpASH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 74503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74507 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74511 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74514 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 74518 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 74521 "isa_tms320.tcc"
)
{
#line 1279 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "ASH3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 74536 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 74541 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74548 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74551 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 74555 "isa_tms320.tcc"
OpASH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 74559 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74563 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74567 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74570 "isa_tms320.tcc"
)
{
#line 1382 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src1_value, count, carry_out);
			}
		}

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 74657 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 74663 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74666 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74670 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74673 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 74678 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74682 "isa_tms320.tcc"
> *DecodeOpASH3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74688 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74692 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 74699 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74702 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74706 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74709 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 74713 "isa_tms320.tcc"
OpASH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 74717 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74721 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74725 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74728 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 74732 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 74735 "isa_tms320.tcc"
)
{
#line 1291 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ASH3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 74750 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 74755 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74758 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74762 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74765 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 74769 "isa_tms320.tcc"
OpASH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 74773 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74777 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74781 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74784 "isa_tms320.tcc"
)
{
#line 1466 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src1_value, count, carry_out);
			}
		}

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 74871 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 74877 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74880 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74884 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74887 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 74892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74896 "isa_tms320.tcc"
> *DecodeOpASH3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74902 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74906 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 74913 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74916 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74920 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74923 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 74927 "isa_tms320.tcc"
OpASH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 74931 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74935 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74939 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74942 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 74946 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 74949 "isa_tms320.tcc"
)
{
#line 1303 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ASH3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 74964 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 74969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74976 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74979 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 74983 "isa_tms320.tcc"
OpASH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 74987 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74991 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74995 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74998 "isa_tms320.tcc"
)
{
#line 1550 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src1_value, count, carry_out);
			}
		}

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 75107 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75113 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75120 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75123 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75128 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75132 "isa_tms320.tcc"
> *DecodeOpASH3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75138 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75142 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ASH3 (arithmetic shift)
**********************************************************/
/**********************************************************
* CMPF3 (compare floating-point values)
* op CMPF3(0b001[3]:0b000110[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 75155 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75158 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75162 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75165 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75169 "isa_tms320.tcc"
OpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75173 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75177 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75181 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75184 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75188 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75191 "isa_tms320.tcc"
)
{
#line 1669 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!src1_name || !src2_name)
		return false;

		os << "CMPF3 " << src2_name << ", " << src1_name;
		return true;
	}
#line 75205 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75210 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75217 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75220 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75224 "isa_tms320.tcc"
OpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75228 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75232 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75236 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75239 "isa_tms320.tcc"
)
{
#line 1713 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 75246 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75252 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75255 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75259 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75262 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75271 "isa_tms320.tcc"
> *DecodeOpCMPF3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75277 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75281 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 75288 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75295 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75298 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75302 "isa_tms320.tcc"
OpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75306 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75310 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75314 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75317 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75321 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75324 "isa_tms320.tcc"
)
{
#line 1680 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "CMPF3 " << src2_name << ", " << disasm_src1_indir;
		return true;
	}
#line 75338 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75343 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75350 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75353 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75357 "isa_tms320.tcc"
OpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75361 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75365 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75369 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75372 "isa_tms320.tcc"
)
{
#line 1717 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 75379 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75385 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75388 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75392 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75395 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75400 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75404 "isa_tms320.tcc"
> *DecodeOpCMPF3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75410 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75414 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 75421 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75424 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75428 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75431 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75435 "isa_tms320.tcc"
OpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75439 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75443 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75447 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75450 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75454 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75457 "isa_tms320.tcc"
)
{
#line 1691 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "CMPF3 " << disasm_src2_indir << ", " << src1_name;
		return true;
	}
#line 75471 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75476 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75479 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75483 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75486 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75490 "isa_tms320.tcc"
OpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75494 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75498 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75502 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75505 "isa_tms320.tcc"
)
{
#line 1721 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 75512 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75518 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75521 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75525 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75528 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75533 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75537 "isa_tms320.tcc"
> *DecodeOpCMPF3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75543 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75547 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 75554 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75557 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75561 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75564 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75568 "isa_tms320.tcc"
OpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75572 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75576 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75580 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75583 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75587 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75590 "isa_tms320.tcc"
)
{
#line 1702 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "CMPF3 " << disasm_src2_indir << ", " << disasm_src1_indir;
		return true;
	}
#line 75604 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75609 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75612 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75619 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75623 "isa_tms320.tcc"
OpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75627 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75631 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75635 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75638 "isa_tms320.tcc"
)
{
#line 1725 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 75645 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75654 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75661 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75666 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75670 "isa_tms320.tcc"
> *DecodeOpCMPF3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75676 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75680 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CMPF3 (compare floating-point values)
**********************************************************/
/**********************************************************
* CMPI3 (compare integers)
* op CMPI3(0b001[3]:0b000111[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 75693 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75700 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75703 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75707 "isa_tms320.tcc"
OpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75711 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75715 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75719 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75722 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75726 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75729 "isa_tms320.tcc"
)
{
#line 1742 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!src1_name || !src2_name)
		return false;

		os << "CMPI3 " << src2_name << ", " << src1_name;
		return true;
	}
#line 75743 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75748 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75751 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75755 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75758 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75762 "isa_tms320.tcc"
OpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75766 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75770 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75774 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75777 "isa_tms320.tcc"
)
{
#line 1786 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 75810 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75819 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75823 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75826 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75831 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75835 "isa_tms320.tcc"
> *DecodeOpCMPI3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75841 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75845 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 75852 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75855 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75859 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75862 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75866 "isa_tms320.tcc"
OpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75870 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75874 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75878 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75881 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75885 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75888 "isa_tms320.tcc"
)
{
#line 1753 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "CMPI3 " << src2_name << ", " << disasm_src1_indir;
		return true;
	}
#line 75902 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75907 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75910 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75914 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75917 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75921 "isa_tms320.tcc"
OpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75925 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75929 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75933 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75936 "isa_tms320.tcc"
)
{
#line 1816 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 75986 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75992 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75999 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76002 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 76007 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76011 "isa_tms320.tcc"
> *DecodeOpCMPI3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76017 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76021 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 76028 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76031 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76035 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76038 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 76042 "isa_tms320.tcc"
OpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 76046 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76050 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76054 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76057 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 76061 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 76064 "isa_tms320.tcc"
)
{
#line 1764 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "CMPI3 " << disasm_src2_indir << ", " << src1_name;
		return true;
	}
#line 76078 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 76083 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76090 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76093 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 76097 "isa_tms320.tcc"
OpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 76101 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76105 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76109 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76112 "isa_tms320.tcc"
)
{
#line 1863 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 76162 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 76168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76178 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 76183 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76187 "isa_tms320.tcc"
> *DecodeOpCMPI3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76193 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76197 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 76204 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76207 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76211 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76214 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 76218 "isa_tms320.tcc"
OpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 76222 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76226 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76230 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76233 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 76237 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 76240 "isa_tms320.tcc"
)
{
#line 1775 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "CMPI3 " << disasm_src2_indir << ", " << disasm_src1_indir;
		return true;
	}
#line 76254 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 76259 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76262 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76266 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76269 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 76273 "isa_tms320.tcc"
OpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 76277 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76281 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76285 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76288 "isa_tms320.tcc"
)
{
#line 1910 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 76354 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 76360 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76363 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76367 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76370 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 76375 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76379 "isa_tms320.tcc"
> *DecodeOpCMPI3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76385 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76389 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CMPI3 (compare integers)
**********************************************************/
/**********************************************************
* LSH3 (logical shift)
* op LSH3(0b001[3]:0b001000[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 76402 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76405 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76409 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76412 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 76416 "isa_tms320.tcc"
OpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 76420 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76424 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76428 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76431 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 76435 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 76438 "isa_tms320.tcc"
)
{
#line 1986 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "LSH3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 76453 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 76458 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76461 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76465 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76468 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 76472 "isa_tms320.tcc"
OpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 76476 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76480 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76484 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76487 "isa_tms320.tcc"
)
{
#line 2034 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src1_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 76557 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 76563 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76566 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76570 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76573 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 76578 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76582 "isa_tms320.tcc"
> *DecodeOpLSH3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76588 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76592 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 76599 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76602 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76606 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76609 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 76613 "isa_tms320.tcc"
OpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 76617 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76621 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76625 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76628 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 76632 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 76635 "isa_tms320.tcc"
)
{
#line 1998 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "LSH3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 76650 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 76655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76662 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76665 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 76669 "isa_tms320.tcc"
OpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 76673 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76677 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76681 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76684 "isa_tms320.tcc"
)
{
#line 2101 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src1_value, count, carry_out);
			}
		}

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 76771 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 76777 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76780 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76784 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76787 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 76792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76796 "isa_tms320.tcc"
> *DecodeOpLSH3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76802 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76806 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 76813 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76816 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76820 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76823 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 76827 "isa_tms320.tcc"
OpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 76831 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76835 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76839 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76842 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 76846 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 76849 "isa_tms320.tcc"
)
{
#line 2010 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "LSH3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 76864 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 76869 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76876 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76879 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 76883 "isa_tms320.tcc"
OpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 76887 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76891 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76895 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76898 "isa_tms320.tcc"
)
{
#line 2185 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src1_value, count, carry_out);
			}
		}

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 76985 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 76991 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76994 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76998 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77001 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77006 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77010 "isa_tms320.tcc"
> *DecodeOpLSH3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77016 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77020 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 77027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77037 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77041 "isa_tms320.tcc"
OpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77045 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77049 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77053 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77056 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77060 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77063 "isa_tms320.tcc"
)
{
#line 2022 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "LSH3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 77078 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77083 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77090 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77093 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77097 "isa_tms320.tcc"
OpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77101 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77105 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77109 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77112 "isa_tms320.tcc"
)
{
#line 2269 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src1_value, count, carry_out);
			}
		}

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 77221 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77227 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77230 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77237 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77242 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77246 "isa_tms320.tcc"
> *DecodeOpLSH3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77252 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77256 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LSH3 (logical shift)
**********************************************************/
/**********************************************************
* MPYF3 (multiply floating-point values)
* op MPYF3(0b001[3]:0b001001[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 77269 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77272 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77279 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77283 "isa_tms320.tcc"
OpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 77287 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77291 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77295 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77298 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77302 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77305 "isa_tms320.tcc"
)
{
#line 2388 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "MPYF3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 77320 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77325 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77332 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77335 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77339 "isa_tms320.tcc"
OpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 77343 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77347 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77351 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77354 "isa_tms320.tcc"
)
{
#line 2436 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 77361 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77367 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77370 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77374 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77377 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77382 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77386 "isa_tms320.tcc"
> *DecodeOpMPYF3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77392 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77396 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 77403 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77406 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77410 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77413 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77417 "isa_tms320.tcc"
OpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 77421 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77425 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77429 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77432 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77436 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77439 "isa_tms320.tcc"
)
{
#line 2400 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "MPYF3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 77454 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77459 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77462 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77466 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77469 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77473 "isa_tms320.tcc"
OpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 77477 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77481 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77485 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77488 "isa_tms320.tcc"
)
{
#line 2440 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 77495 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77501 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77504 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77508 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77511 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77520 "isa_tms320.tcc"
> *DecodeOpMPYF3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77526 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77530 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 77537 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77540 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77544 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77547 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77551 "isa_tms320.tcc"
OpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77555 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77559 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77563 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77566 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77570 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77573 "isa_tms320.tcc"
)
{
#line 2412 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "MPYF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 77588 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77593 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77600 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77603 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77607 "isa_tms320.tcc"
OpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77611 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77615 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77619 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77622 "isa_tms320.tcc"
)
{
#line 2444 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 77629 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77635 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77642 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77645 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77650 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77654 "isa_tms320.tcc"
> *DecodeOpMPYF3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77660 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77664 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 77671 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77674 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77678 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77681 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77685 "isa_tms320.tcc"
OpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77689 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77693 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77697 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77700 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77704 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77707 "isa_tms320.tcc"
)
{
#line 2424 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "MPYF3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 77722 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77727 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77734 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77737 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77741 "isa_tms320.tcc"
OpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77745 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77749 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77753 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77756 "isa_tms320.tcc"
)
{
#line 2448 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 77763 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77769 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77772 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77776 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77779 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77784 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77788 "isa_tms320.tcc"
> *DecodeOpMPYF3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77794 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77798 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF3 (multiply floating-point values)
**********************************************************/
/**********************************************************
* MPYI3 (multiply integers)
* op MPYI3(0b001[3]:0b001010[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 77811 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77814 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77818 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77821 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77825 "isa_tms320.tcc"
OpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 77829 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77833 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77837 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77840 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77844 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77847 "isa_tms320.tcc"
)
{
#line 2465 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "MPYI3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 77862 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77867 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77870 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77874 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77877 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77881 "isa_tms320.tcc"
OpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 77885 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77889 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77893 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77896 "isa_tms320.tcc"
)
{
#line 2513 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.GetReg(src1) & 0xffffff), 24);

		// Read 2nd source operand and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.GetReg(src2) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 77943 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77949 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77956 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77959 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77968 "isa_tms320.tcc"
> *DecodeOpMPYI3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77974 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77978 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 77985 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77988 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77992 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77995 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77999 "isa_tms320.tcc"
OpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 78003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78007 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78011 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78014 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78018 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78021 "isa_tms320.tcc"
)
{
#line 2477 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "MPYI3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 78036 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 78041 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78051 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 78055 "isa_tms320.tcc"
OpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 78059 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78063 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78067 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78070 "isa_tms320.tcc"
)
{
#line 2557 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.IntLoad(ea) & 0xffffff), 24);

		// Read 2nd source operand and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.GetReg(src2) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 78134 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 78140 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78143 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78150 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 78155 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78159 "isa_tms320.tcc"
> *DecodeOpMPYI3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78165 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78169 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 78176 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78179 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78183 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78186 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 78190 "isa_tms320.tcc"
OpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 78194 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78198 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78202 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78205 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78209 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78212 "isa_tms320.tcc"
)
{
#line 2489 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "MPYI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 78227 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 78232 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78235 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78239 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78242 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 78246 "isa_tms320.tcc"
OpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 78250 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78254 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78258 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78261 "isa_tms320.tcc"
)
{
#line 2618 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.GetReg(src1) & 0xffffff), 24);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.IntLoad(ea) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 78325 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 78331 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78334 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78338 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78341 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 78346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78350 "isa_tms320.tcc"
> *DecodeOpMPYI3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78356 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78360 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 78367 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78370 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78374 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78377 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 78381 "isa_tms320.tcc"
OpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 78385 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78389 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78393 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78396 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78400 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78403 "isa_tms320.tcc"
)
{
#line 2501 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "MPYI3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 78418 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 78423 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78426 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78430 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78433 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 78437 "isa_tms320.tcc"
OpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 78441 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78445 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78449 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78452 "isa_tms320.tcc"
)
{
#line 2679 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.IntLoad(ea1) & 0xffffff), 24);

		// Read 1st source operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.IntLoad(ea2) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 78538 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 78544 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78547 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78551 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78554 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 78559 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78563 "isa_tms320.tcc"
> *DecodeOpMPYI3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78569 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78573 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYI3 (multiply integers)
**********************************************************/
/**********************************************************
* OR3 (bitwise-logical OR)
* op OR3(0b001[3]:0b001011[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 78586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78589 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78593 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78596 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 78600 "isa_tms320.tcc"
OpOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 78604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78608 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78612 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78615 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78619 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78622 "isa_tms320.tcc"
)
{
#line 2775 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "OR3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 78637 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 78642 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78645 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78649 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78652 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 78656 "isa_tms320.tcc"
OpOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 78660 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78664 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78668 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78671 "isa_tms320.tcc"
)
{
#line 2823 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value | src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 78705 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 78711 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78714 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78718 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78721 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 78726 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78730 "isa_tms320.tcc"
> *DecodeOpOR3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78736 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78740 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 78747 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78750 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78754 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78757 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 78761 "isa_tms320.tcc"
OpOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 78765 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78769 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78773 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78776 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78780 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78783 "isa_tms320.tcc"
)
{
#line 2787 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "OR3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 78798 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 78803 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78806 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78810 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78813 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 78817 "isa_tms320.tcc"
OpOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 78821 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78825 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78829 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78832 "isa_tms320.tcc"
)
{
#line 2855 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value | src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 78883 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 78889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78899 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 78904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78908 "isa_tms320.tcc"
> *DecodeOpOR3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78914 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78918 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 78925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78932 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78935 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 78939 "isa_tms320.tcc"
OpOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 78943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78947 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78951 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78954 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78958 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78961 "isa_tms320.tcc"
)
{
#line 2799 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "OR3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 78976 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 78981 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78984 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78988 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78991 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 78995 "isa_tms320.tcc"
OpOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 78999 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79003 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79007 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79010 "isa_tms320.tcc"
)
{
#line 2903 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src1_value | src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 79061 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 79067 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79077 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 79082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79086 "isa_tms320.tcc"
> *DecodeOpOR3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 79092 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 79096 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 79103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79106 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79110 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79113 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 79117 "isa_tms320.tcc"
OpOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 79121 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79125 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79129 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79132 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 79136 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 79139 "isa_tms320.tcc"
)
{
#line 2811 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "OR3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 79154 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 79159 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79162 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79166 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79169 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 79173 "isa_tms320.tcc"
OpOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 79177 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79181 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79185 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79188 "isa_tms320.tcc"
)
{
#line 2951 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result = src1_value | src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 79261 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 79267 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79270 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79274 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79277 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 79282 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79286 "isa_tms320.tcc"
> *DecodeOpOR3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 79292 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 79296 "isa_tms320.tcc"
	>(code, addr);
}

/* end of OR3 (bitwise-logical OR)
**********************************************************/
/**********************************************************
* SUBB3 (subtract integers with borrow)
* op SUBB3(0b001[3]:0b001100[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 79309 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79312 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79316 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79319 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 79323 "isa_tms320.tcc"
OpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79327 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79331 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79335 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79338 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 79342 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 79345 "isa_tms320.tcc"
)
{
#line 3034 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "SUBB3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 79360 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 79365 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79368 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79372 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79375 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 79379 "isa_tms320.tcc"
OpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79387 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79391 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79394 "isa_tms320.tcc"
)
{
#line 3082 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 79441 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 79447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79450 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79457 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 79462 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79466 "isa_tms320.tcc"
> *DecodeOpSUBB3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 79472 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 79476 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 79483 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79486 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79490 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79493 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 79497 "isa_tms320.tcc"
OpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79501 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79505 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79509 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79512 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 79516 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 79519 "isa_tms320.tcc"
)
{
#line 3046 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "SUBB3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 79534 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 79539 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79542 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79546 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79549 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 79553 "isa_tms320.tcc"
OpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79557 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79561 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79565 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79568 "isa_tms320.tcc"
)
{
#line 3126 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 79632 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 79638 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79641 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79645 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79648 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 79653 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79657 "isa_tms320.tcc"
> *DecodeOpSUBB3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 79663 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 79667 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 79674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79677 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79684 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 79688 "isa_tms320.tcc"
OpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 79692 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79696 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79700 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79703 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 79707 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 79710 "isa_tms320.tcc"
)
{
#line 3058 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBB3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 79725 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 79730 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79733 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79737 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79740 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 79744 "isa_tms320.tcc"
OpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 79748 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79752 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79756 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79759 "isa_tms320.tcc"
)
{
#line 3187 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 79823 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 79829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79832 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79836 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79839 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 79844 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79848 "isa_tms320.tcc"
> *DecodeOpSUBB3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 79854 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 79858 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 79865 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79872 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79875 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 79879 "isa_tms320.tcc"
OpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 79883 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79887 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79891 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79894 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 79898 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 79901 "isa_tms320.tcc"
)
{
#line 3070 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBB3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 79916 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 79921 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79924 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79931 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 79935 "isa_tms320.tcc"
OpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 79939 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79943 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79947 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79950 "isa_tms320.tcc"
)
{
#line 3248 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 80036 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80042 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80045 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80049 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80052 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80057 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80061 "isa_tms320.tcc"
> *DecodeOpSUBB3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80067 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80071 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBB3 (subtract integers with borrow)
**********************************************************/
/**********************************************************
* SUBF3 (subtract floating-point values)
* op SUBF3(0b001[3]:0b001101[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 80084 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80087 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80091 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80094 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80098 "isa_tms320.tcc"
OpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 80102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80106 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80110 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80113 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80117 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80120 "isa_tms320.tcc"
)
{
#line 3344 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "SUBF3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 80135 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 80140 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80143 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80150 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 80154 "isa_tms320.tcc"
OpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 80158 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80162 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80166 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80169 "isa_tms320.tcc"
)
{
#line 3392 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 80176 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80182 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80185 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80189 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80192 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80201 "isa_tms320.tcc"
> *DecodeOpSUBF3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80207 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80211 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 80218 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80221 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80225 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80228 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80232 "isa_tms320.tcc"
OpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 80236 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80240 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80244 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80247 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80251 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80254 "isa_tms320.tcc"
)
{
#line 3356 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "SUBF3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 80269 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 80274 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80277 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80281 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80284 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 80288 "isa_tms320.tcc"
OpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 80292 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80296 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80300 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80303 "isa_tms320.tcc"
)
{
#line 3396 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 80310 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80316 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80319 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80323 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80326 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80331 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80335 "isa_tms320.tcc"
> *DecodeOpSUBF3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80341 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80345 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 80352 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80355 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80359 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80362 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80366 "isa_tms320.tcc"
OpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80370 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80374 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80378 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80381 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80385 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80388 "isa_tms320.tcc"
)
{
#line 3368 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 80403 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 80408 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80411 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80418 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 80422 "isa_tms320.tcc"
OpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80426 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80430 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80434 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80437 "isa_tms320.tcc"
)
{
#line 3400 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 80444 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80450 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80453 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80457 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80460 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80469 "isa_tms320.tcc"
> *DecodeOpSUBF3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80475 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80479 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 80486 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80489 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80493 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80496 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80500 "isa_tms320.tcc"
OpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80504 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80508 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80512 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80515 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80519 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80522 "isa_tms320.tcc"
)
{
#line 3380 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBF3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 80537 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 80542 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80549 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80552 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 80556 "isa_tms320.tcc"
OpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80560 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80564 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80568 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80571 "isa_tms320.tcc"
)
{
#line 3404 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 80578 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80584 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80587 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80591 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80594 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80599 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80603 "isa_tms320.tcc"
> *DecodeOpSUBF3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80609 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80613 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBF3 (subtract floating-point values)
**********************************************************/
/**********************************************************
* SUBI3 (subtract integers)
* op SUBI3(0b001[3]:0b001110[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 80626 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80629 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80633 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80636 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80640 "isa_tms320.tcc"
OpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 80644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80648 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80652 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80655 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80659 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80662 "isa_tms320.tcc"
)
{
#line 3421 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "SUBI3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 80677 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 80682 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80685 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80689 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80692 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 80696 "isa_tms320.tcc"
OpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 80700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80704 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80708 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80711 "isa_tms320.tcc"
)
{
#line 3469 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 80755 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80761 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80768 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80771 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80780 "isa_tms320.tcc"
> *DecodeOpSUBI3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80786 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80790 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 80797 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80800 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80804 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80807 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80811 "isa_tms320.tcc"
OpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 80815 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80819 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80823 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80826 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80830 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80833 "isa_tms320.tcc"
)
{
#line 3433 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "SUBI3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 80848 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 80853 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80856 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80860 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80863 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 80867 "isa_tms320.tcc"
OpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 80871 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80875 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80879 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80882 "isa_tms320.tcc"
)
{
#line 3510 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 80943 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80949 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80956 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80959 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80968 "isa_tms320.tcc"
> *DecodeOpSUBI3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80974 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80978 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 80985 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80988 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80992 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80995 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80999 "isa_tms320.tcc"
OpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81007 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81011 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81014 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 81018 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 81021 "isa_tms320.tcc"
)
{
#line 3445 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 81036 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81041 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81051 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81055 "isa_tms320.tcc"
OpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81059 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81063 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81067 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81070 "isa_tms320.tcc"
)
{
#line 3568 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 81131 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 81137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81144 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81147 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 81152 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81156 "isa_tms320.tcc"
> *DecodeOpSUBI3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 81162 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 81166 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 81173 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81176 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81180 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81183 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 81187 "isa_tms320.tcc"
OpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81191 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81195 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81199 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81202 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 81206 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 81209 "isa_tms320.tcc"
)
{
#line 3457 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBI3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 81224 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81229 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81232 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81236 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81239 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81243 "isa_tms320.tcc"
OpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81247 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81251 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81255 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81258 "isa_tms320.tcc"
)
{
#line 3626 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 81341 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 81347 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81350 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81354 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81357 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 81362 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81366 "isa_tms320.tcc"
> *DecodeOpSUBI3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 81372 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 81376 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBI3 (subtract integers)
**********************************************************/
/**********************************************************
* TSTB3 (test bit fields)
* op TSTB3(0b001[3]:0b001111[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 81389 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81392 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81396 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81399 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 81403 "isa_tms320.tcc"
OpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 81407 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81411 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81415 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81418 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 81422 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 81425 "isa_tms320.tcc"
)
{
#line 3719 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!src1_name || !src2_name)
		return false;

		os << "TSTB3 " << src2_name << ", " << src1_name;
		return true;
	}
#line 81439 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81444 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81447 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81454 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81458 "isa_tms320.tcc"
OpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 81462 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81466 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81470 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81473 "isa_tms320.tcc"
)
{
#line 3763 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 81500 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 81506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81509 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81513 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81516 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 81521 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81525 "isa_tms320.tcc"
> *DecodeOpTSTB3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 81531 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 81535 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 81542 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81549 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81552 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 81556 "isa_tms320.tcc"
OpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 81560 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81564 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81568 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81571 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 81575 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 81578 "isa_tms320.tcc"
)
{
#line 3730 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "TSTB3 " << src2_name << ", " << disasm_src1_indir;
		return true;
	}
#line 81592 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81597 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81600 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81604 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81607 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81611 "isa_tms320.tcc"
OpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 81615 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81619 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81623 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81626 "isa_tms320.tcc"
)
{
#line 3788 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether 2nd source operand is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 81670 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 81676 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81679 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81683 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81686 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 81691 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81695 "isa_tms320.tcc"
> *DecodeOpTSTB3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 81701 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 81705 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 81712 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81719 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81722 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 81726 "isa_tms320.tcc"
OpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81734 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81738 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81741 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 81745 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 81748 "isa_tms320.tcc"
)
{
#line 3741 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "TSTB3 " << disasm_src2_indir << ", " << src1_name;
		return true;
	}
#line 81762 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81767 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81770 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81774 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81777 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81781 "isa_tms320.tcc"
OpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81789 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81793 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81796 "isa_tms320.tcc"
)
{
#line 3829 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether 1st source operand is valid
		if(unlikely(!cpu.HasReg(src1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 81840 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 81846 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81849 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81853 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81856 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 81861 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81865 "isa_tms320.tcc"
> *DecodeOpTSTB3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 81871 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 81875 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 81882 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81885 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81892 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 81896 "isa_tms320.tcc"
OpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81904 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81908 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81911 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 81915 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 81918 "isa_tms320.tcc"
)
{
#line 3752 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "TSTB3 " << disasm_src2_indir << ", " << disasm_src1_indir;
		return true;
	}
#line 81932 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81937 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81944 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81947 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81951 "isa_tms320.tcc"
OpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81955 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81959 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81963 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81966 "isa_tms320.tcc"
)
{
#line 3870 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 82026 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 82032 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82035 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82039 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82042 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 82047 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82051 "isa_tms320.tcc"
> *DecodeOpTSTB3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82057 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82061 "isa_tms320.tcc"
	>(code, addr);
}

/* end of TSTB3 (test bit fields)
**********************************************************/
/**********************************************************
* XOR3 (bitwise-exclusive OR)
* op XOR3(0b001[3]:0b010000[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 82074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82077 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82081 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82084 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 82088 "isa_tms320.tcc"
OpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82092 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82096 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82100 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82103 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82107 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82110 "isa_tms320.tcc"
)
{
#line 3940 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "XOR3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 82125 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 82130 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82140 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 82144 "isa_tms320.tcc"
OpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82152 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82156 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82159 "isa_tms320.tcc"
)
{
#line 3988 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value ^ src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 82193 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 82199 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82202 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82206 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82209 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 82214 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82218 "isa_tms320.tcc"
> *DecodeOpXOR3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82224 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82228 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 82235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82242 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82245 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 82249 "isa_tms320.tcc"
OpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82253 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82257 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82261 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82264 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82268 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82271 "isa_tms320.tcc"
)
{
#line 3952 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "XOR3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 82286 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 82291 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82294 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82298 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82301 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 82305 "isa_tms320.tcc"
OpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82309 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82313 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82317 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82320 "isa_tms320.tcc"
)
{
#line 4020 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value ^ src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 82371 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 82377 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82384 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82387 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 82392 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82396 "isa_tms320.tcc"
> *DecodeOpXOR3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82402 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82406 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 82413 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82416 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82420 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82423 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 82427 "isa_tms320.tcc"
OpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 82431 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82435 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82439 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82442 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82446 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82449 "isa_tms320.tcc"
)
{
#line 3964 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "XOR3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 82464 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 82469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82476 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82479 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 82483 "isa_tms320.tcc"
OpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 82487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82491 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82495 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82498 "isa_tms320.tcc"
)
{
#line 4068 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src1_value ^ src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 82549 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 82555 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82558 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82562 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82565 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 82570 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82574 "isa_tms320.tcc"
> *DecodeOpXOR3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82580 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82584 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 82591 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82594 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82598 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82601 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 82605 "isa_tms320.tcc"
OpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 82609 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82613 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82617 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82620 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82624 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82627 "isa_tms320.tcc"
)
{
#line 3976 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "XOR3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 82642 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 82647 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82650 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82654 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82657 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 82661 "isa_tms320.tcc"
OpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 82665 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82669 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82673 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82676 "isa_tms320.tcc"
)
{
#line 4116 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result = src1_value ^ src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 82749 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 82755 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82758 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82762 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82765 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 82770 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82774 "isa_tms320.tcc"
> *DecodeOpXOR3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82780 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82784 "isa_tms320.tcc"
	>(code, addr);
}

/* end of XOR3 (bitwise-exclusive OR)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of program-control operations:
* - Bcond        branch conditionally (standard)
* - BcondD       branch conditionally (delayed)
* - BR           branch unconditionally (standard)
* - BRD          branch unconditionally (delayed)
* - CALL         call subroutine
* - CALLcond     call subroutine conditionally
* - DBcond       decrement and branch conditionally (standard)
* - DBcondD      decrement and branch conditionally (delayed)
* - IACK         interrupt acknowledge
* - IDLE         idle until interrupt
* - NOP          no operation
* - RETIcond     return from interrupt conditionally
* - RETScond     return form subroutine conditionally
* - RPTB         repeat block of instructions
* - RPTS         repeat single instruction
* - SWI          software interrupt
* - TRAPcond     trap conditionally
*/
/**********************************************************
* Bcond (branch conditionally (standard))
* op Bcond(0b011010[6]:b[1]:0b000[3]:0b0[1]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 82850 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82853 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82857 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82860 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 82864 "isa_tms320.tcc"
OpBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82872 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82876 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82879 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82883 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82886 "isa_tms320.tcc"
)
{
#line 63 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "B" << cond_name << " " << reg_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.GetReg(reg)) << ">";
		return true;
	}
#line 82899 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 82904 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82907 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82911 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82914 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 82918 "isa_tms320.tcc"
OpBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82922 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82926 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82930 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82933 "isa_tms320.tcc"
)
{
#line 73 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetReg(reg);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 82961 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 82967 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82970 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82974 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82977 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 82982 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82986 "isa_tms320.tcc"
> *DecodeOpBcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82992 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82996 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 83003 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83006 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83010 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83013 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83017 "isa_tms320.tcc"
OpBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 83021 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83025 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83029 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83032 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83036 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83039 "isa_tms320.tcc"
)
{
#line 100 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "B" << cond_name << " 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << dec;
		os << " <" << cpu.GetFunctionFriendlyName((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << ">";
		return true;
	}
#line 83051 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83056 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83059 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83063 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83066 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83070 "isa_tms320.tcc"
OpBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 83074 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83078 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83082 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83085 "isa_tms320.tcc"
)
{
#line 109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the branch target address
		typename CONFIG::address_t target_addr = next_pc + imm;

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 83116 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83122 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83125 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83129 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83132 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83137 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83141 "isa_tms320.tcc"
> *DecodeOpBcond_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83147 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83151 "isa_tms320.tcc"
	>(code, addr);
}

/* end of Bcond (branch conditionally (standard))
**********************************************************/
/**********************************************************
* BcondD (branch conditionally (delayed))
* op BcondD(0b011010[6]:b[1]:0b000[3]:0b1[1]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 83164 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83167 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83171 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83174 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83178 "isa_tms320.tcc"
OpBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 83182 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83186 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83190 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83193 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83197 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83200 "isa_tms320.tcc"
)
{
#line 147 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "B" << cond_name << "D " << reg_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.GetReg(reg)) << ">";
		return true;
	}
#line 83213 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83218 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83221 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83225 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83228 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83232 "isa_tms320.tcc"
OpBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 83236 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83240 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83244 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83247 "isa_tms320.tcc"
)
{
#line 157 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Rule 2: this instruction can't be one of the last 4 instructions in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && (cpu.GetPC() >= (cpu.GetRE() - 3) && (cpu.GetPC() <= cpu.GetRE())))))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetReg(reg);

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 83276 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83282 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83285 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83289 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83292 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83297 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83301 "isa_tms320.tcc"
> *DecodeOpBcondD_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBcondD_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83307 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83311 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 83318 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83321 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83325 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83328 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83332 "isa_tms320.tcc"
OpBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 83336 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83340 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83344 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83347 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83351 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83354 "isa_tms320.tcc"
)
{
#line 185 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "B" << cond_name << "D 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 3 + imm) << dec;
		os << " <" << cpu.GetFunctionFriendlyName((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 3 + imm) << ">";
		return true;
	}
#line 83366 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83371 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83374 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83378 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83381 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83385 "isa_tms320.tcc"
OpBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 83389 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83393 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83397 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83400 "isa_tms320.tcc"
)
{
#line 194 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Rule 2: this instruction can't be one of the last 4 instructions in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && (cpu.GetPC() >= (cpu.GetRE() - 3) && (cpu.GetPC() <= cpu.GetRE())))))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the branch target address
		typename CONFIG::address_t target_addr = next_pc + imm + 2;

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 83432 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83438 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83441 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83445 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83448 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83453 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83457 "isa_tms320.tcc"
> *DecodeOpBcondD_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBcondD_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83463 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83467 "isa_tms320.tcc"
	>(code, addr);
}

/* end of BcondD (branch conditionally (delayed))
**********************************************************/
/**********************************************************
* BR (branch unconditionally (standard))
* op BR(0b0110000[7]:0b0[1]:src[24])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 83480 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83483 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83487 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83490 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83494 "isa_tms320.tcc"
OpBR<
#line 45 "isa/tms320.isa"
CONFIG
#line 83498 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83502 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83506 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83509 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83513 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83516 "isa_tms320.tcc"
)
{
#line 233 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "BR 0x" << hex << src << dec;
		os << " <" << cpu.GetFunctionFriendlyName(src) << ">";
		return true;
	}
#line 83525 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83530 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83533 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83537 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83540 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83544 "isa_tms320.tcc"
OpBR<
#line 45 "isa/tms320.isa"
CONFIG
#line 83548 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83552 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83556 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83559 "isa_tms320.tcc"
)
{
#line 239 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the branch target address
		typename CONFIG::address_t target_addr = src;

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 83578 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83584 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83587 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83591 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83594 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83599 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83603 "isa_tms320.tcc"
> *DecodeOpBR(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBR<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83609 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83613 "isa_tms320.tcc"
	>(code, addr);
}

/* end of BR (branch unconditionally (standard))
**********************************************************/
/**********************************************************
* BRD (branch unconditionally (delayed))
* op BRD(0b0110000[7]:0b1[1]:src[24])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 83626 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83629 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83633 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83636 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83640 "isa_tms320.tcc"
OpBRD<
#line 45 "isa/tms320.isa"
CONFIG
#line 83644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83648 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83652 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83655 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83659 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83662 "isa_tms320.tcc"
)
{
#line 265 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "BRD 0x" << hex << src << dec;
		os << " <" << cpu.GetFunctionFriendlyName(src) << ">";
		return true;
	}
#line 83671 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83676 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83679 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83683 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83686 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83690 "isa_tms320.tcc"
OpBRD<
#line 45 "isa/tms320.isa"
CONFIG
#line 83694 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83698 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83702 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83705 "isa_tms320.tcc"
)
{
#line 271 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Rule 2: this instruction can't be one of the last 4 instructions in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && (cpu.GetPC() >= (cpu.GetRE() - 3) && (cpu.GetPC() <= cpu.GetRE())))))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the branch target address
		typename CONFIG::address_t target_addr = src;

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 83725 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83731 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83734 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83738 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83741 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83746 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83750 "isa_tms320.tcc"
> *DecodeOpBRD(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBRD<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83756 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83760 "isa_tms320.tcc"
	>(code, addr);
}

/* end of BRD (branch unconditionally (delayed))
**********************************************************/
/**********************************************************
* CALL (call subroutine)
* op CALL(0b0110001[7]:0b0[1]:src[24])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 83773 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83783 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83787 "isa_tms320.tcc"
OpCALL<
#line 45 "isa/tms320.isa"
CONFIG
#line 83791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83795 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83799 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83802 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83806 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83809 "isa_tms320.tcc"
)
{
#line 298 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "CALL 0x" << hex << src << dec;
		os << " <" << cpu.GetFunctionFriendlyName(src) << ">";
		return true;
	}
#line 83818 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83823 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83826 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83830 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83833 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83837 "isa_tms320.tcc"
OpCALL<
#line 45 "isa/tms320.isa"
CONFIG
#line 83841 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83845 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83849 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83852 "isa_tms320.tcc"
)
{
#line 304 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the target call address
		typename CONFIG::address_t target_addr = src;

		// Store the next PC at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, next_pc);

		// Update SP
		cpu.SetSP(sp);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 83883 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83899 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83908 "isa_tms320.tcc"
> *DecodeOpCALL(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCALL<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83914 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83918 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CALL (call subroutine)
**********************************************************/
/**********************************************************
* CALLcond (call subroutine conditionally)
* op CALLcond(0b011100[6]:b[1]:0b0000[4]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 83931 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83934 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83938 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83941 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83945 "isa_tms320.tcc"
OpCALLcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 83949 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83953 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83957 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83960 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83964 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83967 "isa_tms320.tcc"
)
{
#line 342 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "CALL" << cond_name << " " << reg_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.GetReg(reg)) << ">";
		return true;
	}
#line 83980 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83985 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83988 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83992 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83995 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83999 "isa_tms320.tcc"
OpCALLcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 84003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84007 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84011 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84014 "isa_tms320.tcc"
)
{
#line 352 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetReg(reg);

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Store the next PC at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, next_pc);

		// Update SP
		cpu.SetSP(sp);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 84054 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84060 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84063 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84067 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84070 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84075 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84079 "isa_tms320.tcc"
> *DecodeOpCALLcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCALLcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84085 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84089 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 84096 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84099 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84106 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84110 "isa_tms320.tcc"
OpCALLcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 84114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84118 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84122 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84125 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84129 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84132 "isa_tms320.tcc"
)
{
#line 391 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "CALL" << cond_name << " 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << dec;
		os << " <" << cpu.GetFunctionFriendlyName((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << ">";
		return true;
	}
#line 84144 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84149 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84152 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84156 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84159 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84163 "isa_tms320.tcc"
OpCALLcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 84167 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84171 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84175 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84178 "isa_tms320.tcc"
)
{
#line 400 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the target address
		typename CONFIG::address_t target_addr = next_pc + imm;

		// Store the next PC at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, next_pc);

		// Update SP
		cpu.SetSP(sp);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 84218 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84224 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84227 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84231 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84234 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84239 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84243 "isa_tms320.tcc"
> *DecodeOpCALLcond_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCALLcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84249 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84253 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CALLcond (call subroutine conditionally)
**********************************************************/
/**********************************************************
* DBcond (decrement and branch conditionally (standard))
* op DBcond(0b011011[6]:b[1]:ar[3]:0b0[1]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 84266 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84269 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84273 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84276 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84280 "isa_tms320.tcc"
OpDBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 84284 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84288 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84292 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84295 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84299 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84302 "isa_tms320.tcc"
)
{
#line 447 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "DB" << cond_name << " AR" << ar << ", " << reg_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.GetReg(reg)) << ">";
		return true;
	}
#line 84315 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84320 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84323 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84327 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84330 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84334 "isa_tms320.tcc"
OpDBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 84338 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84342 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84346 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84349 "isa_tms320.tcc"
)
{
#line 457 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read ARn
		int32_t ar_value = SignExtend(cpu.GetAR23_0(ar), 24);

		// Compute new value for ARn
		ar_value = ar_value - 1;

		// Update ARn
		cpu.SetAR23_0(ar, (uint32_t) ar_value);

		// Check whether ARn is >= 0
		if(ar_value < 0) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetReg(reg);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 84389 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84395 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84398 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84402 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84405 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84410 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84414 "isa_tms320.tcc"
> *DecodeOpDBcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpDBcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84420 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84424 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 84431 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84434 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84438 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84441 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84445 "isa_tms320.tcc"
OpDBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 84449 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84453 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84457 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84460 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84464 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84467 "isa_tms320.tcc"
)
{
#line 496 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "DB" << cond_name << " AR" << ar << ", 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << dec;
		os << " <" << cpu.GetFunctionFriendlyName((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << ">";
		return true;
	}
#line 84479 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84491 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84494 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84498 "isa_tms320.tcc"
OpDBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 84502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84506 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84510 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84513 "isa_tms320.tcc"
)
{
#line 505 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read ARn
		int32_t ar_value = SignExtend(cpu.GetAR23_0(ar), 24);

		// Compute new value for ARn
		ar_value = ar_value - 1;

		// Update ARn
		cpu.SetAR23_0(ar, (uint32_t) ar_value);

		// Check whether ARn is >= 0
		if(ar_value < 0) return;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the target address
		typename CONFIG::address_t target_addr = next_pc + imm;

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 84556 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84562 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84565 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84569 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84572 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84577 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84581 "isa_tms320.tcc"
> *DecodeOpDBcond_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpDBcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84587 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84591 "isa_tms320.tcc"
	>(code, addr);
}

/* end of DBcond (decrement and branch conditionally (standard))
**********************************************************/
/**********************************************************
* DBcondD (decrement and branch conditionally (delayed))
* op DBcondD(0b011011[6]:b[1]:ar[3]:0b1[1]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 84604 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84607 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84611 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84614 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84618 "isa_tms320.tcc"
OpDBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 84622 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84626 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84630 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84633 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84637 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84640 "isa_tms320.tcc"
)
{
#line 555 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "DB" << cond_name << "D AR" << ar << ", " << reg_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.GetReg(reg)) << ">";
		return true;
	}
#line 84653 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84661 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84665 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84668 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84672 "isa_tms320.tcc"
OpDBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 84676 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84680 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84684 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84687 "isa_tms320.tcc"
)
{
#line 565 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Rule 2: this instruction can't be one of the last 4 instructions in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && (cpu.GetPC() >= (cpu.GetRE() - 3) && (cpu.GetPC() <= cpu.GetRE())))))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read ARn
		int32_t ar_value = SignExtend(cpu.GetAR23_0(ar), 24);

		// Compute new value for ARn
		ar_value = ar_value - 1;

		// Update ARn
		cpu.SetAR23_0(ar, (uint32_t) ar_value);

		// Check whether ARn is >= 0
		if(ar_value < 0) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetReg(reg);

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 84728 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84734 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84737 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84741 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84744 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84749 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84753 "isa_tms320.tcc"
> *DecodeOpDBcondD_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpDBcondD_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84759 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84763 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 84770 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84773 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84777 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84780 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84784 "isa_tms320.tcc"
OpDBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 84788 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84792 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84796 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84799 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84803 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84806 "isa_tms320.tcc"
)
{
#line 605 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "DB" << cond_name << "D AR" << ar << ", 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 3 + imm) << dec;
		os << " <" << cpu.GetFunctionFriendlyName((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 3 + imm) << ">";
		return true;
	}
#line 84818 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84823 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84826 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84830 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84833 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84837 "isa_tms320.tcc"
OpDBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 84841 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84845 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84849 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84852 "isa_tms320.tcc"
)
{
#line 614 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Rule 2: this instruction can't be one of the last 4 instructions in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && (cpu.GetPC() >= (cpu.GetRE() - 3) && (cpu.GetPC() <= cpu.GetRE())))))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read ARn
		int32_t ar_value = SignExtend(cpu.GetAR23_0(ar), 24);

		// Compute new value for ARn
		ar_value = ar_value - 1;

		// Update ARn
		cpu.SetAR23_0(ar, (uint32_t) ar_value);

		// Check whether ARn is >= 0
		if(ar_value < 0) return;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the target address
		typename CONFIG::address_t target_addr = next_pc + imm + 2;

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 84896 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84902 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84905 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84909 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84912 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84917 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84921 "isa_tms320.tcc"
> *DecodeOpDBcondD_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpDBcondD_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84927 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84931 "isa_tms320.tcc"
	>(code, addr);
}

/* end of DBcondD (decrement and branch conditionally (delayed))
**********************************************************/
/**********************************************************
* IACK (interrupt acknowledge)
* op IACK(0b000[3]:0b110110[6]:g[2]:0b00000[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 84944 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84947 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84951 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84954 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84958 "isa_tms320.tcc"
OpIACK_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 84962 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84966 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84970 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84973 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84977 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84980 "isa_tms320.tcc"
)
{
#line 665 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "IACK @0x" << direct;
		return true;
	}
#line 84988 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84993 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84996 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85003 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85007 "isa_tms320.tcc"
OpIACK_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 85011 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85015 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85019 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85022 "isa_tms320.tcc"
)
{
#line 670 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 85029 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85035 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85042 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85045 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85050 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85054 "isa_tms320.tcc"
> *DecodeOpIACK_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpIACK_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85060 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85064 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 85071 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85074 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85078 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85081 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85085 "isa_tms320.tcc"
OpIACK_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 85089 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85093 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85097 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85100 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85104 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85107 "isa_tms320.tcc"
)
{
#line 676 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		string disasm_indir;
		if(!cpu.DisasmIndir(disasm_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;
		os << "IACK " << disasm_indir;
		return true;
	}
#line 85117 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85122 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85125 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85129 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85132 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85136 "isa_tms320.tcc"
OpIACK_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 85140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85144 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85148 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85151 "isa_tms320.tcc"
)
{
#line 683 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 85158 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85164 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85167 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85171 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85174 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85179 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85183 "isa_tms320.tcc"
> *DecodeOpIACK_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpIACK_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85189 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85193 "isa_tms320.tcc"
	>(code, addr);
}

/* end of IACK (interrupt acknowledge)
**********************************************************/
/**********************************************************
* IDLE (idle until interrupt)
* op IDLE(0b000[3]:0b001100[6]:0[23])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 85206 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85209 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85213 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85216 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85220 "isa_tms320.tcc"
OpIDLE<
#line 45 "isa/tms320.isa"
CONFIG
#line 85224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85228 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85232 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85235 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85239 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85242 "isa_tms320.tcc"
)
{
#line 697 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "IDLE";
		return true;
	}
#line 85250 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85255 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85258 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85262 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85265 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85269 "isa_tms320.tcc"
OpIDLE<
#line 45 "isa/tms320.isa"
CONFIG
#line 85273 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85277 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85281 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85284 "isa_tms320.tcc"
)
{
#line 702 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Set ST[GIE]
		cpu.SetST_GIE();

		// Enter idle mode 1
		cpu.Idle(1);
	}
#line 85303 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85309 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85312 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85316 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85319 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85324 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85328 "isa_tms320.tcc"
> *DecodeOpIDLE(CodeType code, typename CONFIG::address_t addr)
{
	return new OpIDLE<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85334 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85338 "isa_tms320.tcc"
	>(code, addr);
}

/* end of IDLE (idle until interrupt)
**********************************************************/
/**********************************************************
* NOP (no operation)
* op NOP(0b000[3]:0b011001[6]:g[2]:0b00000[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 85351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85354 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85358 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85361 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85365 "isa_tms320.tcc"
OpNOP_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 85369 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85373 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85377 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85380 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85384 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85387 "isa_tms320.tcc"
)
{
#line 728 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{

		os << "NOP";
		return true;
	}
#line 85396 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85401 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85404 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85408 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85411 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85415 "isa_tms320.tcc"
OpNOP_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 85419 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85423 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85427 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85430 "isa_tms320.tcc"
)
{
#line 734 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// No operation
	}
#line 85437 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85443 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85446 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85450 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85453 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85458 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85462 "isa_tms320.tcc"
> *DecodeOpNOP_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOP_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85468 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85472 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 85479 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85482 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85486 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85489 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85493 "isa_tms320.tcc"
OpNOP_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 85497 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85501 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85505 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85508 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85512 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85515 "isa_tms320.tcc"
)
{
#line 740 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		string disasm_indir;
		if(!cpu.DisasmIndir(disasm_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;
		os << "NOP " << disasm_indir;
		return true;
	}
#line 85525 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85530 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85533 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85537 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85540 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85544 "isa_tms320.tcc"
OpNOP_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 85548 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85552 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85556 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85559 "isa_tms320.tcc"
)
{
#line 747 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Do a dummy load from memory
		cpu.IntLoad(ea);
	}
#line 85577 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85583 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85586 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85590 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85593 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85598 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85602 "isa_tms320.tcc"
> *DecodeOpNOP_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOP_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85608 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85612 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NOP (no operation)
**********************************************************/
/**********************************************************
* RETIcond (return from interrupt conditionally)
* op RETIcond(0b01111[5]:0b0000[4]:0b00[2]:cond[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 85625 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85628 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85632 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85635 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85639 "isa_tms320.tcc"
OpRETIcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 85643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85647 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85651 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85654 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85658 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85661 "isa_tms320.tcc"
)
{
#line 772 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "RETI" << cond_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.IntLoad(cpu.GetSP() & ADDRESS_MASK)) << ">";
		return true;
	}
#line 85673 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85678 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85681 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85685 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85688 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85692 "isa_tms320.tcc"
OpRETIcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 85696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85700 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85704 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85707 "isa_tms320.tcc"
)
{
#line 781 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read SP
		typename CONFIG::address_t sp = cpu.GetSP();

		// Load the target address stored at SP
		typename CONFIG::address_t target_addr = cpu.IntLoad(sp & ADDRESS_MASK);

		// Compute the new value of SP
		sp = sp - 1;

		// Update SP
		cpu.SetSP(sp);

		// Set ST[GIE]
		cpu.SetST_GIE();

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 85747 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85753 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85756 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85760 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85763 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85768 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85772 "isa_tms320.tcc"
> *DecodeOpRETIcond(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRETIcond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85778 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85782 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RETIcond (return from interrupt conditionally)
**********************************************************/
/**********************************************************
* RETScond (return form subroutine conditionally)
* op RETScond(0b01111[5]:0b0001[4]:0b00[2]:cond[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 85795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85798 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85802 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85805 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85809 "isa_tms320.tcc"
OpRETScond<
#line 45 "isa/tms320.isa"
CONFIG
#line 85813 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85817 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85821 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85824 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85828 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85831 "isa_tms320.tcc"
)
{
#line 828 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "RETS" << cond_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.IntLoad(cpu.GetSP() & ADDRESS_MASK)) << ">";
		return true;
	}
#line 85843 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85848 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85851 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85855 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85858 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85862 "isa_tms320.tcc"
OpRETScond<
#line 45 "isa/tms320.isa"
CONFIG
#line 85866 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85870 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85874 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85877 "isa_tms320.tcc"
)
{
#line 837 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read SP
		typename CONFIG::address_t sp = cpu.GetSP();

		// Load the target address stored at SP
		typename CONFIG::address_t target_addr = cpu.IntLoad(sp & ADDRESS_MASK);

		// Compute the new value of SP
		sp = sp - 1;

		// Update SP
		cpu.SetSP(sp);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 85914 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85920 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85923 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85927 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85930 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85935 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85939 "isa_tms320.tcc"
> *DecodeOpRETScond(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRETScond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85945 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85949 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RETScond (return form subroutine conditionally)
**********************************************************/
/**********************************************************
* RPTB (repeat block of instructions)
* op RPTB(0b01100100[8]:src[24])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 85962 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85965 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85972 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85976 "isa_tms320.tcc"
OpRPTB<
#line 45 "isa/tms320.isa"
CONFIG
#line 85980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85984 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85988 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85991 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85995 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85998 "isa_tms320.tcc"
)
{
#line 881 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "RPTB 0x" << hex << src << dec;
		os << " <" << cpu.GetFunctionFriendlyName(src) << ">";
		return true;
	}
#line 86007 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86022 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86026 "isa_tms320.tcc"
OpRPTB<
#line 45 "isa/tms320.isa"
CONFIG
#line 86030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86034 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86038 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86041 "isa_tms320.tcc"
)
{
#line 887 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.ResetS();

		// Load RE with source operand value
		cpu.SetRE(src);
	}
#line 86069 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86078 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86082 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86085 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86094 "isa_tms320.tcc"
> *DecodeOpRPTB(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTB<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86100 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86104 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RPTB (repeat block of instructions)
**********************************************************/
/**********************************************************
* RPTS (repeat single instruction)
* op RPTS(0b000[3]:0b100111[6]:g[2]:0b11011[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 86117 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86120 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86127 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86131 "isa_tms320.tcc"
OpRPTS_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 86135 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86139 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86143 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86146 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86150 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86153 "isa_tms320.tcc"
)
{
#line 922 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *src_reg_name = REG_NAME[src];

		if(!src_reg_name) return false;
		os << "RPTS " << src_reg_name;
		return true;
	}
#line 86164 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86169 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86172 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86176 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86179 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86183 "isa_tms320.tcc"
OpRPTS_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 86187 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86191 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86195 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86198 "isa_tms320.tcc"
)
{
#line 930 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check that source register is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		typename CONFIG::address_t src_value = cpu.GetReg(src);

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);
		cpu.SetRE(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.SetS();

		// Load RC with source operand value
		cpu.SetRC(src_value);
	}
#line 86236 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86242 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86245 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86249 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86252 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86257 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86261 "isa_tms320.tcc"
> *DecodeOpRPTS_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTS_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86267 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86271 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 86278 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86281 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86285 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86288 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86292 "isa_tms320.tcc"
OpRPTS_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 86296 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86300 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86304 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86307 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86311 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86314 "isa_tms320.tcc"
)
{
#line 967 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "RPTS @0x" << hex << direct << dec;
		return true;
	}
#line 86322 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86327 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86330 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86334 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86337 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86341 "isa_tms320.tcc"
OpRPTS_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 86345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86349 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86353 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86356 "isa_tms320.tcc"
)
{
#line 972 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the effective address of the source operand
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Load the source operand value from memory
		typename CONFIG::address_t src_value = cpu.IntLoad(ea);

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);
		cpu.SetRE(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.SetS();

		// Load RC with source operand value
		cpu.SetRC(src_value);
	}
#line 86391 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86397 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86400 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86404 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86407 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86412 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86416 "isa_tms320.tcc"
> *DecodeOpRPTS_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTS_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86422 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86426 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 86433 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86436 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86443 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86447 "isa_tms320.tcc"
OpRPTS_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 86451 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86455 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86459 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86462 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86466 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86469 "isa_tms320.tcc"
)
{
#line 1006 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		string disasm_indir;
		if(!cpu.DisasmIndir(disasm_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;
		os << "RPTS " << disasm_indir;
		return true;
	}
#line 86479 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86491 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86494 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86498 "isa_tms320.tcc"
OpRPTS_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 86502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86506 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86510 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86513 "isa_tms320.tcc"
)
{
#line 1013 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the source operand value from memory
		typename CONFIG::address_t src_value = cpu.IntLoad(ea);

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);
		cpu.SetRE(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.SetS();

		// Load RC with source operand value
		cpu.SetRC(src_value);
	}
#line 86555 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86561 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86564 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86568 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86571 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86580 "isa_tms320.tcc"
> *DecodeOpRPTS_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTS_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86586 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86590 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 86597 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86600 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86604 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86607 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86611 "isa_tms320.tcc"
OpRPTS_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 86615 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86619 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86623 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86626 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86630 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86633 "isa_tms320.tcc"
)
{
#line 1054 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "RPTS @0x" << hex << imm << dec;
		return true;
	}
#line 86641 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86646 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86649 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86653 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86656 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86660 "isa_tms320.tcc"
OpRPTS_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 86664 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86668 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86672 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86675 "isa_tms320.tcc"
)
{
#line 1059 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result
		uint32_t src_value = imm; // imm has already been sign extended by the decoder

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);
		cpu.SetRE(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.SetS();

		// Load RC with source operand value
		cpu.SetRC(src_value);
	}
#line 86707 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86713 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86716 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86720 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86723 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86728 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86732 "isa_tms320.tcc"
> *DecodeOpRPTS_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTS_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86738 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86742 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RPTS (repeat single instruction)
**********************************************************/
/**********************************************************
* SWI (software interrupt)
* op SWI(0b0110011[7]:0b0000[4]:0[21])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 86755 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86758 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86762 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86765 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86769 "isa_tms320.tcc"
OpSWI<
#line 45 "isa/tms320.isa"
CONFIG
#line 86773 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86777 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86781 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86784 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86788 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86791 "isa_tms320.tcc"
)
{
#line 1098 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "SWI";
		return true;
	}
#line 86799 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86804 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86807 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86811 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86814 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86818 "isa_tms320.tcc"
OpSWI<
#line 45 "isa/tms320.isa"
CONFIG
#line 86822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86826 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86830 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86833 "isa_tms320.tcc"
)
{
#line 1103 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		if(unlikely(!cpu.SWI()))
		{
			throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
		}
	}
#line 86843 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86849 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86852 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86856 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86859 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86864 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86868 "isa_tms320.tcc"
> *DecodeOpSWI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSWI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86874 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86878 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SWI (software interrupt)
**********************************************************/
/**********************************************************
* TRAPcond (trap conditionally)
* op TRAPcond(0b0111010[7]:0b0000[4]:cond[5]:0b01[11]:n[5])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 86891 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86898 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86901 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86905 "isa_tms320.tcc"
OpTRAPcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 86909 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86913 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86917 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86920 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86924 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86927 "isa_tms320.tcc"
)
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		if(!cond_name) return false;
		os << "TRAP" << cond_name << " " << n;
		return true;
	}
#line 86937 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86942 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86945 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86949 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86952 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86956 "isa_tms320.tcc"
OpTRAPcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 86960 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86964 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86968 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86971 "isa_tms320.tcc"
)
{
#line 1128 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Store the next PC at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, next_pc);

		// Update SP
		cpu.SetSP(sp);

		// Load trap handler address
		typename CONFIG::address_t trap_handler_addr = cpu.IntLoad(0x20 + n);

		// Reset ST[GIE] to disable further interrupts until reactivated by the software
		cpu.ResetST_GIE();

		// Branch to trap handler
		cpu.Branch(trap_handler_addr);
	}
#line 87014 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87020 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87023 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87030 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87035 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87039 "isa_tms320.tcc"
> *DecodeOpTRAPcond(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTRAPcond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87045 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87049 "isa_tms320.tcc"
	>(code, addr);
}

/* end of TRAPcond (trap conditionally)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of low-power control operations:
* - IDLE2        low-power idle
* - LOPOWER      divide clock by 16
* - MAXSPEED     restore clock to regular speed
*/
/**********************************************************
* IDLE2 (low-power idle)
* op IDLE2(0b000[3]:0b001100[6]:0b001[23])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 87101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87111 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 87115 "isa_tms320.tcc"
OpIDLE2<
#line 45 "isa/tms320.isa"
CONFIG
#line 87119 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87123 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87127 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87130 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 87134 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 87137 "isa_tms320.tcc"
)
{
#line 49 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		os << "IDLE2";
		return true;
	}
#line 87145 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 87150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87157 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87160 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87164 "isa_tms320.tcc"
OpIDLE2<
#line 45 "isa/tms320.isa"
CONFIG
#line 87168 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87172 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87176 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87179 "isa_tms320.tcc"
)
{
#line 54 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch()))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Set ST[GIE]
		cpu.SetST_GIE();

		// Enter idle mode 2
		cpu.Idle(2);
	}
#line 87197 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87203 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87206 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87210 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87213 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87218 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87222 "isa_tms320.tcc"
> *DecodeOpIDLE2(CodeType code, typename CONFIG::address_t addr)
{
	return new OpIDLE2<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87228 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87232 "isa_tms320.tcc"
	>(code, addr);
}

/* end of IDLE2 (low-power idle)
**********************************************************/
/**********************************************************
* LOPOWER (divide clock by 16)
* op LOPOWER(0b000[3]:0b100001[6]:0b001[23])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 87245 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87248 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87252 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87255 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 87259 "isa_tms320.tcc"
OpLOPOWER<
#line 45 "isa/tms320.isa"
CONFIG
#line 87263 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87267 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87271 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87274 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 87278 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 87281 "isa_tms320.tcc"
)
{
#line 79 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		os << "LOPOWER";
		return true;
	}
#line 87289 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 87294 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87297 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87301 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87304 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87308 "isa_tms320.tcc"
OpLOPOWER<
#line 45 "isa/tms320.isa"
CONFIG
#line 87312 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87316 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87320 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87323 "isa_tms320.tcc"
)
{
#line 84 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 87330 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87336 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87339 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87343 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87346 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87351 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87355 "isa_tms320.tcc"
> *DecodeOpLOPOWER(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLOPOWER<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87361 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87365 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LOPOWER (divide clock by 16)
**********************************************************/
/**********************************************************
* MAXSPEED (restore clock to regular speed)
* op MAXSPEED(0b000[3]:0b100001[6]:0[23])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 87378 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87381 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87385 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87388 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 87392 "isa_tms320.tcc"
OpMAXSPEED<
#line 45 "isa/tms320.isa"
CONFIG
#line 87396 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87400 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87404 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87407 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 87411 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 87414 "isa_tms320.tcc"
)
{
#line 98 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		os << "MAXSPEED";
		return true;
	}
#line 87422 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 87427 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87434 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87437 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87441 "isa_tms320.tcc"
OpMAXSPEED<
#line 45 "isa/tms320.isa"
CONFIG
#line 87445 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87449 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87453 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87456 "isa_tms320.tcc"
)
{
#line 103 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 87463 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87476 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87479 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87488 "isa_tms320.tcc"
> *DecodeOpMAXSPEED(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMAXSPEED<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87494 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87498 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MAXSPEED (restore clock to regular speed)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of interlocked-operations:
* - LDFI         load floating-point value, interlocked
* - LDII         load integer, interlocked
* - SIGI         signal, interlocked
* - STFI         store floating-point value, interlocked
* - STII         store integer, interflocked
*/
/**********************************************************
* LDFI (load floating-point value, interlocked)
* op LDFI(0b000[3]:0b001111[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 87552 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87555 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87559 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87562 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87566 "isa_tms320.tcc"
OpLDFI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 87570 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87574 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87578 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87581 "isa_tms320.tcc"
)
{
#line 52 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 87588 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87594 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87597 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87601 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87604 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87609 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87613 "isa_tms320.tcc"
> *DecodeOpLDFI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87619 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87623 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 87630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87633 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87640 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87644 "isa_tms320.tcc"
OpLDFI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 87648 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87652 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87656 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87659 "isa_tms320.tcc"
)
{
#line 56 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 87666 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87672 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87675 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87679 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87682 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87687 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87691 "isa_tms320.tcc"
> *DecodeOpLDFI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87697 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87701 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDFI (load floating-point value, interlocked)
**********************************************************/
/**********************************************************
* LDII (load integer, interlocked)
* op LDII(0b000[3]:0b010001[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 87714 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87717 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87721 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87724 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87728 "isa_tms320.tcc"
OpLDII_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 87732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87736 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87740 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87743 "isa_tms320.tcc"
)
{
#line 71 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea, true /* interlocked */);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z  // or mask
			);
		}
	}
#line 87774 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87783 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87787 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87790 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87795 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87799 "isa_tms320.tcc"
> *DecodeOpLDII_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDII_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87805 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87809 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 87816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87819 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87823 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87826 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87830 "isa_tms320.tcc"
OpLDII_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 87834 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87838 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87842 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87845 "isa_tms320.tcc"
)
{
#line 99 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea, true /* interlocked */);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z  // or mask
			);
		}
	}
#line 87889 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87895 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87898 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87902 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87905 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87910 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87914 "isa_tms320.tcc"
> *DecodeOpLDII_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDII_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87920 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87924 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDII (load integer, interlocked)
**********************************************************/
/**********************************************************
* SIGI (signal, interlocked)
* op SIGI(0b000[3]:0b101100[6]:0b00[2]:0[21])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 87937 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87944 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87947 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87951 "isa_tms320.tcc"
OpSIGI<
#line 45 "isa/tms320.isa"
CONFIG
#line 87955 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87959 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87963 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87966 "isa_tms320.tcc"
)
{
#line 150 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 87973 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87979 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87982 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87986 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87989 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87994 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87998 "isa_tms320.tcc"
> *DecodeOpSIGI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSIGI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88004 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88008 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SIGI (signal, interlocked)
**********************************************************/
/**********************************************************
* STFI (store floating-point value, interlocked)
* op STFI(0b000[3]:0b101001[6]:g[2]:src[5]:dst[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 88021 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88024 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88028 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88031 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88035 "isa_tms320.tcc"
OpSTFI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 88039 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88043 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88047 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88050 "isa_tms320.tcc"
)
{
#line 165 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 88057 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88063 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88066 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88070 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88073 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88078 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88082 "isa_tms320.tcc"
> *DecodeOpSTFI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTFI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88088 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88092 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 88099 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88106 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88109 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88113 "isa_tms320.tcc"
OpSTFI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 88117 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88121 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88125 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88128 "isa_tms320.tcc"
)
{
#line 169 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 88135 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88141 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88144 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88148 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88151 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88156 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88160 "isa_tms320.tcc"
> *DecodeOpSTFI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTFI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88166 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88170 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STFI (store floating-point value, interlocked)
**********************************************************/
/**********************************************************
* STII (store integer, interflocked)
* op STII(0b000[3]:0b101011[6]:g[2]:src[5]:dst[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 88183 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88186 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88190 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88193 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88197 "isa_tms320.tcc"
OpSTII_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 88201 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88205 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88209 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88212 "isa_tms320.tcc"
)
{
#line 184 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		// Check whether the source register number is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Store the word into memory
		cpu.IntStore(ea, result, true /* interlocked */);
	}
#line 88232 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88238 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88241 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88245 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88248 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88253 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88257 "isa_tms320.tcc"
> *DecodeOpSTII_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTII_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88263 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88267 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 88274 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88277 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88281 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88284 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88288 "isa_tms320.tcc"
OpSTII_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 88292 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88296 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88300 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88303 "isa_tms320.tcc"
)
{
#line 201 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		// Check whether the source register number is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Store the word into memory
		cpu.IntStore(ea, result, true /* interlocked */);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}
	}
#line 88336 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88342 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88349 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88352 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88357 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88361 "isa_tms320.tcc"
> *DecodeOpSTII_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTII_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88367 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88371 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STII (store integer, interflocked)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of parallel operations:
* - ABSF || STF		absolute value of a floating-point number and store floating-point value
* - ABSI || STI		absolute value of an integer and store integer
* - ADDF3 || STF		add floating-point values and store floating-point value
* - ADDI3 || STI		add integers and store integer
* - AND3 || STI		bitwise-logical AND and store integer
* - ASH3 || STI		arithmetic shift and store integer
* - FIX || STI			convert floating-point value to integer and store integer
* - FLOAT || STF		convert integer to floating-point value and store floating-point value
* - LDF || STF			load floating-point value and store floating-point value
* - LDI || STI			load integer and store integer
* - LSH3 || STI		logical shift and store integer
* - MPYF3 || STF       multiply floating-point values and store floating-point value
* - MPYI3 || STI		multiply integer and store integer
* - NEGF || STF		negate floating-point value and store floating-point value
* - NEGI || STI		negate integer and store integer
* - NOT || STI			complement value and store integer
* - OR3 || STI			bitwise-logical OR value and store integer
* - STF || STF			store floating-point values
* - STI || STI			sotre integers
* - SUBF3 || STF		subtract floating-point value and store floating-point value
* - SUBI3 || STI		subtract integer and store integer
* - XOR3 || STI		bitwise-exclusive OR values and store integer
* - LDF || LDF			load floating-point value
* - LDI || LDI			load integer
* - MPYF3 || ADDF3		multiply and add floating-point value
* - MPYF3 || SUBF3		multiply and subtract floating-point value
* - MPYI3 || ADDI3		multiply and add integer
* - MPYI3 || SUBI3		multiply and subtract integer
*/
/**********************************************************
* ABSF || STF (absolute value of a floating-point number and store floating-point value)
* op ABSF_STF(0b11[2]:0b00100[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 88448 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88451 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88455 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88458 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 88462 "isa_tms320.tcc"
OpABSF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 88466 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88470 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88474 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88477 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 88481 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 88484 "isa_tms320.tcc"
)
{
#line 75 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "ABSF " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 88502 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 88507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88510 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88514 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88517 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88521 "isa_tms320.tcc"
OpABSF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 88525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88529 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88533 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88536 "isa_tms320.tcc"
)
{
#line 104 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 88543 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88549 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88552 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88556 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88559 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88564 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88568 "isa_tms320.tcc"
> *DecodeOpABSF_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88574 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88578 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 88585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88588 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88592 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88595 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 88599 "isa_tms320.tcc"
OpABSF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 88603 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88607 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88611 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88614 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 88618 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 88621 "isa_tms320.tcc"
)
{
#line 90 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "ABSF " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 88638 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 88643 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88646 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88653 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88657 "isa_tms320.tcc"
OpABSF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 88661 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88665 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88669 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88672 "isa_tms320.tcc"
)
{
#line 108 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 88679 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88685 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88688 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88692 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88695 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88704 "isa_tms320.tcc"
> *DecodeOpABSF_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88710 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88714 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ABSF || STF (absolute value of a floating-point number and store floating-point value)
**********************************************************/
/**********************************************************
* ABSI || STI (absolute value of an integer and store integer)
* op ABSI_STI(0b11[2]:0b00101[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 88728 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88731 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88735 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88738 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 88742 "isa_tms320.tcc"
OpABSI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 88746 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88750 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88754 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88757 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 88761 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 88764 "isa_tms320.tcc"
)
{
#line 124 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "ABSI " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 88782 "isa_tms320.tcc"
}
//    abs(indir(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 88790 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88793 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88797 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88800 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88804 "isa_tms320.tcc"
OpABSI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 88808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88812 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88816 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88819 "isa_tms320.tcc"
)
{
#line 156 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Compute the result of ABSI
		uint32_t result;  // the 32-bit result
		uint8_t overflow;      // the overflow (0 or 1)

		if(src2_value == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = ((int32_t) src2_value >= 0) ? src2_value : -src2_value;
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of ABSI in register 'dst1'
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_Z | M_ST_V,    // or mask
		0,
		overflow
		);
	}
#line 88897 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88903 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88906 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88910 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88913 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88918 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88922 "isa_tms320.tcc"
> *DecodeOpABSI_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88928 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88932 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 88939 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88946 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88949 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 88953 "isa_tms320.tcc"
OpABSI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 88957 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88961 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88965 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88968 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 88972 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 88975 "isa_tms320.tcc"
)
{
#line 139 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "ABSI " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 88992 "isa_tms320.tcc"
}
//    abs(reg(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 89000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89010 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89014 "isa_tms320.tcc"
OpABSI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 89018 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89022 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89026 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89029 "isa_tms320.tcc"
)
{
#line 234 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ABSI
		uint32_t result;  // the 32-bit result
		uint8_t overflow;      // the overflow (0 or 1)

		if(src2_value == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = ((int32_t) src2_value >= 0) ? src2_value : -src2_value;
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of ABSI in register 'dst1'
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_Z | M_ST_V,    // or mask
		0,
		overflow
		);
	}
#line 89093 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89099 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89106 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89109 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89118 "isa_tms320.tcc"
> *DecodeOpABSI_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89124 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89128 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ABSI || STI (absolute value of an integer and store integer)
**********************************************************/
/**********************************************************
* ADDF3 || STF (add floating-point values and store floating-point value)
* op ADDF3_STF(0b11[2]:0b00110[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 89142 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89145 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89149 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89152 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 89156 "isa_tms320.tcc"
OpADDF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 89160 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89164 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89168 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89171 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 89175 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 89178 "isa_tms320.tcc"
)
{
#line 307 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "ADDF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 89197 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 89202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89205 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89212 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89216 "isa_tms320.tcc"
OpADDF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 89220 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89224 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89228 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89231 "isa_tms320.tcc"
)
{
#line 338 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 89238 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89244 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89247 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89254 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89259 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89263 "isa_tms320.tcc"
> *DecodeOpADDF3_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89269 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89273 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 89280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89283 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89287 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89290 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 89294 "isa_tms320.tcc"
OpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 89298 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89302 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89306 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89309 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 89313 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 89316 "isa_tms320.tcc"
)
{
#line 323 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "ADDF3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 89334 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 89339 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89342 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89346 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89349 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89353 "isa_tms320.tcc"
OpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 89357 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89361 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89365 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89368 "isa_tms320.tcc"
)
{
#line 342 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 89375 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89381 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89384 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89388 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89391 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89396 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89400 "isa_tms320.tcc"
> *DecodeOpADDF3_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89406 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89410 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ADDF3 || STF (add floating-point values and store floating-point value)
**********************************************************/
/**********************************************************
* ADDI3 || STI (add integers and store integer)
* op ADDI3_STI(0b11[2]:0b00111[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 89424 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89427 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89431 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89434 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 89438 "isa_tms320.tcc"
OpADDI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 89442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89446 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89450 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89453 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 89457 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 89460 "isa_tms320.tcc"
)
{
#line 358 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "ADDI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 89479 "isa_tms320.tcc"
}
//    reg(src1) + indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 89487 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89490 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89494 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89497 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89501 "isa_tms320.tcc"
OpADDI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 89505 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89509 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89513 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89516 "isa_tms320.tcc"
)
{
#line 392 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ADDI3
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Check whether 'dst1' operand is an extended precision register
		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		carry_out,
		overflow
		);
	}
#line 89593 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89599 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89602 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89606 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89609 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89618 "isa_tms320.tcc"
> *DecodeOpADDI3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89624 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89628 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 89635 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89642 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89645 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 89649 "isa_tms320.tcc"
OpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 89653 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89657 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89661 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89664 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 89668 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 89671 "isa_tms320.tcc"
)
{
#line 374 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "ADDI3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 89689 "isa_tms320.tcc"
}
//    reg(src1) + reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 89697 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89704 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89707 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89711 "isa_tms320.tcc"
OpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 89715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89719 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89723 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89726 "isa_tms320.tcc"
)
{
#line 469 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' registers is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ADDI3
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		carry_out,
		overflow
		);
	}
#line 89792 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89798 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89801 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89805 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89808 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89813 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89817 "isa_tms320.tcc"
> *DecodeOpADDI3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89823 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89827 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ADDI3 || STI (add integers and store integer)
**********************************************************/
/**********************************************************
* AND3 || STI (bitwise-logical AND and store integer)
* op AND3_STI(0b11[2]:0b01000[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 89841 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89844 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89848 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89851 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 89855 "isa_tms320.tcc"
OpAND3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 89859 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89863 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89867 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89870 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 89874 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 89877 "isa_tms320.tcc"
)
{
#line 544 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "AND3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 89896 "isa_tms320.tcc"
}
//    reg(src1) AND indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 89904 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89907 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89911 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89914 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89918 "isa_tms320.tcc"
OpAND3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 89922 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89926 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89930 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89933 "isa_tms320.tcc"
)
{
#line 578 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ANDI3
		uint32_t result = src1_value & src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 89999 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90005 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90008 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90015 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90020 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90024 "isa_tms320.tcc"
> *DecodeOpAND3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90030 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90034 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 90041 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90051 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 90055 "isa_tms320.tcc"
OpAND3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 90059 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90063 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90067 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90070 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 90074 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 90077 "isa_tms320.tcc"
)
{
#line 560 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "AND3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 90095 "isa_tms320.tcc"
}
//    reg(src1) AND reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 90103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90106 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90110 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90113 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90117 "isa_tms320.tcc"
OpAND3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 90121 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90125 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90129 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90132 "isa_tms320.tcc"
)
{
#line 644 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ANDI3
		uint32_t result = src1_value & src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 90184 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90190 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90193 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90197 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90200 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90205 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90209 "isa_tms320.tcc"
> *DecodeOpAND3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90215 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90219 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of AND3 || STI (bitwise-logical AND and store integer)
**********************************************************/
/**********************************************************
* ASH3 || STI (arithmetic shift and store integer)
* op ASH3_STI(0b11[2]:0b01001[5]:dst1[3]:count[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 90233 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90236 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90240 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90243 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 90247 "isa_tms320.tcc"
OpASH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 90251 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90255 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90259 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90262 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 90266 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 90269 "isa_tms320.tcc"
)
{
#line 705 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *count_name = REG_NAME[count];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "ASH3 " << count_name << ", " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 90288 "isa_tms320.tcc"
}
//    ash(indir(src2), reg(count)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 90296 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90299 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90303 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90306 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90310 "isa_tms320.tcc"
OpASH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 90314 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90318 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90322 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90325 "isa_tms320.tcc"
)
{
#line 739 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read the 'count' register operand and sign extend the 7 LSB to get the shift count
		int32_t count_value = SignExtend(cpu.GetReg(count), 7);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ASH3
		uint8_t carry_out;
		uint32_t result;

		if(count_value == 0)
		{
			result = src2_value;
			carry_out = 0;
		}
		else if(count_value >= 0)
		{
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src2_value, count_value, carry_out);
			}
		}
		else
		{
			count_value = -count_value;
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src2_value, count_value, carry_out);
			}
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_N | M_ST_Z | M_ST_C,  // or mask
		carry_out
		);
	}
#line 90424 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90430 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90433 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90437 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90440 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90445 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90449 "isa_tms320.tcc"
> *DecodeOpASH3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90455 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90459 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 90466 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90469 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90473 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90476 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 90480 "isa_tms320.tcc"
OpASH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 90484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90488 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90492 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90495 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 90499 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 90502 "isa_tms320.tcc"
)
{
#line 721 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *count_name = REG_NAME[count];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "ASH3 " << count_name << ", " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 90520 "isa_tms320.tcc"
}
//    ash(reg(src2), reg(count)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 90528 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90531 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90535 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90538 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90542 "isa_tms320.tcc"
OpASH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 90546 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90550 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90554 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90557 "isa_tms320.tcc"
)
{
#line 838 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read the 'count' register operand and sign extend the 7 LSB to get the shift count
		int32_t count_value = SignExtend(cpu.GetReg(count), 7);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ASH3
		uint8_t carry_out;
		uint32_t result;

		if(count_value == 0)
		{
			result = src2_value;
			carry_out = 0;
		}
		else if(count_value >= 0)
		{
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src2_value, count_value, carry_out);
			}
		}
		else
		{
			count_value = -count_value;
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src2_value, count_value, carry_out);
			}
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_N | M_ST_Z | M_ST_C,  // or mask
		carry_out
		);
	}
#line 90642 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90651 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90658 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90667 "isa_tms320.tcc"
> *DecodeOpASH3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90673 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90677 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ASH3 || STI (arithmetic shift and store integer)
**********************************************************/
/**********************************************************
* FIX || STI (convert floating-point value to integer and store integer)
* op FIX_STI(0b11[2]:0b01010[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 90691 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90694 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90698 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90701 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 90705 "isa_tms320.tcc"
OpFIX_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 90709 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90713 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90717 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90720 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 90724 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 90727 "isa_tms320.tcc"
)
{
#line 932 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "FIX " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 90745 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 90750 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90753 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90757 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90760 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90764 "isa_tms320.tcc"
OpFIX_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 90768 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90772 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90776 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90779 "isa_tms320.tcc"
)
{
#line 961 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 90786 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90792 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90795 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90799 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90802 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90807 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90811 "isa_tms320.tcc"
> *DecodeOpFIX_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90817 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90821 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 90828 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90831 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90835 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90838 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 90842 "isa_tms320.tcc"
OpFIX_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 90846 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90850 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90854 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90857 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 90861 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 90864 "isa_tms320.tcc"
)
{
#line 947 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "FIX " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 90881 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 90886 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90889 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90893 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90896 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90900 "isa_tms320.tcc"
OpFIX_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 90904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90908 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90912 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90915 "isa_tms320.tcc"
)
{
#line 965 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 90922 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90931 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90935 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90938 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90947 "isa_tms320.tcc"
> *DecodeOpFIX_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90953 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90957 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of FIX || STI (convert floating-point value to integer and store integer)
**********************************************************/
/**********************************************************
* FLOAT || STF (convert integer to floating-point value and store floating-point value)
* op FLOAT_STF(0b11[2]:0b01011[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 90971 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90974 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90978 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90981 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 90985 "isa_tms320.tcc"
OpFLOAT_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 90989 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90993 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90997 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91000 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91004 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91007 "isa_tms320.tcc"
)
{
#line 981 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "FLOAT " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91025 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 91030 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91033 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91037 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91040 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91044 "isa_tms320.tcc"
OpFLOAT_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 91048 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91052 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91056 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91059 "isa_tms320.tcc"
)
{
#line 1010 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 91066 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 91072 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91075 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91079 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91082 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 91087 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91091 "isa_tms320.tcc"
> *DecodeOpFLOAT_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 91097 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 91101 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 91108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91111 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91115 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91118 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91122 "isa_tms320.tcc"
OpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91126 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91130 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91134 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91137 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91141 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91144 "isa_tms320.tcc"
)
{
#line 996 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "FLOAT " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91161 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 91166 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91169 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91173 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91176 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91180 "isa_tms320.tcc"
OpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91184 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91188 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91192 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91195 "isa_tms320.tcc"
)
{
#line 1014 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 91202 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 91208 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91211 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91215 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91218 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 91223 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91227 "isa_tms320.tcc"
> *DecodeOpFLOAT_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 91233 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 91237 "isa_tms320.tcc"
	>(code, addr);
}

/* end of FLOAT || STF (convert integer to floating-point value and store floating-point value)
**********************************************************/
/**********************************************************
* LDF || STF (load floating-point value and store floating-point value)
* op LDF_STF(0b11[2]:0b01100[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 91250 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91253 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91257 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91260 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91264 "isa_tms320.tcc"
OpLDF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 91268 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91272 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91276 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91279 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91283 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91286 "isa_tms320.tcc"
)
{
#line 1029 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "LDF " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91304 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 91309 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91312 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91316 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91319 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91323 "isa_tms320.tcc"
OpLDF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 91327 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91331 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91335 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91338 "isa_tms320.tcc"
)
{
#line 1058 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 91345 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 91351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91354 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91358 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91361 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 91366 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91370 "isa_tms320.tcc"
> *DecodeOpLDF_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 91376 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 91380 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 91387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91390 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91394 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91397 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91401 "isa_tms320.tcc"
OpLDF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91405 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91409 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91413 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91416 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91420 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91423 "isa_tms320.tcc"
)
{
#line 1044 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "LDF " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91440 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 91445 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91448 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91452 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91455 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91459 "isa_tms320.tcc"
OpLDF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91463 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91467 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91471 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91474 "isa_tms320.tcc"
)
{
#line 1062 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 91481 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 91487 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91490 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91494 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91497 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 91502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91506 "isa_tms320.tcc"
> *DecodeOpLDF_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 91512 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 91516 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDF || STF (load floating-point value and store floating-point value)
**********************************************************/
/**********************************************************
* LDI || STI (load integer and store integer)
* op LDI_STI(0b11[2]:0b01101[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 91529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91532 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91536 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91539 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91543 "isa_tms320.tcc"
OpLDI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 91547 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91551 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91555 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91558 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91562 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91565 "isa_tms320.tcc"
)
{
#line 1077 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "LDI " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91583 "isa_tms320.tcc"
}
//    indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 91591 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91594 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91598 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91601 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91605 "isa_tms320.tcc"
OpLDI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 91609 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91613 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91617 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91620 "isa_tms320.tcc"
)
{
#line 1109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address for the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address for the 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Load 'src2' value from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Store 'src3' value into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, src2_value);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

	}
#line 91670 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 91676 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91679 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91683 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91686 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 91691 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91695 "isa_tms320.tcc"
> *DecodeOpLDI_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 91701 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 91705 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 91712 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91719 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91722 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91726 "isa_tms320.tcc"
OpLDI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91734 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91738 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91741 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91745 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91748 "isa_tms320.tcc"
)
{
#line 1092 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "LDI " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91765 "isa_tms320.tcc"
}
//    reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 91773 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91783 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91787 "isa_tms320.tcc"
OpLDI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91795 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91799 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91802 "isa_tms320.tcc"
)
{
#line 1159 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether the 'src2' register operand is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address for the 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Store 'src3' value into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, src2_value);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}
	}
#line 91841 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 91847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91854 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91857 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 91862 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91866 "isa_tms320.tcc"
> *DecodeOpLDI_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 91872 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 91876 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDI || STI (load integer and store integer)
**********************************************************/
/**********************************************************
* LSH3 || STI (logical shift and store integer)
* op LSH3_STI(0b11[2]:0b01110[5]:dst1[3]:count[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 91889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91899 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91903 "isa_tms320.tcc"
OpLSH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 91907 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91911 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91915 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91918 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91922 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91925 "isa_tms320.tcc"
)
{
#line 1206 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *count_name = REG_NAME[count];
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "LSH3 " << count << ", " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91944 "isa_tms320.tcc"
}
//    lsh(indir(src2), reg(count)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 91952 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91955 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91959 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91962 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91966 "isa_tms320.tcc"
OpLSH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 91970 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91974 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91978 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91981 "isa_tms320.tcc"
)
{
#line 1240 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read the 'count' register operand and sign extend the 7 LSB to get the shift count
		int32_t count_value = SignExtend(cpu.GetReg(count), 7);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of LSH3
		uint8_t carry_out;
		uint32_t result;

		if(count_value == 0)
		{
			result = src2_value;
			carry_out = 0;
		}
		else if(count_value >= 0)
		{
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src2_value, count_value, carry_out);
			}
		}
		else
		{
			count_value = -count_value;
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src2_value, count_value, carry_out);
			}
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_N | M_ST_Z | M_ST_C,  // or mask
		carry_out
		);
	}
#line 92080 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 92086 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92089 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92093 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92096 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 92101 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92105 "isa_tms320.tcc"
> *DecodeOpLSH3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 92111 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 92115 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 92122 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92125 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92129 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92132 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 92136 "isa_tms320.tcc"
OpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 92140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92144 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92148 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92151 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 92155 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 92158 "isa_tms320.tcc"
)
{
#line 1222 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *count_name = REG_NAME[count];
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "LSH3 " << count << ", " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 92176 "isa_tms320.tcc"
}
//    lsh(reg(src2), reg(count)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 92184 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92187 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92191 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92194 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 92198 "isa_tms320.tcc"
OpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 92202 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92206 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92210 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92213 "isa_tms320.tcc"
)
{
#line 1339 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read the 'count' register operand and sign extend the 7 LSB to get the shift count
		int32_t count_value = SignExtend(cpu.GetReg(count), 7);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of LSH3
		uint8_t carry_out;
		uint32_t result;

		if(count_value == 0)
		{
			result = src2_value;
			carry_out = 0;
		}
		else if(count_value >= 0)
		{
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src2_value, count_value, carry_out);
			}
		}
		else
		{
			count_value = -count_value;
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src2_value, count_value, carry_out);
			}
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_N | M_ST_Z | M_ST_C,  // or mask
		carry_out
		);
	}
#line 92298 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 92304 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92307 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92311 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92314 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 92319 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92323 "isa_tms320.tcc"
> *DecodeOpLSH3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 92329 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 92333 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LSH3 || STI (logical shift and store integer)
**********************************************************/
/**********************************************************
* MPYF3 || STF (multiply floating-point values and store floating-point value)
* op MPYF3_STF(0b11[2]:0b01111[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 92346 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92349 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92353 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92356 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 92360 "isa_tms320.tcc"
OpMPYF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 92364 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92368 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92372 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92375 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 92379 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 92382 "isa_tms320.tcc"
)
{
#line 1432 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "MPYF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 92401 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 92406 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92409 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92413 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92416 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 92420 "isa_tms320.tcc"
OpMPYF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 92424 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92428 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92432 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92435 "isa_tms320.tcc"
)
{
#line 1463 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 92442 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 92448 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92451 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92455 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92458 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 92463 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92467 "isa_tms320.tcc"
> *DecodeOpMPYF3_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 92473 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 92477 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 92484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92491 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92494 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 92498 "isa_tms320.tcc"
OpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 92502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92506 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92510 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92513 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 92517 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 92520 "isa_tms320.tcc"
)
{
#line 1448 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "MPYF3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 92538 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 92543 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92546 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92550 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92553 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 92557 "isa_tms320.tcc"
OpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 92561 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92565 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92569 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92572 "isa_tms320.tcc"
)
{
#line 1467 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 92579 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 92585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92588 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92592 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92595 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 92600 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92604 "isa_tms320.tcc"
> *DecodeOpMPYF3_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 92610 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 92614 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF3 || STF (multiply floating-point values and store floating-point value)
**********************************************************/
/**********************************************************
* MPYI3 || STI (multiply integer and store integer)
* op MPYI3_STI(0b11[2]:0b10000[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 92627 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92630 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92634 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92637 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 92641 "isa_tms320.tcc"
OpMPYI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 92645 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92649 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92653 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92656 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 92660 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 92663 "isa_tms320.tcc"
)
{
#line 1482 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "MPYI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 92682 "isa_tms320.tcc"
}
//    reg(src1) * indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 92690 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92693 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92697 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92700 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 92704 "isa_tms320.tcc"
OpMPYI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 92708 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92712 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92716 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92719 "isa_tms320.tcc"
)
{
#line 1516 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.GetReg(src1) & 0xffffff), 24);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.IntLoad(s2_ea) & 0xffffff), 24);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the 32-bit result and overflow of MPYI3
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 92798 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 92804 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92807 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92811 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92814 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 92819 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92823 "isa_tms320.tcc"
> *DecodeOpMPYI3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 92829 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 92833 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 92840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92850 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 92854 "isa_tms320.tcc"
OpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 92858 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92862 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92866 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92869 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 92873 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 92876 "isa_tms320.tcc"
)
{
#line 1498 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "MPYI3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 92894 "isa_tms320.tcc"
}
//    reg(src1) + reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 92902 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92905 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92909 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92912 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 92916 "isa_tms320.tcc"
OpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 92920 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92924 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92928 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92931 "isa_tms320.tcc"
)
{
#line 1595 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src1' operand and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.GetReg(src1) & 0xffffff), 24);

		// Read 'src2' operand and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.GetReg(src2) & 0xffffff), 24);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the 32-bit result and overflow of MPYI3
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 93000 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 93006 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93009 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93013 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93016 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93021 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93025 "isa_tms320.tcc"
> *DecodeOpMPYI3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 93031 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 93035 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYI3 || STI (multiply integer and store integer)
**********************************************************/
/**********************************************************
* NEGF || STF (negate floating-point value and store floating-point value)
* op NEGF_STF(0b11[2]:0b10001[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 93048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93051 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93055 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93058 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 93062 "isa_tms320.tcc"
OpNEGF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 93066 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93070 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93074 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93077 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93081 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93084 "isa_tms320.tcc"
)
{
#line 1672 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "NEGF " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93102 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 93107 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93110 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93114 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93117 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 93121 "isa_tms320.tcc"
OpNEGF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 93125 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93129 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93133 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93136 "isa_tms320.tcc"
)
{
#line 1701 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 93143 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 93149 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93152 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93156 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93159 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93164 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93168 "isa_tms320.tcc"
> *DecodeOpNEGF_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 93174 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 93178 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 93185 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93188 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93192 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93195 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 93199 "isa_tms320.tcc"
OpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93203 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93207 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93211 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93214 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93218 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93221 "isa_tms320.tcc"
)
{
#line 1687 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "NEGF " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93238 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 93243 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93246 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93250 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93253 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 93257 "isa_tms320.tcc"
OpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93261 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93265 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93269 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93272 "isa_tms320.tcc"
)
{
#line 1705 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 93279 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 93285 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93292 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93295 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93300 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93304 "isa_tms320.tcc"
> *DecodeOpNEGF_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 93310 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 93314 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGF || STF (negate floating-point value and store floating-point value)
**********************************************************/
/**********************************************************
* NEGI || STI (negate integer and store integer)
* op NEGI_STI(0b11[2]:0b10010[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 93327 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93330 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93334 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93337 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 93341 "isa_tms320.tcc"
OpNEGI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 93345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93349 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93353 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93356 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93360 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93363 "isa_tms320.tcc"
)
{
#line 1720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "NEGI " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93381 "isa_tms320.tcc"
}
//    neg(indir(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 93389 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93392 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93396 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93399 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 93403 "isa_tms320.tcc"
OpNEGI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 93407 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93411 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93415 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93418 "isa_tms320.tcc"
)
{
#line 1752 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Compute the result of NEGI
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, 0, src2_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of NEGI in register 'dst1'
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 93491 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 93497 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93500 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93504 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93507 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93512 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93516 "isa_tms320.tcc"
> *DecodeOpNEGI_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 93522 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 93526 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 93533 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93536 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93543 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 93547 "isa_tms320.tcc"
OpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93551 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93555 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93559 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93562 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93566 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93569 "isa_tms320.tcc"
)
{
#line 1735 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "NEGI " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93586 "isa_tms320.tcc"
}
//    neg(reg(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 93594 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93597 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93601 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93604 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 93608 "isa_tms320.tcc"
OpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93612 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93616 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93620 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93623 "isa_tms320.tcc"
)
{
#line 1825 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of NEGI
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, 0, src2_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of NEGI in register 'dst1'
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 93682 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 93688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93691 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93695 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93698 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93703 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93707 "isa_tms320.tcc"
> *DecodeOpNEGI_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 93713 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 93717 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGI || STI (negate integer and store integer)
**********************************************************/
/**********************************************************
* NOT || STI (complement value and store integer)
* op NOT_STI(0b11[2]:0b10011[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 93730 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93733 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93737 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93740 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 93744 "isa_tms320.tcc"
OpNOT_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 93748 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93752 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93756 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93759 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93763 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93766 "isa_tms320.tcc"
)
{
#line 1892 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "NOT " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93784 "isa_tms320.tcc"
}
//    not(indir(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 93792 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93795 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93799 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93802 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 93806 "isa_tms320.tcc"
OpNOT_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 93810 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93814 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93818 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93821 "isa_tms320.tcc"
)
{
#line 1924 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Compute the result of NOT
		uint32_t result = ~src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of NOT in register 'dst1'
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 93884 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 93890 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93893 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93897 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93900 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93905 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93909 "isa_tms320.tcc"
> *DecodeOpNOT_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 93915 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 93919 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 93926 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93929 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93933 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93936 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 93940 "isa_tms320.tcc"
OpNOT_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93944 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93948 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93952 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93955 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93959 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93962 "isa_tms320.tcc"
)
{
#line 1907 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "NOT " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93979 "isa_tms320.tcc"
}
//    not(reg(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 93987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93990 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93994 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93997 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 94001 "isa_tms320.tcc"
OpNOT_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94005 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94009 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94013 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94016 "isa_tms320.tcc"
)
{
#line 1987 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of NOT
		uint32_t result = ~src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of NOT in register 'dst1'
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 94065 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94071 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94074 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94078 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94081 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94090 "isa_tms320.tcc"
> *DecodeOpNOT_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94096 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94100 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NOT || STI (complement value and store integer)
**********************************************************/
/**********************************************************
* OR3 || STI (bitwise-logical OR value and store integer)
* op OR3_STI(0b11[2]:0b10100[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 94113 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94120 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94123 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94127 "isa_tms320.tcc"
OpOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 94131 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94135 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94139 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94142 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 94146 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 94149 "isa_tms320.tcc"
)
{
#line 2044 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "OR3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 94168 "isa_tms320.tcc"
}
//    reg(src1) OR indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 94176 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94179 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94183 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94186 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 94190 "isa_tms320.tcc"
OpOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 94194 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94198 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94202 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94205 "isa_tms320.tcc"
)
{
#line 2078 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of OR3
		uint32_t result = src1_value | src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 94271 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94277 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94280 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94284 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94287 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94292 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94296 "isa_tms320.tcc"
> *DecodeOpOR3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94302 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94306 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 94313 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94316 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94320 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94323 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94327 "isa_tms320.tcc"
OpOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94331 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94335 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94339 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94342 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 94346 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 94349 "isa_tms320.tcc"
)
{
#line 2060 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "OR3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 94367 "isa_tms320.tcc"
}
//    reg(src1) OR reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 94375 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94382 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94385 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 94389 "isa_tms320.tcc"
OpOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94393 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94397 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94401 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94404 "isa_tms320.tcc"
)
{
#line 2144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of OR3
		uint32_t result = src1_value | src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 94456 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94462 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94472 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94477 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94481 "isa_tms320.tcc"
> *DecodeOpOR3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94487 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94491 "isa_tms320.tcc"
	>(code, addr);
}

/* end of OR3 || STI (bitwise-logical OR value and store integer)
**********************************************************/
/**********************************************************
* STF || STF (store floating-point values)
* op STF_STF(0b11[2]:0b00000[5]:src2[3]:0b000[3]:src1[3]:dst1[8]:dst2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 94504 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94511 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94514 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94518 "isa_tms320.tcc"
OpSTF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 94522 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94526 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94530 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94533 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 94537 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 94540 "isa_tms320.tcc"
)
{
#line 2204 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst1_indir;
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d1_mod, d1_ar) ||
		!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "STF " << src2_name << ", " << disasm_dst2_indir
		<< " || " << "STF " << src1_name << ", " << disasm_dst1_indir;
		return true;
	}
#line 94558 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 94563 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94566 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94570 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94573 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 94577 "isa_tms320.tcc"
OpSTF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 94581 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94585 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94589 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94592 "isa_tms320.tcc"
)
{
#line 2233 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 94599 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94605 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94608 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94612 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94615 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94620 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94624 "isa_tms320.tcc"
> *DecodeOpSTF_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94630 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94634 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 94641 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94651 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94655 "isa_tms320.tcc"
OpSTF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94659 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94663 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94667 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94670 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 94674 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 94677 "isa_tms320.tcc"
)
{
#line 2219 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst1_indir;
		const char *dst2_name = REG_NAME[dst2];

		if (!cpu.DisasmIndir(disasm_dst1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d1_mod, d1_ar) || !dst2_name)
		return false;

		os << "STF " << src2_name << ", " << dst2_name
		<< " || " << "STF " << src1_name << ", " << disasm_dst1_indir;
		return true;
	}
#line 94694 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 94699 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94702 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94706 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94709 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 94713 "isa_tms320.tcc"
OpSTF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94717 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94721 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94725 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94728 "isa_tms320.tcc"
)
{
#line 2237 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 94735 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94741 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94748 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94751 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94756 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94760 "isa_tms320.tcc"
> *DecodeOpSTF_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94766 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94770 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STF || STF (store floating-point values)
**********************************************************/
/**********************************************************
* STI || STI (store integers)
* op STI_STI(0b11[2]:0b00001[5]:src2[3]:0b000[3]:src1[3]:dst1[8]:dst2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 94783 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94786 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94790 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94793 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94797 "isa_tms320.tcc"
OpSTI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 94801 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94805 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94809 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94812 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 94816 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 94819 "isa_tms320.tcc"
)
{
#line 2252 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst1_indir;
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d1_mod, d1_ar) ||
		!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "STI " << src2_name << ", " << disasm_dst2_indir
		<< " || " << "STI " << src1_name << ", " << disasm_dst1_indir;
		return true;
	}
#line 94837 "isa_tms320.tcc"
}
//    reg(src2) -> indir(dst2)
// ||
//    reg(src1) -> indir(dst1)
template <
#line 45 "isa/tms320.isa"
class
#line 94845 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94852 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94855 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 94859 "isa_tms320.tcc"
OpSTI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 94863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94867 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94871 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94874 "isa_tms320.tcc"
)
{
#line 2284 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read the 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Check that indirect addressing mode is valid and compute the effective address of operand 'dst1'
		typename CONFIG::address_t d1_ea;        // The effective address
		bool d1_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d1_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d1_ea, d1_update_ar, d1_output_ar, d1_mod, d1_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of operand 'dst2'
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src2_value);

		// Note: If both stores are executed to the
		// same address, the value written is that of STI src2, dst2.

		// Store the word into memory
		if(d1_ea != d2_ea)
		{
			cpu.IntStore(d1_ea, src1_value);
		}

		if(d1_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d1_ar, d1_output_ar);
		}

		if(d2_update_ar && d1_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}
	}
#line 94929 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94935 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94938 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94942 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94945 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94950 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94954 "isa_tms320.tcc"
> *DecodeOpSTI_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94960 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94964 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 94971 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94974 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94978 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94981 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94985 "isa_tms320.tcc"
OpSTI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94989 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94993 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94997 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95000 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95004 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95007 "isa_tms320.tcc"
)
{
#line 2267 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst1_indir;
		const char *dst2_name = REG_NAME[dst2];

		if (!cpu.DisasmIndir(disasm_dst1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d1_mod, d1_ar) || !dst2_name)
		return false;

		os << "STI " << src2_name << ", " << dst2_name
		<< " || " << "STI " << src1_name << ", " << disasm_dst1_indir;
		return true;
	}
#line 95024 "isa_tms320.tcc"
}
//    reg(src2) -> reg(dst2)
// ||
//    reg(src1) -> indir(dst1)
template <
#line 45 "isa/tms320.isa"
class
#line 95032 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95035 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95039 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95042 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95046 "isa_tms320.tcc"
OpSTI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 95050 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95054 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95058 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95061 "isa_tms320.tcc"
)
{
#line 2339 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'dst2' register is valid
		if(unlikely(!cpu.HasReg(dst2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Check that indirect addressing mode is valid and compute the effective address of operand 'dst1'
		typename CONFIG::address_t d1_ea;        // The effective address
		bool d1_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d1_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d1_ea, d1_update_ar, d1_output_ar, d1_mod, d1_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Store the word into memory
		cpu.IntStore(d1_ea, src1_value);

		// Write back 'src2' into 'dst2' register
		cpu.SetReg(dst2, src2_value);

		if(d1_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d1_ar, d1_output_ar);
		}
	}
#line 95100 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95106 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95109 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95113 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95116 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 95121 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95125 "isa_tms320.tcc"
> *DecodeOpSTI_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95131 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95135 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STI || STI (sotre integers)
**********************************************************/
/**********************************************************
* SUBF3 || STF (subtract floating-point value and store floating-point value)
* op SUBF3_STF(0b11[2]:0b10101[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 95148 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95151 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95155 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95158 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95162 "isa_tms320.tcc"
OpSUBF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 95166 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95170 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95174 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95177 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95181 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95184 "isa_tms320.tcc"
)
{
#line 2386 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "SUBF3 " << src1_name << ", " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 95203 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 95208 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95211 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95215 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95218 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95222 "isa_tms320.tcc"
OpSUBF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 95226 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95230 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95234 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95237 "isa_tms320.tcc"
)
{
#line 2417 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 95244 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95250 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95253 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95257 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95260 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 95265 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95269 "isa_tms320.tcc"
> *DecodeOpSUBF3_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95275 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95279 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 95286 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95289 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95293 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95296 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95300 "isa_tms320.tcc"
OpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 95304 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95308 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95312 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95315 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95319 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95322 "isa_tms320.tcc"
)
{
#line 2402 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "SUBF3 " << src1_name << ", " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 95340 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 95345 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95352 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95355 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95359 "isa_tms320.tcc"
OpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 95363 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95367 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95371 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95374 "isa_tms320.tcc"
)
{
#line 2421 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 95381 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95390 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95394 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95397 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 95402 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95406 "isa_tms320.tcc"
> *DecodeOpSUBF3_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95412 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95416 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBF3 || STF (subtract floating-point value and store floating-point value)
**********************************************************/
/**********************************************************
* SUBI3 || STI (subtract integer and store integer)
* op SUBI3_STI(0b11[2]:0b10110[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 95429 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95432 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95436 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95439 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95443 "isa_tms320.tcc"
OpSUBI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 95447 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95451 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95455 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95458 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95462 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95465 "isa_tms320.tcc"
)
{
#line 2436 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "SUBI3 " << src1_name << ", " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 95484 "isa_tms320.tcc"
}
//    indir(src2) - reg(src1)  -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 95492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95495 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95502 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95506 "isa_tms320.tcc"
OpSUBI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 95510 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95514 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95518 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95521 "isa_tms320.tcc"
)
{
#line 2470 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of SUBI3
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src2_value, src1_value, 0);
		else
		Sub32(result, borrow_out, overflow, src2_value, src1_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 95597 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95603 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95606 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95610 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95613 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 95618 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95622 "isa_tms320.tcc"
> *DecodeOpSUBI3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95628 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95632 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 95639 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95642 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95646 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95649 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95653 "isa_tms320.tcc"
OpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 95657 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95661 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95665 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95668 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95672 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95675 "isa_tms320.tcc"
)
{
#line 2452 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "SUBI3 " << src1_name << ", " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 95693 "isa_tms320.tcc"
}
//    reg(src2) - reg(src1) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 95701 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95708 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95711 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95715 "isa_tms320.tcc"
OpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 95719 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95723 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95727 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95730 "isa_tms320.tcc"
)
{
#line 2546 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of SUBI3
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src2_value, src1_value, 0);
		else
		Sub32(result, borrow_out, overflow, src2_value, src1_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 95796 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95802 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95805 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95809 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95812 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 95817 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95821 "isa_tms320.tcc"
> *DecodeOpSUBI3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95827 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95831 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBI3 || STI (subtract integer and store integer)
**********************************************************/
/**********************************************************
* XOR3 || STI (bitwise-exclusive OR values and store integer)
* op XOR3_STI(0b11[2]:0b10111[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 95844 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95851 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95854 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95858 "isa_tms320.tcc"
OpXOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 95862 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95866 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95870 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95873 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95877 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95880 "isa_tms320.tcc"
)
{
#line 2620 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "XOR3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 95899 "isa_tms320.tcc"
}
//    reg(src1) XOR indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 95907 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95910 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95914 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95917 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95921 "isa_tms320.tcc"
OpXOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 95925 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95929 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95933 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95936 "isa_tms320.tcc"
)
{
#line 2654 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of XORI3
		uint32_t result = src1_value ^ src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 96002 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 96008 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96011 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96015 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96018 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96023 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96027 "isa_tms320.tcc"
> *DecodeOpXOR3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96033 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96037 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 96044 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96047 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96051 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96054 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 96058 "isa_tms320.tcc"
OpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96062 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96066 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96070 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96073 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96077 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96080 "isa_tms320.tcc"
)
{
#line 2636 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "XOR3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 96098 "isa_tms320.tcc"
}
//    reg(src1) XOR reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 96106 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96109 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96113 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96116 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96120 "isa_tms320.tcc"
OpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96124 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96128 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96132 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96135 "isa_tms320.tcc"
)
{
#line 2720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of XORI3
		uint32_t result = src1_value ^ src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 96187 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 96193 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96196 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96200 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96203 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96208 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96212 "isa_tms320.tcc"
> *DecodeOpXOR3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96218 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96222 "isa_tms320.tcc"
	>(code, addr);
}

/* end of XOR3 || STI (bitwise-exclusive OR values and store integer)
**********************************************************/
/**********************************************************
* LDF || LDF (load floating-point value)
* op LDF_LDF(0b11[2]:0b00010[5]:dst2[3]:dst1[3]:0b000[3]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 96235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96242 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96245 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 96249 "isa_tms320.tcc"
OpLDF_LDF<
#line 45 "isa/tms320.isa"
CONFIG
#line 96253 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96257 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96261 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96264 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96268 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96271 "isa_tms320.tcc"
)
{
#line 2780 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *dst2_name = REG_NAME[dst2];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s1_mod, s1_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "LDF " << disasm_src2_indir << ", " << dst2_name
		<< " || " << "LDF " << disasm_src1_indir << ", " << dst1_name;
		return true;
	}
#line 96289 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 96294 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96297 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96301 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96304 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96308 "isa_tms320.tcc"
OpLDF_LDF<
#line 45 "isa/tms320.isa"
CONFIG
#line 96312 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96316 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96320 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96323 "isa_tms320.tcc"
)
{
#line 2809 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 96330 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 96336 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96339 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96343 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96346 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96351 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96355 "isa_tms320.tcc"
> *DecodeOpLDF_LDF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_LDF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96361 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96365 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 96372 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96375 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96379 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96382 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 96386 "isa_tms320.tcc"
OpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96390 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96394 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96398 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96401 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96405 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96408 "isa_tms320.tcc"
)
{
#line 2795 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *dst2_name = REG_NAME[dst2];
		const char *src2_name = REG_NAME[src2];
		string disasm_src1_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s1_mod, s1_ar))
		return false;

		os << "LDF " << ", " << src2_name << ", " << dst2_name
		<< " || " << "LDF " << disasm_src1_indir << ", " << dst2_name;
		return true;
	}
#line 96425 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 96430 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96433 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96437 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96440 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96444 "isa_tms320.tcc"
OpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96448 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96452 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96456 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96459 "isa_tms320.tcc"
)
{
#line 2813 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 96466 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 96472 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96475 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96479 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96482 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96491 "isa_tms320.tcc"
> *DecodeOpLDF_LDF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96497 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96501 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDF || LDF (load floating-point value)
**********************************************************/
/**********************************************************
* LDI || LDI (load integer)
* op LDI_LDI(0b11[2]:0b00011[5]:dst2[3]:dst1[3]:0b000[3]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 96514 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96517 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96521 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96524 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 96528 "isa_tms320.tcc"
OpLDI_LDI<
#line 45 "isa/tms320.isa"
CONFIG
#line 96532 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96536 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96540 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96543 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96547 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96550 "isa_tms320.tcc"
)
{
#line 2828 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *dst2_name = REG_NAME[dst2];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s1_mod, s1_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "LDI " << disasm_src2_indir << ", " << dst2_name
		<< " || " << "LDI " << disasm_src1_indir << ", " << dst1_name;
		return true;
	}
#line 96568 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 96573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96580 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96583 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96587 "isa_tms320.tcc"
OpLDI_LDI<
#line 45 "isa/tms320.isa"
CONFIG
#line 96591 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96595 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96599 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96602 "isa_tms320.tcc"
)
{
#line 2857 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of 'src1' operand
		typename CONFIG::address_t s1_ea;        // The effective address
		bool s1_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s1_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s1_ea, s1_update_ar, s1_output_ar, s1_mod, s1_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the 'src1' operand value from memory
		uint32_t src1_value = cpu.IntLoad(s1_ea);

		// Load the 'src2' operand value from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Write back register operand 'dst2'
		cpu.SetReg(dst2, src2_value);

		// Write back register operand 'dst1'
		if(dst1 != dst2)
		{
			cpu.SetReg(dst1, src1_value);
		}

		if(s1_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s1_ar, s1_output_ar);
		}

		if(s2_update_ar && s1_ar != s2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}
	}
#line 96654 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 96660 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96670 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96675 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96679 "isa_tms320.tcc"
> *DecodeOpLDI_LDI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_LDI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96685 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96689 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 96696 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96699 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96703 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96706 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 96710 "isa_tms320.tcc"
OpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96714 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96718 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96722 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96725 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96729 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96732 "isa_tms320.tcc"
)
{
#line 2843 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *dst2_name = REG_NAME[dst2];
		const char *src2_name = REG_NAME[src2];
		string disasm_src1_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s1_mod, s1_ar))
		return false;

		os << "LDI " << ", " << src2_name << ", " << dst2_name
		<< " || " << "LDI " << disasm_src1_indir << ", " << dst2_name;
		return true;
	}
#line 96749 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 96754 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96757 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96761 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96764 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96768 "isa_tms320.tcc"
OpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96772 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96776 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96780 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96783 "isa_tms320.tcc"
)
{
#line 2906 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of 'src1' operand
		typename CONFIG::address_t s1_ea;        // The effective address
		bool s1_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s1_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s1_ea, s1_update_ar, s1_output_ar, s1_mod, s1_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the 'src1' operand value from memory
		uint32_t src1_value = cpu.IntLoad(s1_ea);

		// Read the 'src2' register operand value
		uint32_t src2_value = cpu.GetReg(src2);

		// Note: The assembler issues a warning
		// if the LDIs load the same register.
		// The result is that of LDI src2, dst2 (pp 13-129).

		// Write back register operand 'dst2'
		cpu.SetReg(dst2, src2_value);

		// Write back register operand 'dst1'
		if(dst1 != dst2)
		{
			cpu.SetReg(dst1, src1_value);
		}

		if(s1_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s1_ar, s1_output_ar);
		}
	}
#line 96829 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 96835 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96838 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96842 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96845 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96854 "isa_tms320.tcc"
> *DecodeOpLDI_LDI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96860 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96864 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDI || LDI (load integer)
**********************************************************/
/**********************************************************
* MPYF3 || ADDF3 (multiply and add floating-point value)
* op MPYF3_ADDF3(0b10[2]:0b0000[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 96877 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96880 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96884 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96887 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 96891 "isa_tms320.tcc"
OpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 96895 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96899 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96903 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96906 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96910 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96913 "isa_tms320.tcc"
)
{
#line 2960 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_src3_indir;
		string disasm_src4_indir;
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!cpu.DisasmIndir(disasm_src3_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s3_mod, s3_ar) ||
		!cpu.DisasmIndir(disasm_src4_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s4_mod, s4_ar))
		return false;

		switch(p)
		{
		case 0:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = disasm_src4_indir.c_str();
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = disasm_src4_indir.c_str();
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = disasm_src3_indir.c_str();
			srcC_name = disasm_src4_indir.c_str();
			break;
		case 4:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = disasm_src4_indir.c_str();
			break;
		}

		os << "MPYF3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "ADDF3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 96965 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 96970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96980 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96984 "isa_tms320.tcc"
OpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 96988 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96992 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96996 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96999 "isa_tms320.tcc"
)
{
#line 3058 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 97006 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 97012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97022 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 97027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97031 "isa_tms320.tcc"
> *DecodeOpMPYF3_ADDF3(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 97037 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 97041 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 97048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97051 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97055 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97058 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 97062 "isa_tms320.tcc"
OpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 97066 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97070 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97074 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97077 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 97081 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 97084 "isa_tms320.tcc"
)
{
#line 3009 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		const char *src4_name = REG_NAME[src4];
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!src3_name ||
		!src4_name)
		return false;

		switch(p)
		{
		case 0:
			srcA_name = src3_name;
			srcB_name = src4_name;
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src4_name;
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = src3_name;
			srcC_name = src4_name;
			break;
		case 4:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = src4_name;
			break;
		}

		os << "MPYF3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "ADDF3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 97136 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 97141 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97144 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97148 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97151 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 97155 "isa_tms320.tcc"
OpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 97159 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97163 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97167 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97170 "isa_tms320.tcc"
)
{
#line 3062 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 97177 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 97183 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97186 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97190 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97193 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 97198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97202 "isa_tms320.tcc"
> *DecodeOpMPYF3_ADDF3_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 97208 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 97212 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF3 || ADDF3 (multiply and add floating-point value)
**********************************************************/
/**********************************************************
* MPYF3 || SUBF3 (multiply and subtract floating-point value)
* op MPYF3_SUBF3(0b10[2]:0b0001[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 97225 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97228 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97232 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97235 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 97239 "isa_tms320.tcc"
OpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 97243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97247 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97251 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97254 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 97258 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 97261 "isa_tms320.tcc"
)
{
#line 3077 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_src3_indir;
		string disasm_src4_indir;
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!cpu.DisasmIndir(disasm_src3_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s3_mod, s3_ar) ||
		!cpu.DisasmIndir(disasm_src4_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s4_mod, s4_ar))
		return false;

		switch(p)
		{
		case 0:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = disasm_src4_indir.c_str();
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = disasm_src4_indir.c_str();
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = disasm_src3_indir.c_str();
			srcC_name = disasm_src4_indir.c_str();
			break;
		case 4:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = disasm_src4_indir.c_str();
			break;
		}

		os << "MPYF3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "SUBF3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 97313 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 97318 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97321 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97325 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97328 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 97332 "isa_tms320.tcc"
OpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 97336 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97340 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97344 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97347 "isa_tms320.tcc"
)
{
#line 3175 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 97354 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 97360 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97363 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97367 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97370 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 97375 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97379 "isa_tms320.tcc"
> *DecodeOpMPYF3_SUBF3(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 97385 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 97389 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 97396 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97399 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97403 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97406 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 97410 "isa_tms320.tcc"
OpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 97414 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97418 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97422 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97425 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 97429 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 97432 "isa_tms320.tcc"
)
{
#line 3126 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		const char *src4_name = REG_NAME[src4];
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!src3_name ||
		!src4_name)
		return false;

		switch(p)
		{
		case 0:
			srcA_name = src3_name;
			srcB_name = src4_name;
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src4_name;
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = src3_name;
			srcC_name = src4_name;
			break;
		case 4:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = src4_name;
			break;
		}

		os << "MPYF3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "SUBF3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 97484 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 97489 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97492 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97496 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97499 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 97503 "isa_tms320.tcc"
OpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 97507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97511 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97515 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97518 "isa_tms320.tcc"
)
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 97525 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 97531 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97534 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97538 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97541 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 97546 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97550 "isa_tms320.tcc"
> *DecodeOpMPYF3_SUBF3_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 97556 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 97560 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF3 || SUBF3 (multiply and subtract floating-point value)
**********************************************************/
/**********************************************************
* MPYI3 || ADDI3 (multiply and add integer)
* op MPYI3_ADDI3(0b10[2]:0b0010[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 97573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97580 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97583 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 97587 "isa_tms320.tcc"
OpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 97591 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97595 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97599 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97602 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 97606 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 97609 "isa_tms320.tcc"
)
{
#line 3194 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_src3_indir;
		string disasm_src4_indir;
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!cpu.DisasmIndir(disasm_src3_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s3_mod, s3_ar) ||
		!cpu.DisasmIndir(disasm_src4_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s4_mod, s4_ar))
		return false;

		switch(p)
		{
		case 0:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = disasm_src4_indir.c_str();
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = disasm_src4_indir.c_str();
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = disasm_src3_indir.c_str();
			srcC_name = disasm_src4_indir.c_str();
			break;
		case 4:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = disasm_src4_indir.c_str();
			break;
		}

		os << "MPYI3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "ADDI3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 97661 "isa_tms320.tcc"
}
//    srcA * srcB -> dst1
// ||
//    srcD + srcC -> dst2
template <
#line 45 "isa/tms320.isa"
class
#line 97669 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97672 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97676 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97679 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 97683 "isa_tms320.tcc"
OpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 97687 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97691 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97695 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97698 "isa_tms320.tcc"
)
{
#line 3295 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Check that indirect addressing mode is valid and compute the effective address of 'src3' operand
		typename CONFIG::address_t s3_ea;        // The effective address
		bool s3_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s3_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s3_ea, s3_update_ar, s3_output_ar, s3_mod, s3_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of 'src4' operand
		typename CONFIG::address_t s4_ea;        // The effective address
		bool s4_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s4_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s4_ea, s4_update_ar, s4_output_ar, s4_mod, s4_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load 'src3' operand from memory
		uint32_t src3_value = cpu.IntLoad(s3_ea);

		// Load 'src4' operand from memory
		uint32_t src4_value = cpu.IntLoad(s4_ea);

		// Map 'src1', 'src2', 'src3', and 'src4' to 'srcA', 'srcB', 'srcC', and 'srcD'
		// depending on the parallel addressing mode used
		uint32_t srcA_value;
		uint32_t srcB_value;
		uint32_t srcC_value;
		uint32_t srcD_value;

		switch(p)
		{
			case 0: // 00
			srcA_value = src3_value;
			srcB_value = src4_value;
			srcC_value = src2_value;
			srcD_value = src1_value;
			break;
			case 1: // 01
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src4_value;
			srcD_value = src2_value;
			break;
			case 2: // 10
			srcA_value = src1_value;
			srcB_value = src2_value;
			srcC_value = src3_value;
			srcD_value = src4_value;
			break;
			case 3: // 11
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src2_value;
			srcD_value = src4_value;
			break;
		}

		// Compute the 32-bit result and overflow of MPYI3
		// Source operand values are sign extended from 24 bits to 64 bits before the actual computation
		int64_t mpyi3_result64 = SignExtend((uint64_t)(srcA_value & 0xffffff), 24) * SignExtend((uint64_t)(srcB_value & 0xffffff), 24); // Only 48 bits are useful
		int32_t lo32 = (int32_t) mpyi3_result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (mpyi3_result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t mpyi3_overflow = ((lo32 >> 31) != hi32);
		uint32_t mpyi3_result;

		if(cpu.GetST_OVM() && mpyi3_overflow)
		mpyi3_result = (mpyi3_result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		mpyi3_result = lo32;                                     // No saturation

		// Compute the result of ADDI3
		uint32_t addi3_result;      // the 32-bit result
		uint8_t addi3_carry_out;    // the carry out (0 or 1)
		uint8_t addi3_overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(addi3_result, addi3_carry_out, addi3_overflow, srcD_value, srcC_value, 0);
		else
		Add32(addi3_result, addi3_carry_out, addi3_overflow, srcD_value, srcC_value, 0);

		// Summarize overflow bit of MPYI3 and ADDI3
		uint8_t overflow = mpyi3_overflow | addi3_overflow;

		// Write back 'dst1' register operand
		unsigned int dst1 = d1;
		cpu.SetReg(dst1, mpyi3_result);

		// Write back 'dst2' register operand
		unsigned int dst2 = d2 + 2;
		cpu.SetReg(dst2, addi3_result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(s3_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s3_ar, s3_output_ar);
		}

		if(s4_update_ar && s4_ar != s4_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s4_ar, s4_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		0,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 97832 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 97838 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97841 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97845 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97848 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 97853 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97857 "isa_tms320.tcc"
> *DecodeOpMPYI3_ADDI3(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 97863 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 97867 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 97874 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97877 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97881 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97884 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 97888 "isa_tms320.tcc"
OpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 97892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97896 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97900 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97903 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 97907 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 97910 "isa_tms320.tcc"
)
{
#line 3243 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		const char *src4_name = REG_NAME[src4];
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!src3_name ||
		!src4_name)
		return false;

		switch(p)
		{
		case 0:
			srcA_name = src3_name;
			srcB_name = src4_name;
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src4_name;
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = src3_name;
			srcC_name = src4_name;
			break;
		case 4:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = src4_name;
			break;
		}

		os << "MPYI3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "ADDI3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 97962 "isa_tms320.tcc"
}
//    srcA * srcB -> dst1
// ||
//    srcD + srcC -> dst2
template <
#line 45 "isa/tms320.isa"
class
#line 97970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97980 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 97984 "isa_tms320.tcc"
OpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 97988 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97992 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97996 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97999 "isa_tms320.tcc"
)
{
#line 3429 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src3' and 'src4' are valid registers
		if(unlikely(!cpu.HasReg(src3) || !cpu.HasReg(src4)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read 'src4' register operand
		uint32_t src4_value = cpu.GetReg(src4);

		// Map 'src1', 'src2', 'src3', and 'src4' to 'srcA', 'srcB', 'srcC', and 'srcD'
		// depending on the parallel addressing mode used
		uint32_t srcA_value;
		uint32_t srcB_value;
		uint32_t srcC_value;
		uint32_t srcD_value;

		switch(p)
		{
			case 0: // 00
			srcA_value = src3_value;
			srcB_value = src4_value;
			srcC_value = src2_value;
			srcD_value = src1_value;
			break;
			case 1: // 01
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src4_value;
			srcD_value = src2_value;
			break;
			case 2: // 10
			srcA_value = src1_value;
			srcB_value = src2_value;
			srcC_value = src3_value;
			srcD_value = src4_value;
			break;
			case 3: // 11
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src2_value;
			srcD_value = src4_value;
			break;
		}

		// Compute the 32-bit result and overflow of MPYI3
		// Source operand values are sign extended from 24 bits to 64 bits before the actual computation
		int64_t mpyi3_result64 = SignExtend((uint64_t)(srcA_value & 0xffffff), 24) * SignExtend((uint64_t)(srcB_value & 0xffffff), 24); // Only 48 bits are useful
		int32_t lo32 = (int32_t) mpyi3_result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (mpyi3_result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t mpyi3_overflow = ((lo32 >> 31) != hi32);
		uint32_t mpyi3_result;

		if(cpu.GetST_OVM() && mpyi3_overflow)
		mpyi3_result = (mpyi3_result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		mpyi3_result = lo32;                                     // No saturation

		// Compute the result of ADDI3
		uint32_t addi3_result;      // the 32-bit result
		uint8_t addi3_carry_out;    // the carry out (0 or 1)
		uint8_t addi3_overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(addi3_result, addi3_carry_out, addi3_overflow, srcD_value, srcC_value, 0);
		else
		Add32(addi3_result, addi3_carry_out, addi3_overflow, srcD_value, srcC_value, 0);

		// Summarize overflow bit of MPYI3 and ADDI3
		uint8_t overflow = mpyi3_overflow | addi3_overflow;

		// Write back 'dst1' register operand
		unsigned int dst1 = d1;
		cpu.SetReg(dst1, mpyi3_result);

		// Write back 'dst2' register operand
		unsigned int dst2 = d2 + 2;
		cpu.SetReg(dst2, addi3_result);

		// Generate flags (into ST)
		cpu.GenFlags(
		0,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 98103 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 98109 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98112 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98116 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98119 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98124 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98128 "isa_tms320.tcc"
> *DecodeOpMPYI3_ADDI3_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 98134 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 98138 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYI3 || ADDI3 (multiply and add integer)
**********************************************************/
/**********************************************************
* MPYI3 || SUBI3 (multiply and subtract integer)
* op MPYI3_SUBI3(0b10[2]:0b0011[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 98151 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98154 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98158 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98161 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 98165 "isa_tms320.tcc"
OpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 98169 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98173 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98177 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98180 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 98184 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 98187 "isa_tms320.tcc"
)
{
#line 3541 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_src3_indir;
		string disasm_src4_indir;
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!cpu.DisasmIndir(disasm_src3_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s3_mod, s3_ar) ||
		!cpu.DisasmIndir(disasm_src4_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s4_mod, s4_ar))
		return false;

		switch(p)
		{
		case 0:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = disasm_src4_indir.c_str();
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = disasm_src4_indir.c_str();
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = disasm_src3_indir.c_str();
			srcC_name = disasm_src4_indir.c_str();
			break;
		case 4:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = disasm_src4_indir.c_str();
			break;
		}

		os << "MPYI3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "SUBI3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 98239 "isa_tms320.tcc"
}
//    srcA * srcB -> dst1
// ||
//    srcD + srcC -> dst2
template <
#line 45 "isa/tms320.isa"
class
#line 98247 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98250 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98254 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98257 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 98261 "isa_tms320.tcc"
OpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 98265 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98269 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98273 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98276 "isa_tms320.tcc"
)
{
#line 3642 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Check that indirect addressing mode is valid and compute the effective address of 'src3' operand
		typename CONFIG::address_t s3_ea;        // The effective address
		bool s3_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s3_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s3_ea, s3_update_ar, s3_output_ar, s3_mod, s3_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of 'src4' operand
		typename CONFIG::address_t s4_ea;        // The effective address
		bool s4_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s4_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s4_ea, s4_update_ar, s4_output_ar, s4_mod, s4_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load 'src3' operand from memory
		uint32_t src3_value = cpu.IntLoad(s3_ea);

		// Load 'src4' operand from memory
		uint32_t src4_value = cpu.IntLoad(s4_ea);

		// Map 'src1', 'src2', 'src3', and 'src4' to 'srcA', 'srcB', 'srcC', and 'srcD'
		// depending on the parallel addressing mode used
		uint32_t srcA_value;
		uint32_t srcB_value;
		uint32_t srcC_value;
		uint32_t srcD_value;

		switch(p)
		{
			case 0: // 00
			srcA_value = src3_value;
			srcB_value = src4_value;
			srcC_value = src2_value;
			srcD_value = src1_value;
			break;
			case 1: // 01
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src4_value;
			srcD_value = src2_value;
			break;
			case 2: // 10
			srcA_value = src1_value;
			srcB_value = src2_value;
			srcC_value = src3_value;
			srcD_value = src4_value;
			break;
			case 3: // 11
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src2_value;
			srcD_value = src4_value;
			break;
		}

		// Compute the 32-bit result and overflow of MPYI3
		// Source operand values are sign extended from 24 bits to 64 bits before the actual computation
		int64_t mpyi3_result64 = SignExtend((uint64_t)(srcA_value & 0xffffff), 24) * SignExtend((uint64_t)(srcB_value & 0xffffff), 24); // Only 48 bits are useful
		int32_t lo32 = (int32_t) mpyi3_result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (mpyi3_result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t mpyi3_overflow = ((lo32 >> 31) != hi32);
		uint32_t mpyi3_result;

		if(cpu.GetST_OVM() && mpyi3_overflow)
		mpyi3_result = (mpyi3_result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		mpyi3_result = lo32;                                     // No saturation

		// Compute the result of SUBI3
		uint32_t subi3_result;      // the 32-bit result
		uint8_t subi3_borrow_out;   // the borrow out (0 or 1)
		uint8_t subi3_overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(subi3_result, subi3_borrow_out, subi3_overflow, srcD_value, srcC_value, 0);
		else
		Sub32(subi3_result, subi3_borrow_out, subi3_overflow, srcD_value, srcC_value, 0);

		// Summarize overflow bit of MPYI3 and SUBI3
		uint8_t overflow = mpyi3_overflow | subi3_overflow;

		// Write back 'dst1' register operand
		unsigned int dst1 = d1;
		cpu.SetReg(dst1, mpyi3_result);

		// Write back 'dst2' register operand
		unsigned int dst2 = d2 + 2;
		cpu.SetReg(dst2, subi3_result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(s3_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s3_ar, s3_output_ar);
		}

		if(s4_update_ar && s4_ar != s4_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s4_ar, s4_output_ar);
		}

		// FIXME: Don't known how to generate the underflow flag

		// Generate flags (into ST)
		cpu.GenFlags(
		0,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_UF | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 98412 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 98418 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98421 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98425 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98428 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98433 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98437 "isa_tms320.tcc"
> *DecodeOpMPYI3_SUBI3(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 98443 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 98447 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98457 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98461 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98464 "isa_tms320.tcc"
>
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 98468 "isa_tms320.tcc"
OpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 98472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98476 "isa_tms320.tcc"
>::disasm(
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98480 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98483 "isa_tms320.tcc"
,
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 98487 "isa_tms320.tcc"
#line 40 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 98490 "isa_tms320.tcc"
)
{
#line 3590 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		const char *src4_name = REG_NAME[src4];
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!src3_name ||
		!src4_name)
		return false;

		switch(p)
		{
		case 0:
			srcA_name = src3_name;
			srcB_name = src4_name;
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src4_name;
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = src3_name;
			srcC_name = src4_name;
			break;
		case 4:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = src4_name;
			break;
		}

		os << "MPYI3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "SUBI3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 98542 "isa_tms320.tcc"
}
//    srcA * srcB -> dst1
// ||
//    srcD + srcC -> dst2
template <
#line 45 "isa/tms320.isa"
class
#line 98550 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98553 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98557 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98560 "isa_tms320.tcc"
>
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 98564 "isa_tms320.tcc"
OpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 98568 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98572 "isa_tms320.tcc"
>::execute(
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98576 "isa_tms320.tcc"
#line 36 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98579 "isa_tms320.tcc"
)
{
#line 3778 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src3' and 'src4' are valid registers
		if(unlikely(!cpu.HasReg(src3) || !cpu.HasReg(src4)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read 'src4' register operand
		uint32_t src4_value = cpu.GetReg(src4);

		// Map 'src1', 'src2', 'src3', and 'src4' to 'srcA', 'srcB', 'srcC', and 'srcD'
		// depending on the parallel addressing mode used
		uint32_t srcA_value;
		uint32_t srcB_value;
		uint32_t srcC_value;
		uint32_t srcD_value;

		switch(p)
		{
			case 0: // 00
			srcA_value = src3_value;
			srcB_value = src4_value;
			srcC_value = src2_value;
			srcD_value = src1_value;
			break;
			case 1: // 01
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src4_value;
			srcD_value = src2_value;
			break;
			case 2: // 10
			srcA_value = src1_value;
			srcB_value = src2_value;
			srcC_value = src3_value;
			srcD_value = src4_value;
			break;
			case 3: // 11
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src2_value;
			srcD_value = src4_value;
			break;
		}

		// Compute the 32-bit result and overflow of MPYI3
		// Source operand values are sign extended from 24 bits to 64 bits before the actual computation
		int64_t mpyi3_result64 = SignExtend((uint64_t)(srcA_value & 0xffffff), 24) * SignExtend((uint64_t)(srcB_value & 0xffffff), 24); // Only 48 bits are useful
		int32_t lo32 = (int32_t) mpyi3_result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (mpyi3_result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t mpyi3_overflow = ((lo32 >> 31) != hi32);
		uint32_t mpyi3_result;

		if(cpu.GetST_OVM() && mpyi3_overflow)
		mpyi3_result = (mpyi3_result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		mpyi3_result = lo32;                                     // No saturation

		// Compute the result of SUBI3
		uint32_t subi3_result;      // the 32-bit result
		uint8_t subi3_borrow_out;   // the borrow out (0 or 1)
		uint8_t subi3_overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(subi3_result, subi3_borrow_out, subi3_overflow, srcD_value, srcC_value, 0);
		else
		Sub32(subi3_result, subi3_borrow_out, subi3_overflow, srcD_value, srcC_value, 0);

		// Summarize overflow bit of MPYI3 and SUBI3
		uint8_t overflow = mpyi3_overflow | subi3_overflow;

		// Write back 'dst1' register operand
		unsigned int dst1 = d1;
		cpu.SetReg(dst1, mpyi3_result);

		// Write back 'dst2' register operand
		unsigned int dst2 = d2 + 2;
		cpu.SetReg(dst2, subi3_result);

		// FIXME: Don't known how to generate the underflow flag

		// Generate flags (into ST)
		cpu.GenFlags(
		0,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_UF | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 98685 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 98691 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98694 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98698 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98701 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98706 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98710 "isa_tms320.tcc"
> *DecodeOpMPYI3_SUBI3_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 98716 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 98720 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98727 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98734 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98737 "isa_tms320.tcc"
>
OpLDE_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 98742 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98746 "isa_tms320.tcc"
>::OpLDE_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98750 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98754 "isa_tms320.tcc"
>(code, addr, "LDE_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98764 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98767 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98771 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98774 "isa_tms320.tcc"
>
OpLDE_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 98779 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98783 "isa_tms320.tcc"
>::OpLDE_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98787 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98791 "isa_tms320.tcc"
>(code, addr, "LDE_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98801 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98811 "isa_tms320.tcc"
>
OpLDE_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 98816 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98820 "isa_tms320.tcc"
>::OpLDE_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98824 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98828 "isa_tms320.tcc"
>(code, addr, "LDE_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98850 "isa_tms320.tcc"
>
OpLDE_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 98855 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98859 "isa_tms320.tcc"
>::OpLDE_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98867 "isa_tms320.tcc"
>(code, addr, "LDE_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98877 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98880 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98884 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98887 "isa_tms320.tcc"
>
OpLDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 98892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98896 "isa_tms320.tcc"
>::OpLDF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98904 "isa_tms320.tcc"
>(code, addr, "LDF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98914 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98917 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98921 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98924 "isa_tms320.tcc"
>
OpLDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 98929 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98933 "isa_tms320.tcc"
>::OpLDF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98937 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98941 "isa_tms320.tcc"
>(code, addr, "LDF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98951 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98954 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98958 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98961 "isa_tms320.tcc"
>
OpLDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 98966 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98970 "isa_tms320.tcc"
>::OpLDF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98974 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98978 "isa_tms320.tcc"
>(code, addr, "LDF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98990 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98993 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98997 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99000 "isa_tms320.tcc"
>
OpLDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 99005 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99009 "isa_tms320.tcc"
>::OpLDF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99013 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99017 "isa_tms320.tcc"
>(code, addr, "LDF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99037 "isa_tms320.tcc"
>
OpLDFcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 99042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99046 "isa_tms320.tcc"
>::OpLDFcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99050 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99054 "isa_tms320.tcc"
>(code, addr, "LDFcond_reg")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99065 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99068 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99072 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99075 "isa_tms320.tcc"
>
OpLDFcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99080 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99084 "isa_tms320.tcc"
>::OpLDFcond_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99088 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99092 "isa_tms320.tcc"
>(code, addr, "LDFcond_dir")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99106 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99110 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99113 "isa_tms320.tcc"
>
OpLDFcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99118 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99122 "isa_tms320.tcc"
>::OpLDFcond_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99126 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99130 "isa_tms320.tcc"
>(code, addr, "LDFcond_indir")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99143 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99153 "isa_tms320.tcc"
>
OpLDFcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 99158 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99162 "isa_tms320.tcc"
>::OpLDFcond_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99166 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99170 "isa_tms320.tcc"
>(code, addr, "LDFcond_imm")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99181 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99184 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99188 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99191 "isa_tms320.tcc"
>
OpLDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 99196 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99200 "isa_tms320.tcc"
>::OpLDI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99204 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99208 "isa_tms320.tcc"
>(code, addr, "LDI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99218 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99221 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99225 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99228 "isa_tms320.tcc"
>
OpLDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99233 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99237 "isa_tms320.tcc"
>::OpLDI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99241 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99245 "isa_tms320.tcc"
>(code, addr, "LDI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99255 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99258 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99262 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99265 "isa_tms320.tcc"
>
OpLDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99270 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99274 "isa_tms320.tcc"
>::OpLDI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99278 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99282 "isa_tms320.tcc"
>(code, addr, "LDI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99294 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99297 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99301 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99304 "isa_tms320.tcc"
>
OpLDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 99309 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99313 "isa_tms320.tcc"
>::OpLDI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99317 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99321 "isa_tms320.tcc"
>(code, addr, "LDI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99331 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99334 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99338 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99341 "isa_tms320.tcc"
>
OpLDIcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 99346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99350 "isa_tms320.tcc"
>::OpLDIcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99354 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99358 "isa_tms320.tcc"
>(code, addr, "LDIcond_reg")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99369 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99372 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99379 "isa_tms320.tcc"
>
OpLDIcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99384 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99388 "isa_tms320.tcc"
>::OpLDIcond_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99392 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99396 "isa_tms320.tcc"
>(code, addr, "LDIcond_dir")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99407 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99410 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99414 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99417 "isa_tms320.tcc"
>
OpLDIcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99422 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99426 "isa_tms320.tcc"
>::OpLDIcond_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99434 "isa_tms320.tcc"
>(code, addr, "LDIcond_indir")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99450 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99457 "isa_tms320.tcc"
>
OpLDIcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 99462 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99466 "isa_tms320.tcc"
>::OpLDIcond_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99470 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99474 "isa_tms320.tcc"
>(code, addr, "LDIcond_imm")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99495 "isa_tms320.tcc"
>
OpLDM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 99500 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99504 "isa_tms320.tcc"
>::OpLDM_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99508 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99512 "isa_tms320.tcc"
>(code, addr, "LDM_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99522 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99532 "isa_tms320.tcc"
>
OpLDM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99537 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99541 "isa_tms320.tcc"
>::OpLDM_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99549 "isa_tms320.tcc"
>(code, addr, "LDM_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99559 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99562 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99566 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99569 "isa_tms320.tcc"
>
OpLDM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99574 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99578 "isa_tms320.tcc"
>::OpLDM_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99582 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99586 "isa_tms320.tcc"
>(code, addr, "LDM_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99598 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99601 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99605 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99608 "isa_tms320.tcc"
>
OpLDM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 99613 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99617 "isa_tms320.tcc"
>::OpLDM_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99621 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99625 "isa_tms320.tcc"
>(code, addr, "LDM_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xfff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99635 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99642 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99645 "isa_tms320.tcc"
>
OpLDP<
#line 45 "isa/tms320.isa"
CONFIG
#line 99650 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99654 "isa_tms320.tcc"
>::OpLDP(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99662 "isa_tms320.tcc"
>(code, addr, "LDP")
{
	src = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99671 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99674 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99678 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99681 "isa_tms320.tcc"
>
OpPOP<
#line 45 "isa/tms320.isa"
CONFIG
#line 99686 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99690 "isa_tms320.tcc"
>::OpPOP(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99694 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99698 "isa_tms320.tcc"
>(code, addr, "POP")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99707 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99710 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99714 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99717 "isa_tms320.tcc"
>
OpPOPF<
#line 45 "isa/tms320.isa"
CONFIG
#line 99722 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99726 "isa_tms320.tcc"
>::OpPOPF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99734 "isa_tms320.tcc"
>(code, addr, "POPF")
{
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99743 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99746 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99750 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99753 "isa_tms320.tcc"
>
OpPUSH<
#line 45 "isa/tms320.isa"
CONFIG
#line 99758 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99762 "isa_tms320.tcc"
>::OpPUSH(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99766 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99770 "isa_tms320.tcc"
>(code, addr, "PUSH")
{
	src = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99779 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99782 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99786 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99789 "isa_tms320.tcc"
>
OpPUSHF<
#line 45 "isa/tms320.isa"
CONFIG
#line 99794 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99798 "isa_tms320.tcc"
>::OpPUSHF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99802 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99806 "isa_tms320.tcc"
>(code, addr, "PUSHF")
{
	src = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99815 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99818 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99822 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99825 "isa_tms320.tcc"
>
OpSTF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99830 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99834 "isa_tms320.tcc"
>::OpSTF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99838 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99842 "isa_tms320.tcc"
>(code, addr, "STF_dir")
{
	src = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99852 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99855 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99859 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99862 "isa_tms320.tcc"
>
OpSTF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99867 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99871 "isa_tms320.tcc"
>::OpSTF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99875 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99879 "isa_tms320.tcc"
>(code, addr, "STF_indir")
{
	src = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99891 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99898 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99901 "isa_tms320.tcc"
>
OpSTI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99906 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99910 "isa_tms320.tcc"
>::OpSTI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99914 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99918 "isa_tms320.tcc"
>(code, addr, "STI_dir")
{
	src = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99931 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99935 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99938 "isa_tms320.tcc"
>
OpSTI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99947 "isa_tms320.tcc"
>::OpSTI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99951 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99955 "isa_tms320.tcc"
>(code, addr, "STI_indir")
{
	src = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99967 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99970 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99974 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99977 "isa_tms320.tcc"
>
OpABSF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 99982 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99986 "isa_tms320.tcc"
>::OpABSF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99990 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99994 "isa_tms320.tcc"
>(code, addr, "ABSF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100004 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100007 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100011 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100014 "isa_tms320.tcc"
>
OpABSF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100019 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100023 "isa_tms320.tcc"
>::OpABSF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100031 "isa_tms320.tcc"
>(code, addr, "ABSF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100041 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100051 "isa_tms320.tcc"
>
OpABSF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100060 "isa_tms320.tcc"
>::OpABSF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100064 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100068 "isa_tms320.tcc"
>(code, addr, "ABSF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100080 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100090 "isa_tms320.tcc"
>
OpABSF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 100095 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100099 "isa_tms320.tcc"
>::OpABSF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100103 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100107 "isa_tms320.tcc"
>(code, addr, "ABSF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100117 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100120 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100127 "isa_tms320.tcc"
>
OpABSI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 100132 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100136 "isa_tms320.tcc"
>::OpABSI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100144 "isa_tms320.tcc"
>(code, addr, "ABSI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100154 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100157 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100161 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100164 "isa_tms320.tcc"
>
OpABSI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100169 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100173 "isa_tms320.tcc"
>::OpABSI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100177 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100181 "isa_tms320.tcc"
>(code, addr, "ABSI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100191 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100194 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100201 "isa_tms320.tcc"
>
OpABSI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100206 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100210 "isa_tms320.tcc"
>::OpABSI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100214 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100218 "isa_tms320.tcc"
>(code, addr, "ABSI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100233 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100237 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100240 "isa_tms320.tcc"
>
OpABSI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 100245 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100249 "isa_tms320.tcc"
>::OpABSI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100253 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100257 "isa_tms320.tcc"
>(code, addr, "ABSI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100267 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100270 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100274 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100277 "isa_tms320.tcc"
>
OpADDC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 100282 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100286 "isa_tms320.tcc"
>::OpADDC_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100290 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100294 "isa_tms320.tcc"
>(code, addr, "ADDC_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100304 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100307 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100311 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100314 "isa_tms320.tcc"
>
OpADDC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100319 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100323 "isa_tms320.tcc"
>::OpADDC_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100327 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100331 "isa_tms320.tcc"
>(code, addr, "ADDC_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100341 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100344 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100348 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100351 "isa_tms320.tcc"
>
OpADDC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100356 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100360 "isa_tms320.tcc"
>::OpADDC_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100364 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100368 "isa_tms320.tcc"
>(code, addr, "ADDC_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100380 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100390 "isa_tms320.tcc"
>
OpADDC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 100395 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100399 "isa_tms320.tcc"
>::OpADDC_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100407 "isa_tms320.tcc"
>(code, addr, "ADDC_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100417 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100420 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100424 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100427 "isa_tms320.tcc"
>
OpADDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 100432 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100436 "isa_tms320.tcc"
>::OpADDF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100440 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100444 "isa_tms320.tcc"
>(code, addr, "ADDF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100457 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100461 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100464 "isa_tms320.tcc"
>
OpADDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100469 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100473 "isa_tms320.tcc"
>::OpADDF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100477 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100481 "isa_tms320.tcc"
>(code, addr, "ADDF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100491 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100494 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100498 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100501 "isa_tms320.tcc"
>
OpADDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100506 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100510 "isa_tms320.tcc"
>::OpADDF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100514 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100518 "isa_tms320.tcc"
>(code, addr, "ADDF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100530 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100533 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100537 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100540 "isa_tms320.tcc"
>
OpADDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 100545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100549 "isa_tms320.tcc"
>::OpADDF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100553 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100557 "isa_tms320.tcc"
>(code, addr, "ADDF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100567 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100570 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100574 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100577 "isa_tms320.tcc"
>
OpADDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 100582 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100586 "isa_tms320.tcc"
>::OpADDI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100590 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100594 "isa_tms320.tcc"
>(code, addr, "ADDI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100604 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100607 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100611 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100614 "isa_tms320.tcc"
>
OpADDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100619 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100623 "isa_tms320.tcc"
>::OpADDI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100627 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100631 "isa_tms320.tcc"
>(code, addr, "ADDI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100641 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100651 "isa_tms320.tcc"
>
OpADDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100656 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100660 "isa_tms320.tcc"
>::OpADDI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100664 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100668 "isa_tms320.tcc"
>(code, addr, "ADDI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100680 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100683 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100687 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100690 "isa_tms320.tcc"
>
OpADDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 100695 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100699 "isa_tms320.tcc"
>::OpADDI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100703 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100707 "isa_tms320.tcc"
>(code, addr, "ADDI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100717 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100720 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100724 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100727 "isa_tms320.tcc"
>
OpAND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 100732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100736 "isa_tms320.tcc"
>::OpAND_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100740 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100744 "isa_tms320.tcc"
>(code, addr, "AND_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100754 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100757 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100761 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100764 "isa_tms320.tcc"
>
OpAND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100769 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100773 "isa_tms320.tcc"
>::OpAND_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100777 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100781 "isa_tms320.tcc"
>(code, addr, "AND_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100791 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100794 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100798 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100801 "isa_tms320.tcc"
>
OpAND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100806 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100810 "isa_tms320.tcc"
>::OpAND_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100814 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100818 "isa_tms320.tcc"
>(code, addr, "AND_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100830 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100833 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100837 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100840 "isa_tms320.tcc"
>
OpAND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 100845 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100849 "isa_tms320.tcc"
>::OpAND_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100853 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100857 "isa_tms320.tcc"
>(code, addr, "AND_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100867 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100870 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100874 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100877 "isa_tms320.tcc"
>
OpANDN_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 100882 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100886 "isa_tms320.tcc"
>::OpANDN_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100890 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100894 "isa_tms320.tcc"
>(code, addr, "ANDN_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100904 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100907 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100911 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100914 "isa_tms320.tcc"
>
OpANDN_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100919 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100923 "isa_tms320.tcc"
>::OpANDN_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100927 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100931 "isa_tms320.tcc"
>(code, addr, "ANDN_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100941 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100944 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100948 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100951 "isa_tms320.tcc"
>
OpANDN_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100956 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100960 "isa_tms320.tcc"
>::OpANDN_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100968 "isa_tms320.tcc"
>(code, addr, "ANDN_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100980 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100990 "isa_tms320.tcc"
>
OpANDN_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 100995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100999 "isa_tms320.tcc"
>::OpANDN_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101007 "isa_tms320.tcc"
>(code, addr, "ANDN_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101017 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101020 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101024 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101027 "isa_tms320.tcc"
>
OpASH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101032 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101036 "isa_tms320.tcc"
>::OpASH_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101040 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101044 "isa_tms320.tcc"
>(code, addr, "ASH_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101054 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101057 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101061 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101064 "isa_tms320.tcc"
>
OpASH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101069 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101073 "isa_tms320.tcc"
>::OpASH_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101077 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101081 "isa_tms320.tcc"
>(code, addr, "ASH_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101091 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101094 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101098 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101101 "isa_tms320.tcc"
>
OpASH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101106 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101110 "isa_tms320.tcc"
>::OpASH_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101118 "isa_tms320.tcc"
>(code, addr, "ASH_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101130 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101140 "isa_tms320.tcc"
>
OpASH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101145 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101149 "isa_tms320.tcc"
>::OpASH_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101157 "isa_tms320.tcc"
>(code, addr, "ASH_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101167 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101170 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101174 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101177 "isa_tms320.tcc"
>
OpCMPF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101182 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101186 "isa_tms320.tcc"
>::OpCMPF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101190 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101194 "isa_tms320.tcc"
>(code, addr, "CMPF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101204 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101207 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101211 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101214 "isa_tms320.tcc"
>
OpCMPF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101219 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101223 "isa_tms320.tcc"
>::OpCMPF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101227 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101231 "isa_tms320.tcc"
>(code, addr, "CMPF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101244 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101248 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101251 "isa_tms320.tcc"
>
OpCMPF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101256 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101260 "isa_tms320.tcc"
>::OpCMPF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101264 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101268 "isa_tms320.tcc"
>(code, addr, "CMPF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101283 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101287 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101290 "isa_tms320.tcc"
>
OpCMPF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101295 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101299 "isa_tms320.tcc"
>::OpCMPF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101303 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101307 "isa_tms320.tcc"
>(code, addr, "CMPF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101317 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101324 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101327 "isa_tms320.tcc"
>
OpCMPI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101332 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101336 "isa_tms320.tcc"
>::OpCMPI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101340 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101344 "isa_tms320.tcc"
>(code, addr, "CMPI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101354 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101357 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101361 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101364 "isa_tms320.tcc"
>
OpCMPI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101369 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101373 "isa_tms320.tcc"
>::OpCMPI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101377 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101381 "isa_tms320.tcc"
>(code, addr, "CMPI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101391 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101394 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101398 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101401 "isa_tms320.tcc"
>
OpCMPI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101406 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101410 "isa_tms320.tcc"
>::OpCMPI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101414 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101418 "isa_tms320.tcc"
>(code, addr, "CMPI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101430 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101433 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101437 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101440 "isa_tms320.tcc"
>
OpCMPI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101445 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101449 "isa_tms320.tcc"
>::OpCMPI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101453 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101457 "isa_tms320.tcc"
>(code, addr, "CMPI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101467 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101470 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101474 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101477 "isa_tms320.tcc"
>
OpFIX_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101482 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101486 "isa_tms320.tcc"
>::OpFIX_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101490 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101494 "isa_tms320.tcc"
>(code, addr, "FIX_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101504 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101511 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101514 "isa_tms320.tcc"
>
OpFIX_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101519 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101523 "isa_tms320.tcc"
>::OpFIX_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101531 "isa_tms320.tcc"
>(code, addr, "FIX_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101541 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101548 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101551 "isa_tms320.tcc"
>
OpFIX_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101556 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101560 "isa_tms320.tcc"
>::OpFIX_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101564 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101568 "isa_tms320.tcc"
>(code, addr, "FIX_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101580 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101583 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101587 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101590 "isa_tms320.tcc"
>
OpFIX_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101595 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101599 "isa_tms320.tcc"
>::OpFIX_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101603 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101607 "isa_tms320.tcc"
>(code, addr, "FIX_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101617 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101620 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101624 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101627 "isa_tms320.tcc"
>
OpFLOAT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101632 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101636 "isa_tms320.tcc"
>::OpFLOAT_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101640 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101644 "isa_tms320.tcc"
>(code, addr, "FLOAT_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101654 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101657 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101661 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101664 "isa_tms320.tcc"
>
OpFLOAT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101669 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101673 "isa_tms320.tcc"
>::OpFLOAT_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101677 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101681 "isa_tms320.tcc"
>(code, addr, "FLOAT_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101691 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101694 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101698 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101701 "isa_tms320.tcc"
>
OpFLOAT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101706 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101710 "isa_tms320.tcc"
>::OpFLOAT_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101714 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101718 "isa_tms320.tcc"
>(code, addr, "FLOAT_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101730 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101733 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101737 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101740 "isa_tms320.tcc"
>
OpFLOAT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101745 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101749 "isa_tms320.tcc"
>::OpFLOAT_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101753 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101757 "isa_tms320.tcc"
>(code, addr, "FLOAT_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101767 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101770 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101774 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101777 "isa_tms320.tcc"
>
OpLSH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101782 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101786 "isa_tms320.tcc"
>::OpLSH_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101790 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101794 "isa_tms320.tcc"
>(code, addr, "LSH_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101804 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101807 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101811 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101814 "isa_tms320.tcc"
>
OpLSH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101819 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101823 "isa_tms320.tcc"
>::OpLSH_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101827 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101831 "isa_tms320.tcc"
>(code, addr, "LSH_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101841 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101844 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101848 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101851 "isa_tms320.tcc"
>
OpLSH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101856 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101860 "isa_tms320.tcc"
>::OpLSH_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101864 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101868 "isa_tms320.tcc"
>(code, addr, "LSH_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101880 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101883 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101887 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101890 "isa_tms320.tcc"
>
OpLSH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101895 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101899 "isa_tms320.tcc"
>::OpLSH_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101903 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101907 "isa_tms320.tcc"
>(code, addr, "LSH_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0x7f) << 25) >> 25);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101917 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101920 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101924 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101927 "isa_tms320.tcc"
>
OpMPYF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101932 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101936 "isa_tms320.tcc"
>::OpMPYF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101944 "isa_tms320.tcc"
>(code, addr, "MPYF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101954 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101957 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101961 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101964 "isa_tms320.tcc"
>
OpMPYF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101969 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101973 "isa_tms320.tcc"
>::OpMPYF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101977 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101981 "isa_tms320.tcc"
>(code, addr, "MPYF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101991 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101994 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101998 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102001 "isa_tms320.tcc"
>
OpMPYF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102006 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102010 "isa_tms320.tcc"
>::OpMPYF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102014 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102018 "isa_tms320.tcc"
>(code, addr, "MPYF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102030 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102033 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102037 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102040 "isa_tms320.tcc"
>
OpMPYF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102045 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102049 "isa_tms320.tcc"
>::OpMPYF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102053 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102057 "isa_tms320.tcc"
>(code, addr, "MPYF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102067 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102077 "isa_tms320.tcc"
>
OpMPYI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102086 "isa_tms320.tcc"
>::OpMPYI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102094 "isa_tms320.tcc"
>(code, addr, "MPYI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102104 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102107 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102111 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102114 "isa_tms320.tcc"
>
OpMPYI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102119 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102123 "isa_tms320.tcc"
>::OpMPYI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102127 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102131 "isa_tms320.tcc"
>(code, addr, "MPYI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102141 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102144 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102148 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102151 "isa_tms320.tcc"
>
OpMPYI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102156 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102160 "isa_tms320.tcc"
>::OpMPYI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102164 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102168 "isa_tms320.tcc"
>(code, addr, "MPYI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102180 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102183 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102187 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102190 "isa_tms320.tcc"
>
OpMPYI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102195 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102199 "isa_tms320.tcc"
>::OpMPYI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102203 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102207 "isa_tms320.tcc"
>(code, addr, "MPYI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102217 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102220 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102224 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102227 "isa_tms320.tcc"
>
OpNEGB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102232 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102236 "isa_tms320.tcc"
>::OpNEGB_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102240 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102244 "isa_tms320.tcc"
>(code, addr, "NEGB_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102254 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102257 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102261 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102264 "isa_tms320.tcc"
>
OpNEGB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102269 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102273 "isa_tms320.tcc"
>::OpNEGB_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102277 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102281 "isa_tms320.tcc"
>(code, addr, "NEGB_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102291 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102294 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102298 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102301 "isa_tms320.tcc"
>
OpNEGB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102306 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102310 "isa_tms320.tcc"
>::OpNEGB_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102314 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102318 "isa_tms320.tcc"
>(code, addr, "NEGB_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102330 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102337 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102340 "isa_tms320.tcc"
>
OpNEGB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102349 "isa_tms320.tcc"
>::OpNEGB_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102353 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102357 "isa_tms320.tcc"
>(code, addr, "NEGB_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102367 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102370 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102374 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102377 "isa_tms320.tcc"
>
OpNEGF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102382 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102386 "isa_tms320.tcc"
>::OpNEGF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102390 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102394 "isa_tms320.tcc"
>(code, addr, "NEGF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102404 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102407 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102411 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102414 "isa_tms320.tcc"
>
OpNEGF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102419 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102423 "isa_tms320.tcc"
>::OpNEGF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102427 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102431 "isa_tms320.tcc"
>(code, addr, "NEGF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102441 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102444 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102448 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102451 "isa_tms320.tcc"
>
OpNEGF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102456 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102460 "isa_tms320.tcc"
>::OpNEGF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102464 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102468 "isa_tms320.tcc"
>(code, addr, "NEGF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102480 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102483 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102487 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102490 "isa_tms320.tcc"
>
OpNEGF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102495 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102499 "isa_tms320.tcc"
>::OpNEGF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102507 "isa_tms320.tcc"
>(code, addr, "NEGF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102517 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102520 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102524 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102527 "isa_tms320.tcc"
>
OpNEGI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102532 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102536 "isa_tms320.tcc"
>::OpNEGI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102540 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102544 "isa_tms320.tcc"
>(code, addr, "NEGI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102554 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102557 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102561 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102564 "isa_tms320.tcc"
>
OpNEGI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102573 "isa_tms320.tcc"
>::OpNEGI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102577 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102581 "isa_tms320.tcc"
>(code, addr, "NEGI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102591 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102594 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102598 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102601 "isa_tms320.tcc"
>
OpNEGI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102606 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102610 "isa_tms320.tcc"
>::OpNEGI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102618 "isa_tms320.tcc"
>(code, addr, "NEGI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102633 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102640 "isa_tms320.tcc"
>
OpNEGI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102645 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102649 "isa_tms320.tcc"
>::OpNEGI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102653 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102657 "isa_tms320.tcc"
>(code, addr, "NEGI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102677 "isa_tms320.tcc"
>
OpNORM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102682 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102686 "isa_tms320.tcc"
>::OpNORM_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102690 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102694 "isa_tms320.tcc"
>(code, addr, "NORM_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102704 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102707 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102711 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102714 "isa_tms320.tcc"
>
OpNORM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102719 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102723 "isa_tms320.tcc"
>::OpNORM_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102727 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102731 "isa_tms320.tcc"
>(code, addr, "NORM_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102741 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102748 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102751 "isa_tms320.tcc"
>
OpNORM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102756 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102760 "isa_tms320.tcc"
>::OpNORM_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102768 "isa_tms320.tcc"
>(code, addr, "NORM_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102783 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102787 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102790 "isa_tms320.tcc"
>
OpNORM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102795 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102799 "isa_tms320.tcc"
>::OpNORM_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102807 "isa_tms320.tcc"
>(code, addr, "NORM_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102817 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102820 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102824 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102827 "isa_tms320.tcc"
>
OpNOT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102832 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102836 "isa_tms320.tcc"
>::OpNOT_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102840 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102844 "isa_tms320.tcc"
>(code, addr, "NOT_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102854 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102857 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102861 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102864 "isa_tms320.tcc"
>
OpNOT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102869 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102873 "isa_tms320.tcc"
>::OpNOT_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102877 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102881 "isa_tms320.tcc"
>(code, addr, "NOT_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102891 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102898 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102901 "isa_tms320.tcc"
>
OpNOT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102906 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102910 "isa_tms320.tcc"
>::OpNOT_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102914 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102918 "isa_tms320.tcc"
>(code, addr, "NOT_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102930 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102933 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102937 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102940 "isa_tms320.tcc"
>
OpNOT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102945 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102949 "isa_tms320.tcc"
>::OpNOT_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102953 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102957 "isa_tms320.tcc"
>(code, addr, "NOT_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102967 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102970 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102974 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102977 "isa_tms320.tcc"
>
OpOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102982 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102986 "isa_tms320.tcc"
>::OpOR_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102990 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102994 "isa_tms320.tcc"
>(code, addr, "OR_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103004 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103007 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103011 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103014 "isa_tms320.tcc"
>
OpOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103019 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103023 "isa_tms320.tcc"
>::OpOR_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103031 "isa_tms320.tcc"
>(code, addr, "OR_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103041 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103051 "isa_tms320.tcc"
>
OpOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103060 "isa_tms320.tcc"
>::OpOR_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103064 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103068 "isa_tms320.tcc"
>(code, addr, "OR_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103080 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103090 "isa_tms320.tcc"
>
OpOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103095 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103099 "isa_tms320.tcc"
>::OpOR_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103103 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103107 "isa_tms320.tcc"
>(code, addr, "OR_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103117 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103120 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103127 "isa_tms320.tcc"
>
OpRND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103132 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103136 "isa_tms320.tcc"
>::OpRND_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103144 "isa_tms320.tcc"
>(code, addr, "RND_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103154 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103157 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103161 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103164 "isa_tms320.tcc"
>
OpRND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103169 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103173 "isa_tms320.tcc"
>::OpRND_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103177 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103181 "isa_tms320.tcc"
>(code, addr, "RND_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103191 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103194 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103201 "isa_tms320.tcc"
>
OpRND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103206 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103210 "isa_tms320.tcc"
>::OpRND_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103214 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103218 "isa_tms320.tcc"
>(code, addr, "RND_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103233 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103237 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103240 "isa_tms320.tcc"
>
OpRND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103245 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103249 "isa_tms320.tcc"
>::OpRND_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103253 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103257 "isa_tms320.tcc"
>(code, addr, "RND_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103267 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103270 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103274 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103277 "isa_tms320.tcc"
>
OpROL<
#line 45 "isa/tms320.isa"
CONFIG
#line 103282 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103286 "isa_tms320.tcc"
>::OpROL(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103290 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103294 "isa_tms320.tcc"
>(code, addr, "ROL")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103303 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103306 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103310 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103313 "isa_tms320.tcc"
>
OpROLC<
#line 45 "isa/tms320.isa"
CONFIG
#line 103318 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103322 "isa_tms320.tcc"
>::OpROLC(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103326 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103330 "isa_tms320.tcc"
>(code, addr, "ROLC")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103339 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103342 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103346 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103349 "isa_tms320.tcc"
>
OpROR<
#line 45 "isa/tms320.isa"
CONFIG
#line 103354 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103358 "isa_tms320.tcc"
>::OpROR(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103362 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103366 "isa_tms320.tcc"
>(code, addr, "ROR")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103375 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103382 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103385 "isa_tms320.tcc"
>
OpRORC<
#line 45 "isa/tms320.isa"
CONFIG
#line 103390 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103394 "isa_tms320.tcc"
>::OpRORC(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103398 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103402 "isa_tms320.tcc"
>(code, addr, "RORC")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103411 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103414 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103418 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103421 "isa_tms320.tcc"
>
OpSUBB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103426 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103430 "isa_tms320.tcc"
>::OpSUBB_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103434 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103438 "isa_tms320.tcc"
>(code, addr, "SUBB_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103448 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103451 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103455 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103458 "isa_tms320.tcc"
>
OpSUBB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103463 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103467 "isa_tms320.tcc"
>::OpSUBB_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103471 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103475 "isa_tms320.tcc"
>(code, addr, "SUBB_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103495 "isa_tms320.tcc"
>
OpSUBB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103500 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103504 "isa_tms320.tcc"
>::OpSUBB_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103508 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103512 "isa_tms320.tcc"
>(code, addr, "SUBB_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103524 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103531 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103534 "isa_tms320.tcc"
>
OpSUBB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103539 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103543 "isa_tms320.tcc"
>::OpSUBB_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103547 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103551 "isa_tms320.tcc"
>(code, addr, "SUBB_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103561 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103564 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103568 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103571 "isa_tms320.tcc"
>
OpSUBC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103580 "isa_tms320.tcc"
>::OpSUBC_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103584 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103588 "isa_tms320.tcc"
>(code, addr, "SUBC_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103598 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103601 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103605 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103608 "isa_tms320.tcc"
>
OpSUBC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103613 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103617 "isa_tms320.tcc"
>::OpSUBC_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103621 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103625 "isa_tms320.tcc"
>(code, addr, "SUBC_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103635 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103642 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103645 "isa_tms320.tcc"
>
OpSUBC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103650 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103654 "isa_tms320.tcc"
>::OpSUBC_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103662 "isa_tms320.tcc"
>(code, addr, "SUBC_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103677 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103684 "isa_tms320.tcc"
>
OpSUBC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103689 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103693 "isa_tms320.tcc"
>::OpSUBC_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103697 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103701 "isa_tms320.tcc"
>(code, addr, "SUBC_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103711 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103714 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103718 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103721 "isa_tms320.tcc"
>
OpSUBF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103726 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103730 "isa_tms320.tcc"
>::OpSUBF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103734 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103738 "isa_tms320.tcc"
>(code, addr, "SUBF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103748 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103751 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103755 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103758 "isa_tms320.tcc"
>
OpSUBF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103763 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103767 "isa_tms320.tcc"
>::OpSUBF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103771 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103775 "isa_tms320.tcc"
>(code, addr, "SUBF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103785 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103788 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103792 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103795 "isa_tms320.tcc"
>
OpSUBF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103800 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103804 "isa_tms320.tcc"
>::OpSUBF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103812 "isa_tms320.tcc"
>(code, addr, "SUBF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103824 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103827 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103831 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103834 "isa_tms320.tcc"
>
OpSUBF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103839 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103843 "isa_tms320.tcc"
>::OpSUBF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103851 "isa_tms320.tcc"
>(code, addr, "SUBF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103861 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103864 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103868 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103871 "isa_tms320.tcc"
>
OpSUBI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103880 "isa_tms320.tcc"
>::OpSUBI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103884 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103888 "isa_tms320.tcc"
>(code, addr, "SUBI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103898 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103901 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103905 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103908 "isa_tms320.tcc"
>
OpSUBI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103913 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103917 "isa_tms320.tcc"
>::OpSUBI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103925 "isa_tms320.tcc"
>(code, addr, "SUBI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103935 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103938 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103942 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103945 "isa_tms320.tcc"
>
OpSUBI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103950 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103954 "isa_tms320.tcc"
>::OpSUBI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103958 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103962 "isa_tms320.tcc"
>(code, addr, "SUBI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103974 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103977 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103981 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103984 "isa_tms320.tcc"
>
OpSUBI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103989 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103993 "isa_tms320.tcc"
>::OpSUBI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103997 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104001 "isa_tms320.tcc"
>(code, addr, "SUBI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104011 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104014 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104018 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104021 "isa_tms320.tcc"
>
OpSUBRB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104026 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104030 "isa_tms320.tcc"
>::OpSUBRB_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104034 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104038 "isa_tms320.tcc"
>(code, addr, "SUBRB_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104051 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104055 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104058 "isa_tms320.tcc"
>
OpSUBRB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104063 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104067 "isa_tms320.tcc"
>::OpSUBRB_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104075 "isa_tms320.tcc"
>(code, addr, "SUBRB_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104085 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104088 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104092 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104095 "isa_tms320.tcc"
>
OpSUBRB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104100 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104104 "isa_tms320.tcc"
>::OpSUBRB_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104108 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104112 "isa_tms320.tcc"
>(code, addr, "SUBRB_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104127 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104131 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104134 "isa_tms320.tcc"
>
OpSUBRB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 104139 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104143 "isa_tms320.tcc"
>::OpSUBRB_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104147 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104151 "isa_tms320.tcc"
>(code, addr, "SUBRB_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104161 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104164 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104171 "isa_tms320.tcc"
>
OpSUBRF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104176 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104180 "isa_tms320.tcc"
>::OpSUBRF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104184 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104188 "isa_tms320.tcc"
>(code, addr, "SUBRF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104201 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104208 "isa_tms320.tcc"
>
OpSUBRF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104217 "isa_tms320.tcc"
>::OpSUBRF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104221 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104225 "isa_tms320.tcc"
>(code, addr, "SUBRF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104242 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104245 "isa_tms320.tcc"
>
OpSUBRF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104250 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104254 "isa_tms320.tcc"
>::OpSUBRF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104258 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104262 "isa_tms320.tcc"
>(code, addr, "SUBRF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104274 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104277 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104281 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104284 "isa_tms320.tcc"
>
OpSUBRF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 104289 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104293 "isa_tms320.tcc"
>::OpSUBRF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104297 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104301 "isa_tms320.tcc"
>(code, addr, "SUBRF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104311 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104314 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104318 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104321 "isa_tms320.tcc"
>
OpSUBRI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104326 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104330 "isa_tms320.tcc"
>::OpSUBRI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104334 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104338 "isa_tms320.tcc"
>(code, addr, "SUBRI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104348 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104351 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104355 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104358 "isa_tms320.tcc"
>
OpSUBRI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104363 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104367 "isa_tms320.tcc"
>::OpSUBRI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104371 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104375 "isa_tms320.tcc"
>(code, addr, "SUBRI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104385 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104388 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104392 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104395 "isa_tms320.tcc"
>
OpSUBRI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104400 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104404 "isa_tms320.tcc"
>::OpSUBRI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104408 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104412 "isa_tms320.tcc"
>(code, addr, "SUBRI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104424 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104427 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104431 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104434 "isa_tms320.tcc"
>
OpSUBRI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 104439 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104443 "isa_tms320.tcc"
>::OpSUBRI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104447 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104451 "isa_tms320.tcc"
>(code, addr, "SUBRI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104461 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104464 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104468 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104471 "isa_tms320.tcc"
>
OpTSTB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104476 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104480 "isa_tms320.tcc"
>::OpTSTB_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104488 "isa_tms320.tcc"
>(code, addr, "TSTB_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104498 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104501 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104505 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104508 "isa_tms320.tcc"
>
OpTSTB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104513 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104517 "isa_tms320.tcc"
>::OpTSTB_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104521 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104525 "isa_tms320.tcc"
>(code, addr, "TSTB_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104535 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104538 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104542 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104545 "isa_tms320.tcc"
>
OpTSTB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104550 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104554 "isa_tms320.tcc"
>::OpTSTB_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104558 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104562 "isa_tms320.tcc"
>(code, addr, "TSTB_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104574 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104577 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104581 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104584 "isa_tms320.tcc"
>
OpTSTB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 104589 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104593 "isa_tms320.tcc"
>::OpTSTB_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104597 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104601 "isa_tms320.tcc"
>(code, addr, "TSTB_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104611 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104618 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104621 "isa_tms320.tcc"
>
OpXOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104626 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104630 "isa_tms320.tcc"
>::OpXOR_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104634 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104638 "isa_tms320.tcc"
>(code, addr, "XOR_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104651 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104658 "isa_tms320.tcc"
>
OpXOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104667 "isa_tms320.tcc"
>::OpXOR_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104671 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104675 "isa_tms320.tcc"
>(code, addr, "XOR_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104685 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104688 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104692 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104695 "isa_tms320.tcc"
>
OpXOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104704 "isa_tms320.tcc"
>::OpXOR_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104708 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104712 "isa_tms320.tcc"
>(code, addr, "XOR_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104724 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104727 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104731 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104734 "isa_tms320.tcc"
>
OpXOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 104739 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104743 "isa_tms320.tcc"
>::OpXOR_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104747 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104751 "isa_tms320.tcc"
>(code, addr, "XOR_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104761 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104768 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104771 "isa_tms320.tcc"
>
OpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104780 "isa_tms320.tcc"
>::OpADDC3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104784 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104788 "isa_tms320.tcc"
>(code, addr, "ADDC3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104799 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104802 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104806 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104809 "isa_tms320.tcc"
>
OpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104814 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104818 "isa_tms320.tcc"
>::OpADDC3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104826 "isa_tms320.tcc"
>(code, addr, "ADDC3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104838 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104841 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104845 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104848 "isa_tms320.tcc"
>
OpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104853 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104857 "isa_tms320.tcc"
>::OpADDC3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104861 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104865 "isa_tms320.tcc"
>(code, addr, "ADDC3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104877 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104880 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104884 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104887 "isa_tms320.tcc"
>
OpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104896 "isa_tms320.tcc"
>::OpADDC3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104904 "isa_tms320.tcc"
>(code, addr, "ADDC3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104917 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104920 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104924 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104927 "isa_tms320.tcc"
>
OpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104932 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104936 "isa_tms320.tcc"
>::OpADDF3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104944 "isa_tms320.tcc"
>(code, addr, "ADDF3_reg_reg")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104955 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104958 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104962 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104965 "isa_tms320.tcc"
>
OpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104970 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104974 "isa_tms320.tcc"
>::OpADDF3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104978 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104982 "isa_tms320.tcc"
>(code, addr, "ADDF3_indir_reg")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104994 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104997 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105001 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105004 "isa_tms320.tcc"
>
OpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105009 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105013 "isa_tms320.tcc"
>::OpADDF3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105017 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105021 "isa_tms320.tcc"
>(code, addr, "ADDF3_reg_indir")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105033 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105036 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105040 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105043 "isa_tms320.tcc"
>
OpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105048 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105052 "isa_tms320.tcc"
>::OpADDF3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105060 "isa_tms320.tcc"
>(code, addr, "ADDF3_indir_indir")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105073 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105076 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105080 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105083 "isa_tms320.tcc"
>
OpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105088 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105092 "isa_tms320.tcc"
>::OpADDI3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105096 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105100 "isa_tms320.tcc"
>(code, addr, "ADDI3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105111 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105118 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105121 "isa_tms320.tcc"
>
OpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105126 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105130 "isa_tms320.tcc"
>::OpADDI3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105134 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105138 "isa_tms320.tcc"
>(code, addr, "ADDI3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105157 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105160 "isa_tms320.tcc"
>
OpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105165 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105169 "isa_tms320.tcc"
>::OpADDI3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105173 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105177 "isa_tms320.tcc"
>(code, addr, "ADDI3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105189 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105196 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105199 "isa_tms320.tcc"
>
OpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105204 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105208 "isa_tms320.tcc"
>::OpADDI3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105216 "isa_tms320.tcc"
>(code, addr, "ADDI3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105229 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105232 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105236 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105239 "isa_tms320.tcc"
>
OpAND3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105244 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105248 "isa_tms320.tcc"
>::OpAND3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105252 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105256 "isa_tms320.tcc"
>(code, addr, "AND3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105267 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105270 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105274 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105277 "isa_tms320.tcc"
>
OpAND3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105282 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105286 "isa_tms320.tcc"
>::OpAND3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105290 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105294 "isa_tms320.tcc"
>(code, addr, "AND3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105306 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105309 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105313 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105316 "isa_tms320.tcc"
>
OpAND3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105321 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105325 "isa_tms320.tcc"
>::OpAND3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105329 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105333 "isa_tms320.tcc"
>(code, addr, "AND3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105345 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105352 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105355 "isa_tms320.tcc"
>
OpAND3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105364 "isa_tms320.tcc"
>::OpAND3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105368 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105372 "isa_tms320.tcc"
>(code, addr, "AND3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105385 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105388 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105392 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105395 "isa_tms320.tcc"
>
OpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105400 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105404 "isa_tms320.tcc"
>::OpANDN3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105408 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105412 "isa_tms320.tcc"
>(code, addr, "ANDN3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105423 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105426 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105430 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105433 "isa_tms320.tcc"
>
OpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105438 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105442 "isa_tms320.tcc"
>::OpANDN3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105446 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105450 "isa_tms320.tcc"
>(code, addr, "ANDN3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105462 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105472 "isa_tms320.tcc"
>
OpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105477 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105481 "isa_tms320.tcc"
>::OpANDN3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105485 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105489 "isa_tms320.tcc"
>(code, addr, "ANDN3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105501 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105504 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105508 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105511 "isa_tms320.tcc"
>
OpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105520 "isa_tms320.tcc"
>::OpANDN3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105524 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105528 "isa_tms320.tcc"
>(code, addr, "ANDN3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105541 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105548 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105551 "isa_tms320.tcc"
>
OpASH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105556 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105560 "isa_tms320.tcc"
>::OpASH3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105564 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105568 "isa_tms320.tcc"
>(code, addr, "ASH3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105579 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105582 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105589 "isa_tms320.tcc"
>
OpASH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105594 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105598 "isa_tms320.tcc"
>::OpASH3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105602 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105606 "isa_tms320.tcc"
>(code, addr, "ASH3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105618 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105621 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105625 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105628 "isa_tms320.tcc"
>
OpASH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105633 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105637 "isa_tms320.tcc"
>::OpASH3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105641 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105645 "isa_tms320.tcc"
>(code, addr, "ASH3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105657 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105660 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105664 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105667 "isa_tms320.tcc"
>
OpASH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105672 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105676 "isa_tms320.tcc"
>::OpASH3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105680 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105684 "isa_tms320.tcc"
>(code, addr, "ASH3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105697 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105704 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105707 "isa_tms320.tcc"
>
OpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105716 "isa_tms320.tcc"
>::OpCMPF3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105720 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105724 "isa_tms320.tcc"
>(code, addr, "CMPF3_reg_reg")
{
	src1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105734 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105737 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105741 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105744 "isa_tms320.tcc"
>
OpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105749 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105753 "isa_tms320.tcc"
>::OpCMPF3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105757 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105761 "isa_tms320.tcc"
>(code, addr, "CMPF3_indir_reg")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105772 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105775 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105779 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105782 "isa_tms320.tcc"
>
OpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105787 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105791 "isa_tms320.tcc"
>::OpCMPF3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105795 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105799 "isa_tms320.tcc"
>(code, addr, "CMPF3_reg_indir")
{
	src1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105810 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105813 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105817 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105820 "isa_tms320.tcc"
>
OpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105825 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105829 "isa_tms320.tcc"
>::OpCMPF3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105833 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105837 "isa_tms320.tcc"
>(code, addr, "CMPF3_indir_indir")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105849 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105852 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105856 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105859 "isa_tms320.tcc"
>
OpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105864 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105868 "isa_tms320.tcc"
>::OpCMPI3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105876 "isa_tms320.tcc"
>(code, addr, "CMPI3_reg_reg")
{
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105886 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105889 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105893 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105896 "isa_tms320.tcc"
>
OpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105901 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105905 "isa_tms320.tcc"
>::OpCMPI3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105909 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105913 "isa_tms320.tcc"
>(code, addr, "CMPI3_indir_reg")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105924 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105927 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105931 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105934 "isa_tms320.tcc"
>
OpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105939 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105943 "isa_tms320.tcc"
>::OpCMPI3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105947 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105951 "isa_tms320.tcc"
>(code, addr, "CMPI3_reg_indir")
{
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105962 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105965 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105972 "isa_tms320.tcc"
>
OpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105977 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105981 "isa_tms320.tcc"
>::OpCMPI3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105985 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105989 "isa_tms320.tcc"
>(code, addr, "CMPI3_indir_indir")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106001 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106004 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106008 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106011 "isa_tms320.tcc"
>
OpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106016 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106020 "isa_tms320.tcc"
>::OpLSH3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106024 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106028 "isa_tms320.tcc"
>(code, addr, "LSH3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106039 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106046 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106049 "isa_tms320.tcc"
>
OpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106054 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106058 "isa_tms320.tcc"
>::OpLSH3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106062 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106066 "isa_tms320.tcc"
>(code, addr, "LSH3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106078 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106081 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106085 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106088 "isa_tms320.tcc"
>
OpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106093 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106097 "isa_tms320.tcc"
>::OpLSH3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106101 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106105 "isa_tms320.tcc"
>(code, addr, "LSH3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106117 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106120 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106127 "isa_tms320.tcc"
>
OpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106132 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106136 "isa_tms320.tcc"
>::OpLSH3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106144 "isa_tms320.tcc"
>(code, addr, "LSH3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106157 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106160 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106164 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106167 "isa_tms320.tcc"
>
OpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106172 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106176 "isa_tms320.tcc"
>::OpMPYF3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106180 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106184 "isa_tms320.tcc"
>(code, addr, "MPYF3_reg_reg")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106205 "isa_tms320.tcc"
>
OpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106210 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106214 "isa_tms320.tcc"
>::OpMPYF3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106218 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106222 "isa_tms320.tcc"
>(code, addr, "MPYF3_indir_reg")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106244 "isa_tms320.tcc"
>
OpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106253 "isa_tms320.tcc"
>::OpMPYF3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106257 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106261 "isa_tms320.tcc"
>(code, addr, "MPYF3_reg_indir")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106273 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106276 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106283 "isa_tms320.tcc"
>
OpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106292 "isa_tms320.tcc"
>::OpMPYF3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106296 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106300 "isa_tms320.tcc"
>(code, addr, "MPYF3_indir_indir")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106313 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106316 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106320 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106323 "isa_tms320.tcc"
>
OpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106332 "isa_tms320.tcc"
>::OpMPYI3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106336 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106340 "isa_tms320.tcc"
>(code, addr, "MPYI3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106354 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106358 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106361 "isa_tms320.tcc"
>
OpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106366 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106370 "isa_tms320.tcc"
>::OpMPYI3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106374 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106378 "isa_tms320.tcc"
>(code, addr, "MPYI3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106390 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106393 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106397 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106400 "isa_tms320.tcc"
>
OpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106405 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106409 "isa_tms320.tcc"
>::OpMPYI3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106413 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106417 "isa_tms320.tcc"
>(code, addr, "MPYI3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106429 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106432 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106436 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106439 "isa_tms320.tcc"
>
OpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106444 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106448 "isa_tms320.tcc"
>::OpMPYI3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106452 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106456 "isa_tms320.tcc"
>(code, addr, "MPYI3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106476 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106479 "isa_tms320.tcc"
>
OpOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106488 "isa_tms320.tcc"
>::OpOR3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106492 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106496 "isa_tms320.tcc"
>(code, addr, "OR3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106510 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106514 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106517 "isa_tms320.tcc"
>
OpOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106522 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106526 "isa_tms320.tcc"
>::OpOR3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106530 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106534 "isa_tms320.tcc"
>(code, addr, "OR3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106546 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106549 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106553 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106556 "isa_tms320.tcc"
>
OpOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106561 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106565 "isa_tms320.tcc"
>::OpOR3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106573 "isa_tms320.tcc"
>(code, addr, "OR3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106588 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106592 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106595 "isa_tms320.tcc"
>
OpOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106600 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106604 "isa_tms320.tcc"
>::OpOR3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106608 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106612 "isa_tms320.tcc"
>(code, addr, "OR3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106625 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106628 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106632 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106635 "isa_tms320.tcc"
>
OpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106640 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106644 "isa_tms320.tcc"
>::OpSUBB3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106648 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106652 "isa_tms320.tcc"
>(code, addr, "SUBB3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106663 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106666 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106670 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106673 "isa_tms320.tcc"
>
OpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106678 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106682 "isa_tms320.tcc"
>::OpSUBB3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106686 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106690 "isa_tms320.tcc"
>(code, addr, "SUBB3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106702 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106705 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106709 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106712 "isa_tms320.tcc"
>
OpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106717 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106721 "isa_tms320.tcc"
>::OpSUBB3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106725 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106729 "isa_tms320.tcc"
>(code, addr, "SUBB3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106741 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106748 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106751 "isa_tms320.tcc"
>
OpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106756 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106760 "isa_tms320.tcc"
>::OpSUBB3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106768 "isa_tms320.tcc"
>(code, addr, "SUBB3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106781 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106784 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106791 "isa_tms320.tcc"
>
OpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106800 "isa_tms320.tcc"
>::OpSUBF3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106808 "isa_tms320.tcc"
>(code, addr, "SUBF3_reg_reg")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106819 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106826 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106829 "isa_tms320.tcc"
>
OpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106834 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106838 "isa_tms320.tcc"
>::OpSUBF3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106842 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106846 "isa_tms320.tcc"
>(code, addr, "SUBF3_indir_reg")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106858 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106861 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106865 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106868 "isa_tms320.tcc"
>
OpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106873 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106877 "isa_tms320.tcc"
>::OpSUBF3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106881 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106885 "isa_tms320.tcc"
>(code, addr, "SUBF3_reg_indir")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106897 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106904 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106907 "isa_tms320.tcc"
>
OpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106912 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106916 "isa_tms320.tcc"
>::OpSUBF3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106920 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106924 "isa_tms320.tcc"
>(code, addr, "SUBF3_indir_indir")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106937 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106944 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106947 "isa_tms320.tcc"
>
OpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106956 "isa_tms320.tcc"
>::OpSUBI3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106960 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106964 "isa_tms320.tcc"
>(code, addr, "SUBI3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106975 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106978 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106982 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106985 "isa_tms320.tcc"
>
OpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106990 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106994 "isa_tms320.tcc"
>::OpSUBI3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107002 "isa_tms320.tcc"
>(code, addr, "SUBI3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107014 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107017 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107021 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107024 "isa_tms320.tcc"
>
OpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107029 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107033 "isa_tms320.tcc"
>::OpSUBI3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107037 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107041 "isa_tms320.tcc"
>(code, addr, "SUBI3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107053 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107060 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107063 "isa_tms320.tcc"
>
OpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107068 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107072 "isa_tms320.tcc"
>::OpSUBI3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107076 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107080 "isa_tms320.tcc"
>(code, addr, "SUBI3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107093 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107096 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107100 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107103 "isa_tms320.tcc"
>
OpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107108 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107112 "isa_tms320.tcc"
>::OpTSTB3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107120 "isa_tms320.tcc"
>(code, addr, "TSTB3_reg_reg")
{
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107130 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107140 "isa_tms320.tcc"
>
OpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107145 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107149 "isa_tms320.tcc"
>::OpTSTB3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107157 "isa_tms320.tcc"
>(code, addr, "TSTB3_indir_reg")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107178 "isa_tms320.tcc"
>
OpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107183 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107187 "isa_tms320.tcc"
>::OpTSTB3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107191 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107195 "isa_tms320.tcc"
>(code, addr, "TSTB3_reg_indir")
{
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107206 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107209 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107213 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107216 "isa_tms320.tcc"
>
OpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107221 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107225 "isa_tms320.tcc"
>::OpTSTB3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107229 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107233 "isa_tms320.tcc"
>(code, addr, "TSTB3_indir_indir")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107245 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107248 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107252 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107255 "isa_tms320.tcc"
>
OpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107260 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107264 "isa_tms320.tcc"
>::OpXOR3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107268 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107272 "isa_tms320.tcc"
>(code, addr, "XOR3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107283 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107286 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107290 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107293 "isa_tms320.tcc"
>
OpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107298 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107302 "isa_tms320.tcc"
>::OpXOR3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107306 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107310 "isa_tms320.tcc"
>(code, addr, "XOR3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107322 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107325 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107329 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107332 "isa_tms320.tcc"
>
OpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107337 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107341 "isa_tms320.tcc"
>::OpXOR3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107349 "isa_tms320.tcc"
>(code, addr, "XOR3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107361 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107364 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107371 "isa_tms320.tcc"
>
OpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107380 "isa_tms320.tcc"
>::OpXOR3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107384 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107388 "isa_tms320.tcc"
>(code, addr, "XOR3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107401 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107404 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107408 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107411 "isa_tms320.tcc"
>
OpBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107416 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107420 "isa_tms320.tcc"
>::OpBcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107424 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107428 "isa_tms320.tcc"
>(code, addr, "Bcond_reg")
{
	cond = ((code >> 16) & 0x1f);
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107438 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107441 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107445 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107448 "isa_tms320.tcc"
>
OpBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 107453 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107457 "isa_tms320.tcc"
>::OpBcond_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107461 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107465 "isa_tms320.tcc"
>(code, addr, "Bcond_disp")
{
	cond = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107475 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107478 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107482 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107485 "isa_tms320.tcc"
>
OpBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107490 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107494 "isa_tms320.tcc"
>::OpBcondD_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107498 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107502 "isa_tms320.tcc"
>(code, addr, "BcondD_reg")
{
	cond = ((code >> 16) & 0x1f);
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107512 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107519 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107522 "isa_tms320.tcc"
>
OpBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 107527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107531 "isa_tms320.tcc"
>::OpBcondD_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107539 "isa_tms320.tcc"
>(code, addr, "BcondD_disp")
{
	cond = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107549 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107552 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107556 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107559 "isa_tms320.tcc"
>
OpBR<
#line 45 "isa/tms320.isa"
CONFIG
#line 107564 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107568 "isa_tms320.tcc"
>::OpBR(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107572 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107576 "isa_tms320.tcc"
>(code, addr, "BR")
{
	src = ((code >> 0) & 0xffffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107588 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107592 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107595 "isa_tms320.tcc"
>
OpBRD<
#line 45 "isa/tms320.isa"
CONFIG
#line 107600 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107604 "isa_tms320.tcc"
>::OpBRD(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107608 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107612 "isa_tms320.tcc"
>(code, addr, "BRD")
{
	src = ((code >> 0) & 0xffffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107621 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107624 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107628 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107631 "isa_tms320.tcc"
>
OpCALL<
#line 45 "isa/tms320.isa"
CONFIG
#line 107636 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107640 "isa_tms320.tcc"
>::OpCALL(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107648 "isa_tms320.tcc"
>(code, addr, "CALL")
{
	src = ((code >> 0) & 0xffffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107657 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107660 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107664 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107667 "isa_tms320.tcc"
>
OpCALLcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107672 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107676 "isa_tms320.tcc"
>::OpCALLcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107680 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107684 "isa_tms320.tcc"
>(code, addr, "CALLcond_reg")
{
	cond = ((code >> 16) & 0x1f);
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107694 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107697 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107701 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107704 "isa_tms320.tcc"
>
OpCALLcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 107709 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107713 "isa_tms320.tcc"
>::OpCALLcond_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107717 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107721 "isa_tms320.tcc"
>(code, addr, "CALLcond_disp")
{
	cond = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107731 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107734 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107738 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107741 "isa_tms320.tcc"
>
OpDBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107746 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107750 "isa_tms320.tcc"
>::OpDBcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107754 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107758 "isa_tms320.tcc"
>(code, addr, "DBcond_reg")
{
	ar = ((code >> 22) & 0x7);
	cond = ((code >> 16) & 0x1f);
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107769 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107772 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107776 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107779 "isa_tms320.tcc"
>
OpDBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 107784 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107788 "isa_tms320.tcc"
>::OpDBcond_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107796 "isa_tms320.tcc"
>(code, addr, "DBcond_disp")
{
	ar = ((code >> 22) & 0x7);
	cond = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107807 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107810 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107814 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107817 "isa_tms320.tcc"
>
OpDBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107826 "isa_tms320.tcc"
>::OpDBcondD_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107830 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107834 "isa_tms320.tcc"
>(code, addr, "DBcondD_reg")
{
	ar = ((code >> 22) & 0x7);
	cond = ((code >> 16) & 0x1f);
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107845 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107852 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107855 "isa_tms320.tcc"
>
OpDBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 107860 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107864 "isa_tms320.tcc"
>::OpDBcondD_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107872 "isa_tms320.tcc"
>(code, addr, "DBcondD_disp")
{
	ar = ((code >> 22) & 0x7);
	cond = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107883 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107886 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107890 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107893 "isa_tms320.tcc"
>
OpIACK_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107898 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107902 "isa_tms320.tcc"
>::OpIACK_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107906 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107910 "isa_tms320.tcc"
>(code, addr, "IACK_dir")
{
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107919 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107922 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107926 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107929 "isa_tms320.tcc"
>
OpIACK_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107934 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107938 "isa_tms320.tcc"
>::OpIACK_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107946 "isa_tms320.tcc"
>(code, addr, "IACK_indir")
{
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107957 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107960 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107964 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107967 "isa_tms320.tcc"
>
OpIDLE<
#line 45 "isa/tms320.isa"
CONFIG
#line 107972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107976 "isa_tms320.tcc"
>::OpIDLE(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107984 "isa_tms320.tcc"
>(code, addr, "IDLE")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 107992 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107999 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108002 "isa_tms320.tcc"
>
OpNOP_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 108007 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108011 "isa_tms320.tcc"
>::OpNOP_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108019 "isa_tms320.tcc"
>(code, addr, "NOP_reg")
{
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108028 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108031 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108035 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108038 "isa_tms320.tcc"
>
OpNOP_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108043 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108047 "isa_tms320.tcc"
>::OpNOP_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108051 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108055 "isa_tms320.tcc"
>(code, addr, "NOP_indir")
{
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108066 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108069 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108073 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108076 "isa_tms320.tcc"
>
OpRETIcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 108081 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108085 "isa_tms320.tcc"
>::OpRETIcond(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108089 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108093 "isa_tms320.tcc"
>(code, addr, "RETIcond")
{
	cond = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108102 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108105 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108109 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108112 "isa_tms320.tcc"
>
OpRETScond<
#line 45 "isa/tms320.isa"
CONFIG
#line 108117 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108121 "isa_tms320.tcc"
>::OpRETScond(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108125 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108129 "isa_tms320.tcc"
>(code, addr, "RETScond")
{
	cond = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108138 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108141 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108148 "isa_tms320.tcc"
>
OpRPTB<
#line 45 "isa/tms320.isa"
CONFIG
#line 108153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108157 "isa_tms320.tcc"
>::OpRPTB(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108161 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108165 "isa_tms320.tcc"
>(code, addr, "RPTB")
{
	src = ((code >> 0) & 0xffffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108174 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108177 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108181 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108184 "isa_tms320.tcc"
>
OpRPTS_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 108189 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108193 "isa_tms320.tcc"
>::OpRPTS_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108201 "isa_tms320.tcc"
>(code, addr, "RPTS_reg")
{
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108210 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108217 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108220 "isa_tms320.tcc"
>
OpRPTS_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108225 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108229 "isa_tms320.tcc"
>::OpRPTS_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108233 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108237 "isa_tms320.tcc"
>(code, addr, "RPTS_dir")
{
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108246 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108253 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108256 "isa_tms320.tcc"
>
OpRPTS_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108261 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108265 "isa_tms320.tcc"
>::OpRPTS_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108269 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108273 "isa_tms320.tcc"
>(code, addr, "RPTS_indir")
{
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108284 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108287 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108291 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108294 "isa_tms320.tcc"
>
OpRPTS_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 108299 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108303 "isa_tms320.tcc"
>::OpRPTS_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108307 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108311 "isa_tms320.tcc"
>(code, addr, "RPTS_imm")
{
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108320 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108323 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108327 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108330 "isa_tms320.tcc"
>
OpSWI<
#line 45 "isa/tms320.isa"
CONFIG
#line 108335 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108339 "isa_tms320.tcc"
>::OpSWI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108343 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108347 "isa_tms320.tcc"
>(code, addr, "SWI")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 108355 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108358 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108362 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108365 "isa_tms320.tcc"
>
OpTRAPcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 108370 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108374 "isa_tms320.tcc"
>::OpTRAPcond(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108382 "isa_tms320.tcc"
>(code, addr, "TRAPcond")
{
	cond = ((code >> 16) & 0x1f);
	n = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108392 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108395 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108399 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108402 "isa_tms320.tcc"
>
OpIDLE2<
#line 45 "isa/tms320.isa"
CONFIG
#line 108407 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108411 "isa_tms320.tcc"
>::OpIDLE2(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108415 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108419 "isa_tms320.tcc"
>(code, addr, "IDLE2")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 108427 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108434 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108437 "isa_tms320.tcc"
>
OpLOPOWER<
#line 45 "isa/tms320.isa"
CONFIG
#line 108442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108446 "isa_tms320.tcc"
>::OpLOPOWER(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108450 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108454 "isa_tms320.tcc"
>(code, addr, "LOPOWER")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 108462 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108472 "isa_tms320.tcc"
>
OpMAXSPEED<
#line 45 "isa/tms320.isa"
CONFIG
#line 108477 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108481 "isa_tms320.tcc"
>::OpMAXSPEED(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108485 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108489 "isa_tms320.tcc"
>(code, addr, "MAXSPEED")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 108497 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108500 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108504 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108507 "isa_tms320.tcc"
>
OpLDFI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108512 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108516 "isa_tms320.tcc"
>::OpLDFI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108520 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108524 "isa_tms320.tcc"
>(code, addr, "LDFI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108534 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108537 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108541 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108544 "isa_tms320.tcc"
>
OpLDFI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108549 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108553 "isa_tms320.tcc"
>::OpLDFI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108557 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108561 "isa_tms320.tcc"
>(code, addr, "LDFI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108580 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108583 "isa_tms320.tcc"
>
OpLDII_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108588 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108592 "isa_tms320.tcc"
>::OpLDII_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108600 "isa_tms320.tcc"
>(code, addr, "LDII_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108610 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108613 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108617 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108620 "isa_tms320.tcc"
>
OpLDII_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108625 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108629 "isa_tms320.tcc"
>::OpLDII_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108633 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108637 "isa_tms320.tcc"
>(code, addr, "LDII_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108649 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108652 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108656 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108659 "isa_tms320.tcc"
>
OpSIGI<
#line 45 "isa/tms320.isa"
CONFIG
#line 108664 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108668 "isa_tms320.tcc"
>::OpSIGI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108672 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108676 "isa_tms320.tcc"
>(code, addr, "SIGI")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 108684 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108687 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108691 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108694 "isa_tms320.tcc"
>
OpSTFI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108699 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108703 "isa_tms320.tcc"
>::OpSTFI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108707 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108711 "isa_tms320.tcc"
>(code, addr, "STFI_dir")
{
	src = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108721 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108724 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108728 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108731 "isa_tms320.tcc"
>
OpSTFI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108736 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108740 "isa_tms320.tcc"
>::OpSTFI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108748 "isa_tms320.tcc"
>(code, addr, "STFI_indir")
{
	src = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108760 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108763 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108767 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108770 "isa_tms320.tcc"
>
OpSTII_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108775 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108779 "isa_tms320.tcc"
>::OpSTII_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108783 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108787 "isa_tms320.tcc"
>(code, addr, "STII_dir")
{
	src = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108797 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108800 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108804 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108807 "isa_tms320.tcc"
>
OpSTII_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108812 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108816 "isa_tms320.tcc"
>::OpSTII_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108820 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108824 "isa_tms320.tcc"
>(code, addr, "STII_indir")
{
	src = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108836 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108839 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108843 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108846 "isa_tms320.tcc"
>
OpABSF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 108851 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108855 "isa_tms320.tcc"
>::OpABSF_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108859 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108863 "isa_tms320.tcc"
>(code, addr, "ABSF_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108877 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108880 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108884 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108887 "isa_tms320.tcc"
>
OpABSF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 108892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108896 "isa_tms320.tcc"
>::OpABSF_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108904 "isa_tms320.tcc"
>(code, addr, "ABSF_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108917 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108920 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108924 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108927 "isa_tms320.tcc"
>
OpABSI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 108932 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108936 "isa_tms320.tcc"
>::OpABSI_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108944 "isa_tms320.tcc"
>(code, addr, "ABSI_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108958 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108961 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108965 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108968 "isa_tms320.tcc"
>
OpABSI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 108973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108977 "isa_tms320.tcc"
>::OpABSI_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108981 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108985 "isa_tms320.tcc"
>(code, addr, "ABSI_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108998 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109001 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109005 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109008 "isa_tms320.tcc"
>
OpADDF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 109013 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109017 "isa_tms320.tcc"
>::OpADDF3_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109021 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109025 "isa_tms320.tcc"
>(code, addr, "ADDF3_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109040 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109043 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109047 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109050 "isa_tms320.tcc"
>
OpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109055 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109059 "isa_tms320.tcc"
>::OpADDF3_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109063 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109067 "isa_tms320.tcc"
>(code, addr, "ADDF3_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109081 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109084 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109088 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109091 "isa_tms320.tcc"
>
OpADDI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 109096 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109100 "isa_tms320.tcc"
>::OpADDI3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109108 "isa_tms320.tcc"
>(code, addr, "ADDI3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109123 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109126 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109130 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109133 "isa_tms320.tcc"
>
OpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109138 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109142 "isa_tms320.tcc"
>::OpADDI3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109150 "isa_tms320.tcc"
>(code, addr, "ADDI3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109164 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109167 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109171 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109174 "isa_tms320.tcc"
>
OpAND3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 109179 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109183 "isa_tms320.tcc"
>::OpAND3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109187 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109191 "isa_tms320.tcc"
>(code, addr, "AND3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109206 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109209 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109213 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109216 "isa_tms320.tcc"
>
OpAND3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109221 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109225 "isa_tms320.tcc"
>::OpAND3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109229 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109233 "isa_tms320.tcc"
>(code, addr, "AND3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109247 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109250 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109254 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109257 "isa_tms320.tcc"
>
OpASH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 109262 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109266 "isa_tms320.tcc"
>::OpASH3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109270 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109274 "isa_tms320.tcc"
>(code, addr, "ASH3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	count = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109289 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109292 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109296 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109299 "isa_tms320.tcc"
>
OpASH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109304 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109308 "isa_tms320.tcc"
>::OpASH3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109312 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109316 "isa_tms320.tcc"
>(code, addr, "ASH3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	count = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109330 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109337 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109340 "isa_tms320.tcc"
>
OpFIX_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 109345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109349 "isa_tms320.tcc"
>::OpFIX_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109353 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109357 "isa_tms320.tcc"
>(code, addr, "FIX_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109371 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109374 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109378 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109381 "isa_tms320.tcc"
>
OpFIX_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109386 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109390 "isa_tms320.tcc"
>::OpFIX_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109394 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109398 "isa_tms320.tcc"
>(code, addr, "FIX_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109411 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109414 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109418 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109421 "isa_tms320.tcc"
>
OpFLOAT_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 109426 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109430 "isa_tms320.tcc"
>::OpFLOAT_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109434 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109438 "isa_tms320.tcc"
>(code, addr, "FLOAT_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109452 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109455 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109459 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109462 "isa_tms320.tcc"
>
OpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109467 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109471 "isa_tms320.tcc"
>::OpFLOAT_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109475 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109479 "isa_tms320.tcc"
>(code, addr, "FLOAT_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109495 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109502 "isa_tms320.tcc"
>
OpLDF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 109507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109511 "isa_tms320.tcc"
>::OpLDF_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109519 "isa_tms320.tcc"
>(code, addr, "LDF_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109533 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109536 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109543 "isa_tms320.tcc"
>
OpLDF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109548 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109552 "isa_tms320.tcc"
>::OpLDF_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109556 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109560 "isa_tms320.tcc"
>(code, addr, "LDF_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109580 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109583 "isa_tms320.tcc"
>
OpLDI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 109588 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109592 "isa_tms320.tcc"
>::OpLDI_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109600 "isa_tms320.tcc"
>(code, addr, "LDI_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109614 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109617 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109621 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109624 "isa_tms320.tcc"
>
OpLDI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109629 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109633 "isa_tms320.tcc"
>::OpLDI_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109637 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109641 "isa_tms320.tcc"
>(code, addr, "LDI_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109654 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109657 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109661 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109664 "isa_tms320.tcc"
>
OpLSH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 109669 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109673 "isa_tms320.tcc"
>::OpLSH3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109677 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109681 "isa_tms320.tcc"
>(code, addr, "LSH3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	count = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109696 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109699 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109703 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109706 "isa_tms320.tcc"
>
OpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109711 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109715 "isa_tms320.tcc"
>::OpLSH3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109719 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109723 "isa_tms320.tcc"
>(code, addr, "LSH3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	count = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109737 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109740 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109744 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109747 "isa_tms320.tcc"
>
OpMPYF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 109752 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109756 "isa_tms320.tcc"
>::OpMPYF3_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109760 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109764 "isa_tms320.tcc"
>(code, addr, "MPYF3_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109779 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109782 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109786 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109789 "isa_tms320.tcc"
>
OpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109794 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109798 "isa_tms320.tcc"
>::OpMPYF3_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109802 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109806 "isa_tms320.tcc"
>(code, addr, "MPYF3_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109820 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109827 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109830 "isa_tms320.tcc"
>
OpMPYI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 109835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109839 "isa_tms320.tcc"
>::OpMPYI3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109847 "isa_tms320.tcc"
>(code, addr, "MPYI3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109862 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109865 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109869 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109872 "isa_tms320.tcc"
>
OpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109877 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109881 "isa_tms320.tcc"
>::OpMPYI3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109885 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109889 "isa_tms320.tcc"
>(code, addr, "MPYI3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109903 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109906 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109910 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109913 "isa_tms320.tcc"
>
OpNEGF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 109918 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109922 "isa_tms320.tcc"
>::OpNEGF_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109926 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109930 "isa_tms320.tcc"
>(code, addr, "NEGF_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109944 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109947 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109951 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109954 "isa_tms320.tcc"
>
OpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109959 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109963 "isa_tms320.tcc"
>::OpNEGF_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109967 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109971 "isa_tms320.tcc"
>(code, addr, "NEGF_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109984 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109987 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109991 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109994 "isa_tms320.tcc"
>
OpNEGI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 109999 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110003 "isa_tms320.tcc"
>::OpNEGI_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110007 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110011 "isa_tms320.tcc"
>(code, addr, "NEGI_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110025 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110028 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110032 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110035 "isa_tms320.tcc"
>
OpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110040 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110044 "isa_tms320.tcc"
>::OpNEGI_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110048 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110052 "isa_tms320.tcc"
>(code, addr, "NEGI_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110065 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110068 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110072 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110075 "isa_tms320.tcc"
>
OpNOT_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 110080 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110084 "isa_tms320.tcc"
>::OpNOT_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110088 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110092 "isa_tms320.tcc"
>(code, addr, "NOT_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110106 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110109 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110113 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110116 "isa_tms320.tcc"
>
OpNOT_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110121 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110125 "isa_tms320.tcc"
>::OpNOT_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110129 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110133 "isa_tms320.tcc"
>(code, addr, "NOT_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110146 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110149 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110153 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110156 "isa_tms320.tcc"
>
OpOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 110161 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110165 "isa_tms320.tcc"
>::OpOR3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110169 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110173 "isa_tms320.tcc"
>(code, addr, "OR3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110188 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110191 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110198 "isa_tms320.tcc"
>
OpOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110203 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110207 "isa_tms320.tcc"
>::OpOR3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110211 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110215 "isa_tms320.tcc"
>(code, addr, "OR3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110229 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110232 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110236 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110239 "isa_tms320.tcc"
>
OpSTF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 110244 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110248 "isa_tms320.tcc"
>::OpSTF_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110252 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110256 "isa_tms320.tcc"
>(code, addr, "STF_STF")
{
	src2 = ((code >> 22) & 0x7);
	src1 = ((code >> 16) & 0x7);
	d1_mod = ((code >> 11) & 0x1f);
	d1_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110270 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110273 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110277 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110280 "isa_tms320.tcc"
>
OpSTF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110285 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110289 "isa_tms320.tcc"
>::OpSTF_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110293 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110297 "isa_tms320.tcc"
>(code, addr, "STF_STF_ext")
{
	src2 = ((code >> 22) & 0x7);
	src1 = ((code >> 16) & 0x7);
	d1_mod = ((code >> 11) & 0x1f);
	d1_ar = ((code >> 8) & 0x7);
	dst2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110310 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110313 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110317 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110320 "isa_tms320.tcc"
>
OpSTI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 110325 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110329 "isa_tms320.tcc"
>::OpSTI_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110337 "isa_tms320.tcc"
>(code, addr, "STI_STI")
{
	src2 = ((code >> 22) & 0x7);
	src1 = ((code >> 16) & 0x7);
	d1_mod = ((code >> 11) & 0x1f);
	d1_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110354 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110358 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110361 "isa_tms320.tcc"
>
OpSTI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110366 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110370 "isa_tms320.tcc"
>::OpSTI_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110374 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110378 "isa_tms320.tcc"
>(code, addr, "STI_STI_ext")
{
	src2 = ((code >> 22) & 0x7);
	src1 = ((code >> 16) & 0x7);
	d1_mod = ((code >> 11) & 0x1f);
	d1_ar = ((code >> 8) & 0x7);
	dst2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110391 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110394 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110398 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110401 "isa_tms320.tcc"
>
OpSUBF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 110406 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110410 "isa_tms320.tcc"
>::OpSUBF3_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110414 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110418 "isa_tms320.tcc"
>(code, addr, "SUBF3_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110433 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110436 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110443 "isa_tms320.tcc"
>
OpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110448 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110452 "isa_tms320.tcc"
>::OpSUBF3_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110456 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110460 "isa_tms320.tcc"
>(code, addr, "SUBF3_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110474 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110477 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110481 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110484 "isa_tms320.tcc"
>
OpSUBI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 110489 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110493 "isa_tms320.tcc"
>::OpSUBI3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110497 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110501 "isa_tms320.tcc"
>(code, addr, "SUBI3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110516 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110519 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110523 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110526 "isa_tms320.tcc"
>
OpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110531 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110535 "isa_tms320.tcc"
>::OpSUBI3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110539 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110543 "isa_tms320.tcc"
>(code, addr, "SUBI3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110557 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110560 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110564 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110567 "isa_tms320.tcc"
>
OpXOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 110572 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110576 "isa_tms320.tcc"
>::OpXOR3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110580 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110584 "isa_tms320.tcc"
>(code, addr, "XOR3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110599 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110602 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110606 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110609 "isa_tms320.tcc"
>
OpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110618 "isa_tms320.tcc"
>::OpXOR3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110622 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110626 "isa_tms320.tcc"
>(code, addr, "XOR3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110647 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110650 "isa_tms320.tcc"
>
OpLDF_LDF<
#line 45 "isa/tms320.isa"
CONFIG
#line 110655 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110659 "isa_tms320.tcc"
>::OpLDF_LDF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110667 "isa_tms320.tcc"
>(code, addr, "LDF_LDF")
{
	dst2 = ((code >> 22) & 0x7);
	dst1 = ((code >> 19) & 0x7);
	s1_mod = ((code >> 11) & 0x1f);
	s1_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110691 "isa_tms320.tcc"
>
OpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110700 "isa_tms320.tcc"
>::OpLDF_LDF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110708 "isa_tms320.tcc"
>(code, addr, "LDF_LDF_ext")
{
	dst2 = ((code >> 22) & 0x7);
	dst1 = ((code >> 19) & 0x7);
	s1_mod = ((code >> 11) & 0x1f);
	s1_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110721 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110724 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110728 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110731 "isa_tms320.tcc"
>
OpLDI_LDI<
#line 45 "isa/tms320.isa"
CONFIG
#line 110736 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110740 "isa_tms320.tcc"
>::OpLDI_LDI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110748 "isa_tms320.tcc"
>(code, addr, "LDI_LDI")
{
	dst2 = ((code >> 22) & 0x7);
	dst1 = ((code >> 19) & 0x7);
	s1_mod = ((code >> 11) & 0x1f);
	s1_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110762 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110765 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110769 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110772 "isa_tms320.tcc"
>
OpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110777 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110781 "isa_tms320.tcc"
>::OpLDI_LDI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110789 "isa_tms320.tcc"
>(code, addr, "LDI_LDI_ext")
{
	dst2 = ((code >> 22) & 0x7);
	dst1 = ((code >> 19) & 0x7);
	s1_mod = ((code >> 11) & 0x1f);
	s1_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110802 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110805 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110809 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110812 "isa_tms320.tcc"
>
OpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 110817 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110821 "isa_tms320.tcc"
>::OpMPYF3_ADDF3(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110825 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110829 "isa_tms320.tcc"
>(code, addr, "MPYF3_ADDF3")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	s3_mod = ((code >> 11) & 0x1f);
	s3_ar = ((code >> 8) & 0x7);
	s4_mod = ((code >> 3) & 0x1f);
	s4_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110846 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110849 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110853 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110856 "isa_tms320.tcc"
>
OpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110861 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110865 "isa_tms320.tcc"
>::OpMPYF3_ADDF3_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110869 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110873 "isa_tms320.tcc"
>(code, addr, "MPYF3_ADDF3_ext")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	src3 = ((code >> 8) & 0x1f);
	src4 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110888 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110891 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110895 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110898 "isa_tms320.tcc"
>
OpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 110903 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110907 "isa_tms320.tcc"
>::OpMPYF3_SUBF3(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110911 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110915 "isa_tms320.tcc"
>(code, addr, "MPYF3_SUBF3")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	s3_mod = ((code >> 11) & 0x1f);
	s3_ar = ((code >> 8) & 0x7);
	s4_mod = ((code >> 3) & 0x1f);
	s4_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110932 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110935 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110939 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110942 "isa_tms320.tcc"
>
OpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110947 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110951 "isa_tms320.tcc"
>::OpMPYF3_SUBF3_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110955 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110959 "isa_tms320.tcc"
>(code, addr, "MPYF3_SUBF3_ext")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	src3 = ((code >> 8) & 0x1f);
	src4 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110974 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110977 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110981 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110984 "isa_tms320.tcc"
>
OpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 110989 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110993 "isa_tms320.tcc"
>::OpMPYI3_ADDI3(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110997 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111001 "isa_tms320.tcc"
>(code, addr, "MPYI3_ADDI3")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	s3_mod = ((code >> 11) & 0x1f);
	s3_ar = ((code >> 8) & 0x7);
	s4_mod = ((code >> 3) & 0x1f);
	s4_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111018 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111021 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111025 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111028 "isa_tms320.tcc"
>
OpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 111033 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111037 "isa_tms320.tcc"
>::OpMPYI3_ADDI3_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111041 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111045 "isa_tms320.tcc"
>(code, addr, "MPYI3_ADDI3_ext")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	src3 = ((code >> 8) & 0x1f);
	src4 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111060 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111063 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111067 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111070 "isa_tms320.tcc"
>
OpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 111075 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111079 "isa_tms320.tcc"
>::OpMPYI3_SUBI3(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111087 "isa_tms320.tcc"
>(code, addr, "MPYI3_SUBI3")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	s3_mod = ((code >> 11) & 0x1f);
	s3_ar = ((code >> 8) & 0x7);
	s4_mod = ((code >> 3) & 0x1f);
	s4_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111104 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111107 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111111 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111114 "isa_tms320.tcc"
>
OpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 111119 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111123 "isa_tms320.tcc"
>::OpMPYI3_SUBI3_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111127 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111131 "isa_tms320.tcc"
>(code, addr, "MPYI3_SUBI3_ext")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	src3 = ((code >> 8) & 0x1f);
	src4 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 111146 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111149 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111153 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111156 "isa_tms320.tcc"
>
DecodeMapPage<
#line 45 "isa/tms320.isa"
CONFIG
#line 111161 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111165 "isa_tms320.tcc"
>::DecodeMapPage(typename CONFIG::address_t key)
{
	this->key = key;
	memset(operation, 0, sizeof(operation));
	next = 0;
}

template <
#line 45 "isa/tms320.isa"
class
#line 111176 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111179 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111183 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111186 "isa_tms320.tcc"
>
DecodeMapPage<
#line 45 "isa/tms320.isa"
CONFIG
#line 111191 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111195 "isa_tms320.tcc"
>::~DecodeMapPage()
{
	unsigned int idx;
	for(idx = 0; idx < NUM_OPERATIONS_PER_PAGE; idx++)
	delete operation[idx];
}

template <
#line 45 "isa/tms320.isa"
class
#line 111206 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111209 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111213 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111216 "isa_tms320.tcc"
>
DecodeTableEntry<
#line 45 "isa/tms320.isa"
CONFIG
#line 111221 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111225 "isa_tms320.tcc"
>::DecodeTableEntry(CodeType opcode, CodeType opcode_mask, Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 111229 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111233 "isa_tms320.tcc"
> *(*decode)(CodeType, typename CONFIG::address_t))
{
	this->opcode = opcode;
	this->opcode_mask = opcode_mask;
	this->decode = decode;
}

template <
#line 45 "isa/tms320.isa"
class
#line 111244 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 111247 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 111251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 111254 "isa_tms320.tcc"
>
Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 111259 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 111263 "isa_tms320.tcc"
>::Decoder()
: is_little_endian( true ), mru_page( 0 )
{
	memset(decode_hash_table, 0, sizeof(decode_hash_table));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111271 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111275 "isa_tms320.tcc"
	>(0x8c00e0e0UL, 0xfc00e0e0UL, DecodeOpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111279 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111283 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111288 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111292 "isa_tms320.tcc"
	>(0x8c000000UL, 0xfc000000UL, DecodeOpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111296 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111300 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111305 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111309 "isa_tms320.tcc"
	>(0x8800e0e0UL, 0xfc00e0e0UL, DecodeOpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111313 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111317 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111322 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111326 "isa_tms320.tcc"
	>(0x88000000UL, 0xfc000000UL, DecodeOpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111330 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111334 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111339 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111343 "isa_tms320.tcc"
	>(0x8400e0e0UL, 0xfc00e0e0UL, DecodeOpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111347 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111351 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111356 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111360 "isa_tms320.tcc"
	>(0x84000000UL, 0xfc000000UL, DecodeOpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111364 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111368 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111373 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111377 "isa_tms320.tcc"
	>(0x8000e0e0UL, 0xfc00e0e0UL, DecodeOpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111381 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111385 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111390 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111394 "isa_tms320.tcc"
	>(0x80000000UL, 0xfc000000UL, DecodeOpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111398 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111402 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111407 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111411 "isa_tms320.tcc"
	>(0xc60000e0UL, 0xfe0700e0UL, DecodeOpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111415 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111419 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111424 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111428 "isa_tms320.tcc"
	>(0xc6000000UL, 0xfe070000UL, DecodeOpLDI_LDI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111432 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111436 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111441 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111445 "isa_tms320.tcc"
	>(0xc40000e0UL, 0xfe0700e0UL, DecodeOpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111449 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111453 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111458 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111462 "isa_tms320.tcc"
	>(0xc4000000UL, 0xfe070000UL, DecodeOpLDF_LDF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111466 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111470 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111475 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111479 "isa_tms320.tcc"
	>(0xee0000e0UL, 0xfe0000e0UL, DecodeOpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111483 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111487 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111492 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111496 "isa_tms320.tcc"
	>(0xee000000UL, 0xfe000000UL, DecodeOpXOR3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111500 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111504 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111509 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111513 "isa_tms320.tcc"
	>(0xec0000e0UL, 0xfe0000e0UL, DecodeOpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111517 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111521 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111526 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111530 "isa_tms320.tcc"
	>(0xec000000UL, 0xfe000000UL, DecodeOpSUBI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111534 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111538 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111543 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111547 "isa_tms320.tcc"
	>(0xea0000e0UL, 0xfe0000e0UL, DecodeOpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111551 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111555 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111560 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111564 "isa_tms320.tcc"
	>(0xea000000UL, 0xfe000000UL, DecodeOpSUBF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111568 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111572 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111577 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111581 "isa_tms320.tcc"
	>(0xc20000e0UL, 0xfe3800e0UL, DecodeOpSTI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111585 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111589 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111594 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111598 "isa_tms320.tcc"
	>(0xc2000000UL, 0xfe380000UL, DecodeOpSTI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111602 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111606 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111611 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111615 "isa_tms320.tcc"
	>(0xc00000e0UL, 0xfe3800e0UL, DecodeOpSTF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111619 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111623 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111628 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111632 "isa_tms320.tcc"
	>(0xc0000000UL, 0xfe380000UL, DecodeOpSTF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111636 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111640 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111645 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111649 "isa_tms320.tcc"
	>(0xe80000e0UL, 0xfe0000e0UL, DecodeOpOR3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111653 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111657 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111662 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111666 "isa_tms320.tcc"
	>(0xe8000000UL, 0xfe000000UL, DecodeOpOR3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111670 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111674 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111679 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111683 "isa_tms320.tcc"
	>(0xe60000e0UL, 0xfe3800e0UL, DecodeOpNOT_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111687 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111691 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111696 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111700 "isa_tms320.tcc"
	>(0xe6000000UL, 0xfe380000UL, DecodeOpNOT_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111704 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111708 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111713 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111717 "isa_tms320.tcc"
	>(0xe40000e0UL, 0xfe3800e0UL, DecodeOpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111721 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111725 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111730 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111734 "isa_tms320.tcc"
	>(0xe4000000UL, 0xfe380000UL, DecodeOpNEGI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111738 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111742 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111747 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111751 "isa_tms320.tcc"
	>(0xe20000e0UL, 0xfe3800e0UL, DecodeOpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111755 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111759 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111764 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111768 "isa_tms320.tcc"
	>(0xe2000000UL, 0xfe380000UL, DecodeOpNEGF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111772 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111776 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111781 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111785 "isa_tms320.tcc"
	>(0xe00000e0UL, 0xfe0000e0UL, DecodeOpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111789 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111793 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111798 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111802 "isa_tms320.tcc"
	>(0xe0000000UL, 0xfe000000UL, DecodeOpMPYI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111806 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111810 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111815 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111819 "isa_tms320.tcc"
	>(0xde0000e0UL, 0xfe0000e0UL, DecodeOpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111823 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111827 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111832 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111836 "isa_tms320.tcc"
	>(0xde000000UL, 0xfe000000UL, DecodeOpMPYF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111840 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111844 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111849 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111853 "isa_tms320.tcc"
	>(0xdc0000e0UL, 0xfe0000e0UL, DecodeOpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111857 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111861 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111866 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111870 "isa_tms320.tcc"
	>(0xdc000000UL, 0xfe000000UL, DecodeOpLSH3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111874 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111878 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111883 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111887 "isa_tms320.tcc"
	>(0xda0000e0UL, 0xfe3800e0UL, DecodeOpLDI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111891 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111895 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111900 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111904 "isa_tms320.tcc"
	>(0xda000000UL, 0xfe380000UL, DecodeOpLDI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111908 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111912 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111917 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111921 "isa_tms320.tcc"
	>(0xd80000e0UL, 0xfe3800e0UL, DecodeOpLDF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111925 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111929 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111934 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111938 "isa_tms320.tcc"
	>(0xd8000000UL, 0xfe380000UL, DecodeOpLDF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111942 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111946 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111951 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111955 "isa_tms320.tcc"
	>(0xd60000e0UL, 0xfe3800e0UL, DecodeOpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111959 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111963 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111968 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111972 "isa_tms320.tcc"
	>(0xd6000000UL, 0xfe380000UL, DecodeOpFLOAT_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111976 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111980 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111985 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111989 "isa_tms320.tcc"
	>(0xd40000e0UL, 0xfe3800e0UL, DecodeOpFIX_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111993 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111997 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112002 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112006 "isa_tms320.tcc"
	>(0xd4000000UL, 0xfe380000UL, DecodeOpFIX_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112010 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112014 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112019 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112023 "isa_tms320.tcc"
	>(0xd20000e0UL, 0xfe0000e0UL, DecodeOpASH3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112027 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112031 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112036 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112040 "isa_tms320.tcc"
	>(0xd2000000UL, 0xfe000000UL, DecodeOpASH3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112044 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112048 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112053 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112057 "isa_tms320.tcc"
	>(0xd00000e0UL, 0xfe0000e0UL, DecodeOpAND3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112061 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112065 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112070 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112074 "isa_tms320.tcc"
	>(0xd0000000UL, 0xfe000000UL, DecodeOpAND3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112078 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112082 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112087 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112091 "isa_tms320.tcc"
	>(0xce0000e0UL, 0xfe0000e0UL, DecodeOpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112095 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112099 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112104 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112108 "isa_tms320.tcc"
	>(0xce000000UL, 0xfe000000UL, DecodeOpADDI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112112 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112116 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112121 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112125 "isa_tms320.tcc"
	>(0xcc0000e0UL, 0xfe0000e0UL, DecodeOpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112129 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112133 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112138 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112142 "isa_tms320.tcc"
	>(0xcc000000UL, 0xfe000000UL, DecodeOpADDF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112146 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112150 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112155 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112159 "isa_tms320.tcc"
	>(0xca0000e0UL, 0xfe3800e0UL, DecodeOpABSI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112163 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112167 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112172 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112176 "isa_tms320.tcc"
	>(0xca000000UL, 0xfe380000UL, DecodeOpABSI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112180 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112184 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112189 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112193 "isa_tms320.tcc"
	>(0xc80000e0UL, 0xfe3800e0UL, DecodeOpABSF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112197 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112201 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112206 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112210 "isa_tms320.tcc"
	>(0xc8000000UL, 0xfe380000UL, DecodeOpABSF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112214 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112218 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112223 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112227 "isa_tms320.tcc"
	>(0x15c00000UL, 0xffe00000UL, DecodeOpSTII_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112231 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112235 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112240 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112244 "isa_tms320.tcc"
	>(0x15a00000UL, 0xffe00000UL, DecodeOpSTII_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112248 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112252 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112257 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112261 "isa_tms320.tcc"
	>(0x14c00000UL, 0xffe00000UL, DecodeOpSTFI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112265 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112269 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112274 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112278 "isa_tms320.tcc"
	>(0x14a00000UL, 0xffe00000UL, DecodeOpSTFI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112282 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112286 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112291 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112295 "isa_tms320.tcc"
	>(0x16000000UL, 0xffffffffUL, DecodeOpSIGI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112299 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112303 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112308 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112312 "isa_tms320.tcc"
	>(0x8c00000UL, 0xffe00000UL, DecodeOpLDII_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112316 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112320 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112325 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112329 "isa_tms320.tcc"
	>(0x8a00000UL, 0xffe00000UL, DecodeOpLDII_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112333 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112337 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112342 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112346 "isa_tms320.tcc"
	>(0x7c00000UL, 0xffe00000UL, DecodeOpLDFI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112350 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112354 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112359 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112363 "isa_tms320.tcc"
	>(0x7a00000UL, 0xffe00000UL, DecodeOpLDFI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112367 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112371 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112376 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112380 "isa_tms320.tcc"
	>(0x10800000UL, 0xffffffffUL, DecodeOpMAXSPEED<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112384 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112388 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112393 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112397 "isa_tms320.tcc"
	>(0x10800001UL, 0xffffffffUL, DecodeOpLOPOWER<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112401 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112405 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112410 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112414 "isa_tms320.tcc"
	>(0x6000001UL, 0xffffffffUL, DecodeOpIDLE2<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112418 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112422 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112427 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112431 "isa_tms320.tcc"
	>(0x74000020UL, 0xffe0ffe0UL, DecodeOpTRAPcond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112435 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112439 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112444 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112448 "isa_tms320.tcc"
	>(0x66000000UL, 0xffffffffUL, DecodeOpSWI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112452 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112456 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112461 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112465 "isa_tms320.tcc"
	>(0x13fb0000UL, 0xffff0000UL, DecodeOpRPTS_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112469 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112473 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112478 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112482 "isa_tms320.tcc"
	>(0x13db0000UL, 0xffff0000UL, DecodeOpRPTS_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112486 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112490 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112495 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112499 "isa_tms320.tcc"
	>(0x13bb0000UL, 0xffff0000UL, DecodeOpRPTS_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112503 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112507 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112512 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112516 "isa_tms320.tcc"
	>(0x139b0000UL, 0xffffffe0UL, DecodeOpRPTS_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112520 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112524 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112529 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112533 "isa_tms320.tcc"
	>(0x64000000UL, 0xff000000UL, DecodeOpRPTB<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112537 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112541 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112546 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112550 "isa_tms320.tcc"
	>(0x78800000UL, 0xffe0ffffUL, DecodeOpRETScond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112554 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112558 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112563 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112567 "isa_tms320.tcc"
	>(0x78000000UL, 0xffe0ffffUL, DecodeOpRETIcond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112571 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112575 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112580 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112584 "isa_tms320.tcc"
	>(0xcc00000UL, 0xffff0000UL, DecodeOpNOP_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112588 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112592 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112597 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112601 "isa_tms320.tcc"
	>(0xc800000UL, 0xffffffe0UL, DecodeOpNOP_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112605 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112609 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112614 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112618 "isa_tms320.tcc"
	>(0x6000000UL, 0xffffffffUL, DecodeOpIDLE<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112622 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112626 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112631 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112635 "isa_tms320.tcc"
	>(0x1b400000UL, 0xffff0000UL, DecodeOpIACK_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112639 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112643 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112648 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112652 "isa_tms320.tcc"
	>(0x1b200000UL, 0xffff0000UL, DecodeOpIACK_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112656 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112660 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112665 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112669 "isa_tms320.tcc"
	>(0x6e200000UL, 0xfe200000UL, DecodeOpDBcondD_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112673 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112677 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112682 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112686 "isa_tms320.tcc"
	>(0x6c200000UL, 0xfe20ffe0UL, DecodeOpDBcondD_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112690 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112694 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112699 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112703 "isa_tms320.tcc"
	>(0x6e000000UL, 0xfe200000UL, DecodeOpDBcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112707 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112711 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112716 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112720 "isa_tms320.tcc"
	>(0x6c000000UL, 0xfe20ffe0UL, DecodeOpDBcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112724 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112728 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112733 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112737 "isa_tms320.tcc"
	>(0x72000000UL, 0xffe00000UL, DecodeOpCALLcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112741 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112745 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112750 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112754 "isa_tms320.tcc"
	>(0x70000000UL, 0xffe0ffe0UL, DecodeOpCALLcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112758 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112762 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112767 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112771 "isa_tms320.tcc"
	>(0x62000000UL, 0xff000000UL, DecodeOpCALL<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112775 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112779 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112784 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112788 "isa_tms320.tcc"
	>(0x61000000UL, 0xff000000UL, DecodeOpBRD<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112792 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112796 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112801 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112805 "isa_tms320.tcc"
	>(0x60000000UL, 0xff000000UL, DecodeOpBR<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112809 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112813 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112818 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112822 "isa_tms320.tcc"
	>(0x6a200000UL, 0xffe00000UL, DecodeOpBcondD_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112826 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112830 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112835 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112839 "isa_tms320.tcc"
	>(0x68200000UL, 0xffe0ffe0UL, DecodeOpBcondD_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112843 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112847 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112852 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112856 "isa_tms320.tcc"
	>(0x6a000000UL, 0xffe00000UL, DecodeOpBcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112860 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112864 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112869 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112873 "isa_tms320.tcc"
	>(0x68000000UL, 0xffe0ffe0UL, DecodeOpBcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112877 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112881 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112886 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112890 "isa_tms320.tcc"
	>(0x28600000UL, 0xffe00000UL, DecodeOpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112894 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112898 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112903 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112907 "isa_tms320.tcc"
	>(0x28400000UL, 0xffe0e000UL, DecodeOpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112911 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112915 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112920 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112924 "isa_tms320.tcc"
	>(0x28200000UL, 0xffe000e0UL, DecodeOpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112928 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112932 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112937 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112941 "isa_tms320.tcc"
	>(0x28000000UL, 0xffe0e0e0UL, DecodeOpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112945 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112949 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112954 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112958 "isa_tms320.tcc"
	>(0x27e00000UL, 0xffff0000UL, DecodeOpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112962 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112966 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112971 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112975 "isa_tms320.tcc"
	>(0x27c00000UL, 0xffffe000UL, DecodeOpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112979 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112983 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112988 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112992 "isa_tms320.tcc"
	>(0x27a00000UL, 0xffff00e0UL, DecodeOpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112996 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113000 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113005 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113009 "isa_tms320.tcc"
	>(0x27800000UL, 0xffffe0e0UL, DecodeOpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113013 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113017 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113022 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113026 "isa_tms320.tcc"
	>(0x27600000UL, 0xffe00000UL, DecodeOpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113030 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113034 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113039 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113043 "isa_tms320.tcc"
	>(0x27400000UL, 0xffe0e000UL, DecodeOpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113047 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113051 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113056 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113060 "isa_tms320.tcc"
	>(0x27200000UL, 0xffe000e0UL, DecodeOpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113064 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113068 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113073 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113077 "isa_tms320.tcc"
	>(0x27000000UL, 0xffe0e0e0UL, DecodeOpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113081 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113085 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113090 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113094 "isa_tms320.tcc"
	>(0x26e00000UL, 0xfff80000UL, DecodeOpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113098 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113102 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113107 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113111 "isa_tms320.tcc"
	>(0x26c00000UL, 0xfff8f800UL, DecodeOpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113115 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113119 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113124 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113128 "isa_tms320.tcc"
	>(0x26a00000UL, 0xfff800f8UL, DecodeOpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113132 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113136 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113141 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113145 "isa_tms320.tcc"
	>(0x26800000UL, 0xfff8f8f8UL, DecodeOpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113149 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113153 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113158 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113162 "isa_tms320.tcc"
	>(0x26600000UL, 0xffe00000UL, DecodeOpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113166 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113170 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113175 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113179 "isa_tms320.tcc"
	>(0x26400000UL, 0xffe0e000UL, DecodeOpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113183 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113187 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113192 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113196 "isa_tms320.tcc"
	>(0x26200000UL, 0xffe000e0UL, DecodeOpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113200 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113204 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113209 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113213 "isa_tms320.tcc"
	>(0x26000000UL, 0xffe0e0e0UL, DecodeOpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113217 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113221 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113226 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113230 "isa_tms320.tcc"
	>(0x25e00000UL, 0xffe00000UL, DecodeOpOR3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113234 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113238 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113243 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113247 "isa_tms320.tcc"
	>(0x25c00000UL, 0xffe0e000UL, DecodeOpOR3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113251 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113255 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113260 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113264 "isa_tms320.tcc"
	>(0x25a00000UL, 0xffe000e0UL, DecodeOpOR3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113268 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113272 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113277 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113281 "isa_tms320.tcc"
	>(0x25800000UL, 0xffe0e0e0UL, DecodeOpOR3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113285 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113289 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113294 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113298 "isa_tms320.tcc"
	>(0x25600000UL, 0xffe00000UL, DecodeOpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113302 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113306 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113311 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113315 "isa_tms320.tcc"
	>(0x25400000UL, 0xffe0e000UL, DecodeOpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113319 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113323 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113328 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113332 "isa_tms320.tcc"
	>(0x25200000UL, 0xffe000e0UL, DecodeOpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113336 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113340 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113345 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113349 "isa_tms320.tcc"
	>(0x25000000UL, 0xffe0e0e0UL, DecodeOpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113353 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113357 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113362 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113366 "isa_tms320.tcc"
	>(0x24e00000UL, 0xfff80000UL, DecodeOpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113370 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113374 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113379 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113383 "isa_tms320.tcc"
	>(0x24c00000UL, 0xfff8f800UL, DecodeOpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113387 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113391 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113396 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113400 "isa_tms320.tcc"
	>(0x24a00000UL, 0xfff800f8UL, DecodeOpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113404 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113408 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113413 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113417 "isa_tms320.tcc"
	>(0x24800000UL, 0xfff8f8f8UL, DecodeOpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113421 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113425 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113430 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113434 "isa_tms320.tcc"
	>(0x24600000UL, 0xffe00000UL, DecodeOpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113438 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113442 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113447 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113451 "isa_tms320.tcc"
	>(0x24400000UL, 0xffe0e000UL, DecodeOpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113455 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113459 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113464 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113468 "isa_tms320.tcc"
	>(0x24200000UL, 0xffe000e0UL, DecodeOpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113472 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113476 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113481 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113485 "isa_tms320.tcc"
	>(0x24000000UL, 0xffe0e0e0UL, DecodeOpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113489 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113493 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113498 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113502 "isa_tms320.tcc"
	>(0x23e00000UL, 0xffff0000UL, DecodeOpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113506 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113510 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113515 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113519 "isa_tms320.tcc"
	>(0x23c00000UL, 0xffffe000UL, DecodeOpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113523 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113527 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113532 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113536 "isa_tms320.tcc"
	>(0x23a00000UL, 0xffff00e0UL, DecodeOpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113540 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113544 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113549 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113553 "isa_tms320.tcc"
	>(0x23800000UL, 0xffffe0e0UL, DecodeOpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113557 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113561 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113566 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113570 "isa_tms320.tcc"
	>(0x23600000UL, 0xffff0000UL, DecodeOpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113574 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113578 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113583 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113587 "isa_tms320.tcc"
	>(0x23400000UL, 0xfffff800UL, DecodeOpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113591 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113595 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113600 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113604 "isa_tms320.tcc"
	>(0x23200000UL, 0xffff00f8UL, DecodeOpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113608 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113612 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113617 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113621 "isa_tms320.tcc"
	>(0x23000000UL, 0xfffff8f8UL, DecodeOpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113625 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113629 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113634 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113638 "isa_tms320.tcc"
	>(0x22e00000UL, 0xffe00000UL, DecodeOpASH3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113642 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113646 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113651 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113655 "isa_tms320.tcc"
	>(0x22c00000UL, 0xffe0e000UL, DecodeOpASH3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113659 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113663 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113668 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113672 "isa_tms320.tcc"
	>(0x22a00000UL, 0xffe000e0UL, DecodeOpASH3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113676 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113680 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113685 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113689 "isa_tms320.tcc"
	>(0x22800000UL, 0xffe0e0e0UL, DecodeOpASH3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113693 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113697 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113702 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113706 "isa_tms320.tcc"
	>(0x22600000UL, 0xffe00000UL, DecodeOpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113710 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113714 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113719 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113723 "isa_tms320.tcc"
	>(0x22400000UL, 0xffe0e000UL, DecodeOpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113727 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113731 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113736 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113740 "isa_tms320.tcc"
	>(0x22200000UL, 0xffe000e0UL, DecodeOpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113744 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113748 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113753 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113757 "isa_tms320.tcc"
	>(0x22000000UL, 0xffe0e0e0UL, DecodeOpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113761 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113765 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113770 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113774 "isa_tms320.tcc"
	>(0x21e00000UL, 0xffe00000UL, DecodeOpAND3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113778 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113782 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113787 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113791 "isa_tms320.tcc"
	>(0x21c00000UL, 0xffe0e000UL, DecodeOpAND3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113795 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113799 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113804 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113808 "isa_tms320.tcc"
	>(0x21a00000UL, 0xffe000e0UL, DecodeOpAND3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113812 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113816 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113821 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113825 "isa_tms320.tcc"
	>(0x21800000UL, 0xffe0e0e0UL, DecodeOpAND3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113829 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113833 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113838 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113842 "isa_tms320.tcc"
	>(0x21600000UL, 0xffe00000UL, DecodeOpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113846 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113850 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113855 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113859 "isa_tms320.tcc"
	>(0x21400000UL, 0xffe0e000UL, DecodeOpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113863 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113867 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113872 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113876 "isa_tms320.tcc"
	>(0x21200000UL, 0xffe000e0UL, DecodeOpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113880 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113884 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113889 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113893 "isa_tms320.tcc"
	>(0x21000000UL, 0xffe0e0e0UL, DecodeOpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113897 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113901 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113906 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113910 "isa_tms320.tcc"
	>(0x20e00000UL, 0xfff80000UL, DecodeOpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113914 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113918 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113923 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113927 "isa_tms320.tcc"
	>(0x20c00000UL, 0xfff8f800UL, DecodeOpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113931 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113935 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113940 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113944 "isa_tms320.tcc"
	>(0x20a00000UL, 0xfff800f8UL, DecodeOpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113948 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113952 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113957 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113961 "isa_tms320.tcc"
	>(0x20800000UL, 0xfff8f8f8UL, DecodeOpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113965 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113969 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113974 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113978 "isa_tms320.tcc"
	>(0x20600000UL, 0xffe00000UL, DecodeOpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113982 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113986 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113991 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113995 "isa_tms320.tcc"
	>(0x20400000UL, 0xffe0e000UL, DecodeOpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113999 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114003 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114008 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114012 "isa_tms320.tcc"
	>(0x20200000UL, 0xffe000e0UL, DecodeOpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114016 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114020 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114025 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114029 "isa_tms320.tcc"
	>(0x20000000UL, 0xffe0e0e0UL, DecodeOpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114033 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114037 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114042 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114046 "isa_tms320.tcc"
	>(0x1ae00000UL, 0xffe00000UL, DecodeOpXOR_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114050 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114054 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114059 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114063 "isa_tms320.tcc"
	>(0x1ac00000UL, 0xffe00000UL, DecodeOpXOR_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114067 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114071 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114076 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114080 "isa_tms320.tcc"
	>(0x1aa00000UL, 0xffe00000UL, DecodeOpXOR_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114084 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114088 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114093 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114097 "isa_tms320.tcc"
	>(0x1a800000UL, 0xffe0ffe0UL, DecodeOpXOR_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114101 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114105 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114110 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114114 "isa_tms320.tcc"
	>(0x1a600000UL, 0xffe00000UL, DecodeOpTSTB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114118 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114122 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114127 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114131 "isa_tms320.tcc"
	>(0x1a400000UL, 0xffe00000UL, DecodeOpTSTB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114135 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114139 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114144 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114148 "isa_tms320.tcc"
	>(0x1a200000UL, 0xffe00000UL, DecodeOpTSTB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114152 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114156 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114161 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114165 "isa_tms320.tcc"
	>(0x1a000000UL, 0xffe0ffe0UL, DecodeOpTSTB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114169 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114173 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114178 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114182 "isa_tms320.tcc"
	>(0x19e00000UL, 0xffe00000UL, DecodeOpSUBRI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114186 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114190 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114195 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114199 "isa_tms320.tcc"
	>(0x19c00000UL, 0xffe00000UL, DecodeOpSUBRI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114203 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114207 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114212 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114216 "isa_tms320.tcc"
	>(0x19a00000UL, 0xffe00000UL, DecodeOpSUBRI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114220 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114224 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114229 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114233 "isa_tms320.tcc"
	>(0x19800000UL, 0xffe0ffe0UL, DecodeOpSUBRI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114237 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114241 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114246 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114250 "isa_tms320.tcc"
	>(0x19600000UL, 0xfff80000UL, DecodeOpSUBRF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114254 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114258 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114263 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114267 "isa_tms320.tcc"
	>(0x19400000UL, 0xfff80000UL, DecodeOpSUBRF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114271 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114275 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114280 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114284 "isa_tms320.tcc"
	>(0x19200000UL, 0xfff80000UL, DecodeOpSUBRF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114288 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114292 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114297 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114301 "isa_tms320.tcc"
	>(0x19000000UL, 0xfff8fff8UL, DecodeOpSUBRF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114305 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114309 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114314 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114318 "isa_tms320.tcc"
	>(0x18e00000UL, 0xffe00000UL, DecodeOpSUBRB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114322 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114326 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114331 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114335 "isa_tms320.tcc"
	>(0x18c00000UL, 0xffe00000UL, DecodeOpSUBRB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114339 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114343 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114348 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114352 "isa_tms320.tcc"
	>(0x18a00000UL, 0xffe00000UL, DecodeOpSUBRB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114356 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114360 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114365 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114369 "isa_tms320.tcc"
	>(0x18800000UL, 0xffe0ffe0UL, DecodeOpSUBRB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114373 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114377 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114382 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114386 "isa_tms320.tcc"
	>(0x18600000UL, 0xffe00000UL, DecodeOpSUBI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114390 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114394 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114399 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114403 "isa_tms320.tcc"
	>(0x18400000UL, 0xffe00000UL, DecodeOpSUBI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114407 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114411 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114416 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114420 "isa_tms320.tcc"
	>(0x18200000UL, 0xffe00000UL, DecodeOpSUBI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114424 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114428 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114433 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114437 "isa_tms320.tcc"
	>(0x18000000UL, 0xffe0ffe0UL, DecodeOpSUBI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114441 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114445 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114450 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114454 "isa_tms320.tcc"
	>(0x17e00000UL, 0xfff80000UL, DecodeOpSUBF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114458 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114462 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114467 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114471 "isa_tms320.tcc"
	>(0x17c00000UL, 0xfff80000UL, DecodeOpSUBF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114475 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114479 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114484 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114488 "isa_tms320.tcc"
	>(0x17a00000UL, 0xfff80000UL, DecodeOpSUBF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114492 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114496 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114501 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114505 "isa_tms320.tcc"
	>(0x17800000UL, 0xfff8fff8UL, DecodeOpSUBF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114509 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114513 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114518 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114522 "isa_tms320.tcc"
	>(0x17600000UL, 0xffe00000UL, DecodeOpSUBC_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114526 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114530 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114535 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114539 "isa_tms320.tcc"
	>(0x17400000UL, 0xffe00000UL, DecodeOpSUBC_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114543 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114547 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114552 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114556 "isa_tms320.tcc"
	>(0x17200000UL, 0xffe00000UL, DecodeOpSUBC_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114560 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114564 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114569 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114573 "isa_tms320.tcc"
	>(0x17000000UL, 0xffe0ffe0UL, DecodeOpSUBC_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114577 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114581 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114586 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114590 "isa_tms320.tcc"
	>(0x16e00000UL, 0xffe00000UL, DecodeOpSUBB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114594 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114598 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114603 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114607 "isa_tms320.tcc"
	>(0x16c00000UL, 0xffe00000UL, DecodeOpSUBB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114611 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114615 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114620 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114624 "isa_tms320.tcc"
	>(0x16a00000UL, 0xffe00000UL, DecodeOpSUBB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114628 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114632 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114637 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114641 "isa_tms320.tcc"
	>(0x16800000UL, 0xffe0ffe0UL, DecodeOpSUBB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114645 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114649 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114654 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114658 "isa_tms320.tcc"
	>(0x1360ffffUL, 0xffe0ffffUL, DecodeOpRORC<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114662 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114666 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114671 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114675 "isa_tms320.tcc"
	>(0x12e0ffffUL, 0xffe0ffffUL, DecodeOpROR<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114679 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114683 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114688 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114692 "isa_tms320.tcc"
	>(0x12600001UL, 0xffe0ffffUL, DecodeOpROLC<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114696 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114700 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114705 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114709 "isa_tms320.tcc"
	>(0x11e00001UL, 0xffe0ffffUL, DecodeOpROL<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114713 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114717 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114722 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114726 "isa_tms320.tcc"
	>(0x11600000UL, 0xfff80000UL, DecodeOpRND_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114730 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114734 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114739 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114743 "isa_tms320.tcc"
	>(0x11400000UL, 0xfff80000UL, DecodeOpRND_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114747 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114751 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114756 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114760 "isa_tms320.tcc"
	>(0x11200000UL, 0xfff80000UL, DecodeOpRND_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114764 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114768 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114773 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114777 "isa_tms320.tcc"
	>(0x11000000UL, 0xfff8fff8UL, DecodeOpRND_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114781 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114785 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114790 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114794 "isa_tms320.tcc"
	>(0x10600000UL, 0xffe00000UL, DecodeOpOR_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114798 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114802 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114807 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114811 "isa_tms320.tcc"
	>(0x10400000UL, 0xffe00000UL, DecodeOpOR_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114815 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114819 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114824 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114828 "isa_tms320.tcc"
	>(0x10200000UL, 0xffe00000UL, DecodeOpOR_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114832 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114836 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114841 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114845 "isa_tms320.tcc"
	>(0x10000000UL, 0xffe0ffe0UL, DecodeOpOR_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114849 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114853 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114858 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114862 "isa_tms320.tcc"
	>(0xde00000UL, 0xffe00000UL, DecodeOpNOT_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114866 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114870 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114875 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114879 "isa_tms320.tcc"
	>(0xdc00000UL, 0xffe00000UL, DecodeOpNOT_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114883 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114887 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114892 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114896 "isa_tms320.tcc"
	>(0xda00000UL, 0xffe00000UL, DecodeOpNOT_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114900 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114904 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114909 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114913 "isa_tms320.tcc"
	>(0xd800000UL, 0xffe0ffe0UL, DecodeOpNOT_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114917 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114921 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114926 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114930 "isa_tms320.tcc"
	>(0xd600000UL, 0xfff80000UL, DecodeOpNORM_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114934 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114938 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114943 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114947 "isa_tms320.tcc"
	>(0xd400000UL, 0xfff80000UL, DecodeOpNORM_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114951 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114955 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114960 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114964 "isa_tms320.tcc"
	>(0xd200000UL, 0xfff80000UL, DecodeOpNORM_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114968 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114972 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114977 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114981 "isa_tms320.tcc"
	>(0xd000000UL, 0xfff8fff8UL, DecodeOpNORM_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114985 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114989 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114994 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114998 "isa_tms320.tcc"
	>(0xc600000UL, 0xffe00000UL, DecodeOpNEGI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115002 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115006 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115011 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115015 "isa_tms320.tcc"
	>(0xc400000UL, 0xffe00000UL, DecodeOpNEGI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115019 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115023 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115028 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115032 "isa_tms320.tcc"
	>(0xc200000UL, 0xffe00000UL, DecodeOpNEGI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115036 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115040 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115045 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115049 "isa_tms320.tcc"
	>(0xc000000UL, 0xffe0ffe0UL, DecodeOpNEGI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115053 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115057 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115062 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115066 "isa_tms320.tcc"
	>(0xbe00000UL, 0xfff80000UL, DecodeOpNEGF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115070 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115074 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115079 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115083 "isa_tms320.tcc"
	>(0xbc00000UL, 0xfff80000UL, DecodeOpNEGF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115087 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115091 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115096 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115100 "isa_tms320.tcc"
	>(0xba00000UL, 0xfff80000UL, DecodeOpNEGF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115104 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115108 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115113 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115117 "isa_tms320.tcc"
	>(0xb800000UL, 0xfff8fff8UL, DecodeOpNEGF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115121 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115125 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115130 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115134 "isa_tms320.tcc"
	>(0xb600000UL, 0xffe00000UL, DecodeOpNEGB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115138 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115142 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115147 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115151 "isa_tms320.tcc"
	>(0xb400000UL, 0xffe00000UL, DecodeOpNEGB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115155 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115159 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115164 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115168 "isa_tms320.tcc"
	>(0xb200000UL, 0xffe00000UL, DecodeOpNEGB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115172 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115176 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115181 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115185 "isa_tms320.tcc"
	>(0xb000000UL, 0xffe0ffe0UL, DecodeOpNEGB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115189 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115193 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115198 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115202 "isa_tms320.tcc"
	>(0xae00000UL, 0xffe00000UL, DecodeOpMPYI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115206 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115210 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115215 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115219 "isa_tms320.tcc"
	>(0xac00000UL, 0xffe00000UL, DecodeOpMPYI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115223 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115227 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115232 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115236 "isa_tms320.tcc"
	>(0xaa00000UL, 0xffe00000UL, DecodeOpMPYI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115240 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115244 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115249 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115253 "isa_tms320.tcc"
	>(0xa800000UL, 0xffe0ffe0UL, DecodeOpMPYI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115257 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115261 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115266 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115270 "isa_tms320.tcc"
	>(0xa600000UL, 0xfff80000UL, DecodeOpMPYF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115274 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115278 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115283 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115287 "isa_tms320.tcc"
	>(0xa400000UL, 0xfff80000UL, DecodeOpMPYF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115291 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115295 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115300 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115304 "isa_tms320.tcc"
	>(0xa200000UL, 0xfff80000UL, DecodeOpMPYF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115308 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115312 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115317 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115321 "isa_tms320.tcc"
	>(0xa000000UL, 0xfff8fff8UL, DecodeOpMPYF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115325 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115329 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115334 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115338 "isa_tms320.tcc"
	>(0x9e00000UL, 0xffe00000UL, DecodeOpLSH_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115342 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115346 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115351 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115355 "isa_tms320.tcc"
	>(0x9c00000UL, 0xffe00000UL, DecodeOpLSH_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115359 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115363 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115368 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115372 "isa_tms320.tcc"
	>(0x9a00000UL, 0xffe00000UL, DecodeOpLSH_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115376 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115380 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115385 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115389 "isa_tms320.tcc"
	>(0x9800000UL, 0xffe0ffe0UL, DecodeOpLSH_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115393 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115397 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115402 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115406 "isa_tms320.tcc"
	>(0x5e00000UL, 0xfff80000UL, DecodeOpFLOAT_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115410 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115414 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115419 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115423 "isa_tms320.tcc"
	>(0x5c00000UL, 0xfff80000UL, DecodeOpFLOAT_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115427 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115431 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115436 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115440 "isa_tms320.tcc"
	>(0x5a00000UL, 0xfff80000UL, DecodeOpFLOAT_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115444 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115448 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115453 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115457 "isa_tms320.tcc"
	>(0x5800000UL, 0xfff8ffe0UL, DecodeOpFLOAT_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115461 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115465 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115470 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115474 "isa_tms320.tcc"
	>(0x5600000UL, 0xffe00000UL, DecodeOpFIX_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115478 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115482 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115487 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115491 "isa_tms320.tcc"
	>(0x5400000UL, 0xffe00000UL, DecodeOpFIX_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115495 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115499 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115504 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115508 "isa_tms320.tcc"
	>(0x5200000UL, 0xffe00000UL, DecodeOpFIX_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115512 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115516 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115521 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115525 "isa_tms320.tcc"
	>(0x5000000UL, 0xffe0fff8UL, DecodeOpFIX_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115529 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115533 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115538 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115542 "isa_tms320.tcc"
	>(0x4e00000UL, 0xffe00000UL, DecodeOpCMPI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115546 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115550 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115555 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115559 "isa_tms320.tcc"
	>(0x4c00000UL, 0xffe00000UL, DecodeOpCMPI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115563 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115567 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115572 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115576 "isa_tms320.tcc"
	>(0x4a00000UL, 0xffe00000UL, DecodeOpCMPI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115580 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115584 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115589 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115593 "isa_tms320.tcc"
	>(0x4800000UL, 0xffe0ffe0UL, DecodeOpCMPI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115597 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115601 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115606 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115610 "isa_tms320.tcc"
	>(0x4600000UL, 0xfff80000UL, DecodeOpCMPF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115614 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115618 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115623 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115627 "isa_tms320.tcc"
	>(0x4400000UL, 0xfff80000UL, DecodeOpCMPF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115631 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115635 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115640 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115644 "isa_tms320.tcc"
	>(0x4200000UL, 0xfff80000UL, DecodeOpCMPF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115648 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115652 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115657 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115661 "isa_tms320.tcc"
	>(0x4000000UL, 0xfff8fff8UL, DecodeOpCMPF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115665 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115669 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115674 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115678 "isa_tms320.tcc"
	>(0x3e00000UL, 0xffe00000UL, DecodeOpASH_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115682 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115686 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115691 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115695 "isa_tms320.tcc"
	>(0x3c00000UL, 0xffe00000UL, DecodeOpASH_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115699 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115703 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115708 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115712 "isa_tms320.tcc"
	>(0x3a00000UL, 0xffe00000UL, DecodeOpASH_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115716 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115720 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115725 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115729 "isa_tms320.tcc"
	>(0x3800000UL, 0xffe0ffe0UL, DecodeOpASH_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115733 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115737 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115742 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115746 "isa_tms320.tcc"
	>(0x3600000UL, 0xffe00000UL, DecodeOpANDN_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115750 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115754 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115759 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115763 "isa_tms320.tcc"
	>(0x3400000UL, 0xffe00000UL, DecodeOpANDN_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115767 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115771 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115776 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115780 "isa_tms320.tcc"
	>(0x3200000UL, 0xffe00000UL, DecodeOpANDN_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115784 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115788 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115793 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115797 "isa_tms320.tcc"
	>(0x3000000UL, 0xffe0ffe0UL, DecodeOpANDN_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115801 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115805 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115810 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115814 "isa_tms320.tcc"
	>(0x2e00000UL, 0xffe00000UL, DecodeOpAND_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115818 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115822 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115827 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115831 "isa_tms320.tcc"
	>(0x2c00000UL, 0xffe00000UL, DecodeOpAND_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115835 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115839 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115844 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115848 "isa_tms320.tcc"
	>(0x2a00000UL, 0xffe00000UL, DecodeOpAND_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115852 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115856 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115861 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115865 "isa_tms320.tcc"
	>(0x2800000UL, 0xffe0ffe0UL, DecodeOpAND_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115869 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115873 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115878 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115882 "isa_tms320.tcc"
	>(0x2600000UL, 0xffe00000UL, DecodeOpADDI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115886 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115890 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115895 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115899 "isa_tms320.tcc"
	>(0x2400000UL, 0xffe00000UL, DecodeOpADDI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115903 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115907 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115912 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115916 "isa_tms320.tcc"
	>(0x2200000UL, 0xffe00000UL, DecodeOpADDI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115920 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115924 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115929 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115933 "isa_tms320.tcc"
	>(0x2000000UL, 0xffe0ffe0UL, DecodeOpADDI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115937 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115941 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115946 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115950 "isa_tms320.tcc"
	>(0x1e00000UL, 0xfff80000UL, DecodeOpADDF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115954 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115958 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115963 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115967 "isa_tms320.tcc"
	>(0x1c00000UL, 0xfff80000UL, DecodeOpADDF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115971 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115975 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115980 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115984 "isa_tms320.tcc"
	>(0x1a00000UL, 0xfff80000UL, DecodeOpADDF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115988 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115992 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115997 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116001 "isa_tms320.tcc"
	>(0x1800000UL, 0xfff8fff8UL, DecodeOpADDF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116005 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116009 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116014 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116018 "isa_tms320.tcc"
	>(0x1600000UL, 0xffe00000UL, DecodeOpADDC_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116022 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116026 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116031 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116035 "isa_tms320.tcc"
	>(0x1400000UL, 0xffe00000UL, DecodeOpADDC_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116039 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116043 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116048 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116052 "isa_tms320.tcc"
	>(0x1200000UL, 0xffe00000UL, DecodeOpADDC_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116056 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116060 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116065 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116069 "isa_tms320.tcc"
	>(0x1000000UL, 0xffe0ffe0UL, DecodeOpADDC_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116073 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116077 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116082 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116086 "isa_tms320.tcc"
	>(0xe00000UL, 0xffe00000UL, DecodeOpABSI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116090 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116094 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116099 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116103 "isa_tms320.tcc"
	>(0xc00000UL, 0xffe00000UL, DecodeOpABSI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116107 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116111 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116116 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116120 "isa_tms320.tcc"
	>(0xa00000UL, 0xffe00000UL, DecodeOpABSI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116124 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116128 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116133 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116137 "isa_tms320.tcc"
	>(0x800000UL, 0xffe0ffe0UL, DecodeOpABSI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116141 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116145 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116150 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116154 "isa_tms320.tcc"
	>(0x600000UL, 0xfff80000UL, DecodeOpABSF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116158 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116162 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116167 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116171 "isa_tms320.tcc"
	>(0x400000UL, 0xfff80000UL, DecodeOpABSF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116175 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116179 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116184 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116188 "isa_tms320.tcc"
	>(0x200000UL, 0xfff80000UL, DecodeOpABSF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116192 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116196 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116201 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116205 "isa_tms320.tcc"
	>(0x0UL, 0xfff8fff8UL, DecodeOpABSF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116209 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116213 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116218 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116222 "isa_tms320.tcc"
	>(0x15400000UL, 0xffe00000UL, DecodeOpSTI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116226 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116230 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116235 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116239 "isa_tms320.tcc"
	>(0x15200000UL, 0xffe00000UL, DecodeOpSTI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116243 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116247 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116252 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116256 "isa_tms320.tcc"
	>(0x14400000UL, 0xfff80000UL, DecodeOpSTF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116260 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116264 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116269 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116273 "isa_tms320.tcc"
	>(0x14200000UL, 0xffe00000UL, DecodeOpSTF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116277 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116281 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116286 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116290 "isa_tms320.tcc"
	>(0xfa00000UL, 0xfff8ffffUL, DecodeOpPUSHF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116294 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116298 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116303 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116307 "isa_tms320.tcc"
	>(0xf200000UL, 0xffe0ffffUL, DecodeOpPUSH<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116311 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116315 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116320 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116324 "isa_tms320.tcc"
	>(0xea00000UL, 0xfff8ffffUL, DecodeOpPOPF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116328 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116332 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116337 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116341 "isa_tms320.tcc"
	>(0xe200000UL, 0xffe0ffffUL, DecodeOpPOP<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116345 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116349 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116354 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116358 "isa_tms320.tcc"
	>(0x8700000UL, 0xffffff00UL, DecodeOpLDP<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116362 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116366 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116371 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116375 "isa_tms320.tcc"
	>(0x9600000UL, 0xfff8f000UL, DecodeOpLDM_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116379 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116383 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116388 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116392 "isa_tms320.tcc"
	>(0x9400000UL, 0xfff80000UL, DecodeOpLDM_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116396 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116400 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116405 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116409 "isa_tms320.tcc"
	>(0x9200000UL, 0xfff80000UL, DecodeOpLDM_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116413 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116417 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116422 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116426 "isa_tms320.tcc"
	>(0x9000000UL, 0xfff8ffe0UL, DecodeOpLDM_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116430 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116434 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116439 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116443 "isa_tms320.tcc"
	>(0x50600000UL, 0xf0600000UL, DecodeOpLDIcond_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116447 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116451 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116456 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116460 "isa_tms320.tcc"
	>(0x50400000UL, 0xf0600000UL, DecodeOpLDIcond_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116464 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116468 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116473 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116477 "isa_tms320.tcc"
	>(0x50200000UL, 0xf0600000UL, DecodeOpLDIcond_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116481 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116485 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116490 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116494 "isa_tms320.tcc"
	>(0x50000000UL, 0xf060ffe0UL, DecodeOpLDIcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116498 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116502 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116507 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116511 "isa_tms320.tcc"
	>(0x8600000UL, 0xffe00000UL, DecodeOpLDI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116515 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116519 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116524 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116528 "isa_tms320.tcc"
	>(0x8400000UL, 0xffe00000UL, DecodeOpLDI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116532 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116536 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116541 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116545 "isa_tms320.tcc"
	>(0x8200000UL, 0xffe00000UL, DecodeOpLDI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116549 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116553 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116558 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116562 "isa_tms320.tcc"
	>(0x8000000UL, 0xffe0ffe0UL, DecodeOpLDI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116566 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116570 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116575 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116579 "isa_tms320.tcc"
	>(0x40600000UL, 0xf0780000UL, DecodeOpLDFcond_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116583 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116587 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116592 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116596 "isa_tms320.tcc"
	>(0x40400000UL, 0xf0780000UL, DecodeOpLDFcond_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116600 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116604 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116609 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116613 "isa_tms320.tcc"
	>(0x40200000UL, 0xf0780000UL, DecodeOpLDFcond_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116617 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116621 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116626 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116630 "isa_tms320.tcc"
	>(0x40000000UL, 0xf078ffe0UL, DecodeOpLDFcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116634 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116638 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116643 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116647 "isa_tms320.tcc"
	>(0x7600000UL, 0xfff80000UL, DecodeOpLDF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116651 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116655 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116660 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116664 "isa_tms320.tcc"
	>(0x7400000UL, 0xfff80000UL, DecodeOpLDF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116668 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116672 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116677 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116681 "isa_tms320.tcc"
	>(0x7200000UL, 0xfff80000UL, DecodeOpLDF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116685 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116689 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116694 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116698 "isa_tms320.tcc"
	>(0x7000000UL, 0xfff8ffe0UL, DecodeOpLDF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116702 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116706 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116711 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116715 "isa_tms320.tcc"
	>(0x6e00000UL, 0xfff80000UL, DecodeOpLDE_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116719 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116723 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116728 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116732 "isa_tms320.tcc"
	>(0x6c00000UL, 0xfff80000UL, DecodeOpLDE_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116736 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116740 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116745 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116749 "isa_tms320.tcc"
	>(0x6a00000UL, 0xfff80000UL, DecodeOpLDE_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116753 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116757 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116762 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116766 "isa_tms320.tcc"
	>(0x6800000UL, 0xfff8ffe0UL, DecodeOpLDE_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116770 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116774 "isa_tms320.tcc"
	>));
}

template <
#line 45 "isa/tms320.isa"
class
#line 116781 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 116784 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 116788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 116791 "isa_tms320.tcc"
>
Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 116796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 116800 "isa_tms320.tcc"
>::~Decoder()
{
	InvalidateDecodingCache();
}

template <
#line 45 "isa/tms320.isa"
class
#line 116809 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 116812 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 116816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 116819 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 116824 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 116828 "isa_tms320.tcc"
> *Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 116832 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 116836 "isa_tms320.tcc"
>::NCDecode(typename CONFIG::address_t addr, CodeType code)
{
	Operation<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116842 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116846 "isa_tms320.tcc"
	> *operation;
	unsigned int count = decode_table.size();
	unsigned int idx;
	for(idx = 0; idx < count; idx++)
	{
		if((code & decode_table[idx].opcode_mask) == decode_table[idx].opcode)
		{
			operation = decode_table[idx].decode(code, addr);
			return operation;
		}
	}
	operation = new Operation<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116861 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116865 "isa_tms320.tcc"
	>(code, addr, "???");
	return operation;
}

template <
#line 45 "isa/tms320.isa"
class
#line 116873 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 116876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 116880 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 116883 "isa_tms320.tcc"
>
void Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 116888 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 116892 "isa_tms320.tcc"
>::InvalidateDecodingCache()
{
	uint32_t index;
	mru_page = 0;
	for(index = 0; index < NUM_DECODE_HASH_TABLE_ENTRIES; index++)
	{
		DecodeMapPage<
#line 45 "isa/tms320.isa"
		CONFIG
#line 116902 "isa_tms320.tcc"
		,
#line 45 "isa/tms320.isa"
		DEBUG
#line 116906 "isa_tms320.tcc"
		> *page, *next_page;
		page = decode_hash_table[index];
		if(page)
		{
			do
			{
				next_page = page->next;
				delete page;
				page = next_page;
			} while(page);
			decode_hash_table[index] = 0;
		}
	}
}

template <
#line 45 "isa/tms320.isa"
class
#line 116925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 116928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 116932 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 116935 "isa_tms320.tcc"
>
void Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 116940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 116944 "isa_tms320.tcc"
>::InvalidateDecodingCacheEntry(typename CONFIG::address_t addr)
{
	typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
	if(mru_page && mru_page->key == page_key) mru_page = 0;
	uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
	DecodeMapPage<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116953 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116957 "isa_tms320.tcc"
	> *prev, *cur;
	cur = decode_hash_table[index];
	if(cur)
	{
		if(cur->key == page_key)
		{
			decode_hash_table[index] = cur->next;
			delete cur;
			return;
		}
		prev = cur;
		cur = cur->next;
		if(cur)
		{
			do
			{
				if(cur->key == page_key)
				{
					prev->next = cur->next;
					cur->next = 0;
					delete cur;
					return;
				}
				prev = cur;
			} while((cur = cur->next) != 0);
		}
	}
}

template <
#line 45 "isa/tms320.isa"
class
#line 116990 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 116993 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 116997 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 117000 "isa_tms320.tcc"
>
inline DecodeMapPage<
#line 45 "isa/tms320.isa"
CONFIG
#line 117005 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 117009 "isa_tms320.tcc"
> *Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 117013 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 117017 "isa_tms320.tcc"
>::FindPage(typename CONFIG::address_t page_key)
{
	if(mru_page && mru_page->key == page_key) return mru_page;
	uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
	DecodeMapPage<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117025 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117029 "isa_tms320.tcc"
	> *prev, *cur;
	cur = decode_hash_table[index];
	if(cur)
	{
		if(cur->key == page_key)
		{
			mru_page = cur;
			return cur;
		}
		prev = cur;
		cur = cur->next;
		if(cur)
		{
			do
			{
				if(cur->key == page_key)
				{
					prev->next = cur->next;
					cur->next= decode_hash_table[index];
					decode_hash_table[index] = cur;
					mru_page = cur;
					return cur;
				}
				prev = cur;
			} while((cur = cur->next) != 0);
		}
	}
	return 0;
}

template <
#line 45 "isa/tms320.isa"
class
#line 117063 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 117066 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 117070 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 117073 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 117078 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 117082 "isa_tms320.tcc"
> *Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 117086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 117090 "isa_tms320.tcc"
>::Decode(typename CONFIG::address_t addr, CodeType insn)
{
	Operation<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117096 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117100 "isa_tms320.tcc"
	> *operation;
	typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
	DecodeMapPage<
#line 45 "isa/tms320.isa"
	CONFIG
#line 117106 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 117110 "isa_tms320.tcc"
	> *page;
	page = FindPage(page_key);
	if(!page)
	{
		page = new DecodeMapPage<
#line 45 "isa/tms320.isa"
		CONFIG
#line 117118 "isa_tms320.tcc"
		,
#line 45 "isa/tms320.isa"
		DEBUG
#line 117122 "isa_tms320.tcc"
		> (page_key);
		uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
		page->next = decode_hash_table[index];
		decode_hash_table[index] = page;
		mru_page = page;
	}
	operation = page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)];
	if(operation)
	{
		if(operation->GetEncoding() == insn && operation->GetAddr() == addr)
		return operation;
		delete operation;
	}
	operation = NCDecode(addr, insn);
	page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
	return operation;
}

template <
#line 45 "isa/tms320.isa"
class
#line 117144 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 117147 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 117151 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 117154 "isa_tms320.tcc"
>
void Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 117159 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 117163 "isa_tms320.tcc"
>::SetLittleEndian()
{
	is_little_endian = true;
}

template <
#line 45 "isa/tms320.isa"
class
#line 117172 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 117175 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 117179 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 117182 "isa_tms320.tcc"
>
void Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 117187 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 117191 "isa_tms320.tcc"
>::SetBigEndian()
{
	is_little_endian = false;
}

} } } } } } }
