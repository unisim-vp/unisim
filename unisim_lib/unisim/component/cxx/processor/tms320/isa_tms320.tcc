#include "isa_tms320.hh"
#include <cassert>
#line 71 "isa/tms320.isa"

/* code to be included at the beginning of the implementation of the library */
#include <iostream>
#include <string>
#include "unisim/component/cxx/processor/tms320/exception.hh"

namespace unisim {
	namespace component {
		namespace cxx {
			namespace processor {
				namespace tms320 {

					using std::ostream;
					using std::hex;
					using std::dec;
					using std::endl;
					using std::string;

					static const char *REG_NAME[] = {
						"R0",  "R1",  "R2",  "R3",  "R4",  "R5",  "R6",  "R7",
						"AR0", "AR1", "AR2", "AR3", "AR4", "AR5", "AR6", "AR7",
						"DP", "IR0", "IR1",  "BK",  "SP",  "ST",  "IE",  "IF",
						"IOF",  "RS",  "RE",  "RC",    0,     0,     0,     0
					};

					static const char *COND_NAME[] = {
						"U",    // 00000
						"LO",   // 00001
						"LS",   // 00010
						"HI",   // 00011
						"HS",   // 00100
						"EQ",   // 00101
						"NE",   // 00110
						"LT",   // 00111
						"LE",   // 01000
						"GT",   // 01001
						"GE",   // 01010
						0,      // 01011
						"NV",   // 01100
						"V",    // 01101
						"NUF",  // 01110
						"UF",   // 01111
						"NLV",  // 10000
						"LV",   // 10001
						"NLUF", // 10010
						"LUF",  // 10011
						"ZUF",  // 10100
						0,      // 10101
						0,      // 10110
						0,      // 10111
						0,      // 11000
						0,      // 11001
						0,      // 11010
						0,      // 11011
						0,      // 11100
						0,      // 11101
						0,      // 11110
						0       // 11111
					};

					using unisim::util::arithmetic::Add32;
					using unisim::util::arithmetic::SignedSatAdd32;
					using unisim::util::arithmetic::Sub32;
					using unisim::util::arithmetic::SignedSatSub32;
					using unisim::util::arithmetic::RotateLeft;
					using unisim::util::arithmetic::RotateRight;

				} // end of namespace tms320
			} // end of namespace processor
		} // end of namespace cxx
	} // end of namespace component
} // end of namespace unisim

#line 78 "isa_tms320.tcc"
namespace unisim { namespace component { namespace cxx { namespace processor { namespace tms320 { namespace isa { namespace tms320 {
template <
#line 45 "isa/tms320.isa"
class
#line 83 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102 "isa_tms320.tcc"
>::Operation(CodeType _code, typename CONFIG::address_t _addr, const char *_name)
:
encoding(_code),
addr(_addr),
name(_name)
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 114 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 117 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 121 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 124 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 129 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 133 "isa_tms320.tcc"
>::~Operation()
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 141 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 144 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 148 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 151 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 155 "isa_tms320.tcc"
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 159 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 163 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 167 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 170 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 174 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 177 "isa_tms320.tcc"
)
{
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	{
		return false;
	}
#line 184 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 189 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 196 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 199 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 203 "isa_tms320.tcc"
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 207 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 211 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 215 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 218 "isa_tms320.tcc"
)
{
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	{
		// To enable once every execute methods will be implemented
#if 0
		throw BogusOpcodeException<CONFIG, DEBUG>(this);
#else
		throw UnknownOpcodeException<CONFIG, DEBUG>(this);
#endif
	}
#line 230 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 242 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 245 "isa_tms320.tcc"
>
class OpLDE_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 250 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 254 "isa_tms320.tcc"
>
{
public:
	OpLDE_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 264 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 268 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 271 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 275 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 278 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 286 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 289 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 293 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 296 "isa_tms320.tcc"
>
class OpLDE_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 301 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 305 "isa_tms320.tcc"
>
{
public:
	OpLDE_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 315 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 319 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 322 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 326 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 329 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 337 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 340 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 347 "isa_tms320.tcc"
>
class OpLDE_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 352 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 356 "isa_tms320.tcc"
>
{
public:
	OpLDE_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 368 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 372 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 375 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 379 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 382 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 390 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 393 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 397 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 400 "isa_tms320.tcc"
>
class OpLDE_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 405 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 409 "isa_tms320.tcc"
>
{
public:
	OpLDE_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 419 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 423 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 426 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 430 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 433 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 441 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 444 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 448 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 451 "isa_tms320.tcc"
>
class OpLDF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 456 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 460 "isa_tms320.tcc"
>
{
public:
	OpLDF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 470 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 474 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 477 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 481 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 484 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 495 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 502 "isa_tms320.tcc"
>
class OpLDF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 511 "isa_tms320.tcc"
>
{
public:
	OpLDF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 521 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 525 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 528 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 532 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 535 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 543 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 546 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 550 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 553 "isa_tms320.tcc"
>
class OpLDF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 558 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 562 "isa_tms320.tcc"
>
{
public:
	OpLDF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 574 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 578 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 581 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 585 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 588 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 599 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 603 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 606 "isa_tms320.tcc"
>
class OpLDF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 611 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 615 "isa_tms320.tcc"
>
{
public:
	OpLDF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 625 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 629 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 632 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 636 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 639 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 647 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 650 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 654 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 657 "isa_tms320.tcc"
>
class OpLDFcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 662 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 666 "isa_tms320.tcc"
>
{
public:
	OpLDFcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 677 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 681 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 684 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 688 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 691 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 699 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 702 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 706 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 709 "isa_tms320.tcc"
>
class OpLDFcond_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 714 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 718 "isa_tms320.tcc"
>
{
public:
	OpLDFcond_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 729 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 733 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 736 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 740 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 743 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 751 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 754 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 758 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 761 "isa_tms320.tcc"
>
class OpLDFcond_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 766 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 770 "isa_tms320.tcc"
>
{
public:
	OpLDFcond_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 783 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 787 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 790 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 794 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 797 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 805 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 812 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 815 "isa_tms320.tcc"
>
class OpLDFcond_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 820 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 824 "isa_tms320.tcc"
>
{
public:
	OpLDFcond_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 835 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 839 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 842 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 846 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 849 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 857 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 860 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 864 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 867 "isa_tms320.tcc"
>
class OpLDI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 876 "isa_tms320.tcc"
>
{
public:
	OpLDI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 886 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 890 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 893 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 897 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 900 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 980 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 984 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 987 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 995 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1002 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1005 "isa_tms320.tcc"
>
class OpLDI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1014 "isa_tms320.tcc"
>
{
public:
	OpLDI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1024 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1028 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1031 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1035 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1038 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1118 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1122 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1125 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1133 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1136 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1140 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1143 "isa_tms320.tcc"
>
class OpLDI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1152 "isa_tms320.tcc"
>
{
public:
	OpLDI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1164 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1168 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1171 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1175 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1178 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1258 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1262 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1265 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1273 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1276 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1283 "isa_tms320.tcc"
>
class OpLDI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1292 "isa_tms320.tcc"
>
{
public:
	OpLDI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1302 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1306 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1309 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1313 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1316 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1396 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1400 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1403 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1411 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1414 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1418 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1421 "isa_tms320.tcc"
>
class OpLDIcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1426 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1430 "isa_tms320.tcc"
>
{
public:
	OpLDIcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1441 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1445 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1448 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1452 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1455 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1535 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1539 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1542 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1550 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1553 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1557 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1560 "isa_tms320.tcc"
>
class OpLDIcond_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1565 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1569 "isa_tms320.tcc"
>
{
public:
	OpLDIcond_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1580 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1584 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1587 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1591 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1594 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1674 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1678 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1681 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1689 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1692 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1696 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1699 "isa_tms320.tcc"
>
class OpLDIcond_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1708 "isa_tms320.tcc"
>
{
public:
	OpLDIcond_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1721 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1725 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1728 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1732 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1735 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1815 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1819 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1822 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1830 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1833 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1837 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1840 "isa_tms320.tcc"
>
class OpLDIcond_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1845 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1849 "isa_tms320.tcc"
>
{
public:
	OpLDIcond_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1860 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1864 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1867 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1871 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1874 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1954 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1958 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1961 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1976 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1979 "isa_tms320.tcc"
>
class OpLDM_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1984 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1988 "isa_tms320.tcc"
>
{
public:
	OpLDM_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1998 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2002 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2005 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2009 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2012 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2020 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2023 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2030 "isa_tms320.tcc"
>
class OpLDM_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2035 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2039 "isa_tms320.tcc"
>
{
public:
	OpLDM_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2049 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2053 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2056 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2060 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2063 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2071 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2074 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2078 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2081 "isa_tms320.tcc"
>
class OpLDM_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2090 "isa_tms320.tcc"
>
{
public:
	OpLDM_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2102 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2106 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2109 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2113 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2116 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2127 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2131 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2134 "isa_tms320.tcc"
>
class OpLDM_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2139 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2143 "isa_tms320.tcc"
>
{
public:
	OpLDM_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2153 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2157 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2160 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2164 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2167 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2182 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2185 "isa_tms320.tcc"
>
class OpLDP : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2190 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2194 "isa_tms320.tcc"
>
{
public:
	OpLDP(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2203 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2207 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2210 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2214 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2217 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2297 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2301 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2304 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2312 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2315 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2319 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2322 "isa_tms320.tcc"
>
class OpPOP : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2327 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2331 "isa_tms320.tcc"
>
{
public:
	OpPOP(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2340 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2344 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2347 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2351 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2354 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2434 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2438 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2441 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2449 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2452 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2456 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2459 "isa_tms320.tcc"
>
class OpPOPF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2464 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2468 "isa_tms320.tcc"
>
{
public:
	OpPOPF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2477 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2481 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2484 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2488 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2491 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2509 "isa_tms320.tcc"
>
class OpPUSH : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2514 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2518 "isa_tms320.tcc"
>
{
public:
	OpPUSH(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2527 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2531 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2534 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2538 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2541 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2621 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2625 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2628 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2636 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2639 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2643 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2646 "isa_tms320.tcc"
>
class OpPUSHF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2651 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2655 "isa_tms320.tcc"
>
{
public:
	OpPUSHF(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2664 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2668 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2671 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2675 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2678 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2686 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2689 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2693 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2696 "isa_tms320.tcc"
>
class OpSTF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2701 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2705 "isa_tms320.tcc"
>
{
public:
	OpSTF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2715 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2719 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2722 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2726 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2729 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2737 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2740 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2744 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2747 "isa_tms320.tcc"
>
class OpSTF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2752 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2756 "isa_tms320.tcc"
>
{
public:
	OpSTF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2768 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2772 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2775 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2779 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2782 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2790 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2793 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2797 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2800 "isa_tms320.tcc"
>
class OpSTI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2805 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2809 "isa_tms320.tcc"
>
{
public:
	OpSTI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2819 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2823 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2826 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2830 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2833 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2913 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2917 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2920 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2931 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2935 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2938 "isa_tms320.tcc"
>
class OpSTI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2947 "isa_tms320.tcc"
>
{
public:
	OpSTI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2959 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2963 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2966 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2970 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2973 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3053 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3057 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3060 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3078 "isa_tms320.tcc"
>
class OpABSF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3087 "isa_tms320.tcc"
>
{
public:
	OpABSF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3097 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3101 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3104 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3108 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3111 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3119 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3122 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3126 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3129 "isa_tms320.tcc"
>
class OpABSF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3134 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3138 "isa_tms320.tcc"
>
{
public:
	OpABSF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3148 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3152 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3155 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3159 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3162 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3170 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3173 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3177 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3180 "isa_tms320.tcc"
>
class OpABSF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3185 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3189 "isa_tms320.tcc"
>
{
public:
	OpABSF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3201 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3205 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3208 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3212 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3215 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3223 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3226 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3233 "isa_tms320.tcc"
>
class OpABSF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3242 "isa_tms320.tcc"
>
{
public:
	OpABSF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3252 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3256 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3259 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3263 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3266 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3274 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3277 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3281 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3284 "isa_tms320.tcc"
>
class OpABSI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3289 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3293 "isa_tms320.tcc"
>
{
public:
	OpABSI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3303 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3307 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3310 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3314 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3317 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3325 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3332 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3335 "isa_tms320.tcc"
>
class OpABSI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3340 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3344 "isa_tms320.tcc"
>
{
public:
	OpABSI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3354 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3358 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3361 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3365 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3368 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3383 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3386 "isa_tms320.tcc"
>
class OpABSI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3395 "isa_tms320.tcc"
>
{
public:
	OpABSI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3407 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3411 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3414 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3418 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3421 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3429 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3432 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3436 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3439 "isa_tms320.tcc"
>
class OpABSI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3444 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3448 "isa_tms320.tcc"
>
{
public:
	OpABSI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3458 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3462 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3465 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3469 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3472 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3480 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3483 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3487 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3490 "isa_tms320.tcc"
>
class OpADDC_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3495 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3499 "isa_tms320.tcc"
>
{
public:
	OpADDC_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3509 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3513 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3516 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3520 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3523 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3603 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3607 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3610 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3618 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3621 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3625 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3628 "isa_tms320.tcc"
>
class OpADDC_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3633 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3637 "isa_tms320.tcc"
>
{
public:
	OpADDC_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3647 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3651 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3654 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3658 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3661 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3741 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3745 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3748 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3756 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3759 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3766 "isa_tms320.tcc"
>
class OpADDC_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3771 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3775 "isa_tms320.tcc"
>
{
public:
	OpADDC_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3787 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3791 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3794 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3798 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3801 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3881 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3885 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3888 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3899 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3903 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3906 "isa_tms320.tcc"
>
class OpADDC_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3911 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3915 "isa_tms320.tcc"
>
{
public:
	OpADDC_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3925 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3929 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3932 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3936 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3939 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4019 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4023 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4026 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4037 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4041 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4044 "isa_tms320.tcc"
>
class OpADDF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4049 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4053 "isa_tms320.tcc"
>
{
public:
	OpADDF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4063 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4067 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4070 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4074 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4077 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4085 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4088 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4092 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4095 "isa_tms320.tcc"
>
class OpADDF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4100 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4104 "isa_tms320.tcc"
>
{
public:
	OpADDF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4114 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4118 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4121 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4125 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4128 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4136 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4139 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4143 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4146 "isa_tms320.tcc"
>
class OpADDF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4151 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4155 "isa_tms320.tcc"
>
{
public:
	OpADDF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4167 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4171 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4174 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4178 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4181 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4189 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4196 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4199 "isa_tms320.tcc"
>
class OpADDF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4204 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4208 "isa_tms320.tcc"
>
{
public:
	OpADDF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4218 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4222 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4225 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4229 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4232 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4240 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4247 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4250 "isa_tms320.tcc"
>
class OpADDI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4255 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4259 "isa_tms320.tcc"
>
{
public:
	OpADDI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4269 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4273 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4276 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4280 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4283 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4363 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4367 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4370 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4378 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4381 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4385 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4388 "isa_tms320.tcc"
>
class OpADDI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4393 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4397 "isa_tms320.tcc"
>
{
public:
	OpADDI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4407 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4411 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4414 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4418 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4421 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4501 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4505 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4508 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4516 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4519 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4523 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4526 "isa_tms320.tcc"
>
class OpADDI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4531 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4535 "isa_tms320.tcc"
>
{
public:
	OpADDI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4547 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4551 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4554 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4558 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4561 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4641 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4645 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4648 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4656 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4659 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4663 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4666 "isa_tms320.tcc"
>
class OpADDI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4671 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4675 "isa_tms320.tcc"
>
{
public:
	OpADDI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4685 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4689 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4692 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4696 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4699 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4779 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4783 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4786 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4794 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4797 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4801 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4804 "isa_tms320.tcc"
>
class OpAND_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4809 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4813 "isa_tms320.tcc"
>
{
public:
	OpAND_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4823 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4827 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4830 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4834 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4837 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4917 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4921 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4924 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4932 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4935 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4939 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4942 "isa_tms320.tcc"
>
class OpAND_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4947 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4951 "isa_tms320.tcc"
>
{
public:
	OpAND_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4961 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4965 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4968 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4972 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4975 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5055 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5059 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5062 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5070 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5073 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5077 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5080 "isa_tms320.tcc"
>
class OpAND_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5085 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5089 "isa_tms320.tcc"
>
{
public:
	OpAND_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5101 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5105 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5108 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5112 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5115 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5195 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5199 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5202 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5210 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5217 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5220 "isa_tms320.tcc"
>
class OpAND_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5225 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5229 "isa_tms320.tcc"
>
{
public:
	OpAND_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5239 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5243 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5246 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5250 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5253 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5333 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5337 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5340 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5348 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5351 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5355 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5358 "isa_tms320.tcc"
>
class OpANDN_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5363 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5367 "isa_tms320.tcc"
>
{
public:
	OpANDN_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5377 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5381 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5384 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5388 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5391 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5471 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5475 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5478 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5486 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5489 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5493 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5496 "isa_tms320.tcc"
>
class OpANDN_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5501 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5505 "isa_tms320.tcc"
>
{
public:
	OpANDN_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5515 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5519 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5522 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5526 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5529 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5609 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5613 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5616 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5624 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5627 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5631 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5634 "isa_tms320.tcc"
>
class OpANDN_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5639 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5643 "isa_tms320.tcc"
>
{
public:
	OpANDN_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5655 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5659 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5662 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5666 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5669 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5749 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5753 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5756 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5764 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5767 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5771 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5774 "isa_tms320.tcc"
>
class OpANDN_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5779 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5783 "isa_tms320.tcc"
>
{
public:
	OpANDN_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5793 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5797 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5800 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5804 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5807 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5887 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5891 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5894 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5902 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5905 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5909 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5912 "isa_tms320.tcc"
>
class OpASH_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5917 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5921 "isa_tms320.tcc"
>
{
public:
	OpASH_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5931 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5935 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5938 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5942 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5945 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5953 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5956 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5960 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5963 "isa_tms320.tcc"
>
class OpASH_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5968 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5972 "isa_tms320.tcc"
>
{
public:
	OpASH_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5982 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5986 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5989 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5993 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5996 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6004 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6007 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6011 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6014 "isa_tms320.tcc"
>
class OpASH_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6019 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6023 "isa_tms320.tcc"
>
{
public:
	OpASH_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6035 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6039 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6042 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6046 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6049 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6057 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6060 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6064 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6067 "isa_tms320.tcc"
>
class OpASH_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6072 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6076 "isa_tms320.tcc"
>
{
public:
	OpASH_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6086 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6090 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6093 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6097 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6100 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6111 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6115 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6118 "isa_tms320.tcc"
>
class OpCMPF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6123 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6127 "isa_tms320.tcc"
>
{
public:
	OpCMPF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6137 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6141 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6144 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6148 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6151 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6159 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6162 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6166 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6169 "isa_tms320.tcc"
>
class OpCMPF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6174 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6178 "isa_tms320.tcc"
>
{
public:
	OpCMPF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6188 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6192 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6195 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6199 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6202 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6210 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6217 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6220 "isa_tms320.tcc"
>
class OpCMPF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6225 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6229 "isa_tms320.tcc"
>
{
public:
	OpCMPF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6241 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6245 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6248 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6252 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6255 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6263 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6266 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6270 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6273 "isa_tms320.tcc"
>
class OpCMPF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6278 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6282 "isa_tms320.tcc"
>
{
public:
	OpCMPF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6292 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6296 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6299 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6303 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6306 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6314 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6317 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6321 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6324 "isa_tms320.tcc"
>
class OpCMPI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6329 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6333 "isa_tms320.tcc"
>
{
public:
	OpCMPI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6343 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6347 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6350 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6354 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6357 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6437 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6441 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6444 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6452 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6455 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6459 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6462 "isa_tms320.tcc"
>
class OpCMPI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6467 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6471 "isa_tms320.tcc"
>
{
public:
	OpCMPI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6481 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6485 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6488 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6492 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6495 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6575 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6579 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6582 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6590 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6593 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6597 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6600 "isa_tms320.tcc"
>
class OpCMPI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6605 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6609 "isa_tms320.tcc"
>
{
public:
	OpCMPI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6621 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6625 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6628 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6632 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6635 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6715 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6719 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6722 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6730 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6733 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6737 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6740 "isa_tms320.tcc"
>
class OpCMPI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6745 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6749 "isa_tms320.tcc"
>
{
public:
	OpCMPI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6759 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6763 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6766 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6770 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6773 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6853 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6857 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6860 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6868 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6871 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6875 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6878 "isa_tms320.tcc"
>
class OpFIX_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6883 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6887 "isa_tms320.tcc"
>
{
public:
	OpFIX_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6897 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6901 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6904 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6908 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6911 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6919 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6922 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6926 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6929 "isa_tms320.tcc"
>
class OpFIX_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6934 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6938 "isa_tms320.tcc"
>
{
public:
	OpFIX_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6948 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6952 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6955 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6959 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6962 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6980 "isa_tms320.tcc"
>
class OpFIX_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6985 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6989 "isa_tms320.tcc"
>
{
public:
	OpFIX_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7001 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7005 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7008 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7012 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7015 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7023 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7026 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7030 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7033 "isa_tms320.tcc"
>
class OpFIX_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7042 "isa_tms320.tcc"
>
{
public:
	OpFIX_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7052 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7056 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7059 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7063 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7066 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7077 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7081 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7084 "isa_tms320.tcc"
>
class OpFLOAT_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7089 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7093 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7103 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7107 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7110 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7114 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7117 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7125 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7128 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7132 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7135 "isa_tms320.tcc"
>
class OpFLOAT_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7144 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7154 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7158 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7161 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7165 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7168 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7176 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7179 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7183 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7186 "isa_tms320.tcc"
>
class OpFLOAT_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7191 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7195 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7207 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7211 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7214 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7218 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7221 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7229 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7232 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7236 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7239 "isa_tms320.tcc"
>
class OpFLOAT_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7244 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7248 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7258 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7262 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7265 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7269 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7272 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7283 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7287 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7290 "isa_tms320.tcc"
>
class OpLSH_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7295 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7299 "isa_tms320.tcc"
>
{
public:
	OpLSH_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7309 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7313 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7316 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7320 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7323 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7331 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7334 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7338 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7341 "isa_tms320.tcc"
>
class OpLSH_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7350 "isa_tms320.tcc"
>
{
public:
	OpLSH_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7360 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7364 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7367 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7371 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7374 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7382 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7385 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7389 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7392 "isa_tms320.tcc"
>
class OpLSH_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7397 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7401 "isa_tms320.tcc"
>
{
public:
	OpLSH_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7413 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7417 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7420 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7424 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7427 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7435 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7438 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7442 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7445 "isa_tms320.tcc"
>
class OpLSH_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7450 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7454 "isa_tms320.tcc"
>
{
public:
	OpLSH_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7464 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7468 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7471 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7475 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7478 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7486 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7489 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7493 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7496 "isa_tms320.tcc"
>
class OpMPYF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7501 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7505 "isa_tms320.tcc"
>
{
public:
	OpMPYF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7515 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7519 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7522 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7526 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7529 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7537 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7540 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7544 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7547 "isa_tms320.tcc"
>
class OpMPYF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7552 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7556 "isa_tms320.tcc"
>
{
public:
	OpMPYF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7566 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7570 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7573 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7577 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7580 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7588 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7591 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7595 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7598 "isa_tms320.tcc"
>
class OpMPYF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7603 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7607 "isa_tms320.tcc"
>
{
public:
	OpMPYF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7619 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7623 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7626 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7630 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7633 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7641 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7651 "isa_tms320.tcc"
>
class OpMPYF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7656 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7660 "isa_tms320.tcc"
>
{
public:
	OpMPYF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7670 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7674 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7677 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7681 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7684 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7692 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7695 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7699 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7702 "isa_tms320.tcc"
>
class OpMPYI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7707 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7711 "isa_tms320.tcc"
>
{
public:
	OpMPYI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7721 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7725 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7728 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7732 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7735 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7743 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7746 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7750 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7753 "isa_tms320.tcc"
>
class OpMPYI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7758 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7762 "isa_tms320.tcc"
>
{
public:
	OpMPYI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7772 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7776 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7779 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7783 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7786 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7794 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7797 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7801 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7804 "isa_tms320.tcc"
>
class OpMPYI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7809 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7813 "isa_tms320.tcc"
>
{
public:
	OpMPYI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7825 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7829 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7832 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7836 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7839 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7854 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7857 "isa_tms320.tcc"
>
class OpMPYI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7862 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7866 "isa_tms320.tcc"
>
{
public:
	OpMPYI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7876 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7880 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7883 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7887 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7890 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7898 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7901 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7905 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7908 "isa_tms320.tcc"
>
class OpNEGB_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7913 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7917 "isa_tms320.tcc"
>
{
public:
	OpNEGB_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7927 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7931 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7934 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7938 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7941 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7949 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7956 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7959 "isa_tms320.tcc"
>
class OpNEGB_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7968 "isa_tms320.tcc"
>
{
public:
	OpNEGB_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7978 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7982 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7985 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7989 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7992 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8010 "isa_tms320.tcc"
>
class OpNEGB_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8019 "isa_tms320.tcc"
>
{
public:
	OpNEGB_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8031 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8035 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8038 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8042 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8045 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8053 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8060 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8063 "isa_tms320.tcc"
>
class OpNEGB_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8068 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8072 "isa_tms320.tcc"
>
{
public:
	OpNEGB_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8082 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8086 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8089 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8093 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8096 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8104 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8107 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8111 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8114 "isa_tms320.tcc"
>
class OpNEGF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8119 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8123 "isa_tms320.tcc"
>
{
public:
	OpNEGF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8133 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8137 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8140 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8144 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8147 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8155 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8158 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8162 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8165 "isa_tms320.tcc"
>
class OpNEGF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8170 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8174 "isa_tms320.tcc"
>
{
public:
	OpNEGF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8184 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8188 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8191 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8195 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8198 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8206 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8209 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8213 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8216 "isa_tms320.tcc"
>
class OpNEGF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8221 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8225 "isa_tms320.tcc"
>
{
public:
	OpNEGF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8237 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8241 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8244 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8248 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8251 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8259 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8262 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8266 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8269 "isa_tms320.tcc"
>
class OpNEGF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8274 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8278 "isa_tms320.tcc"
>
{
public:
	OpNEGF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8288 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8292 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8295 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8299 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8302 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8310 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8313 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8317 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8320 "isa_tms320.tcc"
>
class OpNEGI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8325 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8329 "isa_tms320.tcc"
>
{
public:
	OpNEGI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8339 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8343 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8346 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8350 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8353 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8361 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8364 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8371 "isa_tms320.tcc"
>
class OpNEGI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8380 "isa_tms320.tcc"
>
{
public:
	OpNEGI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8390 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8394 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8397 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8401 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8404 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8412 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8415 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8419 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8422 "isa_tms320.tcc"
>
class OpNEGI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8427 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8431 "isa_tms320.tcc"
>
{
public:
	OpNEGI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8443 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8447 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8450 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8454 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8457 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8465 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8468 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8472 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8475 "isa_tms320.tcc"
>
class OpNEGI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8480 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8484 "isa_tms320.tcc"
>
{
public:
	OpNEGI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8494 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8498 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8501 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8505 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8508 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8516 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8519 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8523 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8526 "isa_tms320.tcc"
>
class OpNORM_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8531 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8535 "isa_tms320.tcc"
>
{
public:
	OpNORM_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8545 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8549 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8552 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8556 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8559 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8567 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8570 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8574 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8577 "isa_tms320.tcc"
>
class OpNORM_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8582 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8586 "isa_tms320.tcc"
>
{
public:
	OpNORM_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8596 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8600 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8603 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8607 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8610 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8618 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8621 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8625 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8628 "isa_tms320.tcc"
>
class OpNORM_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8633 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8637 "isa_tms320.tcc"
>
{
public:
	OpNORM_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8649 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8653 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8656 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8660 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8663 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8671 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8674 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8678 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8681 "isa_tms320.tcc"
>
class OpNORM_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8686 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8690 "isa_tms320.tcc"
>
{
public:
	OpNORM_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8700 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8704 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8707 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8711 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8714 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8725 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8732 "isa_tms320.tcc"
>
class OpNOT_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8737 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8741 "isa_tms320.tcc"
>
{
public:
	OpNOT_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8751 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8755 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8758 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8762 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8765 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8773 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8783 "isa_tms320.tcc"
>
class OpNOT_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8788 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8792 "isa_tms320.tcc"
>
{
public:
	OpNOT_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8802 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8806 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8809 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8813 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8816 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8824 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8827 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8831 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8834 "isa_tms320.tcc"
>
class OpNOT_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8839 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8843 "isa_tms320.tcc"
>
{
public:
	OpNOT_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8855 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8859 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8862 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8866 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8869 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8877 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8880 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8884 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8887 "isa_tms320.tcc"
>
class OpNOT_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8896 "isa_tms320.tcc"
>
{
public:
	OpNOT_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8906 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8910 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8913 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8917 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8920 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8931 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8935 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8938 "isa_tms320.tcc"
>
class OpOR_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8947 "isa_tms320.tcc"
>
{
public:
	OpOR_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8957 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8961 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8964 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8968 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8971 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8979 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8982 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8986 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8989 "isa_tms320.tcc"
>
class OpOR_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8994 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8998 "isa_tms320.tcc"
>
{
public:
	OpOR_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9008 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9012 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9015 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9019 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9022 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9030 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9033 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9037 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9040 "isa_tms320.tcc"
>
class OpOR_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9045 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9049 "isa_tms320.tcc"
>
{
public:
	OpOR_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9061 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9065 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9068 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9072 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9075 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9083 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9090 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9093 "isa_tms320.tcc"
>
class OpOR_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9098 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9102 "isa_tms320.tcc"
>
{
public:
	OpOR_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9112 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9116 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9119 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9123 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9126 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9134 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9137 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9141 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9144 "isa_tms320.tcc"
>
class OpRND_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9149 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9153 "isa_tms320.tcc"
>
{
public:
	OpRND_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9163 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9167 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9170 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9174 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9177 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9185 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9188 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9192 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9195 "isa_tms320.tcc"
>
class OpRND_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9200 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9204 "isa_tms320.tcc"
>
{
public:
	OpRND_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9214 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9218 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9221 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9225 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9228 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9236 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9239 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9243 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9246 "isa_tms320.tcc"
>
class OpRND_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9251 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9255 "isa_tms320.tcc"
>
{
public:
	OpRND_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9267 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9271 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9274 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9278 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9281 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9289 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9292 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9296 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9299 "isa_tms320.tcc"
>
class OpRND_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9304 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9308 "isa_tms320.tcc"
>
{
public:
	OpRND_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9318 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9322 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9325 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9329 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9332 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9340 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9343 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9347 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9350 "isa_tms320.tcc"
>
class OpROL : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9355 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9359 "isa_tms320.tcc"
>
{
public:
	OpROL(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9368 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9372 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9375 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9379 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9382 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9390 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9393 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9397 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9400 "isa_tms320.tcc"
>
class OpROLC : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9405 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9409 "isa_tms320.tcc"
>
{
public:
	OpROLC(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9418 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9422 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9425 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9429 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9432 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9450 "isa_tms320.tcc"
>
class OpROR : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9455 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9459 "isa_tms320.tcc"
>
{
public:
	OpROR(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9468 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9472 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9475 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9479 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9482 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9562 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9566 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9569 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9577 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9580 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9584 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9587 "isa_tms320.tcc"
>
class OpRORC : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9596 "isa_tms320.tcc"
>
{
public:
	OpRORC(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9605 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9609 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9612 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9616 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9619 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9699 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9703 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9706 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9714 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9717 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9721 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9724 "isa_tms320.tcc"
>
class OpSUBB_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9729 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9733 "isa_tms320.tcc"
>
{
public:
	OpSUBB_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9743 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9747 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9750 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9754 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9757 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9837 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9841 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9844 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9852 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9855 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9859 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9862 "isa_tms320.tcc"
>
class OpSUBB_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9867 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9871 "isa_tms320.tcc"
>
{
public:
	OpSUBB_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9881 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9885 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9888 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9892 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9895 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9975 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9979 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9982 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9990 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9993 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9997 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10000 "isa_tms320.tcc"
>
class OpSUBB_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10005 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10009 "isa_tms320.tcc"
>
{
public:
	OpSUBB_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10021 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10025 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10028 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10032 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10035 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10115 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10119 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10122 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10130 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10140 "isa_tms320.tcc"
>
class OpSUBB_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10145 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10149 "isa_tms320.tcc"
>
{
public:
	OpSUBB_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10159 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10163 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10166 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10170 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10173 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10253 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10257 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10260 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10268 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10271 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10275 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10278 "isa_tms320.tcc"
>
class OpSUBC_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10283 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10287 "isa_tms320.tcc"
>
{
public:
	OpSUBC_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10297 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10301 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10304 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10308 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10311 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10319 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10322 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10326 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10329 "isa_tms320.tcc"
>
class OpSUBC_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10334 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10338 "isa_tms320.tcc"
>
{
public:
	OpSUBC_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10348 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10352 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10355 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10359 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10362 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10370 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10373 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10377 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10380 "isa_tms320.tcc"
>
class OpSUBC_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10385 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10389 "isa_tms320.tcc"
>
{
public:
	OpSUBC_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10401 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10405 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10408 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10412 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10415 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10423 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10426 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10430 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10433 "isa_tms320.tcc"
>
class OpSUBC_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10438 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10442 "isa_tms320.tcc"
>
{
public:
	OpSUBC_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10452 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10456 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10459 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10463 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10466 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10474 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10477 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10481 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10484 "isa_tms320.tcc"
>
class OpSUBF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10489 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10493 "isa_tms320.tcc"
>
{
public:
	OpSUBF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10503 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10507 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10510 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10514 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10517 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10525 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10528 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10532 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10535 "isa_tms320.tcc"
>
class OpSUBF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10540 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10544 "isa_tms320.tcc"
>
{
public:
	OpSUBF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10554 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10558 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10561 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10565 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10568 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10576 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10579 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10583 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10586 "isa_tms320.tcc"
>
class OpSUBF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10591 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10595 "isa_tms320.tcc"
>
{
public:
	OpSUBF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10607 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10611 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10614 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10618 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10621 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10629 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10632 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10636 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10639 "isa_tms320.tcc"
>
class OpSUBF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10648 "isa_tms320.tcc"
>
{
public:
	OpSUBF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10658 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10662 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10665 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10669 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10672 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10680 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10683 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10687 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10690 "isa_tms320.tcc"
>
class OpSUBI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10695 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10699 "isa_tms320.tcc"
>
{
public:
	OpSUBI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10709 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10713 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10716 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10720 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10723 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10803 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10807 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10810 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10818 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10821 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10825 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10828 "isa_tms320.tcc"
>
class OpSUBI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10833 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10837 "isa_tms320.tcc"
>
{
public:
	OpSUBI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10847 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10851 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10854 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10858 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10861 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10941 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10945 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10948 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10956 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10959 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10963 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10966 "isa_tms320.tcc"
>
class OpSUBI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10971 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10975 "isa_tms320.tcc"
>
{
public:
	OpSUBI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10987 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10991 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10994 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10998 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11001 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11081 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11085 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11088 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11096 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11099 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11106 "isa_tms320.tcc"
>
class OpSUBI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11111 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11115 "isa_tms320.tcc"
>
{
public:
	OpSUBI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11125 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11129 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11132 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11136 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11139 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11219 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11223 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11226 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11244 "isa_tms320.tcc"
>
class OpSUBRB_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11253 "isa_tms320.tcc"
>
{
public:
	OpSUBRB_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11263 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11267 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11270 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11274 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11277 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11357 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11361 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11364 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11372 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11375 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11379 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11382 "isa_tms320.tcc"
>
class OpSUBRB_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11391 "isa_tms320.tcc"
>
{
public:
	OpSUBRB_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11401 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11405 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11408 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11412 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11415 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11495 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11499 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11502 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11510 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11513 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11517 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11520 "isa_tms320.tcc"
>
class OpSUBRB_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11529 "isa_tms320.tcc"
>
{
public:
	OpSUBRB_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11541 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11545 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11548 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11552 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11555 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11635 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11639 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11642 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11653 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11657 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11660 "isa_tms320.tcc"
>
class OpSUBRB_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11665 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11669 "isa_tms320.tcc"
>
{
public:
	OpSUBRB_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11679 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11683 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11686 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11690 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11693 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11773 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11777 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11780 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11798 "isa_tms320.tcc"
>
class OpSUBRF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11807 "isa_tms320.tcc"
>
{
public:
	OpSUBRF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11817 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11821 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11824 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11828 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11831 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11839 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11842 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11846 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11849 "isa_tms320.tcc"
>
class OpSUBRF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11854 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11858 "isa_tms320.tcc"
>
{
public:
	OpSUBRF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11868 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11872 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11875 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11879 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11882 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11890 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11893 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11897 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11900 "isa_tms320.tcc"
>
class OpSUBRF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11905 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11909 "isa_tms320.tcc"
>
{
public:
	OpSUBRF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11921 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11925 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11928 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11932 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11935 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11943 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11946 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11950 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11953 "isa_tms320.tcc"
>
class OpSUBRF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11958 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11962 "isa_tms320.tcc"
>
{
public:
	OpSUBRF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11972 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11976 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11979 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11983 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11986 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11994 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11997 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12001 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12004 "isa_tms320.tcc"
>
class OpSUBRI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12009 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12013 "isa_tms320.tcc"
>
{
public:
	OpSUBRI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12023 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12027 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12030 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12034 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12037 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12117 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12121 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12124 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12132 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12135 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12139 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12142 "isa_tms320.tcc"
>
class OpSUBRI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12147 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12151 "isa_tms320.tcc"
>
{
public:
	OpSUBRI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12161 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12165 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12168 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12172 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12175 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12255 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12259 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12262 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12270 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12273 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12277 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12280 "isa_tms320.tcc"
>
class OpSUBRI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12285 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12289 "isa_tms320.tcc"
>
{
public:
	OpSUBRI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12301 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12305 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12308 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12312 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12315 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12395 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12399 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12402 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12410 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12413 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12417 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12420 "isa_tms320.tcc"
>
class OpSUBRI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12425 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12429 "isa_tms320.tcc"
>
{
public:
	OpSUBRI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12439 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12443 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12446 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12450 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12453 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12533 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12537 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12540 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12548 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12551 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12555 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12558 "isa_tms320.tcc"
>
class OpTSTB_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12563 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12567 "isa_tms320.tcc"
>
{
public:
	OpTSTB_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12577 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12581 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12584 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12588 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12591 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12599 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12602 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12606 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12609 "isa_tms320.tcc"
>
class OpTSTB_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12618 "isa_tms320.tcc"
>
{
public:
	OpTSTB_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12628 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12632 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12635 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12639 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12642 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12653 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12657 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12660 "isa_tms320.tcc"
>
class OpTSTB_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12665 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12669 "isa_tms320.tcc"
>
{
public:
	OpTSTB_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12681 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12685 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12688 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12692 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12695 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12703 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12706 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12710 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12713 "isa_tms320.tcc"
>
class OpTSTB_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12718 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12722 "isa_tms320.tcc"
>
{
public:
	OpTSTB_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12732 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12736 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12739 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12743 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12746 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12754 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12757 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12761 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12764 "isa_tms320.tcc"
>
class OpXOR_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12769 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12773 "isa_tms320.tcc"
>
{
public:
	OpXOR_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12783 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12787 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12790 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12794 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12797 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12805 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12812 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12815 "isa_tms320.tcc"
>
class OpXOR_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12820 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12824 "isa_tms320.tcc"
>
{
public:
	OpXOR_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12834 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12838 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12841 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12845 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12848 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12856 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12859 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12863 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12866 "isa_tms320.tcc"
>
class OpXOR_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12871 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12875 "isa_tms320.tcc"
>
{
public:
	OpXOR_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12887 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12891 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12894 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12898 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12901 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12909 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12912 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12916 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12919 "isa_tms320.tcc"
>
class OpXOR_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12924 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12928 "isa_tms320.tcc"
>
{
public:
	OpXOR_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12938 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12942 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12945 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12949 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12952 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12960 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12963 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12967 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12970 "isa_tms320.tcc"
>
class OpADDC3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12975 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12979 "isa_tms320.tcc"
>
{
public:
	OpADDC3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12990 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12994 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12997 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13001 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13004 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13084 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13088 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13091 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13099 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13106 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13109 "isa_tms320.tcc"
>
class OpADDC3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13118 "isa_tms320.tcc"
>
{
public:
	OpADDC3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13130 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13134 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13137 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13141 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13144 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13152 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13155 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13159 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13162 "isa_tms320.tcc"
>
class OpADDC3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13167 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13171 "isa_tms320.tcc"
>
{
public:
	OpADDC3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13183 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13187 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13190 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13194 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13197 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13208 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13212 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13215 "isa_tms320.tcc"
>
class OpADDC3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13220 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13224 "isa_tms320.tcc"
>
{
public:
	OpADDC3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13237 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13241 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13244 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13248 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13251 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13259 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13262 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13266 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13269 "isa_tms320.tcc"
>
class OpADDF3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13274 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13278 "isa_tms320.tcc"
>
{
public:
	OpADDF3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13289 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13293 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13296 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13300 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13303 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13311 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13314 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13318 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13321 "isa_tms320.tcc"
>
class OpADDF3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13326 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13330 "isa_tms320.tcc"
>
{
public:
	OpADDF3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13342 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13346 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13349 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13353 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13356 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13364 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13367 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13371 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13374 "isa_tms320.tcc"
>
class OpADDF3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13383 "isa_tms320.tcc"
>
{
public:
	OpADDF3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13395 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13399 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13402 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13406 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13409 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13417 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13420 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13424 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13427 "isa_tms320.tcc"
>
class OpADDF3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13432 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13436 "isa_tms320.tcc"
>
{
public:
	OpADDF3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13449 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13453 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13456 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13460 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13463 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13471 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13474 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13478 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13481 "isa_tms320.tcc"
>
class OpADDI3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13486 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13490 "isa_tms320.tcc"
>
{
public:
	OpADDI3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13501 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13505 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13508 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13512 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13515 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13523 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13526 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13530 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13533 "isa_tms320.tcc"
>
class OpADDI3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13538 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13542 "isa_tms320.tcc"
>
{
public:
	OpADDI3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13554 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13558 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13561 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13565 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13568 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13576 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13579 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13583 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13586 "isa_tms320.tcc"
>
class OpADDI3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13591 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13595 "isa_tms320.tcc"
>
{
public:
	OpADDI3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13607 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13611 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13614 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13618 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13621 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13629 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13632 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13636 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13639 "isa_tms320.tcc"
>
class OpADDI3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13648 "isa_tms320.tcc"
>
{
public:
	OpADDI3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13661 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13665 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13668 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13672 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13675 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13683 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13686 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13690 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13693 "isa_tms320.tcc"
>
class OpAND3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13698 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13702 "isa_tms320.tcc"
>
{
public:
	OpAND3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13713 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13717 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13720 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13724 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13727 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13807 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13811 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13814 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13822 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13825 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13832 "isa_tms320.tcc"
>
class OpAND3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13837 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13841 "isa_tms320.tcc"
>
{
public:
	OpAND3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13853 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13857 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13860 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13864 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13867 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13875 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13878 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13882 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13885 "isa_tms320.tcc"
>
class OpAND3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13890 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13894 "isa_tms320.tcc"
>
{
public:
	OpAND3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13906 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13910 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13913 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13917 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13920 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13931 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13935 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13938 "isa_tms320.tcc"
>
class OpAND3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13947 "isa_tms320.tcc"
>
{
public:
	OpAND3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13960 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13964 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13967 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13971 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13974 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13982 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13985 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13989 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13992 "isa_tms320.tcc"
>
class OpANDN3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13997 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14001 "isa_tms320.tcc"
>
{
public:
	OpANDN3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14012 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14016 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14019 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14023 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14026 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14037 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14041 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14044 "isa_tms320.tcc"
>
class OpANDN3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14049 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14053 "isa_tms320.tcc"
>
{
public:
	OpANDN3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14065 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14069 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14072 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14076 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14079 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14094 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14097 "isa_tms320.tcc"
>
class OpANDN3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14106 "isa_tms320.tcc"
>
{
public:
	OpANDN3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14118 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14122 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14125 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14129 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14132 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14140 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14143 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14150 "isa_tms320.tcc"
>
class OpANDN3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14155 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14159 "isa_tms320.tcc"
>
{
public:
	OpANDN3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14172 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14176 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14179 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14183 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14186 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14194 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14201 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14204 "isa_tms320.tcc"
>
class OpASH3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14209 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14213 "isa_tms320.tcc"
>
{
public:
	OpASH3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14224 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14228 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14231 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14235 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14238 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14246 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14253 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14256 "isa_tms320.tcc"
>
class OpASH3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14261 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14265 "isa_tms320.tcc"
>
{
public:
	OpASH3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14277 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14281 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14284 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14288 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14291 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14299 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14302 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14306 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14309 "isa_tms320.tcc"
>
class OpASH3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14314 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14318 "isa_tms320.tcc"
>
{
public:
	OpASH3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14330 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14334 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14337 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14341 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14344 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14352 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14355 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14359 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14362 "isa_tms320.tcc"
>
class OpASH3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14367 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14371 "isa_tms320.tcc"
>
{
public:
	OpASH3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14384 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14388 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14391 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14395 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14398 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14406 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14409 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14413 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14416 "isa_tms320.tcc"
>
class OpCMPF3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14421 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14425 "isa_tms320.tcc"
>
{
public:
	OpCMPF3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14435 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14439 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14442 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14446 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14449 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14457 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14460 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14464 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14467 "isa_tms320.tcc"
>
class OpCMPF3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14476 "isa_tms320.tcc"
>
{
public:
	OpCMPF3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14487 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14491 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14494 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14498 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14501 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14509 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14512 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14516 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14519 "isa_tms320.tcc"
>
class OpCMPF3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14524 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14528 "isa_tms320.tcc"
>
{
public:
	OpCMPF3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14539 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14543 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14546 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14550 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14553 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14561 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14564 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14568 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14571 "isa_tms320.tcc"
>
class OpCMPF3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14580 "isa_tms320.tcc"
>
{
public:
	OpCMPF3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14592 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14596 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14599 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14603 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14606 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14614 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14617 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14621 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14624 "isa_tms320.tcc"
>
class OpCMPI3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14629 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14633 "isa_tms320.tcc"
>
{
public:
	OpCMPI3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14643 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14647 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14650 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14654 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14657 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14665 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14668 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14672 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14675 "isa_tms320.tcc"
>
class OpCMPI3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14680 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14684 "isa_tms320.tcc"
>
{
public:
	OpCMPI3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14695 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14699 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14702 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14706 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14709 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14717 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14720 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14724 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14727 "isa_tms320.tcc"
>
class OpCMPI3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14736 "isa_tms320.tcc"
>
{
public:
	OpCMPI3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14747 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14751 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14754 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14758 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14761 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14769 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14772 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14776 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14779 "isa_tms320.tcc"
>
class OpCMPI3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14784 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14788 "isa_tms320.tcc"
>
{
public:
	OpCMPI3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14800 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14804 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14807 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14811 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14814 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14822 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14825 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14832 "isa_tms320.tcc"
>
class OpLSH3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14837 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14841 "isa_tms320.tcc"
>
{
public:
	OpLSH3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14852 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14856 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14859 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14863 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14866 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14874 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14877 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14881 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14884 "isa_tms320.tcc"
>
class OpLSH3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14889 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14893 "isa_tms320.tcc"
>
{
public:
	OpLSH3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14905 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14909 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14912 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14916 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14919 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14927 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14934 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14937 "isa_tms320.tcc"
>
class OpLSH3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14946 "isa_tms320.tcc"
>
{
public:
	OpLSH3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14958 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14962 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14965 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14969 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14972 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14980 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14990 "isa_tms320.tcc"
>
class OpLSH3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14999 "isa_tms320.tcc"
>
{
public:
	OpLSH3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15012 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15016 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15019 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15023 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15026 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15037 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15041 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15044 "isa_tms320.tcc"
>
class OpMPYF3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15049 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15053 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15064 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15068 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15071 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15075 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15078 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15086 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15089 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15093 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15096 "isa_tms320.tcc"
>
class OpMPYF3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15101 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15105 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15117 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15121 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15124 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15128 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15131 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15139 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15142 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15146 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15149 "isa_tms320.tcc"
>
class OpMPYF3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15154 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15158 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15170 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15174 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15177 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15181 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15184 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15192 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15195 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15199 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15202 "isa_tms320.tcc"
>
class OpMPYF3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15207 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15211 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15224 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15228 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15231 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15235 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15238 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15246 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15253 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15256 "isa_tms320.tcc"
>
class OpMPYI3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15261 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15265 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15276 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15280 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15283 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15287 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15290 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15298 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15301 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15305 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15308 "isa_tms320.tcc"
>
class OpMPYI3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15313 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15317 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15329 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15333 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15336 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15340 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15343 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15354 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15358 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15361 "isa_tms320.tcc"
>
class OpMPYI3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15366 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15370 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15382 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15386 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15389 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15393 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15396 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15404 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15407 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15411 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15414 "isa_tms320.tcc"
>
class OpMPYI3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15419 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15423 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15436 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15440 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15443 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15447 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15450 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15458 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15461 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15465 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15468 "isa_tms320.tcc"
>
class OpOR3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15473 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15477 "isa_tms320.tcc"
>
{
public:
	OpOR3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15488 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15492 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15495 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15499 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15502 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15510 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15513 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15517 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15520 "isa_tms320.tcc"
>
class OpOR3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15529 "isa_tms320.tcc"
>
{
public:
	OpOR3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15541 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15545 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15548 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15552 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15555 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15563 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15566 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15570 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15573 "isa_tms320.tcc"
>
class OpOR3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15578 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15582 "isa_tms320.tcc"
>
{
public:
	OpOR3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15594 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15598 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15601 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15605 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15608 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15619 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15626 "isa_tms320.tcc"
>
class OpOR3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15631 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15635 "isa_tms320.tcc"
>
{
public:
	OpOR3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15648 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15652 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15655 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15659 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15662 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15670 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15673 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15677 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15680 "isa_tms320.tcc"
>
class OpSUBB3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15685 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15689 "isa_tms320.tcc"
>
{
public:
	OpSUBB3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15700 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15704 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15707 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15711 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15714 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15725 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15732 "isa_tms320.tcc"
>
class OpSUBB3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15737 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15741 "isa_tms320.tcc"
>
{
public:
	OpSUBB3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15753 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15757 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15760 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15764 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15767 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15775 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15778 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15785 "isa_tms320.tcc"
>
class OpSUBB3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15790 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15794 "isa_tms320.tcc"
>
{
public:
	OpSUBB3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15806 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15810 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15813 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15817 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15820 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15828 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15831 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15835 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15838 "isa_tms320.tcc"
>
class OpSUBB3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15847 "isa_tms320.tcc"
>
{
public:
	OpSUBB3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15860 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15864 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15867 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15871 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15874 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15882 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15885 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15892 "isa_tms320.tcc"
>
class OpSUBF3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15897 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15901 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15912 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15916 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15919 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15923 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15926 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15934 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15937 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15941 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15944 "isa_tms320.tcc"
>
class OpSUBF3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15949 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15953 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15965 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15969 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15972 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15976 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15979 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15990 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15994 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15997 "isa_tms320.tcc"
>
class OpSUBF3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16002 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16006 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16018 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16022 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16025 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16029 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16032 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16040 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16043 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16047 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16050 "isa_tms320.tcc"
>
class OpSUBF3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16055 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16059 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16072 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16076 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16079 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16083 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16086 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16094 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16097 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16104 "isa_tms320.tcc"
>
class OpSUBI3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16109 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16113 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16124 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16128 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16131 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16135 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16138 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16146 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16149 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16153 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16156 "isa_tms320.tcc"
>
class OpSUBI3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16161 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16165 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16177 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16181 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16184 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16188 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16191 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16199 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16202 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16206 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16209 "isa_tms320.tcc"
>
class OpSUBI3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16214 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16218 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16230 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16234 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16237 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16241 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16244 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16252 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16255 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16259 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16262 "isa_tms320.tcc"
>
class OpSUBI3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16271 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16284 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16288 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16291 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16295 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16298 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16306 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16309 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16313 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16316 "isa_tms320.tcc"
>
class OpTSTB3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16321 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16325 "isa_tms320.tcc"
>
{
public:
	OpTSTB3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16335 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16339 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16342 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16346 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16349 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16357 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16364 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16367 "isa_tms320.tcc"
>
class OpTSTB3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16372 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16376 "isa_tms320.tcc"
>
{
public:
	OpTSTB3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16387 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16391 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16394 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16398 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16401 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16409 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16412 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16416 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16419 "isa_tms320.tcc"
>
class OpTSTB3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16424 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16428 "isa_tms320.tcc"
>
{
public:
	OpTSTB3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16439 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16443 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16446 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16450 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16453 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16461 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16464 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16468 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16471 "isa_tms320.tcc"
>
class OpTSTB3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16476 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16480 "isa_tms320.tcc"
>
{
public:
	OpTSTB3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16492 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16496 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16499 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16503 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16506 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16514 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16517 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16521 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16524 "isa_tms320.tcc"
>
class OpXOR3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16529 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16533 "isa_tms320.tcc"
>
{
public:
	OpXOR3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16544 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16548 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16551 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16555 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16558 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16566 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16576 "isa_tms320.tcc"
>
class OpXOR3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16581 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16585 "isa_tms320.tcc"
>
{
public:
	OpXOR3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16597 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16601 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16604 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16608 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16611 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16619 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16622 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16626 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16629 "isa_tms320.tcc"
>
class OpXOR3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16634 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16638 "isa_tms320.tcc"
>
{
public:
	OpXOR3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16650 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16654 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16657 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16661 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16664 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16672 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16675 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16679 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16682 "isa_tms320.tcc"
>
class OpXOR3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16687 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16691 "isa_tms320.tcc"
>
{
public:
	OpXOR3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16704 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16708 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16711 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16715 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16718 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16726 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16729 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16733 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16736 "isa_tms320.tcc"
>
class OpBcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16741 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16745 "isa_tms320.tcc"
>
{
public:
	OpBcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t reg;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16755 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16759 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16762 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16766 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16769 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16849 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16853 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16856 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16864 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16867 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16871 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16874 "isa_tms320.tcc"
>
class OpBcond_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16879 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16883 "isa_tms320.tcc"
>
{
public:
	OpBcond_disp(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16893 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16897 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16900 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16904 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16907 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16987 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16991 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16994 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17002 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17005 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17009 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17012 "isa_tms320.tcc"
>
class OpBcondD_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17017 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17021 "isa_tms320.tcc"
>
{
public:
	OpBcondD_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t reg;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17031 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17035 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17038 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17042 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17045 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17125 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17129 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17132 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17140 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17143 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17150 "isa_tms320.tcc"
>
class OpBcondD_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17155 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17159 "isa_tms320.tcc"
>
{
public:
	OpBcondD_disp(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17169 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17173 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17176 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17180 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17183 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17263 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17267 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17270 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17278 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17281 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17285 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17288 "isa_tms320.tcc"
>
class OpBR : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17293 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17297 "isa_tms320.tcc"
>
{
public:
	OpBR(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17306 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17310 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17313 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17317 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17320 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17400 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17404 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17407 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17422 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17425 "isa_tms320.tcc"
>
class OpBRD : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17434 "isa_tms320.tcc"
>
{
public:
	OpBRD(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17443 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17447 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17450 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17454 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17457 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17537 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17541 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17544 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17552 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17555 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17559 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17562 "isa_tms320.tcc"
>
class OpCALL : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17567 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17571 "isa_tms320.tcc"
>
{
public:
	OpCALL(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17580 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17584 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17587 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17591 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17594 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17674 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17678 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17681 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17689 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17692 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17696 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17699 "isa_tms320.tcc"
>
class OpCALLcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17708 "isa_tms320.tcc"
>
{
public:
	OpCALLcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t reg;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17718 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17722 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17725 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17729 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17732 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17812 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17816 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17819 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17827 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17830 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17834 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17837 "isa_tms320.tcc"
>
class OpCALLcond_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17842 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17846 "isa_tms320.tcc"
>
{
public:
	OpCALLcond_disp(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17856 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17860 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17863 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17867 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17870 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17950 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17954 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17957 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17965 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17968 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17972 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17975 "isa_tms320.tcc"
>
class OpDBcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17984 "isa_tms320.tcc"
>
{
public:
	OpDBcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar;
	uint32_t cond;
	uint32_t reg;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17995 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17999 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18002 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18006 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18009 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18089 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18093 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18096 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18104 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18107 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18111 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18114 "isa_tms320.tcc"
>
class OpDBcond_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18119 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18123 "isa_tms320.tcc"
>
{
public:
	OpDBcond_disp(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar;
	uint32_t cond;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18134 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18138 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18141 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18145 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18148 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18228 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18232 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18235 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18243 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18246 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18250 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18253 "isa_tms320.tcc"
>
class OpDBcondD_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18258 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18262 "isa_tms320.tcc"
>
{
public:
	OpDBcondD_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar;
	uint32_t cond;
	uint32_t reg;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18273 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18277 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18280 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18284 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18287 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18367 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18371 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18374 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18382 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18385 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18389 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18392 "isa_tms320.tcc"
>
class OpDBcondD_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18397 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18401 "isa_tms320.tcc"
>
{
public:
	OpDBcondD_disp(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar;
	uint32_t cond;
	int32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18412 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18416 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18419 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18423 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18426 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18506 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18510 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18513 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18521 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18524 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18528 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18531 "isa_tms320.tcc"
>
class OpIACK_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18536 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18540 "isa_tms320.tcc"
>
{
public:
	OpIACK_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18549 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18553 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18556 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18560 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18563 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18571 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18574 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18578 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18581 "isa_tms320.tcc"
>
class OpIACK_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18586 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18590 "isa_tms320.tcc"
>
{
public:
	OpIACK_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18601 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18605 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18608 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18612 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18615 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18626 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18633 "isa_tms320.tcc"
>
class OpIDLE : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18642 "isa_tms320.tcc"
>
{
public:
	OpIDLE(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18650 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18654 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18657 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18661 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18664 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18672 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18675 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18679 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18682 "isa_tms320.tcc"
>
class OpNOP_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18687 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18691 "isa_tms320.tcc"
>
{
public:
	OpNOP_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t reg;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18700 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18704 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18707 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18711 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18714 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18794 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18798 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18801 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18809 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18812 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18819 "isa_tms320.tcc"
>
class OpNOP_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18824 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18828 "isa_tms320.tcc"
>
{
public:
	OpNOP_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18839 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18843 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18846 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18850 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18853 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18933 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18937 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18940 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18948 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18951 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18955 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18958 "isa_tms320.tcc"
>
class OpRETIcond : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18963 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18967 "isa_tms320.tcc"
>
{
public:
	OpRETIcond(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18976 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18980 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18983 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18987 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18990 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19070 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19074 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19077 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19085 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19088 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19092 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19095 "isa_tms320.tcc"
>
class OpRETScond : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19100 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19104 "isa_tms320.tcc"
>
{
public:
	OpRETScond(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19113 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19117 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19120 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19124 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19127 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19207 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19211 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19214 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19222 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19225 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19229 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19232 "isa_tms320.tcc"
>
class OpRPTB : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19241 "isa_tms320.tcc"
>
{
public:
	OpRPTB(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19250 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19254 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19257 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19261 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19264 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19344 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19348 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19351 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19359 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19362 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19366 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19369 "isa_tms320.tcc"
>
class OpRPTS_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19374 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19378 "isa_tms320.tcc"
>
{
public:
	OpRPTS_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19387 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19391 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19394 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19398 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19401 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19481 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19485 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19488 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19496 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19499 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19503 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19506 "isa_tms320.tcc"
>
class OpRPTS_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19511 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19515 "isa_tms320.tcc"
>
{
public:
	OpRPTS_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19524 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19528 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19531 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19535 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19538 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19618 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19622 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19625 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19633 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19636 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19643 "isa_tms320.tcc"
>
class OpRPTS_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19648 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19652 "isa_tms320.tcc"
>
{
public:
	OpRPTS_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19663 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19667 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19670 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19674 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19677 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19757 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19761 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19764 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19772 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19775 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19779 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19782 "isa_tms320.tcc"
>
class OpRPTS_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19787 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19791 "isa_tms320.tcc"
>
{
public:
	OpRPTS_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t imm;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19800 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19804 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19807 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19811 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19814 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19894 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19898 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19901 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19909 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19912 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19916 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19919 "isa_tms320.tcc"
>
class OpSWI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19924 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19928 "isa_tms320.tcc"
>
{
public:
	OpSWI(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19936 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19940 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19943 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19947 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19950 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19958 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19961 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19965 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19968 "isa_tms320.tcc"
>
class OpTRAPcond : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19977 "isa_tms320.tcc"
>
{
public:
	OpTRAPcond(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t n;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19987 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19991 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19994 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19998 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20001 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20009 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20012 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20016 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20019 "isa_tms320.tcc"
>
class OpIDLE2 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20024 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20028 "isa_tms320.tcc"
>
{
public:
	OpIDLE2(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20036 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20040 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20043 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20047 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20050 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20058 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20061 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20065 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20068 "isa_tms320.tcc"
>
class OpLOPOWER : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20073 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20077 "isa_tms320.tcc"
>
{
public:
	OpLOPOWER(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20085 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20089 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20092 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20096 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20099 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20107 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20110 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20114 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20117 "isa_tms320.tcc"
>
class OpMAXSPEED : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20122 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20126 "isa_tms320.tcc"
>
{
public:
	OpMAXSPEED(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20134 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20138 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20141 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20145 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20148 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20156 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20159 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20163 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20166 "isa_tms320.tcc"
>
class OpLDFI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20175 "isa_tms320.tcc"
>
{
public:
	OpLDFI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20188 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20191 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20198 "isa_tms320.tcc"
>
class OpLDFI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20203 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20207 "isa_tms320.tcc"
>
{
public:
	OpLDFI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20222 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20225 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20229 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20232 "isa_tms320.tcc"
>
class OpLDII_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20241 "isa_tms320.tcc"
>
{
public:
	OpLDII_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20254 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20257 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20261 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20264 "isa_tms320.tcc"
>
class OpLDII_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20269 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20273 "isa_tms320.tcc"
>
{
public:
	OpLDII_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20288 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20295 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20298 "isa_tms320.tcc"
>
class OpSIGI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20303 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20307 "isa_tms320.tcc"
>
{
public:
	OpSIGI(CodeType code, typename CONFIG::address_t addr);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20318 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20321 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20325 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20328 "isa_tms320.tcc"
>
class OpSTFI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20337 "isa_tms320.tcc"
>
{
public:
	OpSTFI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t direct;
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20350 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20353 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20357 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20360 "isa_tms320.tcc"
>
class OpSTFI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20365 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20369 "isa_tms320.tcc"
>
{
public:
	OpSTFI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20384 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20391 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20394 "isa_tms320.tcc"
>
class OpSTII_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20399 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20403 "isa_tms320.tcc"
>
{
public:
	OpSTII_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t direct;
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20416 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20419 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20423 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20426 "isa_tms320.tcc"
>
class OpSTII_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20431 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20435 "isa_tms320.tcc"
>
{
public:
	OpSTII_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20450 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20453 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20457 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20460 "isa_tms320.tcc"
>
class OpABSF_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20469 "isa_tms320.tcc"
>
{
public:
	OpABSF_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20483 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20487 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20490 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20494 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20497 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20505 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20508 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20512 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20515 "isa_tms320.tcc"
>
class OpABSF_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20520 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20524 "isa_tms320.tcc"
>
{
public:
	OpABSF_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20537 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20541 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20544 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20548 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20551 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20559 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20562 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20566 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20569 "isa_tms320.tcc"
>
class OpABSI_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20574 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20578 "isa_tms320.tcc"
>
{
public:
	OpABSI_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20592 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20596 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20599 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20603 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20606 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20614 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20617 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20621 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20624 "isa_tms320.tcc"
>
class OpABSI_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20629 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20633 "isa_tms320.tcc"
>
{
public:
	OpABSI_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20646 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20650 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20653 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20657 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20660 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20668 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20671 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20675 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20678 "isa_tms320.tcc"
>
class OpADDF3_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20683 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20687 "isa_tms320.tcc"
>
{
public:
	OpADDF3_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20702 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20706 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20709 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20713 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20716 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20724 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20727 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20731 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20734 "isa_tms320.tcc"
>
class OpADDF3_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20739 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20743 "isa_tms320.tcc"
>
{
public:
	OpADDF3_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20757 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20761 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20764 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20768 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20771 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20779 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20782 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20786 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20789 "isa_tms320.tcc"
>
class OpADDI3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20794 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20798 "isa_tms320.tcc"
>
{
public:
	OpADDI3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20813 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20817 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20820 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20824 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20827 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20835 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20838 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20842 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20845 "isa_tms320.tcc"
>
class OpADDI3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20854 "isa_tms320.tcc"
>
{
public:
	OpADDI3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20868 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20872 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20875 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20879 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20882 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20890 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20893 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20897 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20900 "isa_tms320.tcc"
>
class OpAND3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20905 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20909 "isa_tms320.tcc"
>
{
public:
	OpAND3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20924 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20928 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20931 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20935 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20938 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20946 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20949 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20953 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20956 "isa_tms320.tcc"
>
class OpAND3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20961 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20965 "isa_tms320.tcc"
>
{
public:
	OpAND3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20979 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20983 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20986 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20990 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20993 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21001 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21004 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21008 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21011 "isa_tms320.tcc"
>
class OpASH3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21016 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21020 "isa_tms320.tcc"
>
{
public:
	OpASH3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t count;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21035 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21039 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21042 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21046 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21049 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21057 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21060 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21064 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21067 "isa_tms320.tcc"
>
class OpASH3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21072 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21076 "isa_tms320.tcc"
>
{
public:
	OpASH3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t count;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21090 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21094 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21097 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21101 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21104 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21112 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21115 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21119 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21122 "isa_tms320.tcc"
>
class OpFIX_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21127 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21131 "isa_tms320.tcc"
>
{
public:
	OpFIX_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21145 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21149 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21152 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21156 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21159 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21167 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21170 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21174 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21177 "isa_tms320.tcc"
>
class OpFIX_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21182 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21186 "isa_tms320.tcc"
>
{
public:
	OpFIX_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21199 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21203 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21206 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21210 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21213 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21221 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21228 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21231 "isa_tms320.tcc"
>
class OpFLOAT_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21236 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21240 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21254 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21258 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21261 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21265 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21268 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21283 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21286 "isa_tms320.tcc"
>
class OpFLOAT_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21295 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21308 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21312 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21315 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21319 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21322 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21330 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21337 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21340 "isa_tms320.tcc"
>
class OpLDF_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21349 "isa_tms320.tcc"
>
{
public:
	OpLDF_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21363 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21367 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21370 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21374 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21377 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21385 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21388 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21392 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21395 "isa_tms320.tcc"
>
class OpLDF_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21400 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21404 "isa_tms320.tcc"
>
{
public:
	OpLDF_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21417 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21421 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21424 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21428 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21431 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21439 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21446 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21449 "isa_tms320.tcc"
>
class OpLDI_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21458 "isa_tms320.tcc"
>
{
public:
	OpLDI_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21472 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21476 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21479 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21483 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21486 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21494 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21497 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21501 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21504 "isa_tms320.tcc"
>
class OpLDI_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21509 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21513 "isa_tms320.tcc"
>
{
public:
	OpLDI_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21526 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21530 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21533 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21537 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21540 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21548 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21551 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21555 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21558 "isa_tms320.tcc"
>
class OpLSH3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21563 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21567 "isa_tms320.tcc"
>
{
public:
	OpLSH3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t count;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21582 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21586 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21589 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21593 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21596 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21604 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21607 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21611 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21614 "isa_tms320.tcc"
>
class OpLSH3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21619 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21623 "isa_tms320.tcc"
>
{
public:
	OpLSH3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t count;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21637 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21641 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21644 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21648 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21651 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21659 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21662 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21666 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21669 "isa_tms320.tcc"
>
class OpMPYF3_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21674 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21678 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21693 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21697 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21700 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21704 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21707 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21715 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21718 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21725 "isa_tms320.tcc"
>
class OpMPYF3_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21734 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21748 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21752 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21755 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21759 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21762 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21770 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21773 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21777 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21780 "isa_tms320.tcc"
>
class OpMPYI3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21789 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21804 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21808 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21811 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21815 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21818 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21826 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21829 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21833 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21836 "isa_tms320.tcc"
>
class OpMPYI3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21841 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21845 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21859 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21863 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21866 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21870 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21873 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21881 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21884 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21888 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21891 "isa_tms320.tcc"
>
class OpNEGF_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21896 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21900 "isa_tms320.tcc"
>
{
public:
	OpNEGF_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21914 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21918 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21921 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21925 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21928 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21936 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21939 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21943 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21946 "isa_tms320.tcc"
>
class OpNEGF_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21951 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21955 "isa_tms320.tcc"
>
{
public:
	OpNEGF_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21968 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21972 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21975 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21979 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21982 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21990 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21993 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21997 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22000 "isa_tms320.tcc"
>
class OpNEGI_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22005 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22009 "isa_tms320.tcc"
>
{
public:
	OpNEGI_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22023 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22027 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22030 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22034 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22037 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22045 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22048 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22052 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22055 "isa_tms320.tcc"
>
class OpNEGI_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22060 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22064 "isa_tms320.tcc"
>
{
public:
	OpNEGI_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22077 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22081 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22084 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22088 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22091 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22099 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22106 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22109 "isa_tms320.tcc"
>
class OpNOT_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22118 "isa_tms320.tcc"
>
{
public:
	OpNOT_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22132 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22136 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22139 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22143 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22146 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22154 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22157 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22161 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22164 "isa_tms320.tcc"
>
class OpNOT_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22169 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22173 "isa_tms320.tcc"
>
{
public:
	OpNOT_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22186 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22190 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22193 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22197 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22200 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22208 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22211 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22215 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22218 "isa_tms320.tcc"
>
class OpOR3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22223 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22227 "isa_tms320.tcc"
>
{
public:
	OpOR3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22242 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22246 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22249 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22253 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22256 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22264 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22271 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22274 "isa_tms320.tcc"
>
class OpOR3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22283 "isa_tms320.tcc"
>
{
public:
	OpOR3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22297 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22301 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22304 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22308 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22311 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22319 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22322 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22326 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22329 "isa_tms320.tcc"
>
class OpSTF_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22334 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22338 "isa_tms320.tcc"
>
{
public:
	OpSTF_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t d1_mod;
	uint32_t d1_ar;
	uint32_t d2_mod;
	uint32_t d2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22352 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22356 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22359 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22363 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22366 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22374 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22377 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22381 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22384 "isa_tms320.tcc"
>
class OpSTF_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22389 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22393 "isa_tms320.tcc"
>
{
public:
	OpSTF_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t d1_mod;
	uint32_t d1_ar;
	uint32_t dst2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22406 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22410 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22413 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22417 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22420 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22428 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22431 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22435 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22438 "isa_tms320.tcc"
>
class OpSTI_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22447 "isa_tms320.tcc"
>
{
public:
	OpSTI_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t d1_mod;
	uint32_t d1_ar;
	uint32_t d2_mod;
	uint32_t d2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22461 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22465 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22468 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22472 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22475 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22483 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22486 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22490 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22493 "isa_tms320.tcc"
>
class OpSTI_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22498 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22502 "isa_tms320.tcc"
>
{
public:
	OpSTI_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t d1_mod;
	uint32_t d1_ar;
	uint32_t dst2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22515 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22519 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22522 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22526 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22529 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22537 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22540 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22544 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22547 "isa_tms320.tcc"
>
class OpSUBF3_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22552 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22556 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22571 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22575 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22578 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22582 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22585 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22593 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22600 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22603 "isa_tms320.tcc"
>
class OpSUBF3_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22608 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22612 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22626 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22630 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22633 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22637 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22640 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22651 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22658 "isa_tms320.tcc"
>
class OpSUBI3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22667 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22682 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22686 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22689 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22693 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22696 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22704 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22707 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22711 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22714 "isa_tms320.tcc"
>
class OpSUBI3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22719 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22723 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22737 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22741 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22744 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22748 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22751 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22759 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22762 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22766 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22769 "isa_tms320.tcc"
>
class OpXOR3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22778 "isa_tms320.tcc"
>
{
public:
	OpXOR3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22793 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22797 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22800 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22804 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22807 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22815 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22818 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22822 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22825 "isa_tms320.tcc"
>
class OpXOR3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22830 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22834 "isa_tms320.tcc"
>
{
public:
	OpXOR3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22848 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22852 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22855 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22859 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22862 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22870 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22873 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22877 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22880 "isa_tms320.tcc"
>
class OpLDF_LDF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22885 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22889 "isa_tms320.tcc"
>
{
public:
	OpLDF_LDF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t dst2;
	uint32_t s1_mod;
	uint32_t s1_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22903 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22907 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22910 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22914 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22917 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22932 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22935 "isa_tms320.tcc"
>
class OpLDF_LDF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22944 "isa_tms320.tcc"
>
{
public:
	OpLDF_LDF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t dst2;
	uint32_t s1_mod;
	uint32_t s1_ar;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22957 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22961 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22964 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22968 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22971 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22979 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22982 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22986 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22989 "isa_tms320.tcc"
>
class OpLDI_LDI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22994 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22998 "isa_tms320.tcc"
>
{
public:
	OpLDI_LDI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t dst2;
	uint32_t s1_mod;
	uint32_t s1_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23012 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23016 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23019 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23023 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23026 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23037 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23041 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23044 "isa_tms320.tcc"
>
class OpLDI_LDI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23049 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23053 "isa_tms320.tcc"
>
{
public:
	OpLDI_LDI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t dst2;
	uint32_t s1_mod;
	uint32_t s1_ar;
	uint32_t src2;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23066 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23070 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23073 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23077 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23080 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23088 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23091 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23095 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23098 "isa_tms320.tcc"
>
class OpMPYF3_ADDF3 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23103 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23107 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_ADDF3(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t s3_mod;
	uint32_t s3_ar;
	uint32_t s4_mod;
	uint32_t s4_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23124 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23128 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23131 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23135 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23138 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23146 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23149 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23153 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23156 "isa_tms320.tcc"
>
class OpMPYF3_ADDF3_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23161 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23165 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_ADDF3_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t src3;
	uint32_t src4;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23180 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23184 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23187 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23191 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23194 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23205 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23212 "isa_tms320.tcc"
>
class OpMPYF3_SUBF3 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23217 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23221 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_SUBF3(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t s3_mod;
	uint32_t s3_ar;
	uint32_t s4_mod;
	uint32_t s4_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23238 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23242 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23245 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23249 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23252 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23260 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23263 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23267 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23270 "isa_tms320.tcc"
>
class OpMPYF3_SUBF3_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23275 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23279 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_SUBF3_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t src3;
	uint32_t src4;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23294 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23298 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23301 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23305 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23308 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23316 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23319 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23323 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23326 "isa_tms320.tcc"
>
class OpMPYI3_ADDI3 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23331 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23335 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_ADDI3(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t s3_mod;
	uint32_t s3_ar;
	uint32_t s4_mod;
	uint32_t s4_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23352 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23356 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23359 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23363 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23366 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23374 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23377 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23381 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23384 "isa_tms320.tcc"
>
class OpMPYI3_ADDI3_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23389 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23393 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_ADDI3_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t src3;
	uint32_t src4;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23408 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23412 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23415 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23419 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23422 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23430 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23433 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23437 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23440 "isa_tms320.tcc"
>
class OpMPYI3_SUBI3 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23445 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23449 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_SUBI3(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t s3_mod;
	uint32_t s3_ar;
	uint32_t s4_mod;
	uint32_t s4_ar;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23466 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23470 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23473 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23477 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23480 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23491 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23495 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23498 "isa_tms320.tcc"
>
class OpMPYI3_SUBI3_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23507 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_SUBI3_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t src3;
	uint32_t src4;
	virtual
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23522 "isa_tms320.tcc"
	disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23526 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23529 "isa_tms320.tcc"
	,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23533 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23536 "isa_tms320.tcc"
	);
private:
};

/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of load/store operations:
* - LDE          load floating-point exponent
* - LDF          load floating-point value
* - LDFcond      load floating-point value conditionally
* - LDI          load integer
* - LDIcond      load integer conditionally
* - LDM          load floating-point mantissa
* - LDP          load data page pointer
* - POP          pop integer from stack
* - POPF         pop floating-point value from stack
* - PUSH         push integer on stack
* - PUSHF        push floating-point value on stack
* - STF          store floating-point value
* - STI          store integer
*/
/************************************************
* LDE (load floating-point exponent)
* op LDE(0b000[3]:0b001101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 23597 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23600 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23604 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23607 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 23611 "isa_tms320.tcc"
OpLDE_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 23615 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23619 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 23623 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 23626 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 23630 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 23633 "isa_tms320.tcc"
)
{
#line 59 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!dst_reg_name || !src_reg_name) return false;

		os << "LDE " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 23645 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 23651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23654 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23661 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23666 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23670 "isa_tms320.tcc"
> *DecodeOpLDE_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDE_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 23676 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 23680 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 23687 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23690 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23694 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23697 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 23701 "isa_tms320.tcc"
OpLDE_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 23705 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23709 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 23713 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 23716 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 23720 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 23723 "isa_tms320.tcc"
)
{
#line 70 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDE @0x" << hex << direct << dec << ", " << dst_reg_name;
		return true;
	}
#line 23734 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 23740 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23743 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23747 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23750 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23755 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23759 "isa_tms320.tcc"
> *DecodeOpLDE_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDE_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 23765 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 23769 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 23776 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23779 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23783 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23786 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 23790 "isa_tms320.tcc"
OpLDE_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 23794 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23798 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 23802 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 23805 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 23809 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 23812 "isa_tms320.tcc"
)
{
#line 80 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp)) return false;

		os << "LDE " << disasm_src_indir << ", " << dst_reg_name;
		return true;
	}
#line 23824 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 23830 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23833 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23837 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23840 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23845 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23849 "isa_tms320.tcc"
> *DecodeOpLDE_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDE_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 23855 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 23859 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 23866 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23869 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23873 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23876 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 23880 "isa_tms320.tcc"
OpLDE_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 23884 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23888 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 23892 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 23895 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 23899 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 23902 "isa_tms320.tcc"
)
{
#line 91 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;
		os << "LDE " << cpu.DisasmShortFloat(imm) << ", " << dst_reg_name;
		return true;
	}
#line 23913 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 23919 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23922 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23926 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23929 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23934 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23938 "isa_tms320.tcc"
> *DecodeOpLDE_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDE_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 23944 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 23948 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDE (load floating-point exponent)
*************************************************/
/************************************************
* LDF (load floating-point value)
* op LDF(0b000[3]:0b001110[6]:g[2]:dst[5]:ext<32> src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 23961 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23968 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23971 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 23975 "isa_tms320.tcc"
OpLDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 23979 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23983 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 23987 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 23990 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 23994 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 23997 "isa_tms320.tcc"
)
{
#line 109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!dst_reg_name || !src_reg_name) return false;

		os << "LDF " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 24009 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 24015 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24018 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24022 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24025 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24034 "isa_tms320.tcc"
> *DecodeOpLDF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 24040 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 24044 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 24051 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24054 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24058 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24061 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 24065 "isa_tms320.tcc"
OpLDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 24069 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24073 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 24077 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 24080 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 24084 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 24087 "isa_tms320.tcc"
)
{
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDF @0x" << hex << direct << dec << ", " << dst_reg_name;
		return true;
	}
#line 24098 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 24104 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24107 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24111 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24114 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24119 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24123 "isa_tms320.tcc"
> *DecodeOpLDF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 24129 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 24133 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 24140 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24143 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24150 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 24154 "isa_tms320.tcc"
OpLDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 24158 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24162 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 24166 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 24169 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 24173 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 24176 "isa_tms320.tcc"
)
{
#line 130 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp)) return false;

		os << "LDF " << disasm_src_indir << ", " << dst_reg_name;
		return true;
	}
#line 24188 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 24194 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24201 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24204 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24209 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24213 "isa_tms320.tcc"
> *DecodeOpLDF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 24219 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 24223 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 24230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24233 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24237 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24240 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 24244 "isa_tms320.tcc"
OpLDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 24248 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24252 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 24256 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 24259 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 24263 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 24266 "isa_tms320.tcc"
)
{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;
		os << "LDF " << cpu.DisasmShortFloat(imm) << ", " << dst_reg_name;
		return true;
	}
#line 24277 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 24283 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24286 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24290 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24293 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24298 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24302 "isa_tms320.tcc"
> *DecodeOpLDF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 24308 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 24312 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDF (load floating-point value)
*************************************************/
/************************************************
* LDFcond (load floating-point value conditionally)
* op LDFcond(0b0100[4]:cond[4]:g[2]:dst[5]:ext<32> src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 24325 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24332 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24335 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 24339 "isa_tms320.tcc"
OpLDFcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 24343 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24347 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 24351 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 24354 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 24358 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 24361 "isa_tms320.tcc"
)
{
#line 159 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!cond_name || !dst_reg_name || !src_reg_name) return false;

		os << "LDF" << cond_name << " " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 24374 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 24380 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24390 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24395 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24399 "isa_tms320.tcc"
> *DecodeOpLDFcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 24405 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 24409 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 24416 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24419 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24423 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24426 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 24430 "isa_tms320.tcc"
OpLDFcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 24434 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24438 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 24442 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 24445 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 24449 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 24452 "isa_tms320.tcc"
)
{
#line 171 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];
		if(!cond_name || !dst_reg_name) return false;

		os << "LDF" << cond_name << " @0x" << hex << direct << dec << ", " << dst_reg_name;
		return true;
	}
#line 24464 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 24470 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24473 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24477 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24480 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24485 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24489 "isa_tms320.tcc"
> *DecodeOpLDFcond_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFcond_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 24495 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 24499 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 24506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24509 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24513 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24516 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 24520 "isa_tms320.tcc"
OpLDFcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 24524 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24528 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 24532 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 24535 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 24539 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 24542 "isa_tms320.tcc"
)
{
#line 182 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];
		if(!cond_name || !dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp)) return false;

		os << "LDF" << cond_name << " " << disasm_src_indir << ", " << dst_reg_name;
		return true;
	}
#line 24555 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 24561 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24564 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24568 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24571 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24580 "isa_tms320.tcc"
> *DecodeOpLDFcond_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFcond_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 24586 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 24590 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 24597 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24600 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24604 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24607 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 24611 "isa_tms320.tcc"
OpLDFcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 24615 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24619 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 24623 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 24626 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 24630 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 24633 "isa_tms320.tcc"
)
{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];

		if(!cond_name || !dst_reg_name) return false;
		os << "LDF" << cond_name << " " << cpu.DisasmShortFloat(imm) << ", " << dst_reg_name;
		return true;
	}
#line 24645 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 24651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24654 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24661 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24666 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24670 "isa_tms320.tcc"
> *DecodeOpLDFcond_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFcond_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 24676 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 24680 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDFcond (load floating-point value conditionally)
*************************************************/
/*************************************************
* LDI (load integer)
* op LDI(0b000[3]:0b010000[6]:g[2]:dst[5]:ext<32> src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 24693 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24700 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24703 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 24707 "isa_tms320.tcc"
OpLDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 24711 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24715 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 24719 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 24722 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 24726 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 24729 "isa_tms320.tcc"
)
{
#line 213 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!dst_reg_name || !src_reg_name) return false;

		os << "LDI " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 24741 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 24746 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24749 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24753 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24756 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 24760 "isa_tms320.tcc"
OpLDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 24764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24768 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 24772 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 24775 "isa_tms320.tcc"
)
{
#line 222 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source and destination register number are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t result = cpu.GetIntReg(src);

		// Write back result in destination operand
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 24803 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 24809 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24812 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24819 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24824 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24828 "isa_tms320.tcc"
> *DecodeOpLDI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 24834 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 24838 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 24845 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24852 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24855 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 24859 "isa_tms320.tcc"
OpLDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 24863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24867 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 24871 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 24874 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 24878 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 24881 "isa_tms320.tcc"
)
{
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDI @0x" << hex << direct << dec << ", " << dst_reg_name;
		return true;
	}
#line 24892 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 24897 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24904 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24907 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 24911 "isa_tms320.tcc"
OpLDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 24915 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24919 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 24923 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 24926 "isa_tms320.tcc"
)
{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 24957 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 24963 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24966 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24973 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24978 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24982 "isa_tms320.tcc"
> *DecodeOpLDI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 24988 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 24992 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 24999 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25002 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25006 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25009 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 25013 "isa_tms320.tcc"
OpLDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 25017 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25021 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 25025 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 25028 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 25032 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 25035 "isa_tms320.tcc"
)
{
#line 287 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp)) return false;

		os << "LDI " << disasm_src_indir << ", " << dst_reg_name;
		return true;
	}
#line 25047 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 25052 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25055 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25059 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25062 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 25066 "isa_tms320.tcc"
OpLDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 25070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25074 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 25078 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 25081 "isa_tms320.tcc"
)
{
#line 296 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea);

		// Write back result
		cpu.SetIntReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 25125 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 25131 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25134 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25138 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25141 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25150 "isa_tms320.tcc"
> *DecodeOpLDI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 25156 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 25160 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 25167 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25170 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25174 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25177 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 25181 "isa_tms320.tcc"
OpLDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 25185 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25189 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 25193 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 25196 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 25200 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 25203 "isa_tms320.tcc"
)
{
#line 339 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDI " << imm << ", " << dst_reg_name;
		return true;
	}
#line 25214 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 25219 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25222 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25226 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25229 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 25233 "isa_tms320.tcc"
OpLDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 25237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25241 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 25245 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 25248 "isa_tms320.tcc"
)
{
#line 347 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result
		uint32_t result = imm; // imm has already been sign extended by the decoder

		// Write back result in destination operand
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 25276 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 25282 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25285 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25289 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25292 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25297 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25301 "isa_tms320.tcc"
> *DecodeOpLDI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 25307 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 25311 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDI (load integer)
*************************************************/
/*************************************************
* LDIcond (load integer conditionally)
* op LDIcond(0b0101[4]:cond[4]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 25324 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25327 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25331 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25334 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 25338 "isa_tms320.tcc"
OpLDIcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 25342 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25346 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 25350 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 25353 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 25357 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 25360 "isa_tms320.tcc"
)
{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *src_reg_name = REG_NAME[src];
		const char *dst_reg_name = REG_NAME[dst];
		if(!cond_name || !src_reg_name || !dst_reg_name) return false;

		os << "LDI" << cond_name << " " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 25373 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 25378 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25381 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25385 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25388 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 25392 "isa_tms320.tcc"
OpLDIcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 25396 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25400 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 25404 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 25407 "isa_tms320.tcc"
)
{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source and destination registers, and the condition are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the source operand
		uint32_t result = cpu.GetIntReg(src);

		// Write back result in destination operand
		cpu.SetIntReg(dst, result);
	}
#line 25427 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 25433 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25436 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25443 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25448 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25452 "isa_tms320.tcc"
> *DecodeOpLDIcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDIcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 25458 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 25462 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 25469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25476 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25479 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 25483 "isa_tms320.tcc"
OpLDIcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 25487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25491 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 25495 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 25498 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 25502 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 25505 "isa_tms320.tcc"
)
{
#line 411 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];
		if(!cond_name || !dst_reg_name) return false;

		os << "LDI" << cond_name << " @0x" << hex << direct << dec << ", " << dst_reg_name;
		return true;
	}
#line 25517 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 25522 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25532 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 25536 "isa_tms320.tcc"
OpLDIcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 25540 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25544 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 25548 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 25551 "isa_tms320.tcc"
)
{
#line 420 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register and the condition are valid
		if(unlikely(!cpu.HasReg(dst) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea);

		// Write back result
		cpu.SetIntReg(dst, result);
	}
#line 25574 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 25580 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25583 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25587 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25590 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25595 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25599 "isa_tms320.tcc"
> *DecodeOpLDIcond_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDIcond_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 25605 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 25609 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 25616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25619 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25626 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 25630 "isa_tms320.tcc"
OpLDIcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 25634 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25638 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 25642 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 25645 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 25649 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 25652 "isa_tms320.tcc"
)
{
#line 442 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];

		if(!cond_name || !dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp)) return false;

		os << "LDI" << cond_name << " " << disasm_src_indir << ", " << dst_reg_name;
		return true;
	}
#line 25666 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 25671 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25674 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25678 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25681 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 25685 "isa_tms320.tcc"
OpLDIcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 25689 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25693 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 25697 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 25700 "isa_tms320.tcc"
)
{
#line 453 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register and the condition are valid
		if(unlikely(!cpu.HasReg(dst) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea);

		// Write back result
		cpu.SetIntReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR(ar, output_ar);
		}
	}
#line 25736 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 25742 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25745 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25749 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25752 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25757 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25761 "isa_tms320.tcc"
> *DecodeOpLDIcond_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDIcond_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 25767 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 25771 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 25778 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25781 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25785 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25788 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 25792 "isa_tms320.tcc"
OpLDIcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 25796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25800 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 25804 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 25807 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 25811 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 25814 "isa_tms320.tcc"
)
{
#line 488 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];

		if(!cond_name || !dst_reg_name) return false;

		os << "LDI" << cond_name << " " << imm << ", " << dst_reg_name;
		return true;
	}
#line 25827 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 25832 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25839 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25842 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 25846 "isa_tms320.tcc"
OpLDIcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 25850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25854 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 25858 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 25861 "isa_tms320.tcc"
)
{
#line 498 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register and the condition are valid
		if(unlikely(!cpu.HasReg(dst) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Compute the result
		uint32_t result = imm; // imm has already been sign extended by the decoder

		// Write back result in destination operand
		cpu.SetIntReg(dst, result);
	}
#line 25881 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 25887 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25890 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25894 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25897 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25902 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25906 "isa_tms320.tcc"
> *DecodeOpLDIcond_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDIcond_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 25912 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 25916 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDIcond (load integer conditionally)
*************************************************/
/*************************************************
* LDM (load floating-point mantissa)
* op LDM(0b000[3]:0b010010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 25929 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25932 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25936 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25939 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 25943 "isa_tms320.tcc"
OpLDM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 25947 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25951 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 25955 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 25958 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 25962 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 25965 "isa_tms320.tcc"
)
{
#line 525 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!dst_reg_name || !src_reg_name) return false;

		os << "LDM " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 25977 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 25983 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25986 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25990 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25993 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26002 "isa_tms320.tcc"
> *DecodeOpLDM_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDM_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 26008 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 26012 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 26019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26022 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26026 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26029 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 26033 "isa_tms320.tcc"
OpLDM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 26037 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26041 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 26045 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 26048 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 26052 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 26055 "isa_tms320.tcc"
)
{
#line 536 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDM @0x" << hex << direct << dec << ", " << dst_reg_name;
		return true;
	}
#line 26066 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 26072 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26075 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26079 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26082 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26087 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26091 "isa_tms320.tcc"
> *DecodeOpLDM_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDM_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 26097 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 26101 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 26108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26111 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26115 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26118 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 26122 "isa_tms320.tcc"
OpLDM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 26126 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26130 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 26134 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 26137 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 26141 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 26144 "isa_tms320.tcc"
)
{
#line 546 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp)) return false;

		os << "LDM " << disasm_src_indir << ", " << dst_reg_name;
		return true;
	}
#line 26156 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 26162 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26165 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26169 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26172 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26177 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26181 "isa_tms320.tcc"
> *DecodeOpLDM_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDM_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 26187 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 26191 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 26198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26201 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26208 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 26212 "isa_tms320.tcc"
OpLDM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 26216 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26220 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 26224 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 26227 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 26231 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 26234 "isa_tms320.tcc"
)
{
#line 557 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;
		os << "LDM " << cpu.DisasmShortFloat(imm) << ", " << dst_reg_name;
		return true;
	}
#line 26245 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 26251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26258 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26261 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26266 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26270 "isa_tms320.tcc"
> *DecodeOpLDM_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDM_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 26276 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 26280 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDM (load floating-point mantissa)
*************************************************/
/*************************************************
* LDP (load data page pointer)
* op LDP(0b000[3]:0b010000[6]:0b11[2]:0b10000[5]:0b00000000[8]:src[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 26293 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26296 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26300 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26303 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 26307 "isa_tms320.tcc"
OpLDP<
#line 45 "isa/tms320.isa"
CONFIG
#line 26311 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26315 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 26319 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 26322 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 26326 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 26329 "isa_tms320.tcc"
)
{
#line 575 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		os << "LDP @0x" << hex << (src << 16) << dec;
		return true;
	}
#line 26337 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 26342 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26349 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26352 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 26356 "isa_tms320.tcc"
OpLDP<
#line 45 "isa/tms320.isa"
CONFIG
#line 26360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26364 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 26368 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 26371 "isa_tms320.tcc"
)
{
#line 580 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Update DP
		cpu.SetDP(src);
	}
#line 26379 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 26385 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26388 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26392 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26395 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26400 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26404 "isa_tms320.tcc"
> *DecodeOpLDP(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDP<
#line 45 "isa/tms320.isa"
	CONFIG
#line 26410 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 26414 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDP (load data page pointer)
*************************************************/
/*************************************************
* POP (pop integer from stack)
* op POP(0b000[3]:0b011100[6]:0b01[2]:dst[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 26427 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26434 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26437 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 26441 "isa_tms320.tcc"
OpPOP<
#line 45 "isa/tms320.isa"
CONFIG
#line 26445 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26449 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 26453 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 26456 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 26460 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 26463 "isa_tms320.tcc"
)
{
#line 595 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;

		os << "POP " << dst_reg_name;
		return true;
	}
#line 26475 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 26480 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26483 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26487 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26490 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 26494 "isa_tms320.tcc"
OpPOP<
#line 45 "isa/tms320.isa"
CONFIG
#line 26498 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26502 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 26506 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 26509 "isa_tms320.tcc"
)
{
#line 604 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read SP
		typename CONFIG::address_t sp = cpu.GetSP();

		// Read the word at SP from memory
		uint32_t result = cpu.IntLoad(sp);

		// Compute the new value of SP
		sp = sp - 1;

		// Write back the result
		cpu.SetIntReg(dst, result);

		// Update SP
		cpu.SetSP(sp);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 26546 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 26552 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26555 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26559 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26562 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26567 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26571 "isa_tms320.tcc"
> *DecodeOpPOP(CodeType code, typename CONFIG::address_t addr)
{
	return new OpPOP<
#line 45 "isa/tms320.isa"
	CONFIG
#line 26577 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 26581 "isa_tms320.tcc"
	>(code, addr);
}

/* end of POP (pop integer from stack)
*************************************************/
/*************************************************
* POPF (pop floating-point value from stack)
* op POPF(0b000[3]:0b011101[6]:0b01[2]:dst[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 26594 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26597 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26601 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26604 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 26608 "isa_tms320.tcc"
OpPOPF<
#line 45 "isa/tms320.isa"
CONFIG
#line 26612 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26616 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 26620 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 26623 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 26627 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 26630 "isa_tms320.tcc"
)
{
#line 648 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;

		os << "POPF " << dst_reg_name;
		return true;
	}
#line 26642 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 26648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26651 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26658 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26667 "isa_tms320.tcc"
> *DecodeOpPOPF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpPOPF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 26673 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 26677 "isa_tms320.tcc"
	>(code, addr);
}

/* end of POPF (pop floating-point value from stack)
*************************************************/
/*************************************************
* PUSH (push integer on stack)
* op PUSH(0b000[3]:0b011110[6]:0b01[2]:src[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 26690 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26693 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26697 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26700 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 26704 "isa_tms320.tcc"
OpPUSH<
#line 45 "isa/tms320.isa"
CONFIG
#line 26708 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26712 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 26716 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 26719 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 26723 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 26726 "isa_tms320.tcc"
)
{
#line 667 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *src_reg_name = REG_NAME[src];

		if(!src_reg_name) return false;

		os << "PUSH " << src_reg_name;
		return true;
	}
#line 26738 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 26743 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26746 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26750 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26753 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 26757 "isa_tms320.tcc"
OpPUSH<
#line 45 "isa/tms320.isa"
CONFIG
#line 26761 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26765 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 26769 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 26772 "isa_tms320.tcc"
)
{
#line 676 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source register number is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t src_value = cpu.GetIntReg(src);

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Store the source operand at SP + 1
		cpu.IntStore(sp, src_value);

		// Update SP
		cpu.SetSP(sp);
	}
#line 26795 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 26801 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26811 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26816 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26820 "isa_tms320.tcc"
> *DecodeOpPUSH(CodeType code, typename CONFIG::address_t addr)
{
	return new OpPUSH<
#line 45 "isa/tms320.isa"
	CONFIG
#line 26826 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 26830 "isa_tms320.tcc"
	>(code, addr);
}

/* end of POPF (pop floating-point value from stack)
*************************************************/
/*************************************************
* PUSHF (push floating-point value on stack)
* op PUSHF(0b000[3]:0b011111[6]:0b01[2]:src[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 26843 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26846 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26850 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26853 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 26857 "isa_tms320.tcc"
OpPUSHF<
#line 45 "isa/tms320.isa"
CONFIG
#line 26861 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26865 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 26869 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 26872 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 26876 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 26879 "isa_tms320.tcc"
)
{
#line 706 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *src_reg_name = REG_NAME[src];

		if(!src_reg_name) return false;

		os << "PUSHF " << src_reg_name;
		return true;
	}
#line 26891 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 26897 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26904 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26907 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26912 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26916 "isa_tms320.tcc"
> *DecodeOpPUSHF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpPUSHF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 26922 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 26926 "isa_tms320.tcc"
	>(code, addr);
}

/* end of PUSHF (push floating-point value on stack)
*************************************************/
/*************************************************
* STF (store floating-point value)
* op STF(0b000[3]:0b101000[6]:g[2]:src[5]:dst[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 26939 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26946 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26949 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 26953 "isa_tms320.tcc"
OpSTF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 26957 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26961 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 26965 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 26968 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 26972 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 26975 "isa_tms320.tcc"
)
{
#line 725 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *src_reg_name = REG_NAME[src];
		if(!src_reg_name) return false;

		os << "STF " << src_reg_name << ", @0x" << direct;
		return true;
	}
#line 26986 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 26992 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26999 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27002 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27007 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27011 "isa_tms320.tcc"
> *DecodeOpSTF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 27017 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 27021 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 27028 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27031 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27035 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27038 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 27042 "isa_tms320.tcc"
OpSTF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 27046 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27050 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 27054 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 27057 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 27061 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 27064 "isa_tms320.tcc"
)
{
#line 735 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_dst_indir;
		const char *src_reg_name = REG_NAME[src];
		if(!src_reg_name || !cpu.DisasmIndir(disasm_dst_indir, mod, ar, disp)) return false;

		os << "STF " << src_reg_name << ", " << disasm_dst_indir;
		return true;
	}
#line 27076 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 27082 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27085 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27089 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27092 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27097 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27101 "isa_tms320.tcc"
> *DecodeOpSTF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 27107 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 27111 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STF (store floating-point value)
*************************************************/
/*************************************************
* STI (store integer)
* op STI(0b000[3]:0b101010[6]:g[2]:src[5]:dst[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 27124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27127 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27131 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27134 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 27138 "isa_tms320.tcc"
OpSTI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 27142 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27146 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 27150 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 27153 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 27157 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 27160 "isa_tms320.tcc"
)
{
#line 755 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *src_reg_name = REG_NAME[src];
		if(!src_reg_name) return false;

		os << "STI " << src_reg_name << ", @0x" << direct;
		return true;
	}
#line 27171 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 27176 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27179 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27183 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27186 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 27190 "isa_tms320.tcc"
OpSTI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 27194 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27198 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 27202 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 27205 "isa_tms320.tcc"
)
{
#line 763 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Read the source operand
		uint32_t result = cpu.GetIntReg(src);

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Store the word into memory
		cpu.IntStore(ea, result);
	}
#line 27219 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 27225 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27228 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27232 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27235 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27240 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27244 "isa_tms320.tcc"
> *DecodeOpSTI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 27250 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 27254 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 27261 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27264 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27268 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27271 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 27275 "isa_tms320.tcc"
OpSTI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 27279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27283 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 27287 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 27290 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 27294 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 27297 "isa_tms320.tcc"
)
{
#line 776 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_dst_indir;
		const char *src_reg_name = REG_NAME[src];
		if(!src_reg_name || !cpu.DisasmIndir(disasm_dst_indir, mod, ar, disp)) return false;

		os << "STI " << src_reg_name << ", " << disasm_dst_indir;
		return true;
	}
#line 27309 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 27314 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27317 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27321 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27324 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 27328 "isa_tms320.tcc"
OpSTI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 27332 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27336 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 27340 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 27343 "isa_tms320.tcc"
)
{
#line 785 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Read the source operand
		uint32_t result = cpu.GetIntReg(src);

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Store the word into memory
		cpu.IntStore(ea, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR(ar, output_ar);
		}
	}
#line 27370 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 27376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27383 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27386 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27395 "isa_tms320.tcc"
> *DecodeOpSTI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 27401 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 27405 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STI (store integer)
*************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of 2 operands operations:
* - ABSF         absolute value of a floating-point number
* - ABSI         absolute value of an integer
* - ADDC         add integers with carry
* - ADDF         add floating-point values
* - ADDI         add integers
* - AND          bitwise-logical AND
* - ANDN         bitwise-logical AND with complement
* - ASH          arithmetic shift
* - CMPF         compare floating-point values
* - CMPI         compare integers
* - FIX          convert floating-point value to integer
* - FLOAT        convert integer to floating-point value
* - LSH          logical shift
* - MPYF         multiply floating-point values
* - MPYI         multiply integers
* - NEGB         negate integer with borrow
* - NEGF         negate floating-point value
* - NEGI         negate integer
* - NORM         normalize floating-point value
* - NOT          bitwise-logical complement
* - OR           bitwise-logical OR
* - RND          round floating-point value
* - ROL          rotate left
* - ROLC         rotate left through carry
* - ROR          rotate right
* - RORC         rotate right through carry
* - SUBB         subtract integers with borrow
* - SUBC         subtract integers conditionally
* - SUBF         subtract floating-point values
* - SUBI         subtract integer
* - SUBRB        subtract reverse integer with borrow
* - SUBRF        subtract reverse floating-point value
* - SUBRI        subtract reverse integer
* - TSTB         test bit fields
* - XOR          bitwise-exclusive OR
*/
/**********************************************************
* ABSF (absolute value of a floating-point number)
* op ABSF(0b000[3]:0b000000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 27489 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27492 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27496 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27499 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 27503 "isa_tms320.tcc"
OpABSF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 27507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27511 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 27515 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 27518 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 27522 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 27525 "isa_tms320.tcc"
)
{
#line 84 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ABSF " << src_name << ", " << dst_name;
		return true;
	}
#line 27539 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 27545 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27548 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27552 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27555 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27560 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27564 "isa_tms320.tcc"
> *DecodeOpABSF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 27570 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 27574 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 27581 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27584 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27588 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27591 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 27595 "isa_tms320.tcc"
OpABSF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 27599 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27603 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 27607 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 27610 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 27614 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 27617 "isa_tms320.tcc"
)
{
#line 95 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "ABSF @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 27631 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 27637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27640 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27644 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27647 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27652 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27656 "isa_tms320.tcc"
> *DecodeOpABSF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 27662 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 27666 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 27673 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27676 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27680 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27683 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 27687 "isa_tms320.tcc"
OpABSF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 27691 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27695 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 27699 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 27702 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 27706 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 27709 "isa_tms320.tcc"
)
{
#line 106 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "ABSF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 27723 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 27729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27736 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27739 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27748 "isa_tms320.tcc"
> *DecodeOpABSF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 27754 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 27758 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 27765 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27768 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27772 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27775 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 27779 "isa_tms320.tcc"
OpABSF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 27783 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27787 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 27791 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 27794 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 27798 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 27801 "isa_tms320.tcc"
)
{
#line 117 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ABSF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 27814 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 27820 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27827 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27830 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27839 "isa_tms320.tcc"
> *DecodeOpABSF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 27845 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 27849 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ABSF (absolute value of a floating-point number)
**********************************************************/
/**********************************************************
* ABSI (absolute value of an integer)
* op ABSI(0b000[3]:0b000001[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 27862 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27865 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27869 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27872 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 27876 "isa_tms320.tcc"
OpABSI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 27880 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27884 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 27888 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 27891 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 27895 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 27898 "isa_tms320.tcc"
)
{
#line 140 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ABSI " << src_name << ", " << dst_name;
		return true;
	}
#line 27912 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 27918 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27928 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27933 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27937 "isa_tms320.tcc"
> *DecodeOpABSI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 27943 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 27947 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 27954 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27957 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27961 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27964 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 27968 "isa_tms320.tcc"
OpABSI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 27972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27976 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 27980 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 27983 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 27987 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 27990 "isa_tms320.tcc"
)
{
#line 151 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "ABSI @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 28004 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 28010 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28013 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28017 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28020 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28025 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28029 "isa_tms320.tcc"
> *DecodeOpABSI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 28035 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 28039 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 28046 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28049 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28053 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28056 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 28060 "isa_tms320.tcc"
OpABSI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 28064 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28068 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 28072 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 28075 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 28079 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 28082 "isa_tms320.tcc"
)
{
#line 162 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "ABSI " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 28096 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 28102 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28105 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28109 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28112 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28117 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28121 "isa_tms320.tcc"
> *DecodeOpABSI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 28127 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 28131 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 28138 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28141 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28148 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 28152 "isa_tms320.tcc"
OpABSI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 28156 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28160 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 28164 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 28167 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 28171 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 28174 "isa_tms320.tcc"
)
{
#line 173 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ABSI " << imm << ", " << dst_name;
		return true;
	}
#line 28187 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 28193 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28196 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28200 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28203 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28208 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28212 "isa_tms320.tcc"
> *DecodeOpABSI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 28218 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 28222 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ABSI (absolute value of an integer)
**********************************************************/
/**********************************************************
* ADDC (add integers with carry)
* op ADDC(0b000[3]:0b000010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 28235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28242 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28245 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 28249 "isa_tms320.tcc"
OpADDC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 28253 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28257 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 28261 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 28264 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 28268 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 28271 "isa_tms320.tcc"
)
{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ADDC " << src_name << ", " << dst_name;
		return true;
	}
#line 28285 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 28290 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28293 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28297 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28300 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 28304 "isa_tms320.tcc"
OpADDC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 28308 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28312 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 28316 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 28319 "isa_tms320.tcc"
)
{
#line 239 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetIntReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, carry_in);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, carry_in);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 28366 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 28372 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28375 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28379 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28382 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28391 "isa_tms320.tcc"
> *DecodeOpADDC_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 28397 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 28401 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 28408 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28411 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28418 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 28422 "isa_tms320.tcc"
OpADDC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 28426 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28430 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 28434 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 28437 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 28441 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 28444 "isa_tms320.tcc"
)
{
#line 207 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "ADDC @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 28458 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 28463 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28466 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28470 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28473 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 28477 "isa_tms320.tcc"
OpADDC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 28481 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28485 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 28489 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 28492 "isa_tms320.tcc"
)
{
#line 283 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, carry_in);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, carry_in);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 28542 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 28548 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28551 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28555 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28558 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28563 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28567 "isa_tms320.tcc"
> *DecodeOpADDC_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 28573 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 28577 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 28584 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28587 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28591 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28594 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 28598 "isa_tms320.tcc"
OpADDC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 28602 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28606 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 28610 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 28613 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 28617 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 28620 "isa_tms320.tcc"
)
{
#line 218 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "ADDC " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 28634 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 28639 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28642 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28646 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28649 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 28653 "isa_tms320.tcc"
OpADDC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 28657 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28661 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 28665 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 28668 "isa_tms320.tcc"
)
{
#line 330 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, carry_in);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, carry_in);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 28725 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 28731 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28734 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28738 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28741 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28746 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28750 "isa_tms320.tcc"
> *DecodeOpADDC_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 28756 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 28760 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 28767 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28770 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28774 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28777 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 28781 "isa_tms320.tcc"
OpADDC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 28785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28789 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 28793 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 28796 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 28800 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 28803 "isa_tms320.tcc"
)
{
#line 229 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ADDC " << imm << ", " << dst_name;
		return true;
	}
#line 28816 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 28821 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28824 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28828 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28831 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 28835 "isa_tms320.tcc"
OpADDC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 28839 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28843 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 28847 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 28850 "isa_tms320.tcc"
)
{
#line 384 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, imm, carry_in);
		else
		Add32(result, carry_out, overflow, dst_value, imm, carry_in);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 28894 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 28900 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28903 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28907 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28910 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28915 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28919 "isa_tms320.tcc"
> *DecodeOpADDC_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 28925 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 28929 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDC (add integers with carry)
**********************************************************/
/**********************************************************
* ADDF (add floating-point values)
* op ADDF(0b000[3]:0b000011[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 28942 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28945 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28949 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28952 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 28956 "isa_tms320.tcc"
OpADDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 28960 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28964 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 28968 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 28971 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 28975 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 28978 "isa_tms320.tcc"
)
{
#line 438 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ADDF " << src_name << ", " << dst_name;
		return true;
	}
#line 28992 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 28998 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29001 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29005 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29008 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29013 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29017 "isa_tms320.tcc"
> *DecodeOpADDF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 29023 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 29027 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 29034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29037 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29041 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29044 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 29048 "isa_tms320.tcc"
OpADDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 29052 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29056 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 29060 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 29063 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 29067 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 29070 "isa_tms320.tcc"
)
{
#line 449 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "ADDF @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 29084 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 29090 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29093 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29097 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29100 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29105 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29109 "isa_tms320.tcc"
> *DecodeOpADDF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 29115 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 29119 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 29126 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29129 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29133 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29136 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 29140 "isa_tms320.tcc"
OpADDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 29144 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29148 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 29152 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 29155 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 29159 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 29162 "isa_tms320.tcc"
)
{
#line 460 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "ADDF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 29176 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 29182 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29185 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29189 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29192 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29201 "isa_tms320.tcc"
> *DecodeOpADDF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 29207 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 29211 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 29218 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29221 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29225 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29228 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 29232 "isa_tms320.tcc"
OpADDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 29236 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29240 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 29244 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 29247 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 29251 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 29254 "isa_tms320.tcc"
)
{
#line 471 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ADDF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 29267 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 29273 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29276 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29283 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29292 "isa_tms320.tcc"
> *DecodeOpADDF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 29298 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 29302 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDF (add floating-point values)
**********************************************************/
/**********************************************************
* ADDI (add integers)
* op ADDI(0b000[3]:0b000100[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 29315 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29318 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29322 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29325 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 29329 "isa_tms320.tcc"
OpADDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 29333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29337 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 29341 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 29344 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 29348 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 29351 "isa_tms320.tcc"
)
{
#line 495 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ADDI " << src_name << ", " << dst_name;
		return true;
	}
#line 29365 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 29370 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29373 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29377 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29380 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 29384 "isa_tms320.tcc"
OpADDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 29388 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29392 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 29396 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 29399 "isa_tms320.tcc"
)
{
#line 538 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetIntReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, 0);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 29443 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 29449 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29452 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29456 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29459 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29464 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29468 "isa_tms320.tcc"
> *DecodeOpADDI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 29474 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 29478 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 29485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29495 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 29499 "isa_tms320.tcc"
OpADDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 29503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29507 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 29511 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 29514 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 29518 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 29521 "isa_tms320.tcc"
)
{
#line 506 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "ADDI @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 29535 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 29540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29543 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29547 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29550 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 29554 "isa_tms320.tcc"
OpADDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 29558 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29562 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 29566 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 29569 "isa_tms320.tcc"
)
{
#line 579 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, 0);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 29616 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 29622 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29625 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29629 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29632 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29637 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29641 "isa_tms320.tcc"
> *DecodeOpADDI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 29647 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 29651 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 29658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29661 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29665 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29668 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 29672 "isa_tms320.tcc"
OpADDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 29676 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29680 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 29684 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 29687 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 29691 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 29694 "isa_tms320.tcc"
)
{
#line 517 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "ADDI " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 29708 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 29713 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29716 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29720 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29723 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 29727 "isa_tms320.tcc"
OpADDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 29731 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29735 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 29739 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 29742 "isa_tms320.tcc"
)
{
#line 623 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, 0);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 29796 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 29802 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29805 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29809 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29812 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29817 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29821 "isa_tms320.tcc"
> *DecodeOpADDI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 29827 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 29831 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 29838 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29841 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29845 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29848 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 29852 "isa_tms320.tcc"
OpADDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 29856 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29860 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 29864 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 29867 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 29871 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 29874 "isa_tms320.tcc"
)
{
#line 528 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ADDI " << imm << ", " << dst_name;
		return true;
	}
#line 29887 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 29892 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29895 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29899 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29902 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 29906 "isa_tms320.tcc"
OpADDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 29910 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29914 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 29918 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 29921 "isa_tms320.tcc"
)
{
#line 674 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, imm, 0);
		else
		Add32(result, carry_out, overflow, dst_value, imm, 0);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 29962 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 29968 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29971 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29975 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29978 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29987 "isa_tms320.tcc"
> *DecodeOpADDI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 29993 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 29997 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDI (add integers)
**********************************************************/
/**********************************************************
* AND (bitwise-logical AND)
* op AND(0b000[3]:0b000101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 30010 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30013 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30017 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30020 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 30024 "isa_tms320.tcc"
OpAND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 30028 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30032 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 30036 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 30039 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 30043 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 30046 "isa_tms320.tcc"
)
{
#line 725 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "AND " << src_name << ", " << dst_name;
		return true;
	}
#line 30060 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 30065 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30068 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30072 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30075 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 30079 "isa_tms320.tcc"
OpAND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 30083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30087 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 30091 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 30094 "isa_tms320.tcc"
)
{
#line 768 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetIntReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 30128 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 30134 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30137 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30141 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30144 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30149 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30153 "isa_tms320.tcc"
> *DecodeOpAND_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 30159 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 30163 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 30170 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30173 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30177 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30180 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 30184 "isa_tms320.tcc"
OpAND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 30188 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30192 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 30196 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 30199 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 30203 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 30206 "isa_tms320.tcc"
)
{
#line 736 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "AND @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 30220 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 30225 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30228 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30232 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30235 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 30239 "isa_tms320.tcc"
OpAND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 30243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30247 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 30251 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 30254 "isa_tms320.tcc"
)
{
#line 799 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 30291 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 30297 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30300 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30304 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30307 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30312 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30316 "isa_tms320.tcc"
> *DecodeOpAND_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 30322 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 30326 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 30333 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30336 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30340 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30343 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 30347 "isa_tms320.tcc"
OpAND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 30351 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30355 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 30359 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 30362 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 30366 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 30369 "isa_tms320.tcc"
)
{
#line 747 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "AND " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 30383 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 30388 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30395 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30398 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 30402 "isa_tms320.tcc"
OpAND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 30406 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30410 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 30414 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 30417 "isa_tms320.tcc"
)
{
#line 833 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 30461 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 30467 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30470 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30474 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30477 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30482 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30486 "isa_tms320.tcc"
> *DecodeOpAND_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 30492 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 30496 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 30503 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30506 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30510 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30513 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 30517 "isa_tms320.tcc"
OpAND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 30521 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30525 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 30529 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 30532 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 30536 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 30539 "isa_tms320.tcc"
)
{
#line 758 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "AND " << imm << ", " << dst_name;
		return true;
	}
#line 30552 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 30557 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30560 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30564 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30567 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 30571 "isa_tms320.tcc"
OpAND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 30575 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30579 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 30583 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 30586 "isa_tms320.tcc"
)
{
#line 874 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Compute the result
		uint32_t result = imm & dst_value;

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 30617 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 30623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30626 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30633 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30642 "isa_tms320.tcc"
> *DecodeOpAND_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 30648 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 30652 "isa_tms320.tcc"
	>(code, addr);
}

/* end of AND (bitwise-logical AND)
**********************************************************/
/**********************************************************
* ANDN (bitwise-logical AND with complement)
* op ANDN(0b000[3]:0b000110[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 30665 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30668 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30672 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30675 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 30679 "isa_tms320.tcc"
OpANDN_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 30683 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30687 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 30691 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 30694 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 30698 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 30701 "isa_tms320.tcc"
)
{
#line 915 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ANDN " << src_name << ", " << dst_name;
		return true;
	}
#line 30715 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 30720 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30723 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30727 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30730 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 30734 "isa_tms320.tcc"
OpANDN_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 30738 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30742 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 30746 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 30749 "isa_tms320.tcc"
)
{
#line 958 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetIntReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Compute the result
		uint32_t result = ~src_value & dst_value;

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 30783 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 30789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30796 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30799 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30808 "isa_tms320.tcc"
> *DecodeOpANDN_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 30814 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 30818 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 30825 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30828 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30832 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30835 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 30839 "isa_tms320.tcc"
OpANDN_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 30843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30847 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 30851 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 30854 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 30858 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 30861 "isa_tms320.tcc"
)
{
#line 926 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "ANDN @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 30875 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 30880 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30883 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30887 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30890 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 30894 "isa_tms320.tcc"
OpANDN_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 30898 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30902 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 30906 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 30909 "isa_tms320.tcc"
)
{
#line 989 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = ~src_value & dst_value;

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 30946 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 30952 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30955 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30959 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30962 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30967 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30971 "isa_tms320.tcc"
> *DecodeOpANDN_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 30977 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 30981 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 30988 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30991 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30995 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30998 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 31002 "isa_tms320.tcc"
OpANDN_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 31006 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31010 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 31014 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 31017 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 31021 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 31024 "isa_tms320.tcc"
)
{
#line 937 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "ANDN " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 31038 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 31043 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31046 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31050 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31053 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 31057 "isa_tms320.tcc"
OpANDN_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 31061 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31065 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 31069 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 31072 "isa_tms320.tcc"
)
{
#line 1023 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = ~src_value & dst_value;

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 31116 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 31122 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31125 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31129 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31132 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31137 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31141 "isa_tms320.tcc"
> *DecodeOpANDN_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 31147 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 31151 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 31158 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31161 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31165 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31168 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 31172 "isa_tms320.tcc"
OpANDN_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 31176 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31180 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 31184 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 31187 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 31191 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 31194 "isa_tms320.tcc"
)
{
#line 948 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ANDN " << imm << ", " << dst_name;
		return true;
	}
#line 31207 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 31212 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31215 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31219 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31222 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 31226 "isa_tms320.tcc"
OpANDN_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 31230 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31234 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 31238 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 31241 "isa_tms320.tcc"
)
{
#line 1064 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Compute the result
		uint32_t result = ~imm & dst_value;

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 31272 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 31278 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31281 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31285 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31288 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31293 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31297 "isa_tms320.tcc"
> *DecodeOpANDN_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 31303 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 31307 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ANDN (bitwise-logical AND with complement)
**********************************************************/
/**********************************************************
* ASH (arithmetic shift)
* op ASH(0b000[3]:0b000111[6]:g[2]:dst[5]:count[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 31320 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31323 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31327 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31330 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 31334 "isa_tms320.tcc"
OpASH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 31338 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31342 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 31346 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 31349 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 31353 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 31356 "isa_tms320.tcc"
)
{
#line 1105 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ASH " << src_name << ", " << dst_name;
		return true;
	}
#line 31370 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 31376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31383 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31386 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31395 "isa_tms320.tcc"
> *DecodeOpASH_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 31401 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 31405 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 31412 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31415 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31419 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31422 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 31426 "isa_tms320.tcc"
OpASH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 31430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31434 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 31438 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 31441 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 31445 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 31448 "isa_tms320.tcc"
)
{
#line 1116 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "ASH @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 31462 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 31468 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31471 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31475 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31478 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31483 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31487 "isa_tms320.tcc"
> *DecodeOpASH_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 31493 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 31497 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 31504 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31511 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31514 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 31518 "isa_tms320.tcc"
OpASH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 31522 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31526 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 31530 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 31533 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 31537 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 31540 "isa_tms320.tcc"
)
{
#line 1127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "ASH " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 31554 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 31560 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31563 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31567 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31570 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31575 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31579 "isa_tms320.tcc"
> *DecodeOpASH_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 31585 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 31589 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 31596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31599 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31603 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31606 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 31610 "isa_tms320.tcc"
OpASH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 31614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31618 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 31622 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 31625 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 31629 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 31632 "isa_tms320.tcc"
)
{
#line 1138 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ASH " << imm << ", " << dst_name;
		return true;
	}
#line 31645 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 31651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31654 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31661 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31666 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31670 "isa_tms320.tcc"
> *DecodeOpASH_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 31676 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 31680 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ASH (arithmetic shift)
**********************************************************/
/**********************************************************
* CMPF (compare floating-point values)
* op CMPF(0b000[3]:0b001000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 31693 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31700 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31703 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 31707 "isa_tms320.tcc"
OpCMPF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 31711 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31715 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 31719 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 31722 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 31726 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 31729 "isa_tms320.tcc"
)
{
#line 1161 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "CMPF " << src_name << ", " << dst_name;
		return true;
	}
#line 31743 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 31749 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31752 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31756 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31759 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31768 "isa_tms320.tcc"
> *DecodeOpCMPF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 31774 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 31778 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 31785 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31788 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31792 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31795 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 31799 "isa_tms320.tcc"
OpCMPF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 31803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31807 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 31811 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 31814 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 31818 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 31821 "isa_tms320.tcc"
)
{
#line 1172 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "CMPF @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 31835 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 31841 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31844 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31848 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31851 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31856 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31860 "isa_tms320.tcc"
> *DecodeOpCMPF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 31866 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 31870 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 31877 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31880 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31884 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31887 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 31891 "isa_tms320.tcc"
OpCMPF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 31895 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31899 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 31903 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 31906 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 31910 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 31913 "isa_tms320.tcc"
)
{
#line 1183 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "CMPF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 31927 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 31933 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31940 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31943 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31948 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31952 "isa_tms320.tcc"
> *DecodeOpCMPF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 31958 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 31962 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 31969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31976 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31979 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 31983 "isa_tms320.tcc"
OpCMPF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 31987 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31991 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 31995 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 31998 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 32002 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 32005 "isa_tms320.tcc"
)
{
#line 1194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "CMPF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 32018 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 32024 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32031 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32034 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32039 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32043 "isa_tms320.tcc"
> *DecodeOpCMPF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 32049 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 32053 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CMPF (compare floating-point values)
**********************************************************/
/**********************************************************
* CMPI (compare integers)
* op CMPI(0b000[3]:0b001001[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 32066 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32069 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32073 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32076 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 32080 "isa_tms320.tcc"
OpCMPI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 32084 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32088 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 32092 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 32095 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 32099 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 32102 "isa_tms320.tcc"
)
{
#line 1217 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "CMPI " << src_name << ", " << dst_name;
		return true;
	}
#line 32116 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 32121 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32124 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32128 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32131 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 32135 "isa_tms320.tcc"
OpCMPI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 32139 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32143 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 32147 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 32150 "isa_tms320.tcc"
)
{
#line 1260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetIntReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 32183 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 32189 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32196 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32199 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32204 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32208 "isa_tms320.tcc"
> *DecodeOpCMPI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 32214 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 32218 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 32225 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32228 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32232 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32235 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 32239 "isa_tms320.tcc"
OpCMPI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 32243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32247 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 32251 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 32254 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 32258 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 32261 "isa_tms320.tcc"
)
{
#line 1228 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "CMPI @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 32275 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 32280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32283 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32287 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32290 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 32294 "isa_tms320.tcc"
OpCMPI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 32298 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32302 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 32306 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 32309 "isa_tms320.tcc"
)
{
#line 1290 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 32345 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 32351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32354 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32358 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32361 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32366 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32370 "isa_tms320.tcc"
> *DecodeOpCMPI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 32376 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 32380 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 32387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32390 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32394 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32397 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 32401 "isa_tms320.tcc"
OpCMPI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 32405 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32409 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 32413 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 32416 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 32420 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 32423 "isa_tms320.tcc"
)
{
#line 1239 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "CMPI " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 32437 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 32442 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32445 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32449 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32452 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 32456 "isa_tms320.tcc"
OpCMPI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 32460 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32464 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 32468 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 32471 "isa_tms320.tcc"
)
{
#line 1323 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 32514 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 32520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32530 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32539 "isa_tms320.tcc"
> *DecodeOpCMPI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 32545 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 32549 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 32556 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32559 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32563 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32566 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 32570 "isa_tms320.tcc"
OpCMPI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 32574 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32578 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 32582 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 32585 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 32589 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 32592 "isa_tms320.tcc"
)
{
#line 1250 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "CMPI " << imm << ", " << dst_name;
		return true;
	}
#line 32605 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 32610 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32613 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32617 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32620 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 32624 "isa_tms320.tcc"
OpCMPI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 32628 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32632 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 32636 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 32639 "isa_tms320.tcc"
)
{
#line 1363 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, dst_value, imm, 0);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 32669 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 32675 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32678 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32682 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32685 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32690 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32694 "isa_tms320.tcc"
> *DecodeOpCMPI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 32700 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 32704 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CMPI (compare integers)
**********************************************************/
/**********************************************************
* FIX (convert floating-point value to integer)
* op FIX(0b000[3]:0b001010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 32717 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32720 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32724 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32727 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 32731 "isa_tms320.tcc"
OpFIX_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 32735 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32739 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 32743 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 32746 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 32750 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 32753 "isa_tms320.tcc"
)
{
#line 1403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "FIX " << src_name << ", " << dst_name;
		return true;
	}
#line 32767 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 32773 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32783 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32788 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32792 "isa_tms320.tcc"
> *DecodeOpFIX_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 32798 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 32802 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 32809 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32812 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32819 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 32823 "isa_tms320.tcc"
OpFIX_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 32827 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32831 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 32835 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 32838 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 32842 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 32845 "isa_tms320.tcc"
)
{
#line 1414 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "FIX @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 32859 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 32865 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32872 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32875 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32880 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32884 "isa_tms320.tcc"
> *DecodeOpFIX_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 32890 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 32894 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 32901 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32908 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32911 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 32915 "isa_tms320.tcc"
OpFIX_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 32919 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32923 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 32927 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 32930 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 32934 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 32937 "isa_tms320.tcc"
)
{
#line 1425 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "FIX " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 32951 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 32957 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32960 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32964 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32967 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32976 "isa_tms320.tcc"
> *DecodeOpFIX_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 32982 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 32986 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 32993 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32996 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33003 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 33007 "isa_tms320.tcc"
OpFIX_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 33011 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33015 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 33019 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 33022 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 33026 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 33029 "isa_tms320.tcc"
)
{
#line 1436 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "FIX " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 33042 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 33048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33051 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33055 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33058 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33063 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33067 "isa_tms320.tcc"
> *DecodeOpFIX_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 33073 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 33077 "isa_tms320.tcc"
	>(code, addr);
}

/* end of FIX (convert floating-point value to integer)
**********************************************************/
/**********************************************************
* FLOAT (convert integer to floating-point value)
* op FLOAT(0b000[3]:0b001011[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 33090 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33093 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33097 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33100 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 33104 "isa_tms320.tcc"
OpFLOAT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 33108 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33112 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 33116 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 33119 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 33123 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 33126 "isa_tms320.tcc"
)
{
#line 1459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "FLOAT " << src_name << ", " << dst_name;
		return true;
	}
#line 33140 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 33146 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33149 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33153 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33156 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33161 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33165 "isa_tms320.tcc"
> *DecodeOpFLOAT_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 33171 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 33175 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 33182 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33185 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33189 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33192 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 33196 "isa_tms320.tcc"
OpFLOAT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 33200 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33204 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 33208 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 33211 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 33215 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 33218 "isa_tms320.tcc"
)
{
#line 1470 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "FLOAT @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 33232 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 33238 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33241 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33245 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33248 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33253 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33257 "isa_tms320.tcc"
> *DecodeOpFLOAT_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 33263 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 33267 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 33274 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33277 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33281 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33284 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 33288 "isa_tms320.tcc"
OpFLOAT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 33292 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33296 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 33300 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 33303 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 33307 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 33310 "isa_tms320.tcc"
)
{
#line 1481 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "FLOAT " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 33324 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 33330 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33337 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33340 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33349 "isa_tms320.tcc"
> *DecodeOpFLOAT_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 33355 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 33359 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 33366 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33369 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33373 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33376 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 33380 "isa_tms320.tcc"
OpFLOAT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 33384 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33388 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 33392 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 33395 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 33399 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 33402 "isa_tms320.tcc"
)
{
#line 1492 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "FLOAT " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 33415 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 33421 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33424 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33428 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33431 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33436 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33440 "isa_tms320.tcc"
> *DecodeOpFLOAT_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 33446 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 33450 "isa_tms320.tcc"
	>(code, addr);
}

/* end of FLOAT (convert integer to floating-point value)
**********************************************************/
/**********************************************************
* LSH (logical shift)
* op LSH(0b000[3]:0b010011[6]:g[2]:dst[5]:count[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 33463 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33466 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33470 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33473 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 33477 "isa_tms320.tcc"
OpLSH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 33481 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33485 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 33489 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 33492 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 33496 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 33499 "isa_tms320.tcc"
)
{
#line 1515 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "LSH " << src_name << ", " << dst_name;
		return true;
	}
#line 33513 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 33519 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33522 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33526 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33529 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33534 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33538 "isa_tms320.tcc"
> *DecodeOpLSH_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 33544 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 33548 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 33555 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33558 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33562 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33565 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 33569 "isa_tms320.tcc"
OpLSH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 33573 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33577 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 33581 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 33584 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 33588 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 33591 "isa_tms320.tcc"
)
{
#line 1526 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "LSH @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 33605 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 33611 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33618 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33621 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33626 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33630 "isa_tms320.tcc"
> *DecodeOpLSH_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 33636 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 33640 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 33647 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33650 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33654 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33657 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 33661 "isa_tms320.tcc"
OpLSH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 33665 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33669 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 33673 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 33676 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 33680 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 33683 "isa_tms320.tcc"
)
{
#line 1537 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "LSH " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 33697 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 33703 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33706 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33710 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33713 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33718 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33722 "isa_tms320.tcc"
> *DecodeOpLSH_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 33728 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 33732 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 33739 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33742 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33746 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33749 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 33753 "isa_tms320.tcc"
OpLSH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 33757 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33761 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 33765 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 33768 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 33772 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 33775 "isa_tms320.tcc"
)
{
#line 1548 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "LSH " << imm << ", " << dst_name;
		return true;
	}
#line 33788 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 33794 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33797 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33801 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33804 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33809 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33813 "isa_tms320.tcc"
> *DecodeOpLSH_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 33819 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 33823 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LSH (logical shift)
**********************************************************/
/**********************************************************
* MPYF (multiply floating-point values)
* op MPYF(0b000[3]:0b010100[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 33836 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33839 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33843 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33846 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 33850 "isa_tms320.tcc"
OpMPYF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 33854 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33858 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 33862 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 33865 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 33869 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 33872 "isa_tms320.tcc"
)
{
#line 1571 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "MPYF " << src_name << ", " << dst_name;
		return true;
	}
#line 33886 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 33892 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33895 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33899 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33902 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33907 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33911 "isa_tms320.tcc"
> *DecodeOpMPYF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 33917 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 33921 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 33928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33931 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33935 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33938 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 33942 "isa_tms320.tcc"
OpMPYF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 33946 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33950 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 33954 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 33957 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 33961 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 33964 "isa_tms320.tcc"
)
{
#line 1582 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "MPYF @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 33978 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 33984 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33987 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33991 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33994 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33999 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34003 "isa_tms320.tcc"
> *DecodeOpMPYF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 34009 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 34013 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 34020 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34023 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34030 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 34034 "isa_tms320.tcc"
OpMPYF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 34038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34042 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 34046 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 34049 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 34053 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 34056 "isa_tms320.tcc"
)
{
#line 1593 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "MPYF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 34070 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 34076 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34079 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34083 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34086 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34091 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34095 "isa_tms320.tcc"
> *DecodeOpMPYF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 34101 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 34105 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 34112 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34115 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34119 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34122 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 34126 "isa_tms320.tcc"
OpMPYF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 34130 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34134 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 34138 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 34141 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 34145 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 34148 "isa_tms320.tcc"
)
{
#line 1604 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "MPYF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 34161 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 34167 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34170 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34174 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34177 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34182 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34186 "isa_tms320.tcc"
> *DecodeOpMPYF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 34192 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 34196 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF (multiply floating-point values)
**********************************************************/
/**********************************************************
* MPYI (multiply integers)
* op MPYI(0b000[3]:0b010101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 34209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34219 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 34223 "isa_tms320.tcc"
OpMPYI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 34227 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34231 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 34235 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 34238 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 34242 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 34245 "isa_tms320.tcc"
)
{
#line 1627 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "MPYI " << src_name << ", " << dst_name;
		return true;
	}
#line 34259 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 34265 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34268 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34272 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34275 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34280 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34284 "isa_tms320.tcc"
> *DecodeOpMPYI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 34290 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 34294 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 34301 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34304 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34308 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34311 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 34315 "isa_tms320.tcc"
OpMPYI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 34319 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34323 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 34327 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 34330 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 34334 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 34337 "isa_tms320.tcc"
)
{
#line 1638 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "MPYI @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 34351 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 34357 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34364 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34367 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34372 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34376 "isa_tms320.tcc"
> *DecodeOpMPYI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 34382 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 34386 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 34393 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34396 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34400 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34403 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 34407 "isa_tms320.tcc"
OpMPYI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 34411 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34415 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 34419 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 34422 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 34426 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 34429 "isa_tms320.tcc"
)
{
#line 1649 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "MPYI " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 34443 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 34449 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34452 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34456 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34459 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34464 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34468 "isa_tms320.tcc"
> *DecodeOpMPYI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 34474 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 34478 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 34485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34495 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 34499 "isa_tms320.tcc"
OpMPYI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 34503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34507 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 34511 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 34514 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 34518 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 34521 "isa_tms320.tcc"
)
{
#line 1660 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "MPYI " << imm << ", " << dst_name;
		return true;
	}
#line 34534 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 34540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34543 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34547 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34550 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34555 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34559 "isa_tms320.tcc"
> *DecodeOpMPYI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 34565 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 34569 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYI (multiply integers)
**********************************************************/
/**********************************************************
* NEGB (negate integer with borrow)
* op NEGB(0b000[3]:0b010110[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 34582 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34585 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34589 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34592 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 34596 "isa_tms320.tcc"
OpNEGB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 34600 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34604 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 34608 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 34611 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 34615 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 34618 "isa_tms320.tcc"
)
{
#line 1683 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NEGB " << src_name << ", " << dst_name;
		return true;
	}
#line 34632 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 34638 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34641 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34645 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34648 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34653 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34657 "isa_tms320.tcc"
> *DecodeOpNEGB_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 34663 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 34667 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 34674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34677 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34684 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 34688 "isa_tms320.tcc"
OpNEGB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 34692 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34696 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 34700 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 34703 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 34707 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 34710 "isa_tms320.tcc"
)
{
#line 1694 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "NEGB @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 34724 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 34730 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34733 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34737 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34740 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34745 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34749 "isa_tms320.tcc"
> *DecodeOpNEGB_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 34755 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 34759 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 34766 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34769 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34773 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34776 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 34780 "isa_tms320.tcc"
OpNEGB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 34784 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34788 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 34792 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 34795 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 34799 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 34802 "isa_tms320.tcc"
)
{
#line 1705 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "NEGB " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 34816 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 34822 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34825 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34832 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34837 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34841 "isa_tms320.tcc"
> *DecodeOpNEGB_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 34847 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 34851 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 34858 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34861 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34865 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34868 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 34872 "isa_tms320.tcc"
OpNEGB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 34876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34880 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 34884 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 34887 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 34891 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 34894 "isa_tms320.tcc"
)
{
#line 1716 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NEGB " << imm << ", " << dst_name;
		return true;
	}
#line 34907 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 34913 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34916 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34920 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34923 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34932 "isa_tms320.tcc"
> *DecodeOpNEGB_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 34938 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 34942 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGB (negate integer with borrow)
**********************************************************/
/**********************************************************
* NEGF (negate floating-point value)
* op NEGF(0b000[3]:0b010111[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 34955 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34958 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34962 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34965 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 34969 "isa_tms320.tcc"
OpNEGF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 34973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34977 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 34981 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 34984 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 34988 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 34991 "isa_tms320.tcc"
)
{
#line 1739 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NEGF " << src_name << ", " << dst_name;
		return true;
	}
#line 35005 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 35011 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35014 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35018 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35021 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35026 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35030 "isa_tms320.tcc"
> *DecodeOpNEGF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 35036 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 35040 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 35047 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35050 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35054 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35057 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 35061 "isa_tms320.tcc"
OpNEGF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 35065 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35069 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 35073 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 35076 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 35080 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 35083 "isa_tms320.tcc"
)
{
#line 1750 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "NEGF @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 35097 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 35103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35106 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35110 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35113 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35118 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35122 "isa_tms320.tcc"
> *DecodeOpNEGF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 35128 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 35132 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 35139 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35142 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35146 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35149 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 35153 "isa_tms320.tcc"
OpNEGF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 35157 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35161 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 35165 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 35168 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 35172 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 35175 "isa_tms320.tcc"
)
{
#line 1761 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "NEGF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 35189 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 35195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35205 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35210 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35214 "isa_tms320.tcc"
> *DecodeOpNEGF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 35220 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 35224 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 35231 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35234 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35238 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35241 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 35245 "isa_tms320.tcc"
OpNEGF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 35249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35253 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 35257 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 35260 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 35264 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 35267 "isa_tms320.tcc"
)
{
#line 1772 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NEGF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 35280 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 35286 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35289 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35293 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35296 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35301 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35305 "isa_tms320.tcc"
> *DecodeOpNEGF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 35311 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 35315 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGF (negate floating-point value)
**********************************************************/
/**********************************************************
* NEGI (negate integer)
* op NEGI(0b000[3]:0b011000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 35328 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35331 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35335 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35338 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 35342 "isa_tms320.tcc"
OpNEGI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 35346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35350 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 35354 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 35357 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 35361 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 35364 "isa_tms320.tcc"
)
{
#line 1795 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NEGI " << src_name << ", " << dst_name;
		return true;
	}
#line 35378 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 35384 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35391 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35394 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35399 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35403 "isa_tms320.tcc"
> *DecodeOpNEGI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 35409 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 35413 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 35420 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35423 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35427 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35430 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 35434 "isa_tms320.tcc"
OpNEGI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 35438 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35442 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 35446 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 35449 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 35453 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 35456 "isa_tms320.tcc"
)
{
#line 1806 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "NEGI @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 35470 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 35476 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35479 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35483 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35486 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35491 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35495 "isa_tms320.tcc"
> *DecodeOpNEGI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 35501 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 35505 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 35512 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35519 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35522 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 35526 "isa_tms320.tcc"
OpNEGI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 35530 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35534 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 35538 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 35541 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 35545 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 35548 "isa_tms320.tcc"
)
{
#line 1817 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "NEGI " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 35562 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 35568 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35571 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35575 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35578 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35583 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35587 "isa_tms320.tcc"
> *DecodeOpNEGI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 35593 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 35597 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 35604 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35607 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35611 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35614 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 35618 "isa_tms320.tcc"
OpNEGI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 35622 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35626 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 35630 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 35633 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 35637 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 35640 "isa_tms320.tcc"
)
{
#line 1828 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NEGI " << imm << ", " << dst_name;
		return true;
	}
#line 35653 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 35659 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35662 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35666 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35669 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35674 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35678 "isa_tms320.tcc"
> *DecodeOpNEGI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 35684 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 35688 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGI (negate integer)
**********************************************************/
/**********************************************************
* NORM (normalize floating-point value)
* op NORM(0b000[3]:0b011010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 35701 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35708 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35711 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 35715 "isa_tms320.tcc"
OpNORM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 35719 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35723 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 35727 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 35730 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 35734 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 35737 "isa_tms320.tcc"
)
{
#line 1851 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NORM " << src_name << ", " << dst_name;
		return true;
	}
#line 35751 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 35757 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35760 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35764 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35767 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35772 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35776 "isa_tms320.tcc"
> *DecodeOpNORM_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNORM_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 35782 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 35786 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 35793 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35800 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35803 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 35807 "isa_tms320.tcc"
OpNORM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 35811 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35815 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 35819 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 35822 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 35826 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 35829 "isa_tms320.tcc"
)
{
#line 1862 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "NORM @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 35843 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 35849 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35852 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35856 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35859 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35864 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35868 "isa_tms320.tcc"
> *DecodeOpNORM_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNORM_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 35874 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 35878 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 35885 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35888 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35892 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35895 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 35899 "isa_tms320.tcc"
OpNORM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 35903 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35907 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 35911 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 35914 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 35918 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 35921 "isa_tms320.tcc"
)
{
#line 1873 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "NORM " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 35935 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 35941 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35944 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35948 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35951 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35956 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35960 "isa_tms320.tcc"
> *DecodeOpNORM_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNORM_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 35966 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 35970 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 35977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35984 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35987 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 35991 "isa_tms320.tcc"
OpNORM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 35995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35999 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 36003 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 36006 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 36010 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 36013 "isa_tms320.tcc"
)
{
#line 1884 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NORM " << imm << ", " << dst_name;
		return true;
	}
#line 36026 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 36032 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36035 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36039 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36042 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36047 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36051 "isa_tms320.tcc"
> *DecodeOpNORM_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNORM_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 36057 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 36061 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NORM (normalize floating-point value)
**********************************************************/
/**********************************************************
* NOT (bitwise-logical complement)
* op NOT(0b000[3]:0b011011[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 36074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36077 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36081 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36084 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 36088 "isa_tms320.tcc"
OpNOT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 36092 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36096 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 36100 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 36103 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 36107 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 36110 "isa_tms320.tcc"
)
{
#line 1907 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NOT " << src_name << ", " << dst_name;
		return true;
	}
#line 36124 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 36130 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36140 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36145 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36149 "isa_tms320.tcc"
> *DecodeOpNOT_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 36155 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 36159 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 36166 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36169 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36173 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36176 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 36180 "isa_tms320.tcc"
OpNOT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 36184 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36188 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 36192 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 36195 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 36199 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 36202 "isa_tms320.tcc"
)
{
#line 1918 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "NOT @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 36216 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 36222 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36225 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36229 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36232 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36241 "isa_tms320.tcc"
> *DecodeOpNOT_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 36247 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 36251 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 36258 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36261 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36265 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36268 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 36272 "isa_tms320.tcc"
OpNOT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 36276 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36280 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 36284 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 36287 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 36291 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 36294 "isa_tms320.tcc"
)
{
#line 1929 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "NOT " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 36308 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 36314 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36317 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36321 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36324 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36329 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36333 "isa_tms320.tcc"
> *DecodeOpNOT_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 36339 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 36343 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 36350 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36353 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36357 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36360 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 36364 "isa_tms320.tcc"
OpNOT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 36368 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36372 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 36376 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 36379 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 36383 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 36386 "isa_tms320.tcc"
)
{
#line 1940 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NOT " << imm << ", " << dst_name;
		return true;
	}
#line 36399 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 36405 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36408 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36412 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36415 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36420 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36424 "isa_tms320.tcc"
> *DecodeOpNOT_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 36430 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 36434 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NOT (bitwise-logical complement)
**********************************************************/
/**********************************************************
* OR (bitwise-logical OR)
* op OR(0b000[3]:0b100000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 36447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36450 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36457 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 36461 "isa_tms320.tcc"
OpOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 36465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36469 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 36473 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 36476 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 36480 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 36483 "isa_tms320.tcc"
)
{
#line 1963 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "OR " << src_name << ", " << dst_name;
		return true;
	}
#line 36497 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 36503 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36506 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36510 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36513 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36518 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36522 "isa_tms320.tcc"
> *DecodeOpOR_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 36528 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 36532 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 36539 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36542 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36546 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36549 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 36553 "isa_tms320.tcc"
OpOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 36557 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36561 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 36565 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 36568 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 36572 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 36575 "isa_tms320.tcc"
)
{
#line 1974 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "OR @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 36589 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 36595 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36598 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36602 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36605 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36610 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36614 "isa_tms320.tcc"
> *DecodeOpOR_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 36620 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 36624 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 36631 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36634 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36638 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36641 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 36645 "isa_tms320.tcc"
OpOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 36649 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36653 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 36657 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 36660 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 36664 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 36667 "isa_tms320.tcc"
)
{
#line 1985 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "OR " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 36681 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 36687 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36690 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36694 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36697 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36702 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36706 "isa_tms320.tcc"
> *DecodeOpOR_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 36712 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 36716 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 36723 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36726 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36730 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36733 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 36737 "isa_tms320.tcc"
OpOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 36741 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36745 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 36749 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 36752 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 36756 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 36759 "isa_tms320.tcc"
)
{
#line 1996 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "OR " << imm << ", " << dst_name;
		return true;
	}
#line 36772 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 36778 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36781 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36785 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36788 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36793 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36797 "isa_tms320.tcc"
> *DecodeOpOR_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 36803 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 36807 "isa_tms320.tcc"
	>(code, addr);
}

/* end of OR (bitwise-logical OR)
**********************************************************/
/**********************************************************
* RND (round floating-point value)
* op RND(0b000[3]:0b100010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 36820 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36827 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36830 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 36834 "isa_tms320.tcc"
OpRND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 36838 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36842 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 36846 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 36849 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 36853 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 36856 "isa_tms320.tcc"
)
{
#line 2019 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "RND " << src_name << ", " << dst_name;
		return true;
	}
#line 36870 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 36876 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36879 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36883 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36886 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36891 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36895 "isa_tms320.tcc"
> *DecodeOpRND_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRND_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 36901 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 36905 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 36912 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36915 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36919 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36922 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 36926 "isa_tms320.tcc"
OpRND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 36930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36934 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 36938 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 36941 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 36945 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 36948 "isa_tms320.tcc"
)
{
#line 2030 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "RND @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 36962 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 36968 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36971 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36975 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36978 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36987 "isa_tms320.tcc"
> *DecodeOpRND_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRND_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 36993 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 36997 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 37004 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37007 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37011 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37014 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 37018 "isa_tms320.tcc"
OpRND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 37022 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37026 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 37030 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 37033 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 37037 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 37040 "isa_tms320.tcc"
)
{
#line 2041 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "RND " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 37054 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 37060 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37063 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37067 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37070 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37075 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37079 "isa_tms320.tcc"
> *DecodeOpRND_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRND_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 37085 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 37089 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 37096 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37099 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37106 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 37110 "isa_tms320.tcc"
OpRND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 37114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37118 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 37122 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 37125 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 37129 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 37132 "isa_tms320.tcc"
)
{
#line 2052 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "RND " << imm << ", " << dst_name;
		return true;
	}
#line 37145 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 37151 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37154 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37158 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37161 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37166 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37170 "isa_tms320.tcc"
> *DecodeOpRND_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRND_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 37176 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 37180 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RND (round floating-point value)
**********************************************************/
/**********************************************************
* ROL (rotate left)
* op ROL(0b000[3]:0b100011[6]:0b11[2]:dst[5]:0b0000000000000001[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 37193 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37196 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37200 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37203 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 37207 "isa_tms320.tcc"
OpROL<
#line 45 "isa/tms320.isa"
CONFIG
#line 37211 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37215 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 37219 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 37222 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 37226 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 37229 "isa_tms320.tcc"
)
{
#line 2072 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ROL " << dst_name;
		return true;
	}
#line 37242 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 37248 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37251 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37255 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37258 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37263 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37267 "isa_tms320.tcc"
> *DecodeOpROL(CodeType code, typename CONFIG::address_t addr)
{
	return new OpROL<
#line 45 "isa/tms320.isa"
	CONFIG
#line 37273 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 37277 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ROL (rotate left)
**********************************************************/
/**********************************************************
* ROLC (rotate left through carry)
* op ROLC(0b000[3]:0b100100[6]:0b11[2]:dst[5]:0b0000000000000001[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 37290 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37293 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37297 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37300 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 37304 "isa_tms320.tcc"
OpROLC<
#line 45 "isa/tms320.isa"
CONFIG
#line 37308 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37312 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 37316 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 37319 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 37323 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 37326 "isa_tms320.tcc"
)
{
#line 2092 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ROLC " << dst_name;
		return true;
	}
#line 37339 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 37345 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37352 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37355 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37364 "isa_tms320.tcc"
> *DecodeOpROLC(CodeType code, typename CONFIG::address_t addr)
{
	return new OpROLC<
#line 45 "isa/tms320.isa"
	CONFIG
#line 37370 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 37374 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ROLC (rotate left through carry)
**********************************************************/
/**********************************************************
* ROR (rotate right)
* op ROR(0b000[3]:0b100101[6]:0b11[2]:dst[5]:0b1111111111111111[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 37387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37390 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37394 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37397 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 37401 "isa_tms320.tcc"
OpROR<
#line 45 "isa/tms320.isa"
CONFIG
#line 37405 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37409 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 37413 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 37416 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 37420 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 37423 "isa_tms320.tcc"
)
{
#line 2112 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ROR " << dst_name;
		return true;
	}
#line 37436 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 37441 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37444 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37448 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37451 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 37455 "isa_tms320.tcc"
OpROR<
#line 45 "isa/tms320.isa"
CONFIG
#line 37459 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37463 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 37467 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 37470 "isa_tms320.tcc"
)
{
#line 2122 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Compute the result
		uint8_t carry_out;
		uint32_t result = RotateRight(dst_value, 1, carry_out);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 37503 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 37509 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37512 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37516 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37519 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37524 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37528 "isa_tms320.tcc"
> *DecodeOpROR(CodeType code, typename CONFIG::address_t addr)
{
	return new OpROR<
#line 45 "isa/tms320.isa"
	CONFIG
#line 37534 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 37538 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ROR (rotate right)
**********************************************************/
/**********************************************************
* RORC (rotate right through carry)
* op RORC(0b000[3]:0b100110[6]:0b11[2]:dst[5]:0b1111111111111111[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 37551 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37554 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37558 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37561 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 37565 "isa_tms320.tcc"
OpRORC<
#line 45 "isa/tms320.isa"
CONFIG
#line 37569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37573 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 37577 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 37580 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 37584 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 37587 "isa_tms320.tcc"
)
{
#line 2162 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "RORC " << dst_name;
		return true;
	}
#line 37600 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 37605 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37608 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37612 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37615 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 37619 "isa_tms320.tcc"
OpRORC<
#line 45 "isa/tms320.isa"
CONFIG
#line 37623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37627 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 37631 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 37634 "isa_tms320.tcc"
)
{
#line 2172 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint8_t carry_out;
		uint32_t result = RotateRight(dst_value, 1, carry_in, carry_out);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 37670 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 37676 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37679 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37683 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37686 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37691 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37695 "isa_tms320.tcc"
> *DecodeOpRORC(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRORC<
#line 45 "isa/tms320.isa"
	CONFIG
#line 37701 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 37705 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RORC (rotate right through carry)
**********************************************************/
/**********************************************************
* SUBB (subtract integers with borrow)
* op SUBB(0b000[3]:0b101101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 37718 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37721 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37725 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37728 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 37732 "isa_tms320.tcc"
OpSUBB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 37736 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37740 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 37744 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 37747 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 37751 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 37754 "isa_tms320.tcc"
)
{
#line 2218 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBB " << src_name << ", " << dst_name;
		return true;
	}
#line 37768 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 37773 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37783 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 37787 "isa_tms320.tcc"
OpSUBB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 37791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37795 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 37799 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 37802 "isa_tms320.tcc"
)
{
#line 2261 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetIntReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 37849 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 37855 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37858 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37862 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37865 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37870 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37874 "isa_tms320.tcc"
> *DecodeOpSUBB_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 37880 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 37884 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 37891 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37898 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37901 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 37905 "isa_tms320.tcc"
OpSUBB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 37909 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37913 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 37917 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 37920 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 37924 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 37927 "isa_tms320.tcc"
)
{
#line 2229 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "SUBB @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 37941 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 37946 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37949 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37953 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37956 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 37960 "isa_tms320.tcc"
OpSUBB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 37964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37968 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 37972 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 37975 "isa_tms320.tcc"
)
{
#line 2305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 38025 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 38031 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38034 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38038 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38041 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38046 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38050 "isa_tms320.tcc"
> *DecodeOpSUBB_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 38056 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 38060 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 38067 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38077 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 38081 "isa_tms320.tcc"
OpSUBB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 38085 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38089 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 38093 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 38096 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 38100 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 38103 "isa_tms320.tcc"
)
{
#line 2240 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "SUBB " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 38117 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 38122 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38125 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38129 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38132 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 38136 "isa_tms320.tcc"
OpSUBB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 38140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38144 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 38148 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 38151 "isa_tms320.tcc"
)
{
#line 2352 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 38208 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 38214 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38217 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38221 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38224 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38229 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38233 "isa_tms320.tcc"
> *DecodeOpSUBB_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 38239 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 38243 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 38250 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38253 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38257 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38260 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 38264 "isa_tms320.tcc"
OpSUBB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 38268 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38272 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 38276 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 38279 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 38283 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 38286 "isa_tms320.tcc"
)
{
#line 2251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBB " << imm << ", " << dst_name;
		return true;
	}
#line 38299 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 38304 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38307 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38311 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38314 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 38318 "isa_tms320.tcc"
OpSUBB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 38322 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38326 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 38330 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 38333 "isa_tms320.tcc"
)
{
#line 2406 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, imm, borrow_in);
		else
		Sub32(result, borrow_out, overflow, dst_value, imm, borrow_in);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 38377 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 38383 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38386 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38390 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38393 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38398 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38402 "isa_tms320.tcc"
> *DecodeOpSUBB_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 38408 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 38412 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBB (subtract integers with borrow)
**********************************************************/
/**********************************************************
* SUBC (subtract integers conditionally)
* op SUBC(0b000[3]:0b101110[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 38425 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38428 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38432 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38435 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 38439 "isa_tms320.tcc"
OpSUBC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 38443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38447 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 38451 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 38454 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 38458 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 38461 "isa_tms320.tcc"
)
{
#line 2460 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBC " << src_name << ", " << dst_name;
		return true;
	}
#line 38475 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 38481 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38491 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38500 "isa_tms320.tcc"
> *DecodeOpSUBC_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBC_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 38506 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 38510 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 38517 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38520 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38524 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38527 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 38531 "isa_tms320.tcc"
OpSUBC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 38535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38539 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 38543 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 38546 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 38550 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 38553 "isa_tms320.tcc"
)
{
#line 2471 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "SUBC @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 38567 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 38573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38580 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38583 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38588 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38592 "isa_tms320.tcc"
> *DecodeOpSUBC_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBC_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 38598 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 38602 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 38609 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38612 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38619 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 38623 "isa_tms320.tcc"
OpSUBC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 38627 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38631 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 38635 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 38638 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 38642 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 38645 "isa_tms320.tcc"
)
{
#line 2482 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "SUBC " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 38659 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 38665 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38668 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38672 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38675 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38680 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38684 "isa_tms320.tcc"
> *DecodeOpSUBC_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBC_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 38690 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 38694 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 38701 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38708 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38711 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 38715 "isa_tms320.tcc"
OpSUBC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 38719 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38723 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 38727 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 38730 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 38734 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 38737 "isa_tms320.tcc"
)
{
#line 2493 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBC " << imm << ", " << dst_name;
		return true;
	}
#line 38750 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 38756 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38759 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38766 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38771 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38775 "isa_tms320.tcc"
> *DecodeOpSUBC_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBC_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 38781 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 38785 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBC (subtract integers conditionally)
**********************************************************/
/**********************************************************
* SUBF (subtract floating-point values)
* op SUBF(0b000[3]:0b101111[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 38798 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38801 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38805 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38808 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 38812 "isa_tms320.tcc"
OpSUBF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 38816 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38820 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 38824 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 38827 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 38831 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 38834 "isa_tms320.tcc"
)
{
#line 2516 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBF " << src_name << ", " << dst_name;
		return true;
	}
#line 38848 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 38854 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38857 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38861 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38864 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38869 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38873 "isa_tms320.tcc"
> *DecodeOpSUBF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 38879 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 38883 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 38890 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38893 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38897 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38900 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 38904 "isa_tms320.tcc"
OpSUBF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 38908 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38912 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 38916 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 38919 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 38923 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 38926 "isa_tms320.tcc"
)
{
#line 2527 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "SUBF @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 38940 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 38946 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38949 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38953 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38956 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38961 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38965 "isa_tms320.tcc"
> *DecodeOpSUBF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 38971 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 38975 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 38982 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38985 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38989 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38992 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 38996 "isa_tms320.tcc"
OpSUBF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 39000 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39004 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 39008 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 39011 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 39015 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 39018 "isa_tms320.tcc"
)
{
#line 2538 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "SUBF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 39032 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 39038 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39041 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39045 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39048 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39053 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39057 "isa_tms320.tcc"
> *DecodeOpSUBF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 39063 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 39067 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 39074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39077 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39081 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39084 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 39088 "isa_tms320.tcc"
OpSUBF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 39092 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39096 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 39100 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 39103 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 39107 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 39110 "isa_tms320.tcc"
)
{
#line 2549 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 39123 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 39129 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39132 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39136 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39139 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39144 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39148 "isa_tms320.tcc"
> *DecodeOpSUBF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 39154 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 39158 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBF (subtract floating-point values)
**********************************************************/
/**********************************************************
* SUBI (subtract integer)
* op SUBI(0b000[3]:0b110000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 39171 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39174 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39178 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39181 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 39185 "isa_tms320.tcc"
OpSUBI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 39189 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39193 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 39197 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 39200 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 39204 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 39207 "isa_tms320.tcc"
)
{
#line 2572 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBI " << src_name << ", " << dst_name;
		return true;
	}
#line 39221 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 39226 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39229 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39233 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39236 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 39240 "isa_tms320.tcc"
OpSUBI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 39244 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39248 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 39252 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 39255 "isa_tms320.tcc"
)
{
#line 2615 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetIntReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 39299 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 39305 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39308 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39312 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39315 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39324 "isa_tms320.tcc"
> *DecodeOpSUBI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 39330 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 39334 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 39341 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39344 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39348 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39351 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 39355 "isa_tms320.tcc"
OpSUBI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 39359 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39363 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 39367 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 39370 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 39374 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 39377 "isa_tms320.tcc"
)
{
#line 2583 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "SUBI @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 39391 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 39396 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39399 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39403 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39406 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 39410 "isa_tms320.tcc"
OpSUBI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 39414 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39418 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 39422 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 39425 "isa_tms320.tcc"
)
{
#line 2656 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 39472 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 39478 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39481 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39488 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39493 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39497 "isa_tms320.tcc"
> *DecodeOpSUBI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 39503 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 39507 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 39514 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39517 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39521 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39524 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 39528 "isa_tms320.tcc"
OpSUBI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 39532 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39536 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 39540 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 39543 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 39547 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 39550 "isa_tms320.tcc"
)
{
#line 2594 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "SUBI " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 39564 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 39569 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39572 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39576 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39579 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 39583 "isa_tms320.tcc"
OpSUBI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 39587 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39591 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 39595 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 39598 "isa_tms320.tcc"
)
{
#line 2700 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 39652 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 39658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39661 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39665 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39668 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39673 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39677 "isa_tms320.tcc"
> *DecodeOpSUBI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 39683 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 39687 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 39694 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39697 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39701 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39704 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 39708 "isa_tms320.tcc"
OpSUBI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 39712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39716 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 39720 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 39723 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 39727 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 39730 "isa_tms320.tcc"
)
{
#line 2605 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBI " << imm << ", " << dst_name;
		return true;
	}
#line 39743 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 39748 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39751 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39755 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39758 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 39762 "isa_tms320.tcc"
OpSUBI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 39766 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39770 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 39774 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 39777 "isa_tms320.tcc"
)
{
#line 2751 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, imm, 0);
		else
		Sub32(result, borrow_out, overflow, dst_value, imm, 0);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 39818 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 39824 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39827 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39831 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39834 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39839 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39843 "isa_tms320.tcc"
> *DecodeOpSUBI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 39849 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 39853 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBI (subtract integer)
**********************************************************/
/**********************************************************
* SUBRB (subtract reverse integer with borrow)
* op SUBRB(0b000[3]:0b110001[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 39866 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39869 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39873 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39876 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 39880 "isa_tms320.tcc"
OpSUBRB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 39884 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39888 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 39892 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 39895 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 39899 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 39902 "isa_tms320.tcc"
)
{
#line 2802 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBRB " << src_name << ", " << dst_name;
		return true;
	}
#line 39916 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 39921 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39924 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39931 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 39935 "isa_tms320.tcc"
OpSUBRB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 39939 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39943 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 39947 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 39950 "isa_tms320.tcc"
)
{
#line 2845 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetIntReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 39997 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 40003 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40006 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40010 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40013 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40018 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40022 "isa_tms320.tcc"
> *DecodeOpSUBRB_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 40028 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 40032 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 40039 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40046 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40049 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 40053 "isa_tms320.tcc"
OpSUBRB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 40057 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40061 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 40065 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 40068 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 40072 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 40075 "isa_tms320.tcc"
)
{
#line 2813 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "SUBRB @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 40089 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 40094 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40097 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40104 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 40108 "isa_tms320.tcc"
OpSUBRB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 40112 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40116 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 40120 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 40123 "isa_tms320.tcc"
)
{
#line 2889 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 40173 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 40179 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40182 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40186 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40189 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40194 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40198 "isa_tms320.tcc"
> *DecodeOpSUBRB_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 40204 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 40208 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 40215 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40218 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40222 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40225 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 40229 "isa_tms320.tcc"
OpSUBRB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 40233 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40237 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 40241 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 40244 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 40248 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 40251 "isa_tms320.tcc"
)
{
#line 2824 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "SUBRB " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 40265 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 40270 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40273 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40277 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40280 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 40284 "isa_tms320.tcc"
OpSUBRB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 40288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40292 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 40296 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 40299 "isa_tms320.tcc"
)
{
#line 2936 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 40356 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 40362 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40365 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40369 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40372 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40377 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40381 "isa_tms320.tcc"
> *DecodeOpSUBRB_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 40387 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 40391 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 40398 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40401 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40405 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40408 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 40412 "isa_tms320.tcc"
OpSUBRB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 40416 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40420 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 40424 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 40427 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 40431 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 40434 "isa_tms320.tcc"
)
{
#line 2835 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBRB " << imm << ", " << dst_name;
		return true;
	}
#line 40447 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 40452 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40455 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40459 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40462 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 40466 "isa_tms320.tcc"
OpSUBRB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 40470 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40474 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 40478 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 40481 "isa_tms320.tcc"
)
{
#line 2990 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, imm, dst_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, imm, dst_value, borrow_in);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 40525 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 40531 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40534 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40538 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40541 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40546 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40550 "isa_tms320.tcc"
> *DecodeOpSUBRB_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 40556 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 40560 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBRB (subtract reverse integer with borrow)
**********************************************************/
/**********************************************************
* SUBRF (subtract reverse floating-point value)
* op SUBRF(0b000[3]:0b110010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 40573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40580 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40583 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 40587 "isa_tms320.tcc"
OpSUBRF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 40591 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40595 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 40599 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 40602 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 40606 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 40609 "isa_tms320.tcc"
)
{
#line 3044 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBRF " << src_name << ", " << dst_name;
		return true;
	}
#line 40623 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 40629 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40632 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40636 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40639 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40648 "isa_tms320.tcc"
> *DecodeOpSUBRF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 40654 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 40658 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 40665 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40668 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40672 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40675 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 40679 "isa_tms320.tcc"
OpSUBRF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 40683 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40687 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 40691 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 40694 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 40698 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 40701 "isa_tms320.tcc"
)
{
#line 3055 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "SUBRF @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 40715 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 40721 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40724 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40728 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40731 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40736 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40740 "isa_tms320.tcc"
> *DecodeOpSUBRF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 40746 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 40750 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 40757 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40760 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40764 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40767 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 40771 "isa_tms320.tcc"
OpSUBRF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 40775 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40779 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 40783 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 40786 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 40790 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 40793 "isa_tms320.tcc"
)
{
#line 3066 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "SUBRF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 40807 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 40813 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40816 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40820 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40823 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40828 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40832 "isa_tms320.tcc"
> *DecodeOpSUBRF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 40838 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 40842 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 40849 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40852 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40856 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40859 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 40863 "isa_tms320.tcc"
OpSUBRF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 40867 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40871 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 40875 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 40878 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 40882 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 40885 "isa_tms320.tcc"
)
{
#line 3077 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBRF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 40898 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 40904 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40907 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40911 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40914 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40919 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40923 "isa_tms320.tcc"
> *DecodeOpSUBRF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 40929 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 40933 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBRF (subtract reverse floating-point value)
**********************************************************/
/**********************************************************
* SUBRI (subtract reverse integer)
* op SUBRI(0b000[3]:0b110011[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 40946 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40949 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40953 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40956 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 40960 "isa_tms320.tcc"
OpSUBRI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 40964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40968 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 40972 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 40975 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 40979 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 40982 "isa_tms320.tcc"
)
{
#line 3100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBRI " << src_name << ", " << dst_name;
		return true;
	}
#line 40996 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 41001 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41004 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41008 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41011 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 41015 "isa_tms320.tcc"
OpSUBRI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 41019 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41023 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 41027 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 41030 "isa_tms320.tcc"
)
{
#line 3143 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetIntReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, 0);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, 0);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 41074 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 41080 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41090 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41095 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41099 "isa_tms320.tcc"
> *DecodeOpSUBRI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 41105 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 41109 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 41116 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41119 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41123 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41126 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 41130 "isa_tms320.tcc"
OpSUBRI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 41134 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41138 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 41142 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 41145 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 41149 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 41152 "isa_tms320.tcc"
)
{
#line 3111 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "SUBRI @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 41166 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 41171 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41174 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41178 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41181 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 41185 "isa_tms320.tcc"
OpSUBRI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 41189 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41193 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 41197 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 41200 "isa_tms320.tcc"
)
{
#line 3184 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, 0);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, 0);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 41247 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 41253 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41256 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41260 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41263 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41268 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41272 "isa_tms320.tcc"
> *DecodeOpSUBRI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 41278 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 41282 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 41289 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41292 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41296 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41299 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 41303 "isa_tms320.tcc"
OpSUBRI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 41307 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41311 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 41315 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 41318 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 41322 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 41325 "isa_tms320.tcc"
)
{
#line 3122 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "SUBRI " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 41339 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 41344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41347 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41354 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 41358 "isa_tms320.tcc"
OpSUBRI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 41362 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41366 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 41370 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 41373 "isa_tms320.tcc"
)
{
#line 3228 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, 0);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 41427 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 41433 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41436 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41443 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41448 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41452 "isa_tms320.tcc"
> *DecodeOpSUBRI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 41458 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 41462 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 41469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41476 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41479 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 41483 "isa_tms320.tcc"
OpSUBRI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 41487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41491 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 41495 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 41498 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 41502 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 41505 "isa_tms320.tcc"
)
{
#line 3133 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBRI " << imm << ", " << dst_name;
		return true;
	}
#line 41518 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 41523 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41526 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41530 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41533 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 41537 "isa_tms320.tcc"
OpSUBRI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 41541 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41545 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 41549 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 41552 "isa_tms320.tcc"
)
{
#line 3279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetIntReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, imm, dst_value, 0);
		else
		Sub32(result, borrow_out, overflow, imm, dst_value, 0);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 41593 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 41599 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41602 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41606 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41609 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41618 "isa_tms320.tcc"
> *DecodeOpSUBRI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 41624 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 41628 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBRI (subtract reverse integer)
**********************************************************/
/**********************************************************
* TSTB (test bit fields)
* op TSTB(0b000[3]:0b110100[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 41641 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41651 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 41655 "isa_tms320.tcc"
OpTSTB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 41659 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41663 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 41667 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 41670 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 41674 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 41677 "isa_tms320.tcc"
)
{
#line 3330 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "TSTB " << src_name << ", " << dst_name;
		return true;
	}
#line 41691 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 41697 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41704 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41707 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41716 "isa_tms320.tcc"
> *DecodeOpTSTB_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 41722 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 41726 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 41733 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41736 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41740 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41743 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 41747 "isa_tms320.tcc"
OpTSTB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 41751 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41755 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 41759 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 41762 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 41766 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 41769 "isa_tms320.tcc"
)
{
#line 3341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "TSTB @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 41783 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 41789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41796 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41799 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41808 "isa_tms320.tcc"
> *DecodeOpTSTB_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 41814 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 41818 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 41825 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41828 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41832 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41835 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 41839 "isa_tms320.tcc"
OpTSTB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 41843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41847 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 41851 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 41854 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 41858 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 41861 "isa_tms320.tcc"
)
{
#line 3352 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "TSTB " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 41875 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 41881 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41884 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41888 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41891 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41896 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41900 "isa_tms320.tcc"
> *DecodeOpTSTB_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 41906 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 41910 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 41917 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41920 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41924 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41927 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 41931 "isa_tms320.tcc"
OpTSTB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 41935 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41939 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 41943 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 41946 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 41950 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 41953 "isa_tms320.tcc"
)
{
#line 3363 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "TSTB " << imm << ", " << dst_name;
		return true;
	}
#line 41966 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 41972 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41975 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41979 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41982 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41987 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41991 "isa_tms320.tcc"
> *DecodeOpTSTB_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 41997 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 42001 "isa_tms320.tcc"
	>(code, addr);
}

/* end of TSTB (test bit fields)
**********************************************************/
/**********************************************************
* XOR (bitwise-exclusive OR)
* op XOR(0b000[3]:0b110101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 42014 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42017 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42021 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42024 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 42028 "isa_tms320.tcc"
OpXOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 42032 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42036 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 42040 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 42043 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 42047 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 42050 "isa_tms320.tcc"
)
{
#line 3386 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "XOR " << src_name << ", " << dst_name;
		return true;
	}
#line 42064 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 42070 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42073 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42077 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42080 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42085 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42089 "isa_tms320.tcc"
> *DecodeOpXOR_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 42095 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 42099 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 42106 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42109 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42113 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42116 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 42120 "isa_tms320.tcc"
OpXOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 42124 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42128 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 42132 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 42135 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 42139 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 42142 "isa_tms320.tcc"
)
{
#line 3397 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "XOR @0x" << hex << direct << dec << ", " << dst_name;

		return true;
	}
#line 42156 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 42162 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42165 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42169 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42172 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42177 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42181 "isa_tms320.tcc"
> *DecodeOpXOR_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 42187 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 42191 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 42198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42201 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42208 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 42212 "isa_tms320.tcc"
OpXOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 42216 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42220 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 42224 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 42227 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 42231 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 42234 "isa_tms320.tcc"
)
{
#line 3408 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, mod, ar, disp))
		return false;

		os << "XOR " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 42248 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 42254 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42257 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42261 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42264 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42269 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42273 "isa_tms320.tcc"
> *DecodeOpXOR_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 42279 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 42283 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 42290 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42293 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42297 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42300 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 42304 "isa_tms320.tcc"
OpXOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 42308 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42312 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 42316 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 42319 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 42323 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 42326 "isa_tms320.tcc"
)
{
#line 3419 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "XOR " << imm << ", " << dst_name;
		return true;
	}
#line 42339 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 42345 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42352 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42355 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42364 "isa_tms320.tcc"
> *DecodeOpXOR_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 42370 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 42374 "isa_tms320.tcc"
	>(code, addr);
}

/* end of XOR (bitwise-exclusive OR)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of 3 operands operations:
* - ADDC3        add with carry
* - ADDF3        add floating-point values
* - ADDI3        add integers
* - AND3         bitwise-logical AND
* - ANDN3        bitwise-logical AND with complement
* - ASH3         arithmetic shift
* - CMPF3        compare floating-point values
* - CMPI3        compare integers
* - LSH3         logical shift
* - MPYF3        multiply floating-point values
* - MPYI3        multiply integers
* - OR3          bitwise-logical OR
* - SUBB3        subtract integers with borrow
* - SUBF3        subtract floating-point values
* - SUBI3        subtract integers
* - TSTB3        test bit fields
* - XOR3         bitwise-exclusive OR
*/
/**********************************************************
* ADDC3 (add with carry)
* op ADDC3(0b001[3]:0b000000[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 42440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42450 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 42454 "isa_tms320.tcc"
OpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 42458 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42462 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 42466 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 42469 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 42473 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 42476 "isa_tms320.tcc"
)
{
#line 66 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ADDC3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 42491 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 42496 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42499 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42503 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42506 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 42510 "isa_tms320.tcc"
OpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 42514 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42518 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 42522 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 42525 "isa_tms320.tcc"
)
{
#line 114 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetIntReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetIntReg(src2);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, carry_in);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, carry_in);

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 42572 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 42578 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42581 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42588 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42593 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42597 "isa_tms320.tcc"
> *DecodeOpADDC3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 42603 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 42607 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 42614 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42617 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42621 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42624 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 42628 "isa_tms320.tcc"
OpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 42632 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42636 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 42640 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 42643 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 42647 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 42650 "isa_tms320.tcc"
)
{
#line 78 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !src2_name)
		return false;

		os << "ADDC3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 42665 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 42671 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42674 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42678 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42681 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42686 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42690 "isa_tms320.tcc"
> *DecodeOpADDC3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 42696 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 42700 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 42707 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42710 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42714 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42717 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 42721 "isa_tms320.tcc"
OpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 42725 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42729 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 42733 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 42736 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 42740 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 42743 "isa_tms320.tcc"
)
{
#line 90 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "ADDC3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 42758 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 42764 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42767 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42771 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42774 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42779 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42783 "isa_tms320.tcc"
> *DecodeOpADDC3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 42789 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 42793 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 42800 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42807 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42810 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 42814 "isa_tms320.tcc"
OpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 42818 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42822 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 42826 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 42829 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 42833 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 42836 "isa_tms320.tcc"
)
{
#line 102 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "ADDC3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 42851 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 42857 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42860 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42864 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42867 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42876 "isa_tms320.tcc"
> *DecodeOpADDC3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 42882 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 42886 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDC3 (add with carry)
**********************************************************/
/**********************************************************
* ADDF3 (add floating-point values)
* op ADDF3(0b001[3]:0b000001[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 42899 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42902 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42906 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42909 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 42913 "isa_tms320.tcc"
OpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 42917 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42921 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 42925 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 42928 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 42932 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 42935 "isa_tms320.tcc"
)
{
#line 171 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ADDF3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 42950 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 42956 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42959 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42963 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42966 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42971 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42975 "isa_tms320.tcc"
> *DecodeOpADDF3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 42981 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 42985 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 42992 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42999 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43002 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 43006 "isa_tms320.tcc"
OpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 43010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43014 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 43018 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 43021 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 43025 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 43028 "isa_tms320.tcc"
)
{
#line 183 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !src2_name)
		return false;

		os << "ADDF3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 43043 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 43049 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43052 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43056 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43059 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43064 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43068 "isa_tms320.tcc"
> *DecodeOpADDF3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 43074 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 43078 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 43085 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43088 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43092 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43095 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 43099 "isa_tms320.tcc"
OpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 43103 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43107 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 43111 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 43114 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 43118 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 43121 "isa_tms320.tcc"
)
{
#line 195 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "ADDF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 43136 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 43142 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43145 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43149 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43152 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43157 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43161 "isa_tms320.tcc"
> *DecodeOpADDF3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 43167 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 43171 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 43178 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43181 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43185 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43188 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 43192 "isa_tms320.tcc"
OpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 43196 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43200 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 43204 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 43207 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 43211 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 43214 "isa_tms320.tcc"
)
{
#line 207 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "ADDF3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 43229 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 43235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43242 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43245 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43250 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43254 "isa_tms320.tcc"
> *DecodeOpADDF3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 43260 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 43264 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDF3 (add floating-point values)
**********************************************************/
/**********************************************************
* ADDI3 (add integers)
* op ADDI3(0b001[3]:0b000010[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 43277 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43280 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43284 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43287 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 43291 "isa_tms320.tcc"
OpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 43295 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43299 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 43303 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 43306 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 43310 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 43313 "isa_tms320.tcc"
)
{
#line 232 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ADDI3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 43328 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 43334 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43337 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43341 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43344 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43349 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43353 "isa_tms320.tcc"
> *DecodeOpADDI3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 43359 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 43363 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 43370 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43373 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43377 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43380 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 43384 "isa_tms320.tcc"
OpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 43388 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43392 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 43396 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 43399 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 43403 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 43406 "isa_tms320.tcc"
)
{
#line 244 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !src2_name)
		return false;

		os << "ADDI3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 43421 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 43427 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43434 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43437 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43446 "isa_tms320.tcc"
> *DecodeOpADDI3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 43452 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 43456 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 43463 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43466 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43470 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43473 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 43477 "isa_tms320.tcc"
OpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 43481 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43485 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 43489 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 43492 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 43496 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 43499 "isa_tms320.tcc"
)
{
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "ADDI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 43514 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 43520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43530 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43539 "isa_tms320.tcc"
> *DecodeOpADDI3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 43545 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 43549 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 43556 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43559 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43563 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43566 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 43570 "isa_tms320.tcc"
OpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 43574 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43578 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 43582 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 43585 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 43589 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 43592 "isa_tms320.tcc"
)
{
#line 268 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "ADDI3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 43607 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 43613 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43616 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43620 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43623 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43628 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43632 "isa_tms320.tcc"
> *DecodeOpADDI3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 43638 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 43642 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDI3 (add integers)
**********************************************************/
/**********************************************************
* AND3 (bitwise-logical AND)
* op AND3(0b001[3]:0b000011[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 43655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43662 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43665 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 43669 "isa_tms320.tcc"
OpAND3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 43673 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43677 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 43681 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 43684 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 43688 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 43691 "isa_tms320.tcc"
)
{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "AND3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 43706 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 43711 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43714 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43718 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43721 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 43725 "isa_tms320.tcc"
OpAND3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 43729 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43733 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 43737 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 43740 "isa_tms320.tcc"
)
{
#line 341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetIntReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetIntReg(src2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Write back result
		cpu.SetIntReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 43774 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 43780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43783 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43787 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43790 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43795 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43799 "isa_tms320.tcc"
> *DecodeOpAND3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 43805 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 43809 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 43816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43819 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43823 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43826 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 43830 "isa_tms320.tcc"
OpAND3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 43834 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43838 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 43842 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 43845 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 43849 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 43852 "isa_tms320.tcc"
)
{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !src2_name)
		return false;

		os << "AND3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 43867 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 43873 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43880 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43883 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43888 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43892 "isa_tms320.tcc"
> *DecodeOpAND3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 43898 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 43902 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 43909 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43912 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43916 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43919 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 43923 "isa_tms320.tcc"
OpAND3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 43927 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43931 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 43935 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 43938 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 43942 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 43945 "isa_tms320.tcc"
)
{
#line 317 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "AND3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 43960 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 43966 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43969 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43973 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43976 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43981 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43985 "isa_tms320.tcc"
> *DecodeOpAND3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 43991 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 43995 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 44002 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44005 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44009 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44012 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 44016 "isa_tms320.tcc"
OpAND3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 44020 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44024 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 44028 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 44031 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 44035 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 44038 "isa_tms320.tcc"
)
{
#line 329 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "AND3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 44053 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 44059 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44062 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44066 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44069 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44074 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44078 "isa_tms320.tcc"
> *DecodeOpAND3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 44084 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 44088 "isa_tms320.tcc"
	>(code, addr);
}

/* end of AND3 (bitwise-logical AND)
**********************************************************/
/**********************************************************
* ANDN3 (bitwise-logical AND with complement)
* op ANDN3(0b001[3]:0b000100[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 44101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44111 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 44115 "isa_tms320.tcc"
OpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 44119 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44123 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 44127 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 44130 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 44134 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 44137 "isa_tms320.tcc"
)
{
#line 385 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{ const char *dst_name = REG_NAME[dst]; const char *src1_name = REG_NAME[src1]; const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ANDN3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 44149 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 44155 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44158 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44162 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44165 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44170 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44174 "isa_tms320.tcc"
> *DecodeOpANDN3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 44180 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 44184 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 44191 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44194 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44201 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 44205 "isa_tms320.tcc"
OpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 44209 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44213 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 44217 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 44220 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 44224 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 44227 "isa_tms320.tcc"
)
{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !src2_name)
		return false;

		os << "ANDN3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 44242 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 44248 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44251 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44255 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44258 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44263 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44267 "isa_tms320.tcc"
> *DecodeOpANDN3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 44273 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 44277 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 44284 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44287 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44291 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44294 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 44298 "isa_tms320.tcc"
OpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 44302 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44306 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 44310 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 44313 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 44317 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 44320 "isa_tms320.tcc"
)
{
#line 406 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "ANDN3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 44335 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 44341 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44344 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44348 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44351 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44356 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44360 "isa_tms320.tcc"
> *DecodeOpANDN3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 44366 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 44370 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 44377 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44384 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44387 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 44391 "isa_tms320.tcc"
OpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 44395 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44399 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 44403 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 44406 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 44410 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 44413 "isa_tms320.tcc"
)
{
#line 418 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "ANDN3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 44428 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 44434 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44437 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44441 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44444 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44449 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44453 "isa_tms320.tcc"
> *DecodeOpANDN3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 44459 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 44463 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ANDN3 (bitwise-logical AND with complement)
**********************************************************/
/**********************************************************
* ASH3 (arithmetic shift)
* op ASH3(0b001[3]:0b000101[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 44476 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44479 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44483 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44486 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 44490 "isa_tms320.tcc"
OpASH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 44494 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44498 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 44502 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 44505 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 44509 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 44512 "isa_tms320.tcc"
)
{
#line 443 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ASH3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 44527 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 44533 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44536 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44543 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44548 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44552 "isa_tms320.tcc"
> *DecodeOpASH3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 44558 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 44562 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 44569 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44572 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44576 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44579 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 44583 "isa_tms320.tcc"
OpASH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 44587 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44591 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 44595 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 44598 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 44602 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 44605 "isa_tms320.tcc"
)
{
#line 455 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !src2_name)
		return false;

		os << "ASH3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 44620 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 44626 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44629 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44633 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44636 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44641 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44645 "isa_tms320.tcc"
> *DecodeOpASH3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 44651 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 44655 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 44662 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44665 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44669 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44672 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 44676 "isa_tms320.tcc"
OpASH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 44680 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44684 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 44688 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 44691 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 44695 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 44698 "isa_tms320.tcc"
)
{
#line 467 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "ASH3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 44713 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 44719 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44722 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44726 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44729 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44734 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44738 "isa_tms320.tcc"
> *DecodeOpASH3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 44744 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 44748 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 44755 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44758 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44762 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44765 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 44769 "isa_tms320.tcc"
OpASH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 44773 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44777 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 44781 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 44784 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 44788 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 44791 "isa_tms320.tcc"
)
{
#line 479 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "ASH3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 44806 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 44812 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44815 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44819 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44822 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44827 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44831 "isa_tms320.tcc"
> *DecodeOpASH3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 44837 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 44841 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ASH3 (arithmetic shift)
**********************************************************/
/**********************************************************
* CMPF3 (compare floating-point values)
* op CMPF3(0b001[3]:0b000110[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 44854 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44857 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44861 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44864 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 44868 "isa_tms320.tcc"
OpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 44872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44876 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 44880 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 44883 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 44887 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 44890 "isa_tms320.tcc"
)
{
#line 504 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!src1_name || !src2_name)
		return false;

		os << "CMPF3 " << src2_name << ", " << src1_name;
		return true;
	}
#line 44904 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 44910 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44913 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44917 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44920 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44925 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44929 "isa_tms320.tcc"
> *DecodeOpCMPF3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 44935 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 44939 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 44946 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44949 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44953 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44956 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 44960 "isa_tms320.tcc"
OpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 44964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44968 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 44972 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 44975 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 44979 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 44982 "isa_tms320.tcc"
)
{
#line 515 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !src2_name)
		return false;

		os << "CMPF3 " << src2_name << ", " << disasm_src1_indir;
		return true;
	}
#line 44996 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45002 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45005 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45009 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45012 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45017 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45021 "isa_tms320.tcc"
> *DecodeOpCMPF3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45027 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45031 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45038 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45041 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45045 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45048 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45052 "isa_tms320.tcc"
OpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45060 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45064 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45067 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45071 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45074 "isa_tms320.tcc"
)
{
#line 526 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!src1_name || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "CMPF3 " << disasm_src2_indir << ", " << src1_name;
		return true;
	}
#line 45088 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45094 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45097 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45104 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45109 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45113 "isa_tms320.tcc"
> *DecodeOpCMPF3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45119 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45123 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45130 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45140 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45144 "isa_tms320.tcc"
OpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45152 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45156 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45159 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45163 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45166 "isa_tms320.tcc"
)
{
#line 537 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "CMPF3 " << disasm_src2_indir << ", " << disasm_src1_indir;
		return true;
	}
#line 45180 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45186 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45189 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45193 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45196 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45201 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45205 "isa_tms320.tcc"
> *DecodeOpCMPF3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45211 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45215 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CMPF3 (compare floating-point values)
**********************************************************/
/**********************************************************
* CMPI3 (compare integers)
* op CMPI3(0b001[3]:0b000111[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 45228 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45231 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45238 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45242 "isa_tms320.tcc"
OpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 45246 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45250 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45254 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45257 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45261 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45264 "isa_tms320.tcc"
)
{
#line 561 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!src1_name || !src2_name)
		return false;

		os << "CMPI3 " << src2_name << ", " << src1_name;
		return true;
	}
#line 45278 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45284 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45287 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45291 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45294 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45299 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45303 "isa_tms320.tcc"
> *DecodeOpCMPI3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45309 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45313 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45320 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45323 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45327 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45330 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45334 "isa_tms320.tcc"
OpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 45338 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45342 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45346 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45349 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45353 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45356 "isa_tms320.tcc"
)
{
#line 572 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !src2_name)
		return false;

		os << "CMPI3 " << src2_name << ", " << disasm_src1_indir;
		return true;
	}
#line 45370 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45383 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45386 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45395 "isa_tms320.tcc"
> *DecodeOpCMPI3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45401 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45405 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45412 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45415 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45419 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45422 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45426 "isa_tms320.tcc"
OpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45434 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45438 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45441 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45445 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45448 "isa_tms320.tcc"
)
{
#line 583 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!src1_name || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "CMPI3 " << disasm_src2_indir << ", " << src1_name;
		return true;
	}
#line 45462 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45468 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45471 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45475 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45478 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45483 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45487 "isa_tms320.tcc"
> *DecodeOpCMPI3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45493 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45497 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45504 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45511 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45514 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45518 "isa_tms320.tcc"
OpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45522 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45526 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45530 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45533 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45537 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45540 "isa_tms320.tcc"
)
{
#line 594 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "CMPI3 " << disasm_src2_indir << ", " << disasm_src1_indir;
		return true;
	}
#line 45554 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45560 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45563 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45567 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45570 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45575 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45579 "isa_tms320.tcc"
> *DecodeOpCMPI3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45585 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45589 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CMPI3 (compare integers)
**********************************************************/
/**********************************************************
* LSH3 (logical shift)
* op LSH3(0b001[3]:0b001000[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 45602 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45605 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45609 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45612 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45616 "isa_tms320.tcc"
OpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 45620 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45624 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45628 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45631 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45635 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45638 "isa_tms320.tcc"
)
{
#line 618 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "LSH3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 45653 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45659 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45662 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45666 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45669 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45674 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45678 "isa_tms320.tcc"
> *DecodeOpLSH3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45684 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45688 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45695 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45698 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45702 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45705 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45709 "isa_tms320.tcc"
OpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 45713 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45717 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45721 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45724 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45728 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45731 "isa_tms320.tcc"
)
{
#line 630 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !src2_name)
		return false;

		os << "LSH3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 45746 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45752 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45755 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45759 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45762 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45767 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45771 "isa_tms320.tcc"
> *DecodeOpLSH3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45777 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45781 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45798 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45802 "isa_tms320.tcc"
OpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45806 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45810 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45814 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45817 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45821 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45824 "isa_tms320.tcc"
)
{
#line 642 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "LSH3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 45839 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45845 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45852 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45855 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45860 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45864 "isa_tms320.tcc"
> *DecodeOpLSH3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45870 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45874 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45881 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45884 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45888 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45891 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45895 "isa_tms320.tcc"
OpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45899 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45903 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45907 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45910 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45914 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45917 "isa_tms320.tcc"
)
{
#line 654 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "LSH3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 45932 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45938 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45941 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45945 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45948 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45953 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45957 "isa_tms320.tcc"
> *DecodeOpLSH3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45963 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45967 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LSH3 (logical shift)
**********************************************************/
/**********************************************************
* MPYF3 (multiply floating-point values)
* op MPYF3(0b001[3]:0b001001[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 45980 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45990 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45994 "isa_tms320.tcc"
OpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 45998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46002 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46006 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46009 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46013 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46016 "isa_tms320.tcc"
)
{
#line 679 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "MPYF3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 46031 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46037 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46040 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46044 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46047 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46052 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46056 "isa_tms320.tcc"
> *DecodeOpMPYF3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46062 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46066 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46073 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46076 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46080 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46083 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46087 "isa_tms320.tcc"
OpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 46091 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46095 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46099 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46102 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46106 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46109 "isa_tms320.tcc"
)
{
#line 691 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !src2_name)
		return false;

		os << "MPYF3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 46124 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46130 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46140 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46145 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46149 "isa_tms320.tcc"
> *DecodeOpMPYF3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46155 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46159 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46166 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46169 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46173 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46176 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46180 "isa_tms320.tcc"
OpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46184 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46188 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46192 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46195 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46199 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46202 "isa_tms320.tcc"
)
{
#line 703 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "MPYF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 46217 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46223 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46226 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46233 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46242 "isa_tms320.tcc"
> *DecodeOpMPYF3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46248 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46252 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46259 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46262 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46266 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46269 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46273 "isa_tms320.tcc"
OpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46277 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46281 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46285 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46288 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46292 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46295 "isa_tms320.tcc"
)
{
#line 715 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "MPYF3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 46310 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46316 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46319 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46323 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46326 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46331 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46335 "isa_tms320.tcc"
> *DecodeOpMPYF3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46341 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46345 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF3 (multiply floating-point values)
**********************************************************/
/**********************************************************
* MPYI3 (multiply integers)
* op MPYI3(0b001[3]:0b001010[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 46358 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46361 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46365 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46368 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46372 "isa_tms320.tcc"
OpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 46376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46380 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46384 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46387 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46391 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46394 "isa_tms320.tcc"
)
{
#line 740 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "MPYI3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 46409 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46422 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46425 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46434 "isa_tms320.tcc"
> *DecodeOpMPYI3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46440 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46444 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46458 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46461 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46465 "isa_tms320.tcc"
OpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 46469 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46473 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46477 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46480 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46484 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46487 "isa_tms320.tcc"
)
{
#line 752 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !src2_name)
		return false;

		os << "MPYI3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 46502 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46508 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46511 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46515 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46518 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46527 "isa_tms320.tcc"
> *DecodeOpMPYI3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46533 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46537 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46544 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46547 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46551 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46554 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46558 "isa_tms320.tcc"
OpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46562 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46566 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46570 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46573 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46577 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46580 "isa_tms320.tcc"
)
{
#line 764 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "MPYI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 46595 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46601 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46608 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46611 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46616 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46620 "isa_tms320.tcc"
> *DecodeOpMPYI3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46626 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46630 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46640 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46644 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46647 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46651 "isa_tms320.tcc"
OpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46655 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46659 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46663 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46666 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46670 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46673 "isa_tms320.tcc"
)
{
#line 776 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "MPYI3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 46688 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46694 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46697 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46701 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46704 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46709 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46713 "isa_tms320.tcc"
> *DecodeOpMPYI3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46719 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46723 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYI3 (multiply integers)
**********************************************************/
/**********************************************************
* OR3 (bitwise-logical OR)
* op OR3(0b001[3]:0b001011[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 46736 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46739 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46743 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46746 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46750 "isa_tms320.tcc"
OpOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 46754 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46758 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46762 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46765 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46769 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46772 "isa_tms320.tcc"
)
{
#line 801 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "OR3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 46787 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46793 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46800 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46803 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46812 "isa_tms320.tcc"
> *DecodeOpOR3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46818 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46822 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46832 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46836 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46839 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46843 "isa_tms320.tcc"
OpOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 46847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46851 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46855 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46858 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46862 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46865 "isa_tms320.tcc"
)
{
#line 813 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !src2_name)
		return false;

		os << "OR3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 46880 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46886 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46889 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46893 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46896 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46901 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46905 "isa_tms320.tcc"
> *DecodeOpOR3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46911 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46915 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46922 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46925 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46929 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46932 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46936 "isa_tms320.tcc"
OpOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46944 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46948 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46951 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46955 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46958 "isa_tms320.tcc"
)
{
#line 825 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "OR3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 46973 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46979 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46982 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46986 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46989 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46994 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46998 "isa_tms320.tcc"
> *DecodeOpOR3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47004 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47008 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47015 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47018 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47022 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47025 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47029 "isa_tms320.tcc"
OpOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47033 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47037 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47041 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47044 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47048 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47051 "isa_tms320.tcc"
)
{
#line 837 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "OR3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 47066 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47072 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47075 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47079 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47082 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47087 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47091 "isa_tms320.tcc"
> *DecodeOpOR3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47097 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47101 "isa_tms320.tcc"
	>(code, addr);
}

/* end of OR3 (bitwise-logical OR)
**********************************************************/
/**********************************************************
* SUBB3 (subtract integers with borrow)
* op SUBB3(0b001[3]:0b001100[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 47114 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47117 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47121 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47124 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47128 "isa_tms320.tcc"
OpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 47132 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47136 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47140 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47143 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47147 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47150 "isa_tms320.tcc"
)
{
#line 862 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "SUBB3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 47165 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47171 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47174 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47178 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47181 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47186 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47190 "isa_tms320.tcc"
> *DecodeOpSUBB3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47196 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47200 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47207 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47210 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47214 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47217 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47221 "isa_tms320.tcc"
OpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 47225 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47229 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47233 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47236 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47240 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47243 "isa_tms320.tcc"
)
{
#line 874 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !src2_name)
		return false;

		os << "SUBB3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 47258 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47264 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47271 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47274 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47283 "isa_tms320.tcc"
> *DecodeOpSUBB3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47289 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47293 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47300 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47303 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47307 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47310 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47314 "isa_tms320.tcc"
OpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47318 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47322 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47326 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47329 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47333 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47336 "isa_tms320.tcc"
)
{
#line 886 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "SUBB3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 47351 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47357 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47364 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47367 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47372 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47376 "isa_tms320.tcc"
> *DecodeOpSUBB3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47382 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47386 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47393 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47396 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47400 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47403 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47407 "isa_tms320.tcc"
OpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47411 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47415 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47419 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47422 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47426 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47429 "isa_tms320.tcc"
)
{
#line 898 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "SUBB3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 47444 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47450 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47453 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47457 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47460 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47469 "isa_tms320.tcc"
> *DecodeOpSUBB3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47475 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47479 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBB3 (subtract integers with borrow)
**********************************************************/
/**********************************************************
* SUBF3 (subtract floating-point values)
* op SUBF3(0b001[3]:0b001101[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 47492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47495 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47502 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47506 "isa_tms320.tcc"
OpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 47510 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47514 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47518 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47521 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47525 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47528 "isa_tms320.tcc"
)
{
#line 923 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "SUBF3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 47543 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47549 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47552 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47556 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47559 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47564 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47568 "isa_tms320.tcc"
> *DecodeOpSUBF3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47574 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47578 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47588 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47592 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47595 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47599 "isa_tms320.tcc"
OpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 47603 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47607 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47611 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47614 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47618 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47621 "isa_tms320.tcc"
)
{
#line 935 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !src2_name)
		return false;

		os << "SUBF3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 47636 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47642 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47645 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47649 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47652 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47657 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47661 "isa_tms320.tcc"
> *DecodeOpSUBF3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47667 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47671 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47678 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47681 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47685 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47688 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47692 "isa_tms320.tcc"
OpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47700 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47704 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47707 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47711 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47714 "isa_tms320.tcc"
)
{
#line 947 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "SUBF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 47729 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47735 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47738 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47742 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47745 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47750 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47754 "isa_tms320.tcc"
> *DecodeOpSUBF3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47760 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47764 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47771 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47778 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47781 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47785 "isa_tms320.tcc"
OpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47789 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47793 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47797 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47800 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47804 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47807 "isa_tms320.tcc"
)
{
#line 959 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "SUBF3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 47822 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47828 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47831 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47835 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47838 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47847 "isa_tms320.tcc"
> *DecodeOpSUBF3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47853 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47857 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBF3 (subtract floating-point values)
**********************************************************/
/**********************************************************
* SUBI3 (subtract integers)
* op SUBI3(0b001[3]:0b001110[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 47870 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47873 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47877 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47880 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47884 "isa_tms320.tcc"
OpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 47888 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47892 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47896 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47899 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47903 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47906 "isa_tms320.tcc"
)
{
#line 984 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "SUBI3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 47921 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47927 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47934 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47937 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47946 "isa_tms320.tcc"
> *DecodeOpSUBI3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47952 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47956 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47963 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47966 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47973 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47977 "isa_tms320.tcc"
OpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 47981 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47985 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47989 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47992 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47996 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47999 "isa_tms320.tcc"
)
{
#line 996 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !src2_name)
		return false;

		os << "SUBI3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 48014 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48020 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48023 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48030 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48035 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48039 "isa_tms320.tcc"
> *DecodeOpSUBI3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48045 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48049 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 48056 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48059 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48063 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48066 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48070 "isa_tms320.tcc"
OpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48074 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48078 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48082 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48085 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48089 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48092 "isa_tms320.tcc"
)
{
#line 1008 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "SUBI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 48107 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48113 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48120 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48123 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48128 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48132 "isa_tms320.tcc"
> *DecodeOpSUBI3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48138 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48142 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 48149 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48152 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48156 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48159 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48163 "isa_tms320.tcc"
OpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48167 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48171 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48175 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48178 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48182 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48185 "isa_tms320.tcc"
)
{
#line 1020 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "SUBI3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 48200 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48206 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48209 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48213 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48216 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48221 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48225 "isa_tms320.tcc"
> *DecodeOpSUBI3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48231 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48235 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBI3 (subtract integers)
**********************************************************/
/**********************************************************
* TSTB3 (test bit fields)
* op TSTB3(0b001[3]:0b001111[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 48248 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48251 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48255 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48258 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48262 "isa_tms320.tcc"
OpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 48266 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48270 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48274 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48277 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48281 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48284 "isa_tms320.tcc"
)
{
#line 1045 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!src1_name || !src2_name)
		return false;

		os << "TSTB3 " << src2_name << ", " << src1_name;
		return true;
	}
#line 48298 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48304 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48307 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48311 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48314 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48319 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48323 "isa_tms320.tcc"
> *DecodeOpTSTB3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48329 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48333 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 48340 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48343 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48347 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48350 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48354 "isa_tms320.tcc"
OpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 48358 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48362 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48366 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48369 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48373 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48376 "isa_tms320.tcc"
)
{
#line 1056 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !src2_name)
		return false;

		os << "TSTB3 " << src2_name << ", " << disasm_src1_indir;
		return true;
	}
#line 48390 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48396 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48399 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48403 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48406 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48411 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48415 "isa_tms320.tcc"
> *DecodeOpTSTB3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48421 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48425 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 48432 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48435 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48439 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48442 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48446 "isa_tms320.tcc"
OpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48450 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48454 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48458 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48461 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48465 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48468 "isa_tms320.tcc"
)
{
#line 1067 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!src1_name || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "TSTB3 " << disasm_src2_indir << ", " << src1_name;
		return true;
	}
#line 48482 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48491 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48495 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48498 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48507 "isa_tms320.tcc"
> *DecodeOpTSTB3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48513 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48517 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 48524 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48531 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48534 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48538 "isa_tms320.tcc"
OpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48542 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48546 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48550 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48553 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48557 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48560 "isa_tms320.tcc"
)
{
#line 1078 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "TSTB3 " << disasm_src2_indir << ", " << disasm_src1_indir;
		return true;
	}
#line 48574 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48580 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48583 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48587 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48590 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48595 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48599 "isa_tms320.tcc"
> *DecodeOpTSTB3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48605 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48609 "isa_tms320.tcc"
	>(code, addr);
}

/* end of TSTB3 (test bit fields)
**********************************************************/
/**********************************************************
* XOR3 (bitwise-exclusive OR)
* op XOR3(0b001[3]:0b010000[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 48622 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48625 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48629 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48632 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48636 "isa_tms320.tcc"
OpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 48640 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48644 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48648 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48651 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48655 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48658 "isa_tms320.tcc"
)
{
#line 1102 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "XOR3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 48673 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48679 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48682 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48686 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48689 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48694 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48698 "isa_tms320.tcc"
> *DecodeOpXOR3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48704 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48708 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 48715 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48718 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48725 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48729 "isa_tms320.tcc"
OpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 48733 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48737 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48741 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48744 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48748 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48751 "isa_tms320.tcc"
)
{
#line 1114 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !src2_name)
		return false;

		os << "XOR3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 48766 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48772 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48775 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48779 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48782 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48787 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48791 "isa_tms320.tcc"
> *DecodeOpXOR3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48797 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48801 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 48808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48811 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48815 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48818 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48822 "isa_tms320.tcc"
OpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48826 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48830 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48834 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48837 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48841 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48844 "isa_tms320.tcc"
)
{
#line 1126 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "XOR3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 48859 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48865 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48872 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48875 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48880 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48884 "isa_tms320.tcc"
> *DecodeOpXOR3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48890 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48894 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 48901 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48908 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48911 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48915 "isa_tms320.tcc"
OpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48919 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48923 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48927 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48930 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48934 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48937 "isa_tms320.tcc"
)
{
#line 1138 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, mod2, ar2))
		return false;

		os << "XOR3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 48952 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48958 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48961 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48965 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48968 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48977 "isa_tms320.tcc"
> *DecodeOpXOR3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48983 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48987 "isa_tms320.tcc"
	>(code, addr);
}

/* end of XOR3 (bitwise-exclusive OR)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of program-control operations:
* - Bcond        branch conditionally (standard)
* - BcondD       branch conditionally (delayed)
* - BR           branch unconditionally (standard)
* - BRD          branch unconditionally (delayed)
* - CALL         call subroutine
* - CALLcond     call subroutine conditionally
* - DBcond       decrement and branch conditionally (standard)
* - DBcondD      decrement and branch conditionally (delayed)
* - IACK         interrupt acknowledge
* - IDLE         idle until interrupt
* - NOP          no operation
* - RETIcond     return from interrupt conditionally
* - RETScond     return form subroutine conditionally
* - RPTB         repeat block of instructions
* - RPTS         repeat single instruction
* - SWI          software interrupt
* - TRAPcond     trap conditionally
*/
/**********************************************************
* Bcond (branch conditionally (standard))
* op Bcond(0b011010[6]:b[1]:0b000[3]:0b0[1]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49053 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49060 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49063 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49067 "isa_tms320.tcc"
OpBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 49071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49075 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49079 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49082 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49086 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49089 "isa_tms320.tcc"
)
{
#line 63 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "B" << cond_name << " " << reg_name;
		return true;
	}
#line 49101 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49106 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49109 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49113 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49116 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49120 "isa_tms320.tcc"
OpBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 49124 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49128 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49132 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49135 "isa_tms320.tcc"
)
{
#line 72 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetIntReg(reg);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 49155 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49161 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49164 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49171 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49176 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49180 "isa_tms320.tcc"
> *DecodeOpBcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49186 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49190 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 49197 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49200 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49204 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49207 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49211 "isa_tms320.tcc"
OpBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 49215 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49219 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49223 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49226 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49230 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49233 "isa_tms320.tcc"
)
{
#line 91 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "B" << cond_name << " 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << dec;
		return true;
	}
#line 49244 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49249 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49252 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49256 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49259 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49263 "isa_tms320.tcc"
OpBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 49267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49271 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49275 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49278 "isa_tms320.tcc"
)
{
#line 99 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the PC
		typename CONFIG::address_t pc = cpu.GetPC();

		// Compute the branch target address
		typename CONFIG::address_t target_addr = pc + imm + 1;

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 49301 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49307 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49310 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49314 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49317 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49322 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49326 "isa_tms320.tcc"
> *DecodeOpBcond_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49332 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49336 "isa_tms320.tcc"
	>(code, addr);
}

/* end of Bcond (branch conditionally (standard))
**********************************************************/
/**********************************************************
* BcondD (branch conditionally (delayed))
* op BcondD(0b011010[6]:b[1]:0b000[3]:0b1[1]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49349 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49352 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49356 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49359 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49363 "isa_tms320.tcc"
OpBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 49367 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49371 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49375 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49378 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49382 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49385 "isa_tms320.tcc"
)
{
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "B" << cond_name << "D " << reg_name;
		return true;
	}
#line 49397 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49402 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49405 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49409 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49412 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49416 "isa_tms320.tcc"
OpBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 49420 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49424 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49428 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49431 "isa_tms320.tcc"
)
{
#line 138 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetIntReg(reg);

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 49451 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49457 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49460 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49464 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49467 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49476 "isa_tms320.tcc"
> *DecodeOpBcondD_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBcondD_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49482 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49486 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 49493 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49503 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49507 "isa_tms320.tcc"
OpBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 49511 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49515 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49519 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49522 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49526 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49529 "isa_tms320.tcc"
)
{
#line 157 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "B" << cond_name << "D 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 3 + imm) << dec;
		return true;
	}
#line 49540 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49545 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49548 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49552 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49555 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49559 "isa_tms320.tcc"
OpBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 49563 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49567 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49571 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49574 "isa_tms320.tcc"
)
{
#line 165 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the PC
		typename CONFIG::address_t pc = cpu.GetPC();

		// Compute the branch target address
		typename CONFIG::address_t target_addr = pc + imm + 3;

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 49597 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49603 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49606 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49610 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49613 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49618 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49622 "isa_tms320.tcc"
> *DecodeOpBcondD_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBcondD_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49628 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49632 "isa_tms320.tcc"
	>(code, addr);
}

/* end of BcondD (branch conditionally (delayed))
**********************************************************/
/**********************************************************
* BR (branch unconditionally (standard))
* op BR(0b0110000[7]:0b0[1]:src[24])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49645 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49648 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49652 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49655 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49659 "isa_tms320.tcc"
OpBR<
#line 45 "isa/tms320.isa"
CONFIG
#line 49663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49667 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49671 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49674 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49678 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49681 "isa_tms320.tcc"
)
{
#line 195 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "BR 0x" << hex << src << dec;
		return true;
	}
#line 49689 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49694 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49697 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49701 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49704 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49708 "isa_tms320.tcc"
OpBR<
#line 45 "isa/tms320.isa"
CONFIG
#line 49712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49716 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49720 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49723 "isa_tms320.tcc"
)
{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Compute the branch target address
		typename CONFIG::address_t target_addr = src;

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 49734 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49740 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49743 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49747 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49750 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49755 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49759 "isa_tms320.tcc"
> *DecodeOpBR(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBR<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49765 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49769 "isa_tms320.tcc"
	>(code, addr);
}

/* end of BR (branch unconditionally (standard))
**********************************************************/
/**********************************************************
* BRD (branch unconditionally (delayed))
* op BRD(0b0110000[7]:0b1[1]:src[24])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49792 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49796 "isa_tms320.tcc"
OpBRD<
#line 45 "isa/tms320.isa"
CONFIG
#line 49800 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49804 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49808 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49811 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49815 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49818 "isa_tms320.tcc"
)
{
#line 218 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "BRD 0x" << hex << src << dec;
		return true;
	}
#line 49826 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49831 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49834 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49838 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49841 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49845 "isa_tms320.tcc"
OpBRD<
#line 45 "isa/tms320.isa"
CONFIG
#line 49849 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49853 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49857 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49860 "isa_tms320.tcc"
)
{
#line 223 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Compute the branch target address
		typename CONFIG::address_t target_addr = src;

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 49871 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49877 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49880 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49884 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49887 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49896 "isa_tms320.tcc"
> *DecodeOpBRD(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBRD<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49902 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49906 "isa_tms320.tcc"
	>(code, addr);
}

/* end of BRD (branch unconditionally (delayed))
**********************************************************/
/**********************************************************
* CALL (call subroutine)
* op CALL(0b0110001[7]:0b0[1]:src[24])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49919 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49922 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49926 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49929 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49933 "isa_tms320.tcc"
OpCALL<
#line 45 "isa/tms320.isa"
CONFIG
#line 49937 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49941 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49945 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49948 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49952 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49955 "isa_tms320.tcc"
)
{
#line 241 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "CALL 0x" << hex << src << dec;
		return true;
	}
#line 49963 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49968 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49971 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49975 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49978 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49982 "isa_tms320.tcc"
OpCALL<
#line 45 "isa/tms320.isa"
CONFIG
#line 49986 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49990 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49994 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49997 "isa_tms320.tcc"
)
{
#line 246 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Read the PC
		typename CONFIG::address_t pc = cpu.GetPC();

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Compute the next PC
		typename CONFIG::address_t next_pc = pc + 1;

		// Compute the target call address
		typename CONFIG::address_t target_addr = src;

		// Store the next PC at SP + 1
		cpu.IntStore(sp, next_pc);

		// Update SP
		cpu.SetSP(sp);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 50023 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50029 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50032 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50036 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50039 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50048 "isa_tms320.tcc"
> *DecodeOpCALL(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCALL<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50054 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50058 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CALL (call subroutine)
**********************************************************/
/**********************************************************
* CALLcond (call subroutine conditionally)
* op CALLcond(0b011100[6]:b[1]:0b0000[4]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 50071 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50074 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50078 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50081 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50085 "isa_tms320.tcc"
OpCALLcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 50089 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50093 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50097 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50100 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50104 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50107 "isa_tms320.tcc"
)
{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "CALL" << cond_name << " " << reg_name;
		return true;
	}
#line 50119 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50127 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50131 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50134 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50138 "isa_tms320.tcc"
OpCALLcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 50142 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50146 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50150 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50153 "isa_tms320.tcc"
)
{
#line 288 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetIntReg(reg);

		// Read the PC
		typename CONFIG::address_t pc = cpu.GetPC();

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Compute the next PC
		typename CONFIG::address_t next_pc = pc + 1;

		// Store the next PC at SP + 1
		cpu.IntStore(sp, next_pc);

		// Update SP
		cpu.SetSP(sp);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 50188 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50194 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50201 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50204 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50209 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50213 "isa_tms320.tcc"
> *DecodeOpCALLcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCALLcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50219 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50223 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 50230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50233 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50237 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50240 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50244 "isa_tms320.tcc"
OpCALLcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 50248 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50252 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50256 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50259 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50263 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50266 "isa_tms320.tcc"
)
{
#line 322 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "CALL" << cond_name << " 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << dec;
		return true;
	}
#line 50277 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50282 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50285 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50289 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50292 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50296 "isa_tms320.tcc"
OpCALLcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 50300 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50304 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50308 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50311 "isa_tms320.tcc"
)
{
#line 330 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the PC
		typename CONFIG::address_t pc = cpu.GetPC();

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Compute the next PC
		typename CONFIG::address_t next_pc = pc + 1;

		// Compute the target address
		typename CONFIG::address_t target_addr = pc + imm + 1;

		// Store the next PC at SP + 1
		cpu.IntStore(sp, next_pc);

		// Update SP
		cpu.SetSP(sp);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 50346 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50352 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50355 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50359 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50362 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50367 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50371 "isa_tms320.tcc"
> *DecodeOpCALLcond_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCALLcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50377 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50381 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CALLcond (call subroutine conditionally)
**********************************************************/
/**********************************************************
* DBcond (decrement and branch conditionally (standard))
* op DBcond(0b011011[6]:b[1]:ar[3]:0b0[1]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 50394 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50397 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50401 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50404 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50408 "isa_tms320.tcc"
OpDBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 50412 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50416 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50420 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50423 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50427 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50430 "isa_tms320.tcc"
)
{
#line 372 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "DB" << cond_name << " AR" << ar << ", " << reg_name;
		return true;
	}
#line 50442 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50450 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50457 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50461 "isa_tms320.tcc"
OpDBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 50465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50469 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50473 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50476 "isa_tms320.tcc"
)
{
#line 381 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read ARn
		int32_t ar_value = cpu.GetIntReg(ar);

		// Compute new value for ARn
		ar_value = ar_value - 1;

		// Update ARn
		cpu.SetAR(ar, (uint32_t) ar_value);

		// Check whether ARn is >= 0
		if(ar_value < 0) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetIntReg(reg);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 50508 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50514 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50517 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50521 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50524 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50529 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50533 "isa_tms320.tcc"
> *DecodeOpDBcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpDBcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50539 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50543 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 50550 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50553 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50557 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50560 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50564 "isa_tms320.tcc"
OpDBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 50568 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50572 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50576 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50579 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50583 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50586 "isa_tms320.tcc"
)
{
#line 412 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "DB" << cond_name << " AR" << ar << ", 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << dec;
		return true;
	}
#line 50597 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50602 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50605 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50609 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50612 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50616 "isa_tms320.tcc"
OpDBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 50620 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50624 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50628 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50631 "isa_tms320.tcc"
)
{
#line 420 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read ARn
		int32_t ar_value = cpu.GetIntReg(ar);

		// Compute new value for ARn
		ar_value = ar_value - 1;

		// Update ARn
		cpu.SetAR(ar, (uint32_t) ar_value);

		// Check whether ARn is >= 0
		if(ar_value < 0) return;

		// Read the PC
		typename CONFIG::address_t pc = cpu.GetPC();

		// Compute the target address
		typename CONFIG::address_t target_addr = pc + imm + 1;

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 50666 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50672 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50675 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50679 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50682 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50687 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50691 "isa_tms320.tcc"
> *DecodeOpDBcond_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpDBcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50697 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50701 "isa_tms320.tcc"
	>(code, addr);
}

/* end of DBcond (decrement and branch conditionally (standard))
**********************************************************/
/**********************************************************
* DBcondD (decrement and branch conditionally (delayed))
* op DBcondD(0b011011[6]:b[1]:ar[3]:0b1[1]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 50714 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50717 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50721 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50724 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50728 "isa_tms320.tcc"
OpDBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 50732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50736 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50740 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50743 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50747 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50750 "isa_tms320.tcc"
)
{
#line 462 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "DB" << cond_name << "D AR" << ar << ", " << reg_name;
		return true;
	}
#line 50762 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50767 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50770 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50774 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50777 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50781 "isa_tms320.tcc"
OpDBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 50785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50789 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50793 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50796 "isa_tms320.tcc"
)
{
#line 471 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read ARn
		int32_t ar_value = cpu.GetIntReg(ar);

		// Compute new value for ARn
		ar_value = ar_value - 1;

		// Update ARn
		cpu.SetAR(ar, (uint32_t) ar_value);

		// Check whether ARn is >= 0
		if(ar_value < 0) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetIntReg(reg);

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 50828 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50834 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50837 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50841 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50844 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50849 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50853 "isa_tms320.tcc"
> *DecodeOpDBcondD_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpDBcondD_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50859 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50863 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 50870 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50873 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50877 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50880 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50884 "isa_tms320.tcc"
OpDBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 50888 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50892 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50896 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50899 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50903 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50906 "isa_tms320.tcc"
)
{
#line 502 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "DB" << cond_name << "D AR" << ar << ", 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 3 + imm) << dec;
		return true;
	}
#line 50917 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50922 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50925 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50929 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50932 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50936 "isa_tms320.tcc"
OpDBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 50940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50944 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50948 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50951 "isa_tms320.tcc"
)
{
#line 510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read ARn
		int32_t ar_value = cpu.GetIntReg(ar);

		// Compute new value for ARn
		ar_value = ar_value - 1;

		// Update ARn
		cpu.SetAR(ar, (uint32_t) ar_value);

		// Check whether ARn is >= 0
		if(ar_value < 0) return;

		// Read the PC
		typename CONFIG::address_t pc = cpu.GetPC();

		// Compute the target address
		typename CONFIG::address_t target_addr = pc + imm + 3;

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 50986 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50992 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50999 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51002 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51007 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51011 "isa_tms320.tcc"
> *DecodeOpDBcondD_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpDBcondD_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51017 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51021 "isa_tms320.tcc"
	>(code, addr);
}

/* end of DBcondD (decrement and branch conditionally (delayed))
**********************************************************/
/**********************************************************
* IACK (interrupt acknowledge)
* op IACK(0b000[3]:0b110110[6]:g[2]:0b00000[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 51034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51037 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51041 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51044 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51048 "isa_tms320.tcc"
OpIACK_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51052 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51056 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51060 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51063 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51067 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51070 "isa_tms320.tcc"
)
{
#line 552 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "IACK @0x" << direct;
		return true;
	}
#line 51078 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51084 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51087 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51091 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51094 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51099 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51103 "isa_tms320.tcc"
> *DecodeOpIACK_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpIACK_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51109 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51113 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 51120 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51123 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51127 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51130 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51134 "isa_tms320.tcc"
OpIACK_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51138 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51142 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51146 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51149 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51153 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51156 "isa_tms320.tcc"
)
{
#line 559 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		string disasm_indir;
		if(!cpu.DisasmIndir(disasm_indir, mod, ar, disp)) return false;
		os << "IACK " << disasm_indir;
		return true;
	}
#line 51166 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51172 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51175 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51179 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51182 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51187 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51191 "isa_tms320.tcc"
> *DecodeOpIACK_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpIACK_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51197 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51201 "isa_tms320.tcc"
	>(code, addr);
}

/* end of IACK (interrupt acknowledge)
**********************************************************/
/**********************************************************
* IDLE (idle until interrupt)
* op IDLE(0b000[3]:0b001100[6]:0[23])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 51214 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51217 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51221 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51224 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51228 "isa_tms320.tcc"
OpIDLE<
#line 45 "isa/tms320.isa"
CONFIG
#line 51232 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51236 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51240 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51243 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51247 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51250 "isa_tms320.tcc"
)
{
#line 576 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "IDLE";
		return true;
	}
#line 51258 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51264 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51271 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51274 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51283 "isa_tms320.tcc"
> *DecodeOpIDLE(CodeType code, typename CONFIG::address_t addr)
{
	return new OpIDLE<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51289 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51293 "isa_tms320.tcc"
	>(code, addr);
}

/* end of IDLE (idle until interrupt)
**********************************************************/
/**********************************************************
* NOP (no operation)
* op NOP(0b000[3]:0b011001[6]:g[2]:0b00000[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 51306 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51309 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51313 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51316 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51320 "isa_tms320.tcc"
OpNOP_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 51324 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51328 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51332 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51335 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51339 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51342 "isa_tms320.tcc"
)
{
#line 591 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{

		os << "NOP";
		return true;
	}
#line 51351 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51356 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51359 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51363 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51366 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51370 "isa_tms320.tcc"
OpNOP_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 51374 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51378 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51382 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51385 "isa_tms320.tcc"
)
{
#line 597 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// No operation
	}
#line 51392 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51398 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51401 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51405 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51408 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51413 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51417 "isa_tms320.tcc"
> *DecodeOpNOP_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOP_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51423 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51427 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 51434 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51437 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51441 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51444 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51448 "isa_tms320.tcc"
OpNOP_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51452 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51456 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51460 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51463 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51467 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51470 "isa_tms320.tcc"
)
{
#line 603 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		string disasm_indir;
		if(!cpu.DisasmIndir(disasm_indir, mod, ar, disp)) return false;
		os << "NOP " << disasm_indir;
		return true;
	}
#line 51480 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51495 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51499 "isa_tms320.tcc"
OpNOP_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51507 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51511 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51514 "isa_tms320.tcc"
)
{
#line 610 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Do a dummy load from memory
		cpu.IntLoad(ea);
	}
#line 51532 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51538 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51541 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51545 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51548 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51553 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51557 "isa_tms320.tcc"
> *DecodeOpNOP_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOP_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51563 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51567 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NOP (no operation)
**********************************************************/
/**********************************************************
* RETIcond (return from interrupt conditionally)
* op RETIcond(0b01111[5]:0b0000[4]:0b00[2]:cond[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 51580 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51583 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51587 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51590 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51594 "isa_tms320.tcc"
OpRETIcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 51598 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51602 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51606 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51609 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51613 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51616 "isa_tms320.tcc"
)
{
#line 635 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "RETI" << cond_name;
		return true;
	}
#line 51627 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51632 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51635 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51639 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51642 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51646 "isa_tms320.tcc"
OpRETIcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 51650 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51654 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51658 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51661 "isa_tms320.tcc"
)
{
#line 643 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read SP
		typename CONFIG::address_t sp = cpu.GetSP();

		// Load the target address stored at SP
		typename CONFIG::address_t target_addr = cpu.IntLoad(sp);

		// Compute the new value of SP
		sp = sp - 1;

		// Update SP
		cpu.SetSP(sp);

		// Set ST[GIE]
		cpu.SetST_GIE();

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 51693 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51699 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51702 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51706 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51709 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51714 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51718 "isa_tms320.tcc"
> *DecodeOpRETIcond(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRETIcond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51724 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51728 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RETIcond (return from interrupt conditionally)
**********************************************************/
/**********************************************************
* RETScond (return form subroutine conditionally)
* op RETScond(0b01111[5]:0b0001[4]:0b00[2]:cond[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 51741 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51748 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51751 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51755 "isa_tms320.tcc"
OpRETScond<
#line 45 "isa/tms320.isa"
CONFIG
#line 51759 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51763 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51767 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51770 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51774 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51777 "isa_tms320.tcc"
)
{
#line 682 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "RETS" << cond_name;
		return true;
	}
#line 51788 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51793 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51800 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51803 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51807 "isa_tms320.tcc"
OpRETScond<
#line 45 "isa/tms320.isa"
CONFIG
#line 51811 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51815 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51819 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51822 "isa_tms320.tcc"
)
{
#line 690 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read SP
		typename CONFIG::address_t sp = cpu.GetSP();

		// Load the target address stored at SP
		typename CONFIG::address_t target_addr = cpu.IntLoad(sp);

		// Compute the new value of SP
		sp = sp - 1;

		// Update SP
		cpu.SetSP(sp);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 51851 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51857 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51860 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51864 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51867 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51876 "isa_tms320.tcc"
> *DecodeOpRETScond(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRETScond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51882 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51886 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RETScond (return form subroutine conditionally)
**********************************************************/
/**********************************************************
* RPTB (repeat block of instructions)
* op RPTB(0b01100100[8]:src[24])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 51899 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51902 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51906 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51909 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51913 "isa_tms320.tcc"
OpRPTB<
#line 45 "isa/tms320.isa"
CONFIG
#line 51917 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51921 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51925 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51928 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51932 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51935 "isa_tms320.tcc"
)
{
#line 726 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "RPTB 0x" << hex << src << dec;
		return true;
	}
#line 51943 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51948 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51951 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51955 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51958 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51962 "isa_tms320.tcc"
OpRPTB<
#line 45 "isa/tms320.isa"
CONFIG
#line 51966 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51970 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51974 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51977 "isa_tms320.tcc"
)
{
#line 731 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Read the PC
		typename CONFIG::address_t pc = cpu.GetPC();

		// Compute next PC
		typename CONFIG::address_t next_pc = pc + 1;

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.ResetS();

		// Load RE with source operand value
		cpu.SetRC(src);
	}
#line 52000 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52006 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52009 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52013 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52016 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52021 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52025 "isa_tms320.tcc"
> *DecodeOpRPTB(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTB<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52031 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52035 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RPTB (repeat block of instructions)
**********************************************************/
/**********************************************************
* RPTS (repeat single instruction)
* op RPTS(0b000[3]:0b100111[6]:g[2]:0b11011[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 52048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52051 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52055 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52058 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52062 "isa_tms320.tcc"
OpRPTS_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 52066 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52070 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52074 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52077 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52081 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52084 "isa_tms320.tcc"
)
{
#line 761 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *src_reg_name = REG_NAME[src];

		if(!src_reg_name) return false;
		os << "RPTS " << src_reg_name;
		return true;
	}
#line 52095 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52100 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52103 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52107 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52110 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52114 "isa_tms320.tcc"
OpRPTS_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 52118 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52122 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52126 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52129 "isa_tms320.tcc"
)
{
#line 769 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check that source register is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the PC
		typename CONFIG::address_t pc = cpu.GetPC();

		// Read the source operand
		typename CONFIG::address_t src_value = cpu.GetIntReg(src);

		// Compute next PC
		typename CONFIG::address_t next_pc = pc + 1;

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);
		cpu.SetRE(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.SetS();

		// Load RC with source operand value
		cpu.SetRC(src_value);
	}
#line 52162 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52178 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52183 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52187 "isa_tms320.tcc"
> *DecodeOpRPTS_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTS_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52193 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52197 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52204 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52207 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52211 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52214 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52218 "isa_tms320.tcc"
OpRPTS_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52222 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52226 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52230 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52233 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52237 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52240 "isa_tms320.tcc"
)
{
#line 801 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "RPTS @0x" << hex << direct << dec;
		return true;
	}
#line 52248 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52253 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52256 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52260 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52263 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52267 "isa_tms320.tcc"
OpRPTS_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52271 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52275 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52279 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52282 "isa_tms320.tcc"
)
{
#line 806 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Read the PC
		typename CONFIG::address_t pc = cpu.GetPC();

		// Compute the effective address of the source operand
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Load the source operand value from memory
		typename CONFIG::address_t src_value = cpu.IntLoad(ea);

		// Compute next PC
		typename CONFIG::address_t next_pc = pc + 1;

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);
		cpu.SetRE(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.SetS();

		// Load RC with source operand value
		cpu.SetRC(src_value);
	}
#line 52312 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52318 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52321 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52325 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52328 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52337 "isa_tms320.tcc"
> *DecodeOpRPTS_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTS_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52343 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52347 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52354 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52357 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52361 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52364 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52368 "isa_tms320.tcc"
OpRPTS_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52372 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52376 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52380 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52383 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52387 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52390 "isa_tms320.tcc"
)
{
#line 835 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		string disasm_indir;
		if(!cpu.DisasmIndir(disasm_indir, mod, ar, disp)) return false;
		os << "RPTS " << disasm_indir;
		return true;
	}
#line 52400 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52405 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52408 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52412 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52415 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52419 "isa_tms320.tcc"
OpRPTS_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52423 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52427 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52431 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52434 "isa_tms320.tcc"
)
{
#line 842 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Read the PC
		typename CONFIG::address_t pc = cpu.GetPC();

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the source operand value from memory
		typename CONFIG::address_t src_value = cpu.IntLoad(ea);

		// Compute next PC
		typename CONFIG::address_t next_pc = pc + 1;

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);
		cpu.SetRE(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.SetS();

		// Load RC with source operand value
		cpu.SetRC(src_value);
	}
#line 52471 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52477 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52480 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52487 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52492 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52496 "isa_tms320.tcc"
> *DecodeOpRPTS_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTS_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52502 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52506 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52513 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52523 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52527 "isa_tms320.tcc"
OpRPTS_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 52531 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52535 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52539 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52542 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52546 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52549 "isa_tms320.tcc"
)
{
#line 878 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "RPTS @0x" << hex << imm << dec;
		return true;
	}
#line 52557 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52562 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52565 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52569 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52572 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52576 "isa_tms320.tcc"
OpRPTS_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 52580 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52584 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52588 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52591 "isa_tms320.tcc"
)
{
#line 883 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Read the PC
		typename CONFIG::address_t pc = cpu.GetPC();

		// Compute the result
		uint32_t src_value = imm; // imm has already been sign extended by the decoder

		// Compute next PC
		typename CONFIG::address_t next_pc = pc + 1;

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);
		cpu.SetRE(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.SetS();

		// Load RC with source operand value
		cpu.SetRC(src_value);
	}
#line 52618 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52624 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52627 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52631 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52634 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52639 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52643 "isa_tms320.tcc"
> *DecodeOpRPTS_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTS_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52649 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52653 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RPTS (repeat single instruction)
**********************************************************/
/**********************************************************
* SWI (software interrupt)
* op SWI(0b0110011[7]:0b0000[4]:0[21])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 52666 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52669 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52673 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52676 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52680 "isa_tms320.tcc"
OpSWI<
#line 45 "isa/tms320.isa"
CONFIG
#line 52684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52688 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52692 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52695 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52699 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52702 "isa_tms320.tcc"
)
{
#line 917 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "SWI";
		return true;
	}
#line 52710 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52716 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52719 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52723 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52726 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52731 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52735 "isa_tms320.tcc"
> *DecodeOpSWI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSWI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52741 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52745 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SWI (software interrupt)
**********************************************************/
/**********************************************************
* TRAPcond (trap conditionally)
* op TRAPcond(0b0111010[7]:0b0000[4]:cond[5]:0b01[11]:n[5])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 52758 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52761 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52765 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52768 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52772 "isa_tms320.tcc"
OpTRAPcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 52776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52780 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52784 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52787 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52791 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52794 "isa_tms320.tcc"
)
{
#line 932 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		if(!cond_name) return false;
		os << "TRAP" << cond_name << " " << n;
		return true;
	}
#line 52804 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52810 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52813 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52817 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52820 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52825 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52829 "isa_tms320.tcc"
> *DecodeOpTRAPcond(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTRAPcond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52835 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52839 "isa_tms320.tcc"
	>(code, addr);
}

/* end of TRAPcond (trap conditionally)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of low-power control operations:
* - IDLE2        low-power idle
* - LOPOWER      divide clock by 16
* - MAXSPEED     restore clock to regular speed
*/
/**********************************************************
* IDLE2 (low-power idle)
* op IDLE2(0b000[3]:0b001100[6]:0b001[23])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 52891 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52898 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52901 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52905 "isa_tms320.tcc"
OpIDLE2<
#line 45 "isa/tms320.isa"
CONFIG
#line 52909 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52913 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52917 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52920 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52924 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52927 "isa_tms320.tcc"
)
{
#line 49 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		os << "IDLE2";
		return true;
	}
#line 52935 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52941 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52944 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52948 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52951 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52956 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52960 "isa_tms320.tcc"
> *DecodeOpIDLE2(CodeType code, typename CONFIG::address_t addr)
{
	return new OpIDLE2<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52966 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52970 "isa_tms320.tcc"
	>(code, addr);
}

/* end of IDLE2 (low-power idle)
**********************************************************/
/**********************************************************
* LOPOWER (divide clock by 16)
* op LOPOWER(0b000[3]:0b100001[6]:0b001[23])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 52983 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52986 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52990 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52993 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52997 "isa_tms320.tcc"
OpLOPOWER<
#line 45 "isa/tms320.isa"
CONFIG
#line 53001 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53005 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53009 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53012 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53016 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53019 "isa_tms320.tcc"
)
{
#line 64 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		os << "LOPOWER";
		return true;
	}
#line 53027 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53033 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53036 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53040 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53043 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53048 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53052 "isa_tms320.tcc"
> *DecodeOpLOPOWER(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLOPOWER<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53058 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53062 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LOPOWER (divide clock by 16)
**********************************************************/
/**********************************************************
* MAXSPEED (restore clock to regular speed)
* op MAXSPEED(0b000[3]:0b100001[6]:0[23])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 53075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53078 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53082 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53085 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53089 "isa_tms320.tcc"
OpMAXSPEED<
#line 45 "isa/tms320.isa"
CONFIG
#line 53093 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53097 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53101 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53104 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53108 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53111 "isa_tms320.tcc"
)
{
#line 79 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		os << "MAXSPEED";
		return true;
	}
#line 53119 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53125 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53128 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53132 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53135 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53144 "isa_tms320.tcc"
> *DecodeOpMAXSPEED(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMAXSPEED<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53150 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53154 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MAXSPEED (restore clock to regular speed)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of interlocked-operations:
* - LDFI         load floating-point value, interlocked
* - LDII         load integer, interlocked
* - SIGI         signal, interlocked
* - STFI         store floating-point value, interlocked
* - STII         store integer, interflocked
*/
/**********************************************************
* LDFI (load floating-point value, interlocked)
* op LDFI(0b000[3]:0b001111[6]:g[2]:dst[5]:src[16])
*/

template <
#line 45 "isa/tms320.isa"
class
#line 53209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53219 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53228 "isa_tms320.tcc"
> *DecodeOpLDFI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53234 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53238 "isa_tms320.tcc"
	>(code, addr);
}


template <
#line 45 "isa/tms320.isa"
class
#line 53246 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53253 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53256 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53261 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53265 "isa_tms320.tcc"
> *DecodeOpLDFI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53271 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53275 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDFI (load floating-point value, interlocked)
**********************************************************/
/**********************************************************
* LDII (load integer, interlocked)
* op LDII(0b000[3]:0b010001[6]:g[2]:dst[5]:src[16])
*/

template <
#line 45 "isa/tms320.isa"
class
#line 53289 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53292 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53296 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53299 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53304 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53308 "isa_tms320.tcc"
> *DecodeOpLDII_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDII_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53314 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53318 "isa_tms320.tcc"
	>(code, addr);
}


template <
#line 45 "isa/tms320.isa"
class
#line 53326 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53329 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53333 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53336 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53341 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53345 "isa_tms320.tcc"
> *DecodeOpLDII_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDII_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53351 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53355 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDII (load integer, interlocked)
**********************************************************/
/**********************************************************
* SIGI (signal, interlocked)
* op SIGI(0b000[3]:0b101100[6]:0b00[2]:0[21])
*/

template <
#line 45 "isa/tms320.isa"
class
#line 53369 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53372 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53379 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53384 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53388 "isa_tms320.tcc"
> *DecodeOpSIGI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSIGI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53394 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53398 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SIGI (signal, interlocked)
**********************************************************/
/**********************************************************
* STFI (store floating-point value, interlocked)
* op STFI(0b000[3]:0b101001[6]:g[2]:src[5]:dst[16])
*/

template <
#line 45 "isa/tms320.isa"
class
#line 53412 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53415 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53419 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53422 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53427 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53431 "isa_tms320.tcc"
> *DecodeOpSTFI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTFI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53437 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53441 "isa_tms320.tcc"
	>(code, addr);
}


template <
#line 45 "isa/tms320.isa"
class
#line 53449 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53452 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53456 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53459 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53464 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53468 "isa_tms320.tcc"
> *DecodeOpSTFI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTFI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53474 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53478 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STFI (store floating-point value, interlocked)
**********************************************************/
/**********************************************************
* STII (store integer, interflocked)
* op STII(0b000[3]:0b101011[6]:g[2]:src[5]:dst[16])
*/

template <
#line 45 "isa/tms320.isa"
class
#line 53492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53495 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53502 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53511 "isa_tms320.tcc"
> *DecodeOpSTII_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTII_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53517 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53521 "isa_tms320.tcc"
	>(code, addr);
}


template <
#line 45 "isa/tms320.isa"
class
#line 53529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53532 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53536 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53539 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53548 "isa_tms320.tcc"
> *DecodeOpSTII_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTII_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53554 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53558 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STII (store integer, interflocked)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of parallel operations:
* - ABSF || STF		absolute value of a floating-point number and store floating-point value
* - ABSI || STI		absolute value of an integer and store integer
* - ADDF3 || STF		add floating-point values and store floating-point value
* - ADDI3 || STI		add integers and store integer
* - AND3 || STI		bitwise-logical AND and store integer
* - ASH3 || STI		arithmetic shift and store integer
* - FIX || STI			convert floating-point value to integer and store integer
* - FLOAT || STF		convert integer to floating-point value and store floating-point value
* - LDF || STF			load floating-point value and store floating-point value
* - LDI || STI			load integer and store integer
* - LSH3 || STI		logical shift and store integer
* - MPYF3 || STF       multiply floating-point values and store floating-point value
* - MPYI3 || STI		multiply integer and store integer
* - NEGF || STF		negate floating-point value and store floating-point value
* - NEGI || STI		negate integer and store integer
* - NOT || STI			complement value and store integer
* - OR3 || STI			bitwise-logical OR value and store integer
* - STF || STF			store floating-point values
* - STI || STI			sotre integers
* - SUBF3 || STF		subtract floating-point value and store floating-point value
* - SUBI3 || STI		subtract integer and store integer
* - XOR3 || STI		bitwise-exclusive OR values and store integer
* - LDF || LDF			load floating-point value
* - LDI || LDI			load integer
* - MPYF3 || ADDF3		multiply and add floating-point value
* - MPYF3 || SUBF3		multiply and subtract floating-point value
* - MPYI3 || ADDI3		multiply and add integer
* - MPYI3 || SUBI3		multiply and subtract integer
*/
/**********************************************************
* ABSF || STF (absolute value of a floating-point number and store floating-point value)
* op ABSF_STF(0b11[2]:0b00100[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 53635 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53642 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53645 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53649 "isa_tms320.tcc"
OpABSF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 53653 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53657 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53661 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53664 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53668 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53671 "isa_tms320.tcc"
)
{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, s2_mod, s2_ar))
		return false;

		os << "ABSF " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 53689 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53695 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53698 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53702 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53705 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53710 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53714 "isa_tms320.tcc"
> *DecodeOpABSF_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53720 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53724 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 53731 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53734 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53738 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53741 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53745 "isa_tms320.tcc"
OpABSF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 53749 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53753 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53757 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53760 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53764 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53767 "isa_tms320.tcc"
)
{
#line 90 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar))
		return false;

		os << "ABSF " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 53784 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53790 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53793 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53797 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53800 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53805 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53809 "isa_tms320.tcc"
> *DecodeOpABSF_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53815 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53819 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ABSF || STF (absolute value of a floating-point number and store floating-point value)
**********************************************************/
/**********************************************************
* ABSI || STI (absolute value of an integer and store integer)
* op ABSI_STI(0b11[2]:0b00101[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 53833 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53836 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53843 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53847 "isa_tms320.tcc"
OpABSI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 53851 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53855 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53859 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53862 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53866 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53869 "isa_tms320.tcc"
)
{
#line 116 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, s2_mod, s2_ar))
		return false;

		os << "ABSI " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 53887 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53893 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53896 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53900 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53903 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53908 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53912 "isa_tms320.tcc"
> *DecodeOpABSI_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53918 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53922 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 53929 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53932 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53936 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53939 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53943 "isa_tms320.tcc"
OpABSI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 53947 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53951 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53955 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53958 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53962 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53965 "isa_tms320.tcc"
)
{
#line 131 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar))
		return false;

		os << "ABSI " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 53982 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53988 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53991 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53995 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53998 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54007 "isa_tms320.tcc"
> *DecodeOpABSI_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54013 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54017 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ABSI || STI (absolute value of an integer and store integer)
**********************************************************/
/**********************************************************
* ADDF3 || STF (add floating-point values and store floating-point value)
* op ADDF3_STF(0b11[2]:0b00110[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 54031 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54034 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54038 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54041 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54045 "isa_tms320.tcc"
OpADDF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 54049 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54053 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54057 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54060 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54064 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54067 "isa_tms320.tcc"
)
{
#line 157 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, s2_mod, s2_ar))
		return false;

		os << "ADDF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 54086 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54092 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54095 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54099 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54102 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54107 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54111 "isa_tms320.tcc"
> *DecodeOpADDF3_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54117 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54121 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54128 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54131 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54135 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54138 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54142 "isa_tms320.tcc"
OpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 54146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54150 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54154 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54157 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54161 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54164 "isa_tms320.tcc"
)
{
#line 173 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar))
		return false;

		os << "ADDF3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 54182 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54188 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54191 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54198 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54203 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54207 "isa_tms320.tcc"
> *DecodeOpADDF3_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54213 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54217 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ADDF3 || STF (add floating-point values and store floating-point value)
**********************************************************/
/**********************************************************
* ADDI3 || STI (add integers and store integer)
* op ADDI3_STI(0b11[2]:0b00111[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 54231 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54234 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54238 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54241 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54245 "isa_tms320.tcc"
OpADDI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 54249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54253 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54257 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54260 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54264 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54267 "isa_tms320.tcc"
)
{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, s2_mod, s2_ar))
		return false;

		os << "ADDI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 54286 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54292 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54295 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54299 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54302 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54307 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54311 "isa_tms320.tcc"
> *DecodeOpADDI3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54317 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54321 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54328 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54331 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54335 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54338 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54342 "isa_tms320.tcc"
OpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 54346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54350 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54354 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54357 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54361 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54364 "isa_tms320.tcc"
)
{
#line 216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar))
		return false;

		os << "ADDI3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 54382 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54388 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54395 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54398 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54407 "isa_tms320.tcc"
> *DecodeOpADDI3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54413 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54417 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ADDI3 || STI (add integers and store integer)
**********************************************************/
/**********************************************************
* AND3 || STI (bitwise-logical AND and store integer)
* op AND3_STI(0b11[2]:0b01000[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 54431 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54434 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54438 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54441 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54445 "isa_tms320.tcc"
OpAND3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 54449 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54453 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54457 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54460 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54464 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54467 "isa_tms320.tcc"
)
{
#line 243 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, s2_mod, s2_ar))
		return false;

		os << "AND3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 54486 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54495 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54502 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54511 "isa_tms320.tcc"
> *DecodeOpAND3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54517 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54521 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54528 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54531 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54535 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54538 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54542 "isa_tms320.tcc"
OpAND3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 54546 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54550 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54554 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54557 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54561 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54564 "isa_tms320.tcc"
)
{
#line 259 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar))
		return false;

		os << "AND3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 54582 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54588 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54591 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54595 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54598 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54603 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54607 "isa_tms320.tcc"
> *DecodeOpAND3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54613 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54617 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of AND3 || STI (bitwise-logical AND and store integer)
**********************************************************/
/**********************************************************
* ASH3 || STI (arithmetic shift and store integer)
* op ASH3_STI(0b11[2]:0b01001[5]:dst1[3]:count[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 54631 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54634 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54638 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54641 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54645 "isa_tms320.tcc"
OpASH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 54649 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54653 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54657 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54660 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54664 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54667 "isa_tms320.tcc"
)
{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *count_name = REG_NAME[count];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, s2_mod, s2_ar))
		return false;

		os << "ASH3 " << count_name << ", " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 54686 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54692 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54695 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54699 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54702 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54707 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54711 "isa_tms320.tcc"
> *DecodeOpASH3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54717 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54721 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54728 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54731 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54735 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54738 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54742 "isa_tms320.tcc"
OpASH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 54746 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54750 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54754 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54757 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54761 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54764 "isa_tms320.tcc"
)
{
#line 302 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *count_name = REG_NAME[count];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar))
		return false;

		os << "ASH3 " << count_name << ", " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 54782 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54798 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54807 "isa_tms320.tcc"
> *DecodeOpASH3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54813 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54817 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ASH3 || STI (arithmetic shift and store integer)
**********************************************************/
/**********************************************************
* FIX || STI (convert floating-point value to integer and store integer)
* op FIX_STI(0b11[2]:0b01010[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 54831 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54834 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54838 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54841 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54845 "isa_tms320.tcc"
OpFIX_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 54849 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54853 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54857 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54860 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54864 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54867 "isa_tms320.tcc"
)
{
#line 329 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, s2_mod, s2_ar))
		return false;

		os << "FIX " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 54885 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54891 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54898 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54901 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54906 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54910 "isa_tms320.tcc"
> *DecodeOpFIX_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54916 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54920 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54927 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54934 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54937 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54941 "isa_tms320.tcc"
OpFIX_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 54945 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54949 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54953 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54956 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54960 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54963 "isa_tms320.tcc"
)
{
#line 344 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar))
		return false;

		os << "FIX " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 54980 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54986 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54989 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54993 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54996 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55001 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55005 "isa_tms320.tcc"
> *DecodeOpFIX_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55011 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55015 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of FIX || STI (convert floating-point value to integer and store integer)
**********************************************************/
/**********************************************************
* FLOAT || STF (convert integer to floating-point value and store floating-point value)
* op FLOAT_STF(0b11[2]:0b01011[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 55029 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55032 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55036 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55039 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55043 "isa_tms320.tcc"
OpFLOAT_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 55047 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55051 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55055 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55058 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55062 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55065 "isa_tms320.tcc"
)
{
#line 370 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, s2_mod, s2_ar))
		return false;

		os << "FLOAT " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 55083 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55089 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55092 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55096 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55099 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55108 "isa_tms320.tcc"
> *DecodeOpFLOAT_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55114 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55118 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 55125 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55128 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55132 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55135 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55139 "isa_tms320.tcc"
OpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 55143 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55147 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55151 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55154 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55158 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55161 "isa_tms320.tcc"
)
{
#line 385 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar))
		return false;

		os << "FLOAT " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 55178 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55184 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55187 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55191 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55194 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55199 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55203 "isa_tms320.tcc"
> *DecodeOpFLOAT_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55209 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55213 "isa_tms320.tcc"
	>(code, addr);
}

/* end of FLOAT || STF (convert integer to floating-point value and store floating-point value)
**********************************************************/
/**********************************************************
* LDF || STF (load floating-point value and store floating-point value)
* op LDF_STF(0b11[2]:0b01100[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 55226 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55229 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55233 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55236 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55240 "isa_tms320.tcc"
OpLDF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 55244 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55248 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55252 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55255 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55259 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55262 "isa_tms320.tcc"
)
{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, s2_mod, s2_ar))
		return false;

		os << "LDF " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 55280 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55286 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55289 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55293 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55296 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55301 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55305 "isa_tms320.tcc"
> *DecodeOpLDF_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55311 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55315 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 55322 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55325 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55329 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55332 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55336 "isa_tms320.tcc"
OpLDF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 55340 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55344 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55348 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55351 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55355 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55358 "isa_tms320.tcc"
)
{
#line 425 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar))
		return false;

		os << "LDF " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 55375 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55381 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55384 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55388 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55391 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55396 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55400 "isa_tms320.tcc"
> *DecodeOpLDF_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55406 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55410 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDF || STF (load floating-point value and store floating-point value)
**********************************************************/
/**********************************************************
* LDI || STI (load integer and store integer)
* op LDI_STI(0b11[2]:0b01101[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 55423 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55426 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55430 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55433 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55437 "isa_tms320.tcc"
OpLDI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 55441 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55445 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55449 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55452 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55456 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55459 "isa_tms320.tcc"
)
{
#line 450 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, s2_mod, s2_ar))
		return false;

		os << "LDI " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 55477 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55483 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55486 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55490 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55493 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55498 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55502 "isa_tms320.tcc"
> *DecodeOpLDI_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55508 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55512 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 55519 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55522 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55526 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55529 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55533 "isa_tms320.tcc"
OpLDI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 55537 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55541 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55545 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55548 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55552 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55555 "isa_tms320.tcc"
)
{
#line 465 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar))
		return false;

		os << "LDI " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 55572 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55578 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55581 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55588 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55593 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55597 "isa_tms320.tcc"
> *DecodeOpLDI_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55603 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55607 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDI || STI (load integer and store integer)
**********************************************************/
/**********************************************************
* LSH3 || STI (logical shift and store integer)
* op LSH3_STI(0b11[2]:0b01110[5]:dst1[3]:count[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 55620 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55627 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55630 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55634 "isa_tms320.tcc"
OpLSH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 55638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55642 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55646 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55649 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55653 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55656 "isa_tms320.tcc"
)
{
#line 490 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *count_name = REG_NAME[count];
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, s2_mod, s2_ar))
		return false;

		os << "LSH3 " << count << ", " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 55675 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55691 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55700 "isa_tms320.tcc"
> *DecodeOpLSH3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55706 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55710 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 55717 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55720 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55724 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55727 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55731 "isa_tms320.tcc"
OpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 55735 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55739 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55743 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55746 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55750 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55753 "isa_tms320.tcc"
)
{
#line 506 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *count_name = REG_NAME[count];
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar))
		return false;

		os << "LSH3 " << count << ", " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 55771 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55777 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55780 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55784 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55787 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55796 "isa_tms320.tcc"
> *DecodeOpLSH3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55802 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55806 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LSH3 || STI (logical shift and store integer)
**********************************************************/
/**********************************************************
* MPYF3 || STF (multiply floating-point values and store floating-point value)
* op MPYF3_STF(0b11[2]:0b01111[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 55819 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55826 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55829 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55833 "isa_tms320.tcc"
OpMPYF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 55837 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55841 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55845 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55848 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55852 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55855 "isa_tms320.tcc"
)
{
#line 532 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, s2_mod, s2_ar))
		return false;

		os << "MPYF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 55874 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55880 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55883 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55887 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55890 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55895 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55899 "isa_tms320.tcc"
> *DecodeOpMPYF3_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55905 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55909 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 55916 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55919 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55923 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55926 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55930 "isa_tms320.tcc"
OpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 55934 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55938 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55942 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55945 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55949 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55952 "isa_tms320.tcc"
)
{
#line 548 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "MPYF3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 55970 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55976 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55979 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55983 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55986 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55991 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55995 "isa_tms320.tcc"
> *DecodeOpMPYF3_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56001 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56005 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF3 || STF (multiply floating-point values and store floating-point value)
**********************************************************/
/**********************************************************
* MPYI3 || STI (multiply integer and store integer)
* op MPYI3_STI(0b11[2]:0b10000[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 56018 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56021 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56025 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56028 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56032 "isa_tms320.tcc"
OpMPYI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 56036 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56040 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56044 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56047 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56051 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56054 "isa_tms320.tcc"
)
{
#line 574 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, s2_mod, s2_ar))
		return false;

		os << "MPYI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 56073 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56079 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56086 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56089 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56094 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56098 "isa_tms320.tcc"
> *DecodeOpMPYI3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56104 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56108 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56115 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56118 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56122 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56125 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56129 "isa_tms320.tcc"
OpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 56133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56137 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56141 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56144 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56148 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56151 "isa_tms320.tcc"
)
{
#line 590 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "MPYI3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 56169 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56182 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56185 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56190 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56194 "isa_tms320.tcc"
> *DecodeOpMPYI3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56200 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56204 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYI3 || STI (multiply integer and store integer)
**********************************************************/
/**********************************************************
* NEGF || STF (negate floating-point value and store floating-point value)
* op NEGF_STF(0b11[2]:0b10001[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 56217 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56220 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56224 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56227 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56231 "isa_tms320.tcc"
OpNEGF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 56235 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56239 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56243 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56246 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56250 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56253 "isa_tms320.tcc"
)
{
#line 616 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, s2_mod, s2_ar))
		return false;

		os << "NEGF " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 56271 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56277 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56280 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56284 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56287 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56292 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56296 "isa_tms320.tcc"
> *DecodeOpNEGF_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56302 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56306 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56313 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56316 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56320 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56323 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56327 "isa_tms320.tcc"
OpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 56331 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56335 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56339 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56342 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56346 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56349 "isa_tms320.tcc"
)
{
#line 631 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "NEGF " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 56366 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56372 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56375 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56379 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56382 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56391 "isa_tms320.tcc"
> *DecodeOpNEGF_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56397 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56401 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGF || STF (negate floating-point value and store floating-point value)
**********************************************************/
/**********************************************************
* NEGI || STI (negate integer and store integer)
* op NEGI_STI(0b11[2]:0b10010[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 56414 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56417 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56421 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56424 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56428 "isa_tms320.tcc"
OpNEGI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 56432 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56436 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56440 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56443 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56447 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56450 "isa_tms320.tcc"
)
{
#line 656 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, s2_mod, s2_ar))
		return false;

		os << "NEGI " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 56468 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56474 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56477 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56481 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56484 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56489 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56493 "isa_tms320.tcc"
> *DecodeOpNEGI_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56499 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56503 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56510 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56513 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56517 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56520 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56524 "isa_tms320.tcc"
OpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 56528 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56532 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56536 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56539 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56543 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56546 "isa_tms320.tcc"
)
{
#line 671 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "NEGI " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 56563 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56569 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56572 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56576 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56579 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56584 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56588 "isa_tms320.tcc"
> *DecodeOpNEGI_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56594 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56598 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGI || STI (negate integer and store integer)
**********************************************************/
/**********************************************************
* NOT || STI (complement value and store integer)
* op NOT_STI(0b11[2]:0b10011[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 56611 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56618 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56621 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56625 "isa_tms320.tcc"
OpNOT_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 56629 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56633 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56637 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56640 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56644 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56647 "isa_tms320.tcc"
)
{
#line 696 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, s2_mod, s2_ar))
		return false;

		os << "NOT " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 56665 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56671 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56674 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56678 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56681 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56686 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56690 "isa_tms320.tcc"
> *DecodeOpNOT_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56696 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56700 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56707 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56710 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56714 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56717 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56721 "isa_tms320.tcc"
OpNOT_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 56725 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56729 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56733 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56736 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56740 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56743 "isa_tms320.tcc"
)
{
#line 711 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "NOT " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 56760 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56766 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56769 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56773 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56776 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56781 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56785 "isa_tms320.tcc"
> *DecodeOpNOT_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56791 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56795 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NOT || STI (complement value and store integer)
**********************************************************/
/**********************************************************
* OR3 || STI (bitwise-logical OR value and store integer)
* op OR3_STI(0b11[2]:0b10100[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 56808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56811 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56815 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56818 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56822 "isa_tms320.tcc"
OpOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 56826 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56830 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56834 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56837 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56841 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56844 "isa_tms320.tcc"
)
{
#line 736 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, s2_mod, s2_ar))
		return false;

		os << "OR3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 56863 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56869 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56876 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56879 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56884 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56888 "isa_tms320.tcc"
> *DecodeOpOR3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56894 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56898 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56905 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56908 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56912 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56915 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56919 "isa_tms320.tcc"
OpOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 56923 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56927 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56931 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56934 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56938 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56941 "isa_tms320.tcc"
)
{
#line 752 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "OR3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 56959 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56965 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56968 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56972 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56975 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56984 "isa_tms320.tcc"
> *DecodeOpOR3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56990 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56994 "isa_tms320.tcc"
	>(code, addr);
}

/* end of OR3 || STI (bitwise-logical OR value and store integer)
**********************************************************/
/**********************************************************
* STF || STF (store floating-point values)
* op STF_STF(0b11[2]:0b00000[5]:src2[3]:0b000[3]:src1[3]:dst1[8]:dst2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 57007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57014 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57017 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57021 "isa_tms320.tcc"
OpSTF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 57025 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57029 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57033 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57036 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57040 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57043 "isa_tms320.tcc"
)
{
#line 778 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst1_indir;
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst1_indir, d1_mod, d1_ar) ||
		!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar))
		return false;

		os << "STF " << src2_name << ", " << disasm_dst2_indir
		<< " || " << "STF " << src1_name << ", " << disasm_dst1_indir;
		return true;
	}
#line 57061 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57067 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57077 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57086 "isa_tms320.tcc"
> *DecodeOpSTF_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57092 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57096 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 57103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57106 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57110 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57113 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57117 "isa_tms320.tcc"
OpSTF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 57121 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57125 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57129 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57132 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57136 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57139 "isa_tms320.tcc"
)
{
#line 793 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst1_indir;
		const char *dst2_name = REG_NAME[dst2];

		if (!cpu.DisasmIndir(disasm_dst1_indir, d1_mod, d1_ar) || !dst2_name)
		return false;

		os << "STF " << src2_name << ", " << dst2_name
		<< " || " << "STF " << src1_name << ", " << disasm_dst1_indir;
		return true;
	}
#line 57156 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57162 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57165 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57169 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57172 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57177 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57181 "isa_tms320.tcc"
> *DecodeOpSTF_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57187 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57191 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STF || STF (store floating-point values)
**********************************************************/
/**********************************************************
* STI || STI (sotre integers)
* op STI_STI(0b11[2]:0b00001[5]:src2[3]:0b000[3]:src1[3]:dst1[8]:dst2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 57204 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57207 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57211 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57214 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57218 "isa_tms320.tcc"
OpSTI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 57222 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57226 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57230 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57233 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57237 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57240 "isa_tms320.tcc"
)
{
#line 818 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst1_indir;
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst1_indir, d1_mod, d1_ar) ||
		!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar))
		return false;

		os << "STI " << src2_name << ", " << disasm_dst2_indir
		<< " || " << "STI " << src1_name << ", " << disasm_dst1_indir;
		return true;
	}
#line 57258 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57264 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57271 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57274 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57283 "isa_tms320.tcc"
> *DecodeOpSTI_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57289 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57293 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 57300 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57303 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57307 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57310 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57314 "isa_tms320.tcc"
OpSTI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 57318 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57322 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57326 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57329 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57333 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57336 "isa_tms320.tcc"
)
{
#line 833 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst1_indir;
		const char *dst2_name = REG_NAME[dst2];

		if (!cpu.DisasmIndir(disasm_dst1_indir, d1_mod, d1_ar) || !dst2_name)
		return false;

		os << "STI " << src2_name << ", " << dst2_name
		<< " || " << "STI " << src1_name << ", " << disasm_dst1_indir;
		return true;
	}
#line 57353 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57359 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57362 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57366 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57369 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57374 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57378 "isa_tms320.tcc"
> *DecodeOpSTI_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57384 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57388 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STI || STI (sotre integers)
**********************************************************/
/**********************************************************
* SUBF3 || STF (subtract floating-point value and store floating-point value)
* op SUBF3_STF(0b11[2]:0b10101[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 57401 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57404 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57408 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57411 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57415 "isa_tms320.tcc"
OpSUBF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 57419 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57423 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57427 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57430 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57434 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57437 "isa_tms320.tcc"
)
{
#line 858 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, s2_mod, s2_ar))
		return false;

		os << "SUBF3 " << src1_name << ", " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 57456 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57462 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57472 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57477 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57481 "isa_tms320.tcc"
> *DecodeOpSUBF3_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57487 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57491 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 57498 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57501 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57505 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57508 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57512 "isa_tms320.tcc"
OpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 57516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57520 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57524 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57527 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57531 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57534 "isa_tms320.tcc"
)
{
#line 874 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "SUBF3 " << src1_name << ", " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 57552 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57558 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57561 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57565 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57568 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57573 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57577 "isa_tms320.tcc"
> *DecodeOpSUBF3_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57583 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57587 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBF3 || STF (subtract floating-point value and store floating-point value)
**********************************************************/
/**********************************************************
* SUBI3 || STI (subtract integer and store integer)
* op SUBI3_STI(0b11[2]:0b10110[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 57600 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57603 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57607 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57610 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57614 "isa_tms320.tcc"
OpSUBI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 57618 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57622 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57626 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57629 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57633 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57636 "isa_tms320.tcc"
)
{
#line 900 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, s2_mod, s2_ar))
		return false;

		os << "SUBI3 " << src1_name << ", " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 57655 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57661 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57664 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57668 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57671 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57676 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57680 "isa_tms320.tcc"
> *DecodeOpSUBI3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57686 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57690 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 57697 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57704 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57707 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57711 "isa_tms320.tcc"
OpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 57715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57719 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57723 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57726 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57730 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57733 "isa_tms320.tcc"
)
{
#line 916 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "SUBI3 " << src1_name << ", " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 57751 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57757 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57760 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57764 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57767 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57772 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57776 "isa_tms320.tcc"
> *DecodeOpSUBI3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57782 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57786 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBI3 || STI (subtract integer and store integer)
**********************************************************/
/**********************************************************
* XOR3 || STI (bitwise-exclusive OR values and store integer)
* op XOR3_STI(0b11[2]:0b10111[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 57799 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57802 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57806 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57809 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57813 "isa_tms320.tcc"
OpXOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 57817 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57821 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57825 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57828 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57832 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57835 "isa_tms320.tcc"
)
{
#line 942 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, s2_mod, s2_ar))
		return false;

		os << "XOR3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 57854 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57860 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57867 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57870 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57875 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57879 "isa_tms320.tcc"
> *DecodeOpXOR3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57885 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57889 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 57896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57899 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57903 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57906 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57910 "isa_tms320.tcc"
OpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 57914 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57918 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57922 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57925 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57929 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57932 "isa_tms320.tcc"
)
{
#line 958 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "XOR3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 57950 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57956 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57959 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57963 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57966 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57971 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57975 "isa_tms320.tcc"
> *DecodeOpXOR3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57981 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57985 "isa_tms320.tcc"
	>(code, addr);
}

/* end of XOR3 || STI (bitwise-exclusive OR values and store integer)
**********************************************************/
/**********************************************************
* LDF || LDF (load floating-point value)
* op LDF_LDF(0b11[2]:0b00010[5]:dst1[3]:dst2[3]:0b000[3]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 57998 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58001 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58005 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58008 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58012 "isa_tms320.tcc"
OpLDF_LDF<
#line 45 "isa/tms320.isa"
CONFIG
#line 58016 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58020 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58024 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58027 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58031 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58034 "isa_tms320.tcc"
)
{
#line 984 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *dst2_name = REG_NAME[dst2];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, s1_mod, s1_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, s2_mod, s2_ar))
		return false;

		os << "LDF " << disasm_src2_indir << ", " << dst2_name
		<< " || " << "LDF " << disasm_src1_indir << ", " << dst1_name;
		return true;
	}
#line 58052 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58058 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58061 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58065 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58068 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58073 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58077 "isa_tms320.tcc"
> *DecodeOpLDF_LDF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_LDF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58083 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58087 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 58094 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58097 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58104 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58108 "isa_tms320.tcc"
OpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 58112 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58116 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58120 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58123 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58127 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58130 "isa_tms320.tcc"
)
{
#line 999 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *dst2_name = REG_NAME[dst2];
		const char *src2_name = REG_NAME[src2];
		string disasm_src1_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, s1_mod, s1_ar))
		return false;

		os << "LDF " << ", " << src2_name << ", " << dst2_name
		<< " || " << "LDF " << disasm_src1_indir << ", " << dst2_name;
		return true;
	}
#line 58147 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58153 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58156 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58160 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58163 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58168 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58172 "isa_tms320.tcc"
> *DecodeOpLDF_LDF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58178 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58182 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDF || LDF (load floating-point value)
**********************************************************/
/**********************************************************
* LDI || LDI (load integer)
* op LDI_LDI(0b11[2]:0b00011[5]:dst1[3]:dst2[3]:0b000[3]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 58195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58205 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58209 "isa_tms320.tcc"
OpLDI_LDI<
#line 45 "isa/tms320.isa"
CONFIG
#line 58213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58217 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58221 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58224 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58228 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58231 "isa_tms320.tcc"
)
{
#line 1024 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *dst2_name = REG_NAME[dst2];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, s1_mod, s1_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, s2_mod, s2_ar))
		return false;

		os << "LDI " << disasm_src2_indir << ", " << dst2_name
		<< " || " << "LDI " << disasm_src1_indir << ", " << dst1_name;
		return true;
	}
#line 58249 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58255 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58258 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58262 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58265 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58270 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58274 "isa_tms320.tcc"
> *DecodeOpLDI_LDI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_LDI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58280 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58284 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 58291 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58294 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58298 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58301 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58305 "isa_tms320.tcc"
OpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 58309 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58313 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58317 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58320 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58324 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58327 "isa_tms320.tcc"
)
{
#line 1039 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *dst2_name = REG_NAME[dst2];
		const char *src2_name = REG_NAME[src2];
		string disasm_src1_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, s1_mod, s1_ar))
		return false;

		os << "LDI " << ", " << src2_name << ", " << dst2_name
		<< " || " << "LDI " << disasm_src1_indir << ", " << dst2_name;
		return true;
	}
#line 58344 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58350 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58353 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58357 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58360 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58365 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58369 "isa_tms320.tcc"
> *DecodeOpLDI_LDI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58375 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58379 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDI || LDI (load integer)
**********************************************************/
/**********************************************************
* MPYF3 || ADDF3 (multiply and add floating-point value)
* op MPYF3_ADDF3(0b10[2]:0b0000[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 58392 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58395 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58399 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58402 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58406 "isa_tms320.tcc"
OpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 58410 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58414 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58418 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58421 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58425 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58428 "isa_tms320.tcc"
)
{
#line 1064 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_src3_indir;
		string disasm_src4_indir;
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!cpu.DisasmIndir(disasm_src3_indir, s3_mod, s3_ar) ||
		!cpu.DisasmIndir(disasm_src4_indir, s4_mod, s4_ar))
		return false;

		switch(p)
		{
		case 0:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = disasm_src4_indir.c_str();
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = disasm_src4_indir.c_str();
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = disasm_src3_indir.c_str();
			srcC_name = disasm_src4_indir.c_str();
			break;
		case 4:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = disasm_src4_indir.c_str();
			break;
		}

		os << "MPYF3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "ADDF3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 58480 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58486 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58489 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58493 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58496 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58501 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58505 "isa_tms320.tcc"
> *DecodeOpMPYF3_ADDF3(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58511 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58515 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 58522 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58532 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58536 "isa_tms320.tcc"
OpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 58540 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58544 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58548 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58551 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58555 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58558 "isa_tms320.tcc"
)
{
#line 1113 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		const char *src4_name = REG_NAME[src4];
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!src3_name ||
		!src4_name)
		return false;

		switch(p)
		{
		case 0:
			srcA_name = src3_name;
			srcB_name = src4_name;
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src4_name;
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = src3_name;
			srcC_name = src4_name;
			break;
		case 4:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = src4_name;
			break;
		}

		os << "MPYF3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "ADDF3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 58610 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58619 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58626 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58631 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58635 "isa_tms320.tcc"
> *DecodeOpMPYF3_ADDF3_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58641 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58645 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF3 || ADDF3 (multiply and add floating-point value)
**********************************************************/
/**********************************************************
* MPYF3 || SUBF3 (multiply and subtract floating-point value)
* op MPYF3_SUBF3(0b10[2]:0b0001[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 58658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58661 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58665 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58668 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58672 "isa_tms320.tcc"
OpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 58676 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58680 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58684 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58687 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58691 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58694 "isa_tms320.tcc"
)
{
#line 1173 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_src3_indir;
		string disasm_src4_indir;
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!cpu.DisasmIndir(disasm_src3_indir, s3_mod, s3_ar) ||
		!cpu.DisasmIndir(disasm_src4_indir, s4_mod, s4_ar))
		return false;

		switch(p)
		{
		case 0:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = disasm_src4_indir.c_str();
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = disasm_src4_indir.c_str();
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = disasm_src3_indir.c_str();
			srcC_name = disasm_src4_indir.c_str();
			break;
		case 4:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = disasm_src4_indir.c_str();
			break;
		}

		os << "MPYF3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "SUBF3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 58746 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58752 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58755 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58759 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58762 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58767 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58771 "isa_tms320.tcc"
> *DecodeOpMPYF3_SUBF3(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58777 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58781 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 58788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58798 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58802 "isa_tms320.tcc"
OpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 58806 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58810 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58814 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58817 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58821 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58824 "isa_tms320.tcc"
)
{
#line 1222 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		const char *src4_name = REG_NAME[src4];
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!src3_name ||
		!src4_name)
		return false;

		switch(p)
		{
		case 0:
			srcA_name = src3_name;
			srcB_name = src4_name;
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src4_name;
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = src3_name;
			srcC_name = src4_name;
			break;
		case 4:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = src4_name;
			break;
		}

		os << "MPYF3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "SUBF3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 58876 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58882 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58885 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58892 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58897 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58901 "isa_tms320.tcc"
> *DecodeOpMPYF3_SUBF3_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58907 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58911 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF3 || SUBF3 (multiply and subtract floating-point value)
**********************************************************/
/**********************************************************
* MPYI3 || ADDI3 (multiply and add integer)
* op MPYI3_ADDI3(0b10[2]:0b0010[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 58924 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58927 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58931 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58934 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58938 "isa_tms320.tcc"
OpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 58942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58946 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58950 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58953 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58957 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58960 "isa_tms320.tcc"
)
{
#line 1282 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_src3_indir;
		string disasm_src4_indir;
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!cpu.DisasmIndir(disasm_src3_indir, s3_mod, s3_ar) ||
		!cpu.DisasmIndir(disasm_src4_indir, s4_mod, s4_ar))
		return false;

		switch(p)
		{
		case 0:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = disasm_src4_indir.c_str();
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = disasm_src4_indir.c_str();
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = disasm_src3_indir.c_str();
			srcC_name = disasm_src4_indir.c_str();
			break;
		case 4:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = disasm_src4_indir.c_str();
			break;
		}

		os << "MPYI3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "ADDI3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 59012 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59018 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59021 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59025 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59028 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59033 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59037 "isa_tms320.tcc"
> *DecodeOpMPYI3_ADDI3(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59043 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59047 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59054 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59057 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59061 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59064 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59068 "isa_tms320.tcc"
OpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 59072 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59076 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59080 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59083 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59087 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59090 "isa_tms320.tcc"
)
{
#line 1331 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		const char *src4_name = REG_NAME[src4];
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!src3_name ||
		!src4_name)
		return false;

		switch(p)
		{
		case 0:
			srcA_name = src3_name;
			srcB_name = src4_name;
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src4_name;
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = src3_name;
			srcC_name = src4_name;
			break;
		case 4:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = src4_name;
			break;
		}

		os << "MPYI3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "ADDI3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 59142 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59148 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59151 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59155 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59158 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59163 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59167 "isa_tms320.tcc"
> *DecodeOpMPYI3_ADDI3_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59173 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59177 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYI3 || ADDI3 (multiply and add integer)
**********************************************************/
/**********************************************************
* MPYI3 || SUBI3 (multiply and subtract integer)
* op MPYI3_SUBI3(0b10[2]:0b0011[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 59190 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59193 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59197 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59200 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59204 "isa_tms320.tcc"
OpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 59208 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59212 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59216 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59219 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59223 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59226 "isa_tms320.tcc"
)
{
#line 1391 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_src3_indir;
		string disasm_src4_indir;
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!cpu.DisasmIndir(disasm_src3_indir, s3_mod, s3_ar) ||
		!cpu.DisasmIndir(disasm_src4_indir, s4_mod, s4_ar))
		return false;

		switch(p)
		{
		case 0:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = disasm_src4_indir.c_str();
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = disasm_src4_indir.c_str();
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = disasm_src3_indir.c_str();
			srcC_name = disasm_src4_indir.c_str();
			break;
		case 4:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = disasm_src4_indir.c_str();
			break;
		}

		os << "MPYI3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "SUBI3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 59278 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59284 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59287 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59291 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59294 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59299 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59303 "isa_tms320.tcc"
> *DecodeOpMPYI3_SUBI3(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59309 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59313 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59320 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59323 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59327 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59330 "isa_tms320.tcc"
>
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59334 "isa_tms320.tcc"
OpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 59338 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59342 "isa_tms320.tcc"
>::disasm(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59346 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59349 "isa_tms320.tcc"
,
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59353 "isa_tms320.tcc"
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59356 "isa_tms320.tcc"
)
{
#line 1440 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		const char *src4_name = REG_NAME[src4];
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!src3_name ||
		!src4_name)
		return false;

		switch(p)
		{
		case 0:
			srcA_name = src3_name;
			srcB_name = src4_name;
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src4_name;
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = src3_name;
			srcC_name = src4_name;
			break;
		case 4:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = src4_name;
			break;
		}

		os << "MPYI3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "SUBI3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 59408 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59414 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59417 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59421 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59424 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59429 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59433 "isa_tms320.tcc"
> *DecodeOpMPYI3_SUBI3_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59439 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59443 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59450 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59453 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59457 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59460 "isa_tms320.tcc"
>
OpLDE_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 59465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59469 "isa_tms320.tcc"
>::OpLDE_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59473 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59477 "isa_tms320.tcc"
>(code, addr, "LDE_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59487 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59490 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59494 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59497 "isa_tms320.tcc"
>
OpLDE_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59506 "isa_tms320.tcc"
>::OpLDE_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59510 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59514 "isa_tms320.tcc"
>(code, addr, "LDE_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59524 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59531 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59534 "isa_tms320.tcc"
>
OpLDE_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59539 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59543 "isa_tms320.tcc"
>::OpLDE_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59547 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59551 "isa_tms320.tcc"
>(code, addr, "LDE_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59563 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59566 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59570 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59573 "isa_tms320.tcc"
>
OpLDE_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 59578 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59582 "isa_tms320.tcc"
>::OpLDE_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59586 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59590 "isa_tms320.tcc"
>(code, addr, "LDE_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59600 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59603 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59607 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59610 "isa_tms320.tcc"
>
OpLDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 59615 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59619 "isa_tms320.tcc"
>::OpLDF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59627 "isa_tms320.tcc"
>(code, addr, "LDF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59640 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59644 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59647 "isa_tms320.tcc"
>
OpLDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59652 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59656 "isa_tms320.tcc"
>::OpLDF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59660 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59664 "isa_tms320.tcc"
>(code, addr, "LDF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59677 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59684 "isa_tms320.tcc"
>
OpLDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59689 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59693 "isa_tms320.tcc"
>::OpLDF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59697 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59701 "isa_tms320.tcc"
>(code, addr, "LDF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59713 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59716 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59720 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59723 "isa_tms320.tcc"
>
OpLDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 59728 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59732 "isa_tms320.tcc"
>::OpLDF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59736 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59740 "isa_tms320.tcc"
>(code, addr, "LDF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59750 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59753 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59757 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59760 "isa_tms320.tcc"
>
OpLDFcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 59765 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59769 "isa_tms320.tcc"
>::OpLDFcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59773 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59777 "isa_tms320.tcc"
>(code, addr, "LDFcond_reg")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59798 "isa_tms320.tcc"
>
OpLDFcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59807 "isa_tms320.tcc"
>::OpLDFcond_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59811 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59815 "isa_tms320.tcc"
>(code, addr, "LDFcond_dir")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59826 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59829 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59833 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59836 "isa_tms320.tcc"
>
OpLDFcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59841 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59845 "isa_tms320.tcc"
>::OpLDFcond_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59849 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59853 "isa_tms320.tcc"
>(code, addr, "LDFcond_indir")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59866 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59869 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59873 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59876 "isa_tms320.tcc"
>
OpLDFcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 59881 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59885 "isa_tms320.tcc"
>::OpLDFcond_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59889 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59893 "isa_tms320.tcc"
>(code, addr, "LDFcond_imm")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59904 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59907 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59911 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59914 "isa_tms320.tcc"
>
OpLDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 59919 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59923 "isa_tms320.tcc"
>::OpLDI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59927 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59931 "isa_tms320.tcc"
>(code, addr, "LDI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59941 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59944 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59948 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59951 "isa_tms320.tcc"
>
OpLDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59956 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59960 "isa_tms320.tcc"
>::OpLDI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59968 "isa_tms320.tcc"
>(code, addr, "LDI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59978 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59981 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59985 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59988 "isa_tms320.tcc"
>
OpLDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59993 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59997 "isa_tms320.tcc"
>::OpLDI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60001 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60005 "isa_tms320.tcc"
>(code, addr, "LDI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60017 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60020 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60024 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60027 "isa_tms320.tcc"
>
OpLDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 60032 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60036 "isa_tms320.tcc"
>::OpLDI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60040 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60044 "isa_tms320.tcc"
>(code, addr, "LDI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60054 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60057 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60061 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60064 "isa_tms320.tcc"
>
OpLDIcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 60069 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60073 "isa_tms320.tcc"
>::OpLDIcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60077 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60081 "isa_tms320.tcc"
>(code, addr, "LDIcond_reg")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60092 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60095 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60099 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60102 "isa_tms320.tcc"
>
OpLDIcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60107 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60111 "isa_tms320.tcc"
>::OpLDIcond_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60115 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60119 "isa_tms320.tcc"
>(code, addr, "LDIcond_dir")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60130 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60140 "isa_tms320.tcc"
>
OpLDIcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60145 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60149 "isa_tms320.tcc"
>::OpLDIcond_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60157 "isa_tms320.tcc"
>(code, addr, "LDIcond_indir")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60170 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60173 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60177 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60180 "isa_tms320.tcc"
>
OpLDIcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 60185 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60189 "isa_tms320.tcc"
>::OpLDIcond_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60193 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60197 "isa_tms320.tcc"
>(code, addr, "LDIcond_imm")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60208 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60211 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60215 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60218 "isa_tms320.tcc"
>
OpLDM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 60223 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60227 "isa_tms320.tcc"
>::OpLDM_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60231 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60235 "isa_tms320.tcc"
>(code, addr, "LDM_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60245 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60248 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60252 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60255 "isa_tms320.tcc"
>
OpLDM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60260 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60264 "isa_tms320.tcc"
>::OpLDM_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60268 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60272 "isa_tms320.tcc"
>(code, addr, "LDM_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60282 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60285 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60289 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60292 "isa_tms320.tcc"
>
OpLDM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60297 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60301 "isa_tms320.tcc"
>::OpLDM_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60305 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60309 "isa_tms320.tcc"
>(code, addr, "LDM_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60321 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60324 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60328 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60331 "isa_tms320.tcc"
>
OpLDM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 60336 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60340 "isa_tms320.tcc"
>::OpLDM_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60344 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60348 "isa_tms320.tcc"
>(code, addr, "LDM_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xfff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60358 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60361 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60365 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60368 "isa_tms320.tcc"
>
OpLDP<
#line 45 "isa/tms320.isa"
CONFIG
#line 60373 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60377 "isa_tms320.tcc"
>::OpLDP(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60381 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60385 "isa_tms320.tcc"
>(code, addr, "LDP")
{
	src = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60394 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60397 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60401 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60404 "isa_tms320.tcc"
>
OpPOP<
#line 45 "isa/tms320.isa"
CONFIG
#line 60409 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60413 "isa_tms320.tcc"
>::OpPOP(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60417 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60421 "isa_tms320.tcc"
>(code, addr, "POP")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60430 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60433 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60437 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60440 "isa_tms320.tcc"
>
OpPOPF<
#line 45 "isa/tms320.isa"
CONFIG
#line 60445 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60449 "isa_tms320.tcc"
>::OpPOPF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60453 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60457 "isa_tms320.tcc"
>(code, addr, "POPF")
{
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60466 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60469 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60473 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60476 "isa_tms320.tcc"
>
OpPUSH<
#line 45 "isa/tms320.isa"
CONFIG
#line 60481 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60485 "isa_tms320.tcc"
>::OpPUSH(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60489 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60493 "isa_tms320.tcc"
>(code, addr, "PUSH")
{
	src = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60502 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60505 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60509 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60512 "isa_tms320.tcc"
>
OpPUSHF<
#line 45 "isa/tms320.isa"
CONFIG
#line 60517 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60521 "isa_tms320.tcc"
>::OpPUSHF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60529 "isa_tms320.tcc"
>(code, addr, "PUSHF")
{
	src = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60538 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60541 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60545 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60548 "isa_tms320.tcc"
>
OpSTF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60553 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60557 "isa_tms320.tcc"
>::OpSTF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60561 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60565 "isa_tms320.tcc"
>(code, addr, "STF_dir")
{
	src = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60575 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60578 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60582 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60585 "isa_tms320.tcc"
>
OpSTF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60590 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60594 "isa_tms320.tcc"
>::OpSTF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60598 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60602 "isa_tms320.tcc"
>(code, addr, "STF_indir")
{
	src = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60614 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60617 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60621 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60624 "isa_tms320.tcc"
>
OpSTI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60629 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60633 "isa_tms320.tcc"
>::OpSTI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60637 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60641 "isa_tms320.tcc"
>(code, addr, "STI_dir")
{
	src = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60654 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60661 "isa_tms320.tcc"
>
OpSTI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60666 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60670 "isa_tms320.tcc"
>::OpSTI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60674 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60678 "isa_tms320.tcc"
>(code, addr, "STI_indir")
{
	src = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60690 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60693 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60697 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60700 "isa_tms320.tcc"
>
OpABSF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 60705 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60709 "isa_tms320.tcc"
>::OpABSF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60713 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60717 "isa_tms320.tcc"
>(code, addr, "ABSF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60727 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60734 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60737 "isa_tms320.tcc"
>
OpABSF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60742 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60746 "isa_tms320.tcc"
>::OpABSF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60750 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60754 "isa_tms320.tcc"
>(code, addr, "ABSF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60764 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60767 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60771 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60774 "isa_tms320.tcc"
>
OpABSF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60779 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60783 "isa_tms320.tcc"
>::OpABSF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60787 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60791 "isa_tms320.tcc"
>(code, addr, "ABSF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60803 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60806 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60810 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60813 "isa_tms320.tcc"
>
OpABSF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 60818 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60822 "isa_tms320.tcc"
>::OpABSF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60826 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60830 "isa_tms320.tcc"
>(code, addr, "ABSF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60850 "isa_tms320.tcc"
>
OpABSI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 60855 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60859 "isa_tms320.tcc"
>::OpABSI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60867 "isa_tms320.tcc"
>(code, addr, "ABSI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60877 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60880 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60884 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60887 "isa_tms320.tcc"
>
OpABSI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60896 "isa_tms320.tcc"
>::OpABSI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60904 "isa_tms320.tcc"
>(code, addr, "ABSI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60914 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60917 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60921 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60924 "isa_tms320.tcc"
>
OpABSI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60929 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60933 "isa_tms320.tcc"
>::OpABSI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60937 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60941 "isa_tms320.tcc"
>(code, addr, "ABSI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60953 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60956 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60960 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60963 "isa_tms320.tcc"
>
OpABSI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 60968 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60972 "isa_tms320.tcc"
>::OpABSI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60976 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60980 "isa_tms320.tcc"
>(code, addr, "ABSI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60990 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60993 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60997 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61000 "isa_tms320.tcc"
>
OpADDC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 61005 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61009 "isa_tms320.tcc"
>::OpADDC_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61013 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61017 "isa_tms320.tcc"
>(code, addr, "ADDC_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61037 "isa_tms320.tcc"
>
OpADDC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61046 "isa_tms320.tcc"
>::OpADDC_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61050 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61054 "isa_tms320.tcc"
>(code, addr, "ADDC_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61064 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61067 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61071 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61074 "isa_tms320.tcc"
>
OpADDC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61079 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61083 "isa_tms320.tcc"
>::OpADDC_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61087 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61091 "isa_tms320.tcc"
>(code, addr, "ADDC_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61106 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61110 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61113 "isa_tms320.tcc"
>
OpADDC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 61118 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61122 "isa_tms320.tcc"
>::OpADDC_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61126 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61130 "isa_tms320.tcc"
>(code, addr, "ADDC_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61140 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61143 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61150 "isa_tms320.tcc"
>
OpADDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 61155 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61159 "isa_tms320.tcc"
>::OpADDF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61163 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61167 "isa_tms320.tcc"
>(code, addr, "ADDF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61177 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61180 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61184 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61187 "isa_tms320.tcc"
>
OpADDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61196 "isa_tms320.tcc"
>::OpADDF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61200 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61204 "isa_tms320.tcc"
>(code, addr, "ADDF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61214 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61217 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61221 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61224 "isa_tms320.tcc"
>
OpADDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61229 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61233 "isa_tms320.tcc"
>::OpADDF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61241 "isa_tms320.tcc"
>(code, addr, "ADDF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61253 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61256 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61260 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61263 "isa_tms320.tcc"
>
OpADDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 61268 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61272 "isa_tms320.tcc"
>::OpADDF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61276 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61280 "isa_tms320.tcc"
>(code, addr, "ADDF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61290 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61293 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61297 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61300 "isa_tms320.tcc"
>
OpADDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 61305 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61309 "isa_tms320.tcc"
>::OpADDI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61313 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61317 "isa_tms320.tcc"
>(code, addr, "ADDI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61327 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61330 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61334 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61337 "isa_tms320.tcc"
>
OpADDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61342 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61346 "isa_tms320.tcc"
>::OpADDI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61350 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61354 "isa_tms320.tcc"
>(code, addr, "ADDI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61364 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61367 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61371 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61374 "isa_tms320.tcc"
>
OpADDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61383 "isa_tms320.tcc"
>::OpADDI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61391 "isa_tms320.tcc"
>(code, addr, "ADDI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61403 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61406 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61410 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61413 "isa_tms320.tcc"
>
OpADDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 61418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61422 "isa_tms320.tcc"
>::OpADDI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61426 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61430 "isa_tms320.tcc"
>(code, addr, "ADDI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61450 "isa_tms320.tcc"
>
OpAND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 61455 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61459 "isa_tms320.tcc"
>::OpAND_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61463 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61467 "isa_tms320.tcc"
>(code, addr, "AND_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61477 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61480 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61487 "isa_tms320.tcc"
>
OpAND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61492 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61496 "isa_tms320.tcc"
>::OpAND_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61500 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61504 "isa_tms320.tcc"
>(code, addr, "AND_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61514 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61517 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61521 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61524 "isa_tms320.tcc"
>
OpAND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61529 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61533 "isa_tms320.tcc"
>::OpAND_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61537 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61541 "isa_tms320.tcc"
>(code, addr, "AND_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61553 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61556 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61560 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61563 "isa_tms320.tcc"
>
OpAND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 61568 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61572 "isa_tms320.tcc"
>::OpAND_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61580 "isa_tms320.tcc"
>(code, addr, "AND_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61590 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61593 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61597 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61600 "isa_tms320.tcc"
>
OpANDN_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 61605 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61609 "isa_tms320.tcc"
>::OpANDN_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61613 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61617 "isa_tms320.tcc"
>(code, addr, "ANDN_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61627 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61630 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61634 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61637 "isa_tms320.tcc"
>
OpANDN_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61642 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61646 "isa_tms320.tcc"
>::OpANDN_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61650 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61654 "isa_tms320.tcc"
>(code, addr, "ANDN_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61664 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61667 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61671 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61674 "isa_tms320.tcc"
>
OpANDN_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61679 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61683 "isa_tms320.tcc"
>::OpANDN_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61687 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61691 "isa_tms320.tcc"
>(code, addr, "ANDN_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61703 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61706 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61710 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61713 "isa_tms320.tcc"
>
OpANDN_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 61718 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61722 "isa_tms320.tcc"
>::OpANDN_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61726 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61730 "isa_tms320.tcc"
>(code, addr, "ANDN_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61740 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61743 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61747 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61750 "isa_tms320.tcc"
>
OpASH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 61755 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61759 "isa_tms320.tcc"
>::OpASH_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61763 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61767 "isa_tms320.tcc"
>(code, addr, "ASH_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61777 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61780 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61784 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61787 "isa_tms320.tcc"
>
OpASH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61796 "isa_tms320.tcc"
>::OpASH_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61800 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61804 "isa_tms320.tcc"
>(code, addr, "ASH_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61814 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61817 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61821 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61824 "isa_tms320.tcc"
>
OpASH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61829 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61833 "isa_tms320.tcc"
>::OpASH_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61837 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61841 "isa_tms320.tcc"
>(code, addr, "ASH_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61853 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61856 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61860 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61863 "isa_tms320.tcc"
>
OpASH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 61868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61872 "isa_tms320.tcc"
>::OpASH_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61880 "isa_tms320.tcc"
>(code, addr, "ASH_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61890 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61893 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61897 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61900 "isa_tms320.tcc"
>
OpCMPF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 61905 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61909 "isa_tms320.tcc"
>::OpCMPF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61913 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61917 "isa_tms320.tcc"
>(code, addr, "CMPF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61927 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61934 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61937 "isa_tms320.tcc"
>
OpCMPF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61946 "isa_tms320.tcc"
>::OpCMPF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61950 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61954 "isa_tms320.tcc"
>(code, addr, "CMPF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61964 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61967 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61971 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61974 "isa_tms320.tcc"
>
OpCMPF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61979 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61983 "isa_tms320.tcc"
>::OpCMPF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61987 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61991 "isa_tms320.tcc"
>(code, addr, "CMPF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62003 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62006 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62010 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62013 "isa_tms320.tcc"
>
OpCMPF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 62018 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62022 "isa_tms320.tcc"
>::OpCMPF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62026 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62030 "isa_tms320.tcc"
>(code, addr, "CMPF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62040 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62043 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62047 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62050 "isa_tms320.tcc"
>
OpCMPI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 62055 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62059 "isa_tms320.tcc"
>::OpCMPI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62063 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62067 "isa_tms320.tcc"
>(code, addr, "CMPI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62077 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62080 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62084 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62087 "isa_tms320.tcc"
>
OpCMPI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62092 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62096 "isa_tms320.tcc"
>::OpCMPI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62100 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62104 "isa_tms320.tcc"
>(code, addr, "CMPI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62114 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62117 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62121 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62124 "isa_tms320.tcc"
>
OpCMPI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62129 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62133 "isa_tms320.tcc"
>::OpCMPI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62137 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62141 "isa_tms320.tcc"
>(code, addr, "CMPI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62153 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62156 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62160 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62163 "isa_tms320.tcc"
>
OpCMPI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 62168 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62172 "isa_tms320.tcc"
>::OpCMPI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62176 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62180 "isa_tms320.tcc"
>(code, addr, "CMPI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62190 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62193 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62197 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62200 "isa_tms320.tcc"
>
OpFIX_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 62205 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62209 "isa_tms320.tcc"
>::OpFIX_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62217 "isa_tms320.tcc"
>(code, addr, "FIX_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62227 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62230 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62237 "isa_tms320.tcc"
>
OpFIX_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62242 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62246 "isa_tms320.tcc"
>::OpFIX_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62250 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62254 "isa_tms320.tcc"
>(code, addr, "FIX_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62264 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62271 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62274 "isa_tms320.tcc"
>
OpFIX_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62283 "isa_tms320.tcc"
>::OpFIX_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62287 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62291 "isa_tms320.tcc"
>(code, addr, "FIX_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62303 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62306 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62310 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62313 "isa_tms320.tcc"
>
OpFIX_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 62318 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62322 "isa_tms320.tcc"
>::OpFIX_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62326 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62330 "isa_tms320.tcc"
>(code, addr, "FIX_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62340 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62343 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62347 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62350 "isa_tms320.tcc"
>
OpFLOAT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 62355 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62359 "isa_tms320.tcc"
>::OpFLOAT_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62363 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62367 "isa_tms320.tcc"
>(code, addr, "FLOAT_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62377 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62384 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62387 "isa_tms320.tcc"
>
OpFLOAT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62392 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62396 "isa_tms320.tcc"
>::OpFLOAT_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62400 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62404 "isa_tms320.tcc"
>(code, addr, "FLOAT_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62414 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62417 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62421 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62424 "isa_tms320.tcc"
>
OpFLOAT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62429 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62433 "isa_tms320.tcc"
>::OpFLOAT_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62437 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62441 "isa_tms320.tcc"
>(code, addr, "FLOAT_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62453 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62456 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62460 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62463 "isa_tms320.tcc"
>
OpFLOAT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 62468 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62472 "isa_tms320.tcc"
>::OpFLOAT_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62476 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62480 "isa_tms320.tcc"
>(code, addr, "FLOAT_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62490 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62493 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62497 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62500 "isa_tms320.tcc"
>
OpLSH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 62505 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62509 "isa_tms320.tcc"
>::OpLSH_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62513 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62517 "isa_tms320.tcc"
>(code, addr, "LSH_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62530 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62534 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62537 "isa_tms320.tcc"
>
OpLSH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62542 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62546 "isa_tms320.tcc"
>::OpLSH_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62550 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62554 "isa_tms320.tcc"
>(code, addr, "LSH_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62564 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62567 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62571 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62574 "isa_tms320.tcc"
>
OpLSH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62579 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62583 "isa_tms320.tcc"
>::OpLSH_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62587 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62591 "isa_tms320.tcc"
>(code, addr, "LSH_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62603 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62606 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62610 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62613 "isa_tms320.tcc"
>
OpLSH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 62618 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62622 "isa_tms320.tcc"
>::OpLSH_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62626 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62630 "isa_tms320.tcc"
>(code, addr, "LSH_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62647 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62650 "isa_tms320.tcc"
>
OpMPYF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 62655 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62659 "isa_tms320.tcc"
>::OpMPYF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62667 "isa_tms320.tcc"
>(code, addr, "MPYF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62677 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62680 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62684 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62687 "isa_tms320.tcc"
>
OpMPYF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62692 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62696 "isa_tms320.tcc"
>::OpMPYF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62704 "isa_tms320.tcc"
>(code, addr, "MPYF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62714 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62717 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62721 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62724 "isa_tms320.tcc"
>
OpMPYF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62729 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62733 "isa_tms320.tcc"
>::OpMPYF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62737 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62741 "isa_tms320.tcc"
>(code, addr, "MPYF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62753 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62756 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62760 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62763 "isa_tms320.tcc"
>
OpMPYF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 62768 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62772 "isa_tms320.tcc"
>::OpMPYF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62780 "isa_tms320.tcc"
>(code, addr, "MPYF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62790 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62793 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62797 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62800 "isa_tms320.tcc"
>
OpMPYI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 62805 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62809 "isa_tms320.tcc"
>::OpMPYI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62813 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62817 "isa_tms320.tcc"
>(code, addr, "MPYI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62827 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62830 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62834 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62837 "isa_tms320.tcc"
>
OpMPYI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62842 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62846 "isa_tms320.tcc"
>::OpMPYI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62854 "isa_tms320.tcc"
>(code, addr, "MPYI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62864 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62867 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62871 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62874 "isa_tms320.tcc"
>
OpMPYI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62879 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62883 "isa_tms320.tcc"
>::OpMPYI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62887 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62891 "isa_tms320.tcc"
>(code, addr, "MPYI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62903 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62906 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62910 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62913 "isa_tms320.tcc"
>
OpMPYI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 62918 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62922 "isa_tms320.tcc"
>::OpMPYI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62926 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62930 "isa_tms320.tcc"
>(code, addr, "MPYI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62940 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62947 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62950 "isa_tms320.tcc"
>
OpNEGB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 62955 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62959 "isa_tms320.tcc"
>::OpNEGB_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62963 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62967 "isa_tms320.tcc"
>(code, addr, "NEGB_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62984 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62987 "isa_tms320.tcc"
>
OpNEGB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62992 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62996 "isa_tms320.tcc"
>::OpNEGB_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63000 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63004 "isa_tms320.tcc"
>(code, addr, "NEGB_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63014 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63017 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63021 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63024 "isa_tms320.tcc"
>
OpNEGB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63029 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63033 "isa_tms320.tcc"
>::OpNEGB_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63037 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63041 "isa_tms320.tcc"
>(code, addr, "NEGB_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63053 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63060 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63063 "isa_tms320.tcc"
>
OpNEGB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 63068 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63072 "isa_tms320.tcc"
>::OpNEGB_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63076 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63080 "isa_tms320.tcc"
>(code, addr, "NEGB_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63090 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63093 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63097 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63100 "isa_tms320.tcc"
>
OpNEGF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 63105 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63109 "isa_tms320.tcc"
>::OpNEGF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63113 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63117 "isa_tms320.tcc"
>(code, addr, "NEGF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63127 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63130 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63134 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63137 "isa_tms320.tcc"
>
OpNEGF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63142 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63146 "isa_tms320.tcc"
>::OpNEGF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63150 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63154 "isa_tms320.tcc"
>(code, addr, "NEGF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63164 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63167 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63171 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63174 "isa_tms320.tcc"
>
OpNEGF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63179 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63183 "isa_tms320.tcc"
>::OpNEGF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63187 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63191 "isa_tms320.tcc"
>(code, addr, "NEGF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63203 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63206 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63210 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63213 "isa_tms320.tcc"
>
OpNEGF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 63218 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63222 "isa_tms320.tcc"
>::OpNEGF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63226 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63230 "isa_tms320.tcc"
>(code, addr, "NEGF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63240 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63247 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63250 "isa_tms320.tcc"
>
OpNEGI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 63255 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63259 "isa_tms320.tcc"
>::OpNEGI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63263 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63267 "isa_tms320.tcc"
>(code, addr, "NEGI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63277 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63280 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63284 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63287 "isa_tms320.tcc"
>
OpNEGI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63292 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63296 "isa_tms320.tcc"
>::OpNEGI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63300 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63304 "isa_tms320.tcc"
>(code, addr, "NEGI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63314 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63317 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63321 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63324 "isa_tms320.tcc"
>
OpNEGI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63329 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63333 "isa_tms320.tcc"
>::OpNEGI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63337 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63341 "isa_tms320.tcc"
>(code, addr, "NEGI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63353 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63356 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63360 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63363 "isa_tms320.tcc"
>
OpNEGI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 63368 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63372 "isa_tms320.tcc"
>::OpNEGI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63380 "isa_tms320.tcc"
>(code, addr, "NEGI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63390 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63393 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63397 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63400 "isa_tms320.tcc"
>
OpNORM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 63405 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63409 "isa_tms320.tcc"
>::OpNORM_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63413 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63417 "isa_tms320.tcc"
>(code, addr, "NORM_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63427 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63434 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63437 "isa_tms320.tcc"
>
OpNORM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63446 "isa_tms320.tcc"
>::OpNORM_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63450 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63454 "isa_tms320.tcc"
>(code, addr, "NORM_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63464 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63467 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63471 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63474 "isa_tms320.tcc"
>
OpNORM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63479 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63483 "isa_tms320.tcc"
>::OpNORM_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63491 "isa_tms320.tcc"
>(code, addr, "NORM_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63503 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63506 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63510 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63513 "isa_tms320.tcc"
>
OpNORM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 63518 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63522 "isa_tms320.tcc"
>::OpNORM_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63526 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63530 "isa_tms320.tcc"
>(code, addr, "NORM_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63543 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63547 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63550 "isa_tms320.tcc"
>
OpNOT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 63555 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63559 "isa_tms320.tcc"
>::OpNOT_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63563 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63567 "isa_tms320.tcc"
>(code, addr, "NOT_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63577 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63580 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63584 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63587 "isa_tms320.tcc"
>
OpNOT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63596 "isa_tms320.tcc"
>::OpNOT_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63600 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63604 "isa_tms320.tcc"
>(code, addr, "NOT_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63614 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63617 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63621 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63624 "isa_tms320.tcc"
>
OpNOT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63629 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63633 "isa_tms320.tcc"
>::OpNOT_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63637 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63641 "isa_tms320.tcc"
>(code, addr, "NOT_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63653 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63656 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63660 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63663 "isa_tms320.tcc"
>
OpNOT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 63668 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63672 "isa_tms320.tcc"
>::OpNOT_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63676 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63680 "isa_tms320.tcc"
>(code, addr, "NOT_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63690 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63693 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63697 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63700 "isa_tms320.tcc"
>
OpOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 63705 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63709 "isa_tms320.tcc"
>::OpOR_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63713 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63717 "isa_tms320.tcc"
>(code, addr, "OR_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63727 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63734 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63737 "isa_tms320.tcc"
>
OpOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63742 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63746 "isa_tms320.tcc"
>::OpOR_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63750 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63754 "isa_tms320.tcc"
>(code, addr, "OR_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63764 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63767 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63771 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63774 "isa_tms320.tcc"
>
OpOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63779 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63783 "isa_tms320.tcc"
>::OpOR_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63787 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63791 "isa_tms320.tcc"
>(code, addr, "OR_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63803 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63806 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63810 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63813 "isa_tms320.tcc"
>
OpOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 63818 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63822 "isa_tms320.tcc"
>::OpOR_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63826 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63830 "isa_tms320.tcc"
>(code, addr, "OR_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63850 "isa_tms320.tcc"
>
OpRND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 63855 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63859 "isa_tms320.tcc"
>::OpRND_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63867 "isa_tms320.tcc"
>(code, addr, "RND_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63877 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63880 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63884 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63887 "isa_tms320.tcc"
>
OpRND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63896 "isa_tms320.tcc"
>::OpRND_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63904 "isa_tms320.tcc"
>(code, addr, "RND_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63914 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63917 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63921 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63924 "isa_tms320.tcc"
>
OpRND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63929 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63933 "isa_tms320.tcc"
>::OpRND_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63937 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63941 "isa_tms320.tcc"
>(code, addr, "RND_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63953 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63956 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63960 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63963 "isa_tms320.tcc"
>
OpRND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 63968 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63972 "isa_tms320.tcc"
>::OpRND_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63976 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63980 "isa_tms320.tcc"
>(code, addr, "RND_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63990 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63993 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63997 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64000 "isa_tms320.tcc"
>
OpROL<
#line 45 "isa/tms320.isa"
CONFIG
#line 64005 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64009 "isa_tms320.tcc"
>::OpROL(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64013 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64017 "isa_tms320.tcc"
>(code, addr, "ROL")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64026 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64029 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64033 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64036 "isa_tms320.tcc"
>
OpROLC<
#line 45 "isa/tms320.isa"
CONFIG
#line 64041 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64045 "isa_tms320.tcc"
>::OpROLC(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64049 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64053 "isa_tms320.tcc"
>(code, addr, "ROLC")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64062 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64065 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64069 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64072 "isa_tms320.tcc"
>
OpROR<
#line 45 "isa/tms320.isa"
CONFIG
#line 64077 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64081 "isa_tms320.tcc"
>::OpROR(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64085 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64089 "isa_tms320.tcc"
>(code, addr, "ROR")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64098 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64101 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64105 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64108 "isa_tms320.tcc"
>
OpRORC<
#line 45 "isa/tms320.isa"
CONFIG
#line 64113 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64117 "isa_tms320.tcc"
>::OpRORC(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64121 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64125 "isa_tms320.tcc"
>(code, addr, "RORC")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64134 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64137 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64141 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64144 "isa_tms320.tcc"
>
OpSUBB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 64149 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64153 "isa_tms320.tcc"
>::OpSUBB_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64157 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64161 "isa_tms320.tcc"
>(code, addr, "SUBB_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64171 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64174 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64178 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64181 "isa_tms320.tcc"
>
OpSUBB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64186 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64190 "isa_tms320.tcc"
>::OpSUBB_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64194 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64198 "isa_tms320.tcc"
>(code, addr, "SUBB_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64208 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64211 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64215 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64218 "isa_tms320.tcc"
>
OpSUBB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64223 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64227 "isa_tms320.tcc"
>::OpSUBB_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64231 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64235 "isa_tms320.tcc"
>(code, addr, "SUBB_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64247 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64250 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64254 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64257 "isa_tms320.tcc"
>
OpSUBB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 64262 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64266 "isa_tms320.tcc"
>::OpSUBB_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64270 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64274 "isa_tms320.tcc"
>(code, addr, "SUBB_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64284 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64287 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64291 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64294 "isa_tms320.tcc"
>
OpSUBC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 64299 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64303 "isa_tms320.tcc"
>::OpSUBC_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64307 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64311 "isa_tms320.tcc"
>(code, addr, "SUBC_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64321 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64324 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64328 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64331 "isa_tms320.tcc"
>
OpSUBC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64336 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64340 "isa_tms320.tcc"
>::OpSUBC_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64344 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64348 "isa_tms320.tcc"
>(code, addr, "SUBC_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64358 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64361 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64365 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64368 "isa_tms320.tcc"
>
OpSUBC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64373 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64377 "isa_tms320.tcc"
>::OpSUBC_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64381 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64385 "isa_tms320.tcc"
>(code, addr, "SUBC_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64397 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64400 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64404 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64407 "isa_tms320.tcc"
>
OpSUBC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 64412 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64416 "isa_tms320.tcc"
>::OpSUBC_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64420 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64424 "isa_tms320.tcc"
>(code, addr, "SUBC_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64434 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64437 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64441 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64444 "isa_tms320.tcc"
>
OpSUBF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 64449 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64453 "isa_tms320.tcc"
>::OpSUBF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64457 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64461 "isa_tms320.tcc"
>(code, addr, "SUBF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64471 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64474 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64478 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64481 "isa_tms320.tcc"
>
OpSUBF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64486 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64490 "isa_tms320.tcc"
>::OpSUBF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64494 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64498 "isa_tms320.tcc"
>(code, addr, "SUBF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64508 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64511 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64515 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64518 "isa_tms320.tcc"
>
OpSUBF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64527 "isa_tms320.tcc"
>::OpSUBF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64531 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64535 "isa_tms320.tcc"
>(code, addr, "SUBF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64547 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64550 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64554 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64557 "isa_tms320.tcc"
>
OpSUBF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 64562 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64566 "isa_tms320.tcc"
>::OpSUBF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64570 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64574 "isa_tms320.tcc"
>(code, addr, "SUBF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64584 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64587 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64591 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64594 "isa_tms320.tcc"
>
OpSUBI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 64599 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64603 "isa_tms320.tcc"
>::OpSUBI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64607 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64611 "isa_tms320.tcc"
>(code, addr, "SUBI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64621 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64624 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64628 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64631 "isa_tms320.tcc"
>
OpSUBI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64636 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64640 "isa_tms320.tcc"
>::OpSUBI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64648 "isa_tms320.tcc"
>(code, addr, "SUBI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64661 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64665 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64668 "isa_tms320.tcc"
>
OpSUBI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64673 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64677 "isa_tms320.tcc"
>::OpSUBI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64681 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64685 "isa_tms320.tcc"
>(code, addr, "SUBI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64697 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64704 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64707 "isa_tms320.tcc"
>
OpSUBI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 64712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64716 "isa_tms320.tcc"
>::OpSUBI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64720 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64724 "isa_tms320.tcc"
>(code, addr, "SUBI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64734 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64737 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64741 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64744 "isa_tms320.tcc"
>
OpSUBRB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 64749 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64753 "isa_tms320.tcc"
>::OpSUBRB_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64757 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64761 "isa_tms320.tcc"
>(code, addr, "SUBRB_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64771 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64778 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64781 "isa_tms320.tcc"
>
OpSUBRB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64786 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64790 "isa_tms320.tcc"
>::OpSUBRB_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64794 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64798 "isa_tms320.tcc"
>(code, addr, "SUBRB_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64811 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64815 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64818 "isa_tms320.tcc"
>
OpSUBRB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64827 "isa_tms320.tcc"
>::OpSUBRB_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64831 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64835 "isa_tms320.tcc"
>(code, addr, "SUBRB_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64854 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64857 "isa_tms320.tcc"
>
OpSUBRB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 64862 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64866 "isa_tms320.tcc"
>::OpSUBRB_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64870 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64874 "isa_tms320.tcc"
>(code, addr, "SUBRB_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64884 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64887 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64891 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64894 "isa_tms320.tcc"
>
OpSUBRF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 64899 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64903 "isa_tms320.tcc"
>::OpSUBRF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64907 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64911 "isa_tms320.tcc"
>(code, addr, "SUBRF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64921 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64924 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64931 "isa_tms320.tcc"
>
OpSUBRF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64940 "isa_tms320.tcc"
>::OpSUBRF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64944 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64948 "isa_tms320.tcc"
>(code, addr, "SUBRF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64958 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64961 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64965 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64968 "isa_tms320.tcc"
>
OpSUBRF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64977 "isa_tms320.tcc"
>::OpSUBRF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64981 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64985 "isa_tms320.tcc"
>(code, addr, "SUBRF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64997 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65000 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65004 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65007 "isa_tms320.tcc"
>
OpSUBRF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 65012 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65016 "isa_tms320.tcc"
>::OpSUBRF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65020 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65024 "isa_tms320.tcc"
>(code, addr, "SUBRF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65037 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65041 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65044 "isa_tms320.tcc"
>
OpSUBRI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 65049 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65053 "isa_tms320.tcc"
>::OpSUBRI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65057 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65061 "isa_tms320.tcc"
>(code, addr, "SUBRI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65071 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65074 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65078 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65081 "isa_tms320.tcc"
>
OpSUBRI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65090 "isa_tms320.tcc"
>::OpSUBRI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65094 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65098 "isa_tms320.tcc"
>(code, addr, "SUBRI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65111 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65115 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65118 "isa_tms320.tcc"
>
OpSUBRI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65123 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65127 "isa_tms320.tcc"
>::OpSUBRI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65131 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65135 "isa_tms320.tcc"
>(code, addr, "SUBRI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65150 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65154 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65157 "isa_tms320.tcc"
>
OpSUBRI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 65162 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65166 "isa_tms320.tcc"
>::OpSUBRI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65170 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65174 "isa_tms320.tcc"
>(code, addr, "SUBRI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65184 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65187 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65191 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65194 "isa_tms320.tcc"
>
OpTSTB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 65199 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65203 "isa_tms320.tcc"
>::OpTSTB_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65207 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65211 "isa_tms320.tcc"
>(code, addr, "TSTB_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65221 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65228 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65231 "isa_tms320.tcc"
>
OpTSTB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65236 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65240 "isa_tms320.tcc"
>::OpTSTB_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65244 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65248 "isa_tms320.tcc"
>(code, addr, "TSTB_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65258 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65261 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65265 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65268 "isa_tms320.tcc"
>
OpTSTB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65273 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65277 "isa_tms320.tcc"
>::OpTSTB_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65281 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65285 "isa_tms320.tcc"
>(code, addr, "TSTB_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65297 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65300 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65304 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65307 "isa_tms320.tcc"
>
OpTSTB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 65312 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65316 "isa_tms320.tcc"
>::OpTSTB_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65324 "isa_tms320.tcc"
>(code, addr, "TSTB_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65334 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65337 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65341 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65344 "isa_tms320.tcc"
>
OpXOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 65349 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65353 "isa_tms320.tcc"
>::OpXOR_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65357 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65361 "isa_tms320.tcc"
>(code, addr, "XOR_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65371 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65374 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65378 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65381 "isa_tms320.tcc"
>
OpXOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65386 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65390 "isa_tms320.tcc"
>::OpXOR_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65394 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65398 "isa_tms320.tcc"
>(code, addr, "XOR_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65408 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65411 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65418 "isa_tms320.tcc"
>
OpXOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65423 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65427 "isa_tms320.tcc"
>::OpXOR_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65431 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65435 "isa_tms320.tcc"
>(code, addr, "XOR_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65450 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65457 "isa_tms320.tcc"
>
OpXOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 65462 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65466 "isa_tms320.tcc"
>::OpXOR_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65470 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65474 "isa_tms320.tcc"
>(code, addr, "XOR_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65491 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65494 "isa_tms320.tcc"
>
OpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 65499 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65503 "isa_tms320.tcc"
>::OpADDC3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65511 "isa_tms320.tcc"
>(code, addr, "ADDC3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65522 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65532 "isa_tms320.tcc"
>
OpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 65537 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65541 "isa_tms320.tcc"
>::OpADDC3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65549 "isa_tms320.tcc"
>(code, addr, "ADDC3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65561 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65564 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65568 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65571 "isa_tms320.tcc"
>
OpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65580 "isa_tms320.tcc"
>::OpADDC3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65584 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65588 "isa_tms320.tcc"
>(code, addr, "ADDC3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65600 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65603 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65607 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65610 "isa_tms320.tcc"
>
OpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65615 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65619 "isa_tms320.tcc"
>::OpADDC3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65627 "isa_tms320.tcc"
>(code, addr, "ADDC3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65647 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65650 "isa_tms320.tcc"
>
OpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 65655 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65659 "isa_tms320.tcc"
>::OpADDF3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65667 "isa_tms320.tcc"
>(code, addr, "ADDF3_reg_reg")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65678 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65681 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65685 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65688 "isa_tms320.tcc"
>
OpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 65693 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65697 "isa_tms320.tcc"
>::OpADDF3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65701 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65705 "isa_tms320.tcc"
>(code, addr, "ADDF3_indir_reg")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65717 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65720 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65724 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65727 "isa_tms320.tcc"
>
OpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65736 "isa_tms320.tcc"
>::OpADDF3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65740 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65744 "isa_tms320.tcc"
>(code, addr, "ADDF3_reg_indir")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65756 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65759 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65766 "isa_tms320.tcc"
>
OpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65771 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65775 "isa_tms320.tcc"
>::OpADDF3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65779 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65783 "isa_tms320.tcc"
>(code, addr, "ADDF3_indir_indir")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65796 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65799 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65803 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65806 "isa_tms320.tcc"
>
OpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 65811 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65815 "isa_tms320.tcc"
>::OpADDI3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65819 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65823 "isa_tms320.tcc"
>(code, addr, "ADDI3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65834 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65837 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65841 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65844 "isa_tms320.tcc"
>
OpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 65849 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65853 "isa_tms320.tcc"
>::OpADDI3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65857 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65861 "isa_tms320.tcc"
>(code, addr, "ADDI3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65873 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65880 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65883 "isa_tms320.tcc"
>
OpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65888 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65892 "isa_tms320.tcc"
>::OpADDI3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65896 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65900 "isa_tms320.tcc"
>(code, addr, "ADDI3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65912 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65915 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65919 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65922 "isa_tms320.tcc"
>
OpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65927 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65931 "isa_tms320.tcc"
>::OpADDI3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65935 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65939 "isa_tms320.tcc"
>(code, addr, "ADDI3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65952 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65955 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65959 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65962 "isa_tms320.tcc"
>
OpAND3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 65967 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65971 "isa_tms320.tcc"
>::OpAND3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65975 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65979 "isa_tms320.tcc"
>(code, addr, "AND3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65990 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65993 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65997 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66000 "isa_tms320.tcc"
>
OpAND3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66005 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66009 "isa_tms320.tcc"
>::OpAND3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66013 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66017 "isa_tms320.tcc"
>(code, addr, "AND3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66029 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66032 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66036 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66039 "isa_tms320.tcc"
>
OpAND3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66048 "isa_tms320.tcc"
>::OpAND3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66052 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66056 "isa_tms320.tcc"
>(code, addr, "AND3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66078 "isa_tms320.tcc"
>
OpAND3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66087 "isa_tms320.tcc"
>::OpAND3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66091 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66095 "isa_tms320.tcc"
>(code, addr, "AND3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66111 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66115 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66118 "isa_tms320.tcc"
>
OpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66123 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66127 "isa_tms320.tcc"
>::OpANDN3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66131 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66135 "isa_tms320.tcc"
>(code, addr, "ANDN3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66146 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66149 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66153 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66156 "isa_tms320.tcc"
>
OpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66161 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66165 "isa_tms320.tcc"
>::OpANDN3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66169 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66173 "isa_tms320.tcc"
>(code, addr, "ANDN3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66185 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66188 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66192 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66195 "isa_tms320.tcc"
>
OpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66200 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66204 "isa_tms320.tcc"
>::OpANDN3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66208 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66212 "isa_tms320.tcc"
>(code, addr, "ANDN3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66224 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66227 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66231 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66234 "isa_tms320.tcc"
>
OpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66239 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66243 "isa_tms320.tcc"
>::OpANDN3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66247 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66251 "isa_tms320.tcc"
>(code, addr, "ANDN3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66264 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66271 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66274 "isa_tms320.tcc"
>
OpASH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66283 "isa_tms320.tcc"
>::OpASH3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66287 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66291 "isa_tms320.tcc"
>(code, addr, "ASH3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66302 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66305 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66309 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66312 "isa_tms320.tcc"
>
OpASH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66317 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66321 "isa_tms320.tcc"
>::OpASH3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66325 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66329 "isa_tms320.tcc"
>(code, addr, "ASH3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66341 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66344 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66348 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66351 "isa_tms320.tcc"
>
OpASH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66356 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66360 "isa_tms320.tcc"
>::OpASH3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66364 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66368 "isa_tms320.tcc"
>(code, addr, "ASH3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66380 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66390 "isa_tms320.tcc"
>
OpASH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66395 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66399 "isa_tms320.tcc"
>::OpASH3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66407 "isa_tms320.tcc"
>(code, addr, "ASH3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66420 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66423 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66427 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66430 "isa_tms320.tcc"
>
OpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66435 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66439 "isa_tms320.tcc"
>::OpCMPF3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66447 "isa_tms320.tcc"
>(code, addr, "CMPF3_reg_reg")
{
	src1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66457 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66460 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66464 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66467 "isa_tms320.tcc"
>
OpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66476 "isa_tms320.tcc"
>::OpCMPF3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66480 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66484 "isa_tms320.tcc"
>(code, addr, "CMPF3_indir_reg")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66495 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66498 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66502 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66505 "isa_tms320.tcc"
>
OpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66510 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66514 "isa_tms320.tcc"
>::OpCMPF3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66518 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66522 "isa_tms320.tcc"
>(code, addr, "CMPF3_reg_indir")
{
	src1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66533 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66536 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66543 "isa_tms320.tcc"
>
OpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66548 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66552 "isa_tms320.tcc"
>::OpCMPF3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66556 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66560 "isa_tms320.tcc"
>(code, addr, "CMPF3_indir_indir")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66572 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66575 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66579 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66582 "isa_tms320.tcc"
>
OpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66587 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66591 "isa_tms320.tcc"
>::OpCMPI3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66595 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66599 "isa_tms320.tcc"
>(code, addr, "CMPI3_reg_reg")
{
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66609 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66612 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66619 "isa_tms320.tcc"
>
OpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66624 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66628 "isa_tms320.tcc"
>::OpCMPI3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66632 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66636 "isa_tms320.tcc"
>(code, addr, "CMPI3_indir_reg")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66647 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66650 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66654 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66657 "isa_tms320.tcc"
>
OpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66662 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66666 "isa_tms320.tcc"
>::OpCMPI3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66674 "isa_tms320.tcc"
>(code, addr, "CMPI3_reg_indir")
{
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66685 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66688 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66692 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66695 "isa_tms320.tcc"
>
OpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66704 "isa_tms320.tcc"
>::OpCMPI3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66708 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66712 "isa_tms320.tcc"
>(code, addr, "CMPI3_indir_indir")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66724 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66727 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66731 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66734 "isa_tms320.tcc"
>
OpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66739 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66743 "isa_tms320.tcc"
>::OpLSH3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66747 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66751 "isa_tms320.tcc"
>(code, addr, "LSH3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66762 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66765 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66769 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66772 "isa_tms320.tcc"
>
OpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66777 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66781 "isa_tms320.tcc"
>::OpLSH3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66789 "isa_tms320.tcc"
>(code, addr, "LSH3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66801 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66811 "isa_tms320.tcc"
>
OpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66816 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66820 "isa_tms320.tcc"
>::OpLSH3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66824 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66828 "isa_tms320.tcc"
>(code, addr, "LSH3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66850 "isa_tms320.tcc"
>
OpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66855 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66859 "isa_tms320.tcc"
>::OpLSH3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66867 "isa_tms320.tcc"
>(code, addr, "LSH3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66880 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66883 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66887 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66890 "isa_tms320.tcc"
>
OpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66895 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66899 "isa_tms320.tcc"
>::OpMPYF3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66903 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66907 "isa_tms320.tcc"
>(code, addr, "MPYF3_reg_reg")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66918 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66928 "isa_tms320.tcc"
>
OpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66933 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66937 "isa_tms320.tcc"
>::OpMPYF3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66941 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66945 "isa_tms320.tcc"
>(code, addr, "MPYF3_indir_reg")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66957 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66960 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66964 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66967 "isa_tms320.tcc"
>
OpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66976 "isa_tms320.tcc"
>::OpMPYF3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66984 "isa_tms320.tcc"
>(code, addr, "MPYF3_reg_indir")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66996 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66999 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67003 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67006 "isa_tms320.tcc"
>
OpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67011 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67015 "isa_tms320.tcc"
>::OpMPYF3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67019 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67023 "isa_tms320.tcc"
>(code, addr, "MPYF3_indir_indir")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67036 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67039 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67043 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67046 "isa_tms320.tcc"
>
OpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67051 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67055 "isa_tms320.tcc"
>::OpMPYI3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67059 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67063 "isa_tms320.tcc"
>(code, addr, "MPYI3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67077 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67081 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67084 "isa_tms320.tcc"
>
OpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67089 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67093 "isa_tms320.tcc"
>::OpMPYI3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67097 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67101 "isa_tms320.tcc"
>(code, addr, "MPYI3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67113 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67120 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67123 "isa_tms320.tcc"
>
OpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67128 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67132 "isa_tms320.tcc"
>::OpMPYI3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67136 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67140 "isa_tms320.tcc"
>(code, addr, "MPYI3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67152 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67155 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67159 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67162 "isa_tms320.tcc"
>
OpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67167 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67171 "isa_tms320.tcc"
>::OpMPYI3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67175 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67179 "isa_tms320.tcc"
>(code, addr, "MPYI3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67192 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67195 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67199 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67202 "isa_tms320.tcc"
>
OpOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67207 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67211 "isa_tms320.tcc"
>::OpOR3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67215 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67219 "isa_tms320.tcc"
>(code, addr, "OR3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67233 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67237 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67240 "isa_tms320.tcc"
>
OpOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67245 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67249 "isa_tms320.tcc"
>::OpOR3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67253 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67257 "isa_tms320.tcc"
>(code, addr, "OR3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67269 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67272 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67279 "isa_tms320.tcc"
>
OpOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67284 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67288 "isa_tms320.tcc"
>::OpOR3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67292 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67296 "isa_tms320.tcc"
>(code, addr, "OR3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67308 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67311 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67315 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67318 "isa_tms320.tcc"
>
OpOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67323 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67327 "isa_tms320.tcc"
>::OpOR3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67331 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67335 "isa_tms320.tcc"
>(code, addr, "OR3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67348 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67351 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67355 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67358 "isa_tms320.tcc"
>
OpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67363 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67367 "isa_tms320.tcc"
>::OpSUBB3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67371 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67375 "isa_tms320.tcc"
>(code, addr, "SUBB3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67386 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67389 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67393 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67396 "isa_tms320.tcc"
>
OpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67401 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67405 "isa_tms320.tcc"
>::OpSUBB3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67409 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67413 "isa_tms320.tcc"
>(code, addr, "SUBB3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67425 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67428 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67432 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67435 "isa_tms320.tcc"
>
OpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67440 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67444 "isa_tms320.tcc"
>::OpSUBB3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67448 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67452 "isa_tms320.tcc"
>(code, addr, "SUBB3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67464 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67467 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67471 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67474 "isa_tms320.tcc"
>
OpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67479 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67483 "isa_tms320.tcc"
>::OpSUBB3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67491 "isa_tms320.tcc"
>(code, addr, "SUBB3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67504 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67511 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67514 "isa_tms320.tcc"
>
OpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67519 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67523 "isa_tms320.tcc"
>::OpSUBF3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67531 "isa_tms320.tcc"
>(code, addr, "SUBF3_reg_reg")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67542 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67549 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67552 "isa_tms320.tcc"
>
OpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67557 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67561 "isa_tms320.tcc"
>::OpSUBF3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67565 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67569 "isa_tms320.tcc"
>(code, addr, "SUBF3_indir_reg")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67581 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67584 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67588 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67591 "isa_tms320.tcc"
>
OpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67600 "isa_tms320.tcc"
>::OpSUBF3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67608 "isa_tms320.tcc"
>(code, addr, "SUBF3_reg_indir")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67620 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67627 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67630 "isa_tms320.tcc"
>
OpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67635 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67639 "isa_tms320.tcc"
>::OpSUBF3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67647 "isa_tms320.tcc"
>(code, addr, "SUBF3_indir_indir")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67660 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67670 "isa_tms320.tcc"
>
OpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67675 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67679 "isa_tms320.tcc"
>::OpSUBI3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67683 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67687 "isa_tms320.tcc"
>(code, addr, "SUBI3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67698 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67701 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67705 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67708 "isa_tms320.tcc"
>
OpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67713 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67717 "isa_tms320.tcc"
>::OpSUBI3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67721 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67725 "isa_tms320.tcc"
>(code, addr, "SUBI3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67737 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67740 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67744 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67747 "isa_tms320.tcc"
>
OpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67752 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67756 "isa_tms320.tcc"
>::OpSUBI3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67760 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67764 "isa_tms320.tcc"
>(code, addr, "SUBI3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67776 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67779 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67783 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67786 "isa_tms320.tcc"
>
OpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67795 "isa_tms320.tcc"
>::OpSUBI3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67799 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67803 "isa_tms320.tcc"
>(code, addr, "SUBI3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67819 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67823 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67826 "isa_tms320.tcc"
>
OpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67831 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67835 "isa_tms320.tcc"
>::OpTSTB3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67839 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67843 "isa_tms320.tcc"
>(code, addr, "TSTB3_reg_reg")
{
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67853 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67856 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67860 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67863 "isa_tms320.tcc"
>
OpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67872 "isa_tms320.tcc"
>::OpTSTB3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67880 "isa_tms320.tcc"
>(code, addr, "TSTB3_indir_reg")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67891 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67898 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67901 "isa_tms320.tcc"
>
OpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67906 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67910 "isa_tms320.tcc"
>::OpTSTB3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67914 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67918 "isa_tms320.tcc"
>(code, addr, "TSTB3_reg_indir")
{
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67929 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67932 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67936 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67939 "isa_tms320.tcc"
>
OpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67944 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67948 "isa_tms320.tcc"
>::OpTSTB3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67956 "isa_tms320.tcc"
>(code, addr, "TSTB3_indir_indir")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67968 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67971 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67975 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67978 "isa_tms320.tcc"
>
OpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67987 "isa_tms320.tcc"
>::OpXOR3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67991 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67995 "isa_tms320.tcc"
>(code, addr, "XOR3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68006 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68009 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68013 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68016 "isa_tms320.tcc"
>
OpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68021 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68025 "isa_tms320.tcc"
>::OpXOR3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68029 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68033 "isa_tms320.tcc"
>(code, addr, "XOR3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68045 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68048 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68052 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68055 "isa_tms320.tcc"
>
OpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68060 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68064 "isa_tms320.tcc"
>::OpXOR3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68068 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68072 "isa_tms320.tcc"
>(code, addr, "XOR3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68084 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68087 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68091 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68094 "isa_tms320.tcc"
>
OpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68099 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68103 "isa_tms320.tcc"
>::OpXOR3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68107 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68111 "isa_tms320.tcc"
>(code, addr, "XOR3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68127 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68131 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68134 "isa_tms320.tcc"
>
OpBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68139 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68143 "isa_tms320.tcc"
>::OpBcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68147 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68151 "isa_tms320.tcc"
>(code, addr, "Bcond_reg")
{
	cond = ((code >> 16) & 0x1f);
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68161 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68164 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68171 "isa_tms320.tcc"
>
OpBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 68176 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68180 "isa_tms320.tcc"
>::OpBcond_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68184 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68188 "isa_tms320.tcc"
>(code, addr, "Bcond_disp")
{
	cond = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68201 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68208 "isa_tms320.tcc"
>
OpBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68217 "isa_tms320.tcc"
>::OpBcondD_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68221 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68225 "isa_tms320.tcc"
>(code, addr, "BcondD_reg")
{
	cond = ((code >> 16) & 0x1f);
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68242 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68245 "isa_tms320.tcc"
>
OpBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 68250 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68254 "isa_tms320.tcc"
>::OpBcondD_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68258 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68262 "isa_tms320.tcc"
>(code, addr, "BcondD_disp")
{
	cond = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68272 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68275 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68279 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68282 "isa_tms320.tcc"
>
OpBR<
#line 45 "isa/tms320.isa"
CONFIG
#line 68287 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68291 "isa_tms320.tcc"
>::OpBR(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68295 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68299 "isa_tms320.tcc"
>(code, addr, "BR")
{
	src = ((code >> 0) & 0xffffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68308 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68311 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68315 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68318 "isa_tms320.tcc"
>
OpBRD<
#line 45 "isa/tms320.isa"
CONFIG
#line 68323 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68327 "isa_tms320.tcc"
>::OpBRD(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68331 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68335 "isa_tms320.tcc"
>(code, addr, "BRD")
{
	src = ((code >> 0) & 0xffffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68347 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68354 "isa_tms320.tcc"
>
OpCALL<
#line 45 "isa/tms320.isa"
CONFIG
#line 68359 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68363 "isa_tms320.tcc"
>::OpCALL(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68367 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68371 "isa_tms320.tcc"
>(code, addr, "CALL")
{
	src = ((code >> 0) & 0xffffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68380 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68390 "isa_tms320.tcc"
>
OpCALLcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68395 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68399 "isa_tms320.tcc"
>::OpCALLcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68407 "isa_tms320.tcc"
>(code, addr, "CALLcond_reg")
{
	cond = ((code >> 16) & 0x1f);
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68417 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68420 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68424 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68427 "isa_tms320.tcc"
>
OpCALLcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 68432 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68436 "isa_tms320.tcc"
>::OpCALLcond_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68440 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68444 "isa_tms320.tcc"
>(code, addr, "CALLcond_disp")
{
	cond = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68457 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68461 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68464 "isa_tms320.tcc"
>
OpDBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68469 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68473 "isa_tms320.tcc"
>::OpDBcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68477 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68481 "isa_tms320.tcc"
>(code, addr, "DBcond_reg")
{
	ar = ((code >> 22) & 0x7);
	cond = ((code >> 16) & 0x1f);
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68495 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68502 "isa_tms320.tcc"
>
OpDBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 68507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68511 "isa_tms320.tcc"
>::OpDBcond_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68519 "isa_tms320.tcc"
>(code, addr, "DBcond_disp")
{
	ar = ((code >> 22) & 0x7);
	cond = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68530 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68533 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68537 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68540 "isa_tms320.tcc"
>
OpDBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68549 "isa_tms320.tcc"
>::OpDBcondD_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68553 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68557 "isa_tms320.tcc"
>(code, addr, "DBcondD_reg")
{
	ar = ((code >> 22) & 0x7);
	cond = ((code >> 16) & 0x1f);
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68568 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68571 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68575 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68578 "isa_tms320.tcc"
>
OpDBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 68583 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68587 "isa_tms320.tcc"
>::OpDBcondD_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68591 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68595 "isa_tms320.tcc"
>(code, addr, "DBcondD_disp")
{
	ar = ((code >> 22) & 0x7);
	cond = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68606 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68609 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68613 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68616 "isa_tms320.tcc"
>
OpIACK_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68621 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68625 "isa_tms320.tcc"
>::OpIACK_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68629 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68633 "isa_tms320.tcc"
>(code, addr, "IACK_dir")
{
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68642 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68645 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68649 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68652 "isa_tms320.tcc"
>
OpIACK_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68657 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68661 "isa_tms320.tcc"
>::OpIACK_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68665 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68669 "isa_tms320.tcc"
>(code, addr, "IACK_indir")
{
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68680 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68683 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68687 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68690 "isa_tms320.tcc"
>
OpIDLE<
#line 45 "isa/tms320.isa"
CONFIG
#line 68695 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68699 "isa_tms320.tcc"
>::OpIDLE(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68703 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68707 "isa_tms320.tcc"
>(code, addr, "IDLE")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 68715 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68718 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68725 "isa_tms320.tcc"
>
OpNOP_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68734 "isa_tms320.tcc"
>::OpNOP_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68738 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68742 "isa_tms320.tcc"
>(code, addr, "NOP_reg")
{
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68751 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68754 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68758 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68761 "isa_tms320.tcc"
>
OpNOP_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68766 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68770 "isa_tms320.tcc"
>::OpNOP_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68778 "isa_tms320.tcc"
>(code, addr, "NOP_indir")
{
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68796 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68799 "isa_tms320.tcc"
>
OpRETIcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 68804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68808 "isa_tms320.tcc"
>::OpRETIcond(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68812 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68816 "isa_tms320.tcc"
>(code, addr, "RETIcond")
{
	cond = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68825 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68828 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68832 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68835 "isa_tms320.tcc"
>
OpRETScond<
#line 45 "isa/tms320.isa"
CONFIG
#line 68840 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68844 "isa_tms320.tcc"
>::OpRETScond(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68852 "isa_tms320.tcc"
>(code, addr, "RETScond")
{
	cond = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68861 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68864 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68868 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68871 "isa_tms320.tcc"
>
OpRPTB<
#line 45 "isa/tms320.isa"
CONFIG
#line 68876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68880 "isa_tms320.tcc"
>::OpRPTB(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68884 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68888 "isa_tms320.tcc"
>(code, addr, "RPTB")
{
	src = ((code >> 0) & 0xffffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68897 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68904 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68907 "isa_tms320.tcc"
>
OpRPTS_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68912 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68916 "isa_tms320.tcc"
>::OpRPTS_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68920 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68924 "isa_tms320.tcc"
>(code, addr, "RPTS_reg")
{
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68933 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68940 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68943 "isa_tms320.tcc"
>
OpRPTS_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68948 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68952 "isa_tms320.tcc"
>::OpRPTS_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68956 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68960 "isa_tms320.tcc"
>(code, addr, "RPTS_dir")
{
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68976 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68979 "isa_tms320.tcc"
>
OpRPTS_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68984 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68988 "isa_tms320.tcc"
>::OpRPTS_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68992 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68996 "isa_tms320.tcc"
>(code, addr, "RPTS_indir")
{
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69014 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69017 "isa_tms320.tcc"
>
OpRPTS_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 69022 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69026 "isa_tms320.tcc"
>::OpRPTS_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69034 "isa_tms320.tcc"
>(code, addr, "RPTS_imm")
{
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69043 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69046 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69050 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69053 "isa_tms320.tcc"
>
OpSWI<
#line 45 "isa/tms320.isa"
CONFIG
#line 69058 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69062 "isa_tms320.tcc"
>::OpSWI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69066 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69070 "isa_tms320.tcc"
>(code, addr, "SWI")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 69078 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69081 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69085 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69088 "isa_tms320.tcc"
>
OpTRAPcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 69093 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69097 "isa_tms320.tcc"
>::OpTRAPcond(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69101 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69105 "isa_tms320.tcc"
>(code, addr, "TRAPcond")
{
	cond = ((code >> 16) & 0x1f);
	n = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69115 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69118 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69122 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69125 "isa_tms320.tcc"
>
OpIDLE2<
#line 45 "isa/tms320.isa"
CONFIG
#line 69130 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69134 "isa_tms320.tcc"
>::OpIDLE2(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69138 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69142 "isa_tms320.tcc"
>(code, addr, "IDLE2")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 69150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69157 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69160 "isa_tms320.tcc"
>
OpLOPOWER<
#line 45 "isa/tms320.isa"
CONFIG
#line 69165 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69169 "isa_tms320.tcc"
>::OpLOPOWER(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69173 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69177 "isa_tms320.tcc"
>(code, addr, "LOPOWER")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 69185 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69188 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69192 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69195 "isa_tms320.tcc"
>
OpMAXSPEED<
#line 45 "isa/tms320.isa"
CONFIG
#line 69200 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69204 "isa_tms320.tcc"
>::OpMAXSPEED(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69208 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69212 "isa_tms320.tcc"
>(code, addr, "MAXSPEED")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 69220 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69223 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69227 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69230 "isa_tms320.tcc"
>
OpLDFI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69235 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69239 "isa_tms320.tcc"
>::OpLDFI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69247 "isa_tms320.tcc"
>(code, addr, "LDFI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69257 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69260 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69264 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69267 "isa_tms320.tcc"
>
OpLDFI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69272 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69276 "isa_tms320.tcc"
>::OpLDFI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69280 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69284 "isa_tms320.tcc"
>(code, addr, "LDFI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69296 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69299 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69303 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69306 "isa_tms320.tcc"
>
OpLDII_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69311 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69315 "isa_tms320.tcc"
>::OpLDII_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69319 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69323 "isa_tms320.tcc"
>(code, addr, "LDII_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69333 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69336 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69340 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69343 "isa_tms320.tcc"
>
OpLDII_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69352 "isa_tms320.tcc"
>::OpLDII_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69356 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69360 "isa_tms320.tcc"
>(code, addr, "LDII_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69372 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69375 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69379 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69382 "isa_tms320.tcc"
>
OpSIGI<
#line 45 "isa/tms320.isa"
CONFIG
#line 69387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69391 "isa_tms320.tcc"
>::OpSIGI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69395 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69399 "isa_tms320.tcc"
>(code, addr, "SIGI")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 69407 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69410 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69414 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69417 "isa_tms320.tcc"
>
OpSTFI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69422 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69426 "isa_tms320.tcc"
>::OpSTFI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69434 "isa_tms320.tcc"
>(code, addr, "STFI_dir")
{
	src = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69444 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69447 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69454 "isa_tms320.tcc"
>
OpSTFI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69459 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69463 "isa_tms320.tcc"
>::OpSTFI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69467 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69471 "isa_tms320.tcc"
>(code, addr, "STFI_indir")
{
	src = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69483 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69486 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69490 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69493 "isa_tms320.tcc"
>
OpSTII_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69498 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69502 "isa_tms320.tcc"
>::OpSTII_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69506 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69510 "isa_tms320.tcc"
>(code, addr, "STII_dir")
{
	src = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69530 "isa_tms320.tcc"
>
OpSTII_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69539 "isa_tms320.tcc"
>::OpSTII_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69543 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69547 "isa_tms320.tcc"
>(code, addr, "STII_indir")
{
	src = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69559 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69562 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69566 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69569 "isa_tms320.tcc"
>
OpABSF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 69574 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69578 "isa_tms320.tcc"
>::OpABSF_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69582 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69586 "isa_tms320.tcc"
>(code, addr, "ABSF_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69600 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69603 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69607 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69610 "isa_tms320.tcc"
>
OpABSF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 69615 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69619 "isa_tms320.tcc"
>::OpABSF_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69627 "isa_tms320.tcc"
>(code, addr, "ABSF_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69647 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69650 "isa_tms320.tcc"
>
OpABSI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 69655 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69659 "isa_tms320.tcc"
>::OpABSI_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69667 "isa_tms320.tcc"
>(code, addr, "ABSI_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69691 "isa_tms320.tcc"
>
OpABSI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 69696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69700 "isa_tms320.tcc"
>::OpABSI_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69708 "isa_tms320.tcc"
>(code, addr, "ABSI_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69721 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69724 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69728 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69731 "isa_tms320.tcc"
>
OpADDF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 69736 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69740 "isa_tms320.tcc"
>::OpADDF3_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69748 "isa_tms320.tcc"
>(code, addr, "ADDF3_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69766 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69770 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69773 "isa_tms320.tcc"
>
OpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 69778 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69782 "isa_tms320.tcc"
>::OpADDF3_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69786 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69790 "isa_tms320.tcc"
>(code, addr, "ADDF3_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69804 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69807 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69811 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69814 "isa_tms320.tcc"
>
OpADDI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 69819 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69823 "isa_tms320.tcc"
>::OpADDI3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69827 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69831 "isa_tms320.tcc"
>(code, addr, "ADDI3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69846 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69849 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69853 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69856 "isa_tms320.tcc"
>
OpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 69861 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69865 "isa_tms320.tcc"
>::OpADDI3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69869 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69873 "isa_tms320.tcc"
>(code, addr, "ADDI3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69887 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69890 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69894 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69897 "isa_tms320.tcc"
>
OpAND3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 69902 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69906 "isa_tms320.tcc"
>::OpAND3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69910 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69914 "isa_tms320.tcc"
>(code, addr, "AND3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69929 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69932 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69936 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69939 "isa_tms320.tcc"
>
OpAND3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 69944 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69948 "isa_tms320.tcc"
>::OpAND3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69956 "isa_tms320.tcc"
>(code, addr, "AND3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69980 "isa_tms320.tcc"
>
OpASH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 69985 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69989 "isa_tms320.tcc"
>::OpASH3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69993 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69997 "isa_tms320.tcc"
>(code, addr, "ASH3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	count = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70022 "isa_tms320.tcc"
>
OpASH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 70027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70031 "isa_tms320.tcc"
>::OpASH3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70035 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70039 "isa_tms320.tcc"
>(code, addr, "ASH3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	count = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70053 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70060 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70063 "isa_tms320.tcc"
>
OpFIX_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 70068 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70072 "isa_tms320.tcc"
>::OpFIX_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70076 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70080 "isa_tms320.tcc"
>(code, addr, "FIX_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70094 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70097 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70104 "isa_tms320.tcc"
>
OpFIX_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 70109 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70113 "isa_tms320.tcc"
>::OpFIX_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70117 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70121 "isa_tms320.tcc"
>(code, addr, "FIX_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70134 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70137 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70141 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70144 "isa_tms320.tcc"
>
OpFLOAT_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 70149 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70153 "isa_tms320.tcc"
>::OpFLOAT_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70157 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70161 "isa_tms320.tcc"
>(code, addr, "FLOAT_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70182 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70185 "isa_tms320.tcc"
>
OpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 70190 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70194 "isa_tms320.tcc"
>::OpFLOAT_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70202 "isa_tms320.tcc"
>(code, addr, "FLOAT_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70215 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70218 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70222 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70225 "isa_tms320.tcc"
>
OpLDF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 70230 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70234 "isa_tms320.tcc"
>::OpLDF_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70242 "isa_tms320.tcc"
>(code, addr, "LDF_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70256 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70259 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70263 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70266 "isa_tms320.tcc"
>
OpLDF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 70271 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70275 "isa_tms320.tcc"
>::OpLDF_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70283 "isa_tms320.tcc"
>(code, addr, "LDF_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70296 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70299 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70303 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70306 "isa_tms320.tcc"
>
OpLDI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 70311 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70315 "isa_tms320.tcc"
>::OpLDI_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70319 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70323 "isa_tms320.tcc"
>(code, addr, "LDI_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70337 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70340 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70347 "isa_tms320.tcc"
>
OpLDI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 70352 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70356 "isa_tms320.tcc"
>::OpLDI_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70364 "isa_tms320.tcc"
>(code, addr, "LDI_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70377 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70384 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70387 "isa_tms320.tcc"
>
OpLSH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 70392 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70396 "isa_tms320.tcc"
>::OpLSH3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70400 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70404 "isa_tms320.tcc"
>(code, addr, "LSH3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	count = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70419 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70422 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70426 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70429 "isa_tms320.tcc"
>
OpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 70434 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70438 "isa_tms320.tcc"
>::OpLSH3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70446 "isa_tms320.tcc"
>(code, addr, "LSH3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	count = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70460 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70463 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70467 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70470 "isa_tms320.tcc"
>
OpMPYF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 70475 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70479 "isa_tms320.tcc"
>::OpMPYF3_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70483 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70487 "isa_tms320.tcc"
>(code, addr, "MPYF3_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70502 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70505 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70509 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70512 "isa_tms320.tcc"
>
OpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 70517 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70521 "isa_tms320.tcc"
>::OpMPYF3_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70529 "isa_tms320.tcc"
>(code, addr, "MPYF3_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70543 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70546 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70550 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70553 "isa_tms320.tcc"
>
OpMPYI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 70558 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70562 "isa_tms320.tcc"
>::OpMPYI3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70566 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70570 "isa_tms320.tcc"
>(code, addr, "MPYI3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70588 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70592 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70595 "isa_tms320.tcc"
>
OpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 70600 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70604 "isa_tms320.tcc"
>::OpMPYI3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70608 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70612 "isa_tms320.tcc"
>(code, addr, "MPYI3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70626 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70629 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70633 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70636 "isa_tms320.tcc"
>
OpNEGF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 70641 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70645 "isa_tms320.tcc"
>::OpNEGF_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70649 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70653 "isa_tms320.tcc"
>(code, addr, "NEGF_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70677 "isa_tms320.tcc"
>
OpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 70682 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70686 "isa_tms320.tcc"
>::OpNEGF_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70690 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70694 "isa_tms320.tcc"
>(code, addr, "NEGF_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70707 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70710 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70714 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70717 "isa_tms320.tcc"
>
OpNEGI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 70722 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70726 "isa_tms320.tcc"
>::OpNEGI_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70734 "isa_tms320.tcc"
>(code, addr, "NEGI_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70748 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70751 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70755 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70758 "isa_tms320.tcc"
>
OpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 70763 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70767 "isa_tms320.tcc"
>::OpNEGI_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70771 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70775 "isa_tms320.tcc"
>(code, addr, "NEGI_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70798 "isa_tms320.tcc"
>
OpNOT_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 70803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70807 "isa_tms320.tcc"
>::OpNOT_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70811 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70815 "isa_tms320.tcc"
>(code, addr, "NOT_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70832 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70836 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70839 "isa_tms320.tcc"
>
OpNOT_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 70844 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70848 "isa_tms320.tcc"
>::OpNOT_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70852 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70856 "isa_tms320.tcc"
>(code, addr, "NOT_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70869 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70876 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70879 "isa_tms320.tcc"
>
OpOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 70884 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70888 "isa_tms320.tcc"
>::OpOR3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70896 "isa_tms320.tcc"
>(code, addr, "OR3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70911 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70914 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70918 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70921 "isa_tms320.tcc"
>
OpOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 70926 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70930 "isa_tms320.tcc"
>::OpOR3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70934 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70938 "isa_tms320.tcc"
>(code, addr, "OR3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70952 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70955 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70959 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70962 "isa_tms320.tcc"
>
OpSTF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 70967 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70971 "isa_tms320.tcc"
>::OpSTF_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70975 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70979 "isa_tms320.tcc"
>(code, addr, "STF_STF")
{
	src2 = ((code >> 22) & 0x7);
	src1 = ((code >> 16) & 0x7);
	d1_mod = ((code >> 11) & 0x1f);
	d1_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70993 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70996 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71003 "isa_tms320.tcc"
>
OpSTF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 71008 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71012 "isa_tms320.tcc"
>::OpSTF_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71016 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71020 "isa_tms320.tcc"
>(code, addr, "STF_STF_ext")
{
	src2 = ((code >> 22) & 0x7);
	src1 = ((code >> 16) & 0x7);
	d1_mod = ((code >> 11) & 0x1f);
	d1_ar = ((code >> 8) & 0x7);
	dst2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71033 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71036 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71040 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71043 "isa_tms320.tcc"
>
OpSTI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 71048 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71052 "isa_tms320.tcc"
>::OpSTI_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71060 "isa_tms320.tcc"
>(code, addr, "STI_STI")
{
	src2 = ((code >> 22) & 0x7);
	src1 = ((code >> 16) & 0x7);
	d1_mod = ((code >> 11) & 0x1f);
	d1_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71077 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71081 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71084 "isa_tms320.tcc"
>
OpSTI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 71089 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71093 "isa_tms320.tcc"
>::OpSTI_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71097 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71101 "isa_tms320.tcc"
>(code, addr, "STI_STI_ext")
{
	src2 = ((code >> 22) & 0x7);
	src1 = ((code >> 16) & 0x7);
	d1_mod = ((code >> 11) & 0x1f);
	d1_ar = ((code >> 8) & 0x7);
	dst2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71114 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71117 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71121 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71124 "isa_tms320.tcc"
>
OpSUBF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 71129 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71133 "isa_tms320.tcc"
>::OpSUBF3_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71137 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71141 "isa_tms320.tcc"
>(code, addr, "SUBF3_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71156 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71159 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71163 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71166 "isa_tms320.tcc"
>
OpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 71171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71175 "isa_tms320.tcc"
>::OpSUBF3_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71179 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71183 "isa_tms320.tcc"
>(code, addr, "SUBF3_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71197 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71200 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71204 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71207 "isa_tms320.tcc"
>
OpSUBI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 71212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71216 "isa_tms320.tcc"
>::OpSUBI3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71220 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71224 "isa_tms320.tcc"
>(code, addr, "SUBI3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71239 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71242 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71246 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71249 "isa_tms320.tcc"
>
OpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 71254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71258 "isa_tms320.tcc"
>::OpSUBI3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71262 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71266 "isa_tms320.tcc"
>(code, addr, "SUBI3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71283 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71287 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71290 "isa_tms320.tcc"
>
OpXOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 71295 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71299 "isa_tms320.tcc"
>::OpXOR3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71303 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71307 "isa_tms320.tcc"
>(code, addr, "XOR3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71322 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71325 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71329 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71332 "isa_tms320.tcc"
>
OpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 71337 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71341 "isa_tms320.tcc"
>::OpXOR3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71349 "isa_tms320.tcc"
>(code, addr, "XOR3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71363 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71366 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71370 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71373 "isa_tms320.tcc"
>
OpLDF_LDF<
#line 45 "isa/tms320.isa"
CONFIG
#line 71378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71382 "isa_tms320.tcc"
>::OpLDF_LDF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71386 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71390 "isa_tms320.tcc"
>(code, addr, "LDF_LDF")
{
	dst1 = ((code >> 22) & 0x7);
	dst2 = ((code >> 19) & 0x7);
	s1_mod = ((code >> 11) & 0x1f);
	s1_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71404 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71407 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71411 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71414 "isa_tms320.tcc"
>
OpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 71419 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71423 "isa_tms320.tcc"
>::OpLDF_LDF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71427 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71431 "isa_tms320.tcc"
>(code, addr, "LDF_LDF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	dst2 = ((code >> 19) & 0x7);
	s1_mod = ((code >> 11) & 0x1f);
	s1_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71444 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71447 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71454 "isa_tms320.tcc"
>
OpLDI_LDI<
#line 45 "isa/tms320.isa"
CONFIG
#line 71459 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71463 "isa_tms320.tcc"
>::OpLDI_LDI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71467 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71471 "isa_tms320.tcc"
>(code, addr, "LDI_LDI")
{
	dst1 = ((code >> 22) & 0x7);
	dst2 = ((code >> 19) & 0x7);
	s1_mod = ((code >> 11) & 0x1f);
	s1_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71495 "isa_tms320.tcc"
>
OpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 71500 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71504 "isa_tms320.tcc"
>::OpLDI_LDI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71508 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71512 "isa_tms320.tcc"
>(code, addr, "LDI_LDI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	dst2 = ((code >> 19) & 0x7);
	s1_mod = ((code >> 11) & 0x1f);
	s1_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71525 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71528 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71532 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71535 "isa_tms320.tcc"
>
OpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 71540 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71544 "isa_tms320.tcc"
>::OpMPYF3_ADDF3(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71548 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71552 "isa_tms320.tcc"
>(code, addr, "MPYF3_ADDF3")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	s3_mod = ((code >> 11) & 0x1f);
	s3_ar = ((code >> 8) & 0x7);
	s4_mod = ((code >> 3) & 0x1f);
	s4_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71569 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71572 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71576 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71579 "isa_tms320.tcc"
>
OpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 71584 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71588 "isa_tms320.tcc"
>::OpMPYF3_ADDF3_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71596 "isa_tms320.tcc"
>(code, addr, "MPYF3_ADDF3_ext")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	src3 = ((code >> 8) & 0x1f);
	src4 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71611 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71618 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71621 "isa_tms320.tcc"
>
OpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 71626 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71630 "isa_tms320.tcc"
>::OpMPYF3_SUBF3(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71634 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71638 "isa_tms320.tcc"
>(code, addr, "MPYF3_SUBF3")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	s3_mod = ((code >> 11) & 0x1f);
	s3_ar = ((code >> 8) & 0x7);
	s4_mod = ((code >> 3) & 0x1f);
	s4_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71662 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71665 "isa_tms320.tcc"
>
OpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 71670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71674 "isa_tms320.tcc"
>::OpMPYF3_SUBF3_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71678 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71682 "isa_tms320.tcc"
>(code, addr, "MPYF3_SUBF3_ext")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	src3 = ((code >> 8) & 0x1f);
	src4 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71697 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71704 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71707 "isa_tms320.tcc"
>
OpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 71712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71716 "isa_tms320.tcc"
>::OpMPYI3_ADDI3(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71720 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71724 "isa_tms320.tcc"
>(code, addr, "MPYI3_ADDI3")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	s3_mod = ((code >> 11) & 0x1f);
	s3_ar = ((code >> 8) & 0x7);
	s4_mod = ((code >> 3) & 0x1f);
	s4_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71741 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71748 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71751 "isa_tms320.tcc"
>
OpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 71756 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71760 "isa_tms320.tcc"
>::OpMPYI3_ADDI3_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71768 "isa_tms320.tcc"
>(code, addr, "MPYI3_ADDI3_ext")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	src3 = ((code >> 8) & 0x1f);
	src4 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71783 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71786 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71790 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71793 "isa_tms320.tcc"
>
OpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 71798 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71802 "isa_tms320.tcc"
>::OpMPYI3_SUBI3(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71806 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71810 "isa_tms320.tcc"
>(code, addr, "MPYI3_SUBI3")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	s3_mod = ((code >> 11) & 0x1f);
	s3_ar = ((code >> 8) & 0x7);
	s4_mod = ((code >> 3) & 0x1f);
	s4_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71827 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71830 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71834 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71837 "isa_tms320.tcc"
>
OpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 71842 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71846 "isa_tms320.tcc"
>::OpMPYI3_SUBI3_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71854 "isa_tms320.tcc"
>(code, addr, "MPYI3_SUBI3_ext")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	src3 = ((code >> 8) & 0x1f);
	src4 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71869 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71876 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71879 "isa_tms320.tcc"
>
DecodeMapPage<
#line 45 "isa/tms320.isa"
CONFIG
#line 71884 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71888 "isa_tms320.tcc"
>::DecodeMapPage(typename CONFIG::address_t key)
{
	this->key = key;
	memset(operation, 0, sizeof(operation));
	next = 0;
}

template <
#line 45 "isa/tms320.isa"
class
#line 71899 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71902 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71906 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71909 "isa_tms320.tcc"
>
DecodeMapPage<
#line 45 "isa/tms320.isa"
CONFIG
#line 71914 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71918 "isa_tms320.tcc"
>::~DecodeMapPage()
{
	unsigned int idx;
	for(idx = 0; idx < NUM_OPERATIONS_PER_PAGE; idx++)
	delete operation[idx];
}

template <
#line 45 "isa/tms320.isa"
class
#line 71929 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71932 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71936 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71939 "isa_tms320.tcc"
>
DecodeTableEntry<
#line 45 "isa/tms320.isa"
CONFIG
#line 71944 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71948 "isa_tms320.tcc"
>::DecodeTableEntry(CodeType opcode, CodeType opcode_mask, Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71956 "isa_tms320.tcc"
> *(*decode)(CodeType, typename CONFIG::address_t))
{
	this->opcode = opcode;
	this->opcode_mask = opcode_mask;
	this->decode = decode;
}

template <
#line 45 "isa/tms320.isa"
class
#line 71967 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71970 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71974 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71977 "isa_tms320.tcc"
>
Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 71982 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71986 "isa_tms320.tcc"
>::Decoder()
{
	little_endian = true;
	mru_page = 0;
	memset(decode_hash_table, 0, sizeof(decode_hash_table));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71995 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71999 "isa_tms320.tcc"
	>(0x8c00e0e0UL, 0xfc00e0e0UL, DecodeOpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72003 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72007 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72012 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72016 "isa_tms320.tcc"
	>(0x8c000000UL, 0xfc000000UL, DecodeOpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72020 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72024 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72029 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72033 "isa_tms320.tcc"
	>(0x8800e0e0UL, 0xfc00e0e0UL, DecodeOpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72037 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72041 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72046 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72050 "isa_tms320.tcc"
	>(0x88000000UL, 0xfc000000UL, DecodeOpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72054 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72058 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72063 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72067 "isa_tms320.tcc"
	>(0x8400e0e0UL, 0xfc00e0e0UL, DecodeOpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72071 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72075 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72080 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72084 "isa_tms320.tcc"
	>(0x84000000UL, 0xfc000000UL, DecodeOpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72088 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72092 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72097 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72101 "isa_tms320.tcc"
	>(0x8000e0e0UL, 0xfc00e0e0UL, DecodeOpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72105 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72109 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72114 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72118 "isa_tms320.tcc"
	>(0x80000000UL, 0xfc000000UL, DecodeOpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72122 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72126 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72131 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72135 "isa_tms320.tcc"
	>(0xc60000e0UL, 0xfe0700e0UL, DecodeOpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72139 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72143 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72148 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72152 "isa_tms320.tcc"
	>(0xc6000000UL, 0xfe070000UL, DecodeOpLDI_LDI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72156 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72160 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72165 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72169 "isa_tms320.tcc"
	>(0xc40000e0UL, 0xfe0700e0UL, DecodeOpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72173 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72177 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72182 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72186 "isa_tms320.tcc"
	>(0xc4000000UL, 0xfe070000UL, DecodeOpLDF_LDF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72190 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72194 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72199 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72203 "isa_tms320.tcc"
	>(0xee0000e0UL, 0xfe0000e0UL, DecodeOpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72207 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72211 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72216 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72220 "isa_tms320.tcc"
	>(0xee000000UL, 0xfe000000UL, DecodeOpXOR3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72224 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72228 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72233 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72237 "isa_tms320.tcc"
	>(0xec0000e0UL, 0xfe0000e0UL, DecodeOpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72241 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72245 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72250 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72254 "isa_tms320.tcc"
	>(0xec000000UL, 0xfe000000UL, DecodeOpSUBI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72258 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72262 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72267 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72271 "isa_tms320.tcc"
	>(0xea0000e0UL, 0xfe0000e0UL, DecodeOpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72275 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72279 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72284 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72288 "isa_tms320.tcc"
	>(0xea000000UL, 0xfe000000UL, DecodeOpSUBF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72292 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72296 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72301 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72305 "isa_tms320.tcc"
	>(0xc20000e0UL, 0xfe3800e0UL, DecodeOpSTI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72309 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72313 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72318 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72322 "isa_tms320.tcc"
	>(0xc2000000UL, 0xfe380000UL, DecodeOpSTI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72326 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72330 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72335 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72339 "isa_tms320.tcc"
	>(0xc00000e0UL, 0xfe3800e0UL, DecodeOpSTF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72343 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72347 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72352 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72356 "isa_tms320.tcc"
	>(0xc0000000UL, 0xfe380000UL, DecodeOpSTF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72360 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72364 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72369 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72373 "isa_tms320.tcc"
	>(0xe80000e0UL, 0xfe0000e0UL, DecodeOpOR3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72377 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72381 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72386 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72390 "isa_tms320.tcc"
	>(0xe8000000UL, 0xfe000000UL, DecodeOpOR3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72394 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72398 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72403 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72407 "isa_tms320.tcc"
	>(0xe60000e0UL, 0xfe3800e0UL, DecodeOpNOT_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72411 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72415 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72420 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72424 "isa_tms320.tcc"
	>(0xe6000000UL, 0xfe380000UL, DecodeOpNOT_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72428 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72432 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72437 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72441 "isa_tms320.tcc"
	>(0xe40000e0UL, 0xfe3800e0UL, DecodeOpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72445 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72449 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72454 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72458 "isa_tms320.tcc"
	>(0xe4000000UL, 0xfe380000UL, DecodeOpNEGI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72462 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72466 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72471 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72475 "isa_tms320.tcc"
	>(0xe20000e0UL, 0xfe3800e0UL, DecodeOpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72479 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72483 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72488 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72492 "isa_tms320.tcc"
	>(0xe2000000UL, 0xfe380000UL, DecodeOpNEGF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72496 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72500 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72505 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72509 "isa_tms320.tcc"
	>(0xe00000e0UL, 0xfe0000e0UL, DecodeOpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72513 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72517 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72522 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72526 "isa_tms320.tcc"
	>(0xe0000000UL, 0xfe000000UL, DecodeOpMPYI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72530 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72534 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72539 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72543 "isa_tms320.tcc"
	>(0xde0000e0UL, 0xfe0000e0UL, DecodeOpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72547 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72551 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72556 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72560 "isa_tms320.tcc"
	>(0xde000000UL, 0xfe000000UL, DecodeOpMPYF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72564 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72568 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72573 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72577 "isa_tms320.tcc"
	>(0xdc0000e0UL, 0xfe0000e0UL, DecodeOpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72581 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72585 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72590 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72594 "isa_tms320.tcc"
	>(0xdc000000UL, 0xfe000000UL, DecodeOpLSH3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72598 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72602 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72607 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72611 "isa_tms320.tcc"
	>(0xda0000e0UL, 0xfe3800e0UL, DecodeOpLDI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72615 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72619 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72624 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72628 "isa_tms320.tcc"
	>(0xda000000UL, 0xfe380000UL, DecodeOpLDI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72632 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72636 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72641 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72645 "isa_tms320.tcc"
	>(0xd80000e0UL, 0xfe3800e0UL, DecodeOpLDF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72649 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72653 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72658 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72662 "isa_tms320.tcc"
	>(0xd8000000UL, 0xfe380000UL, DecodeOpLDF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72666 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72670 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72675 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72679 "isa_tms320.tcc"
	>(0xd60000e0UL, 0xfe3800e0UL, DecodeOpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72683 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72687 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72692 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72696 "isa_tms320.tcc"
	>(0xd6000000UL, 0xfe380000UL, DecodeOpFLOAT_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72700 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72704 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72709 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72713 "isa_tms320.tcc"
	>(0xd40000e0UL, 0xfe3800e0UL, DecodeOpFIX_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72717 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72721 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72726 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72730 "isa_tms320.tcc"
	>(0xd4000000UL, 0xfe380000UL, DecodeOpFIX_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72734 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72738 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72743 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72747 "isa_tms320.tcc"
	>(0xd20000e0UL, 0xfe0000e0UL, DecodeOpASH3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72751 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72755 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72760 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72764 "isa_tms320.tcc"
	>(0xd2000000UL, 0xfe000000UL, DecodeOpASH3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72768 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72772 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72777 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72781 "isa_tms320.tcc"
	>(0xd00000e0UL, 0xfe0000e0UL, DecodeOpAND3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72785 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72789 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72794 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72798 "isa_tms320.tcc"
	>(0xd0000000UL, 0xfe000000UL, DecodeOpAND3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72802 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72806 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72811 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72815 "isa_tms320.tcc"
	>(0xce0000e0UL, 0xfe0000e0UL, DecodeOpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72819 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72823 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72828 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72832 "isa_tms320.tcc"
	>(0xce000000UL, 0xfe000000UL, DecodeOpADDI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72836 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72840 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72845 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72849 "isa_tms320.tcc"
	>(0xcc0000e0UL, 0xfe0000e0UL, DecodeOpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72853 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72857 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72862 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72866 "isa_tms320.tcc"
	>(0xcc000000UL, 0xfe000000UL, DecodeOpADDF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72870 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72874 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72879 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72883 "isa_tms320.tcc"
	>(0xca0000e0UL, 0xfe3800e0UL, DecodeOpABSI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72887 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72891 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72896 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72900 "isa_tms320.tcc"
	>(0xca000000UL, 0xfe380000UL, DecodeOpABSI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72904 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72908 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72913 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72917 "isa_tms320.tcc"
	>(0xc80000e0UL, 0xfe3800e0UL, DecodeOpABSF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72921 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72925 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72930 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72934 "isa_tms320.tcc"
	>(0xc8000000UL, 0xfe380000UL, DecodeOpABSF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72938 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72942 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72947 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72951 "isa_tms320.tcc"
	>(0x15c00000UL, 0xffe00000UL, DecodeOpSTII_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72955 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72959 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72964 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72968 "isa_tms320.tcc"
	>(0x15a00000UL, 0xffe00000UL, DecodeOpSTII_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72972 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72976 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72981 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72985 "isa_tms320.tcc"
	>(0x14c00000UL, 0xffe00000UL, DecodeOpSTFI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72989 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72993 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72998 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73002 "isa_tms320.tcc"
	>(0x14a00000UL, 0xffe00000UL, DecodeOpSTFI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73006 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73010 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73015 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73019 "isa_tms320.tcc"
	>(0x16000000UL, 0xffffffffUL, DecodeOpSIGI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73023 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73027 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73032 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73036 "isa_tms320.tcc"
	>(0x8c00000UL, 0xffe00000UL, DecodeOpLDII_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73040 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73044 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73049 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73053 "isa_tms320.tcc"
	>(0x8a00000UL, 0xffe00000UL, DecodeOpLDII_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73057 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73061 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73066 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73070 "isa_tms320.tcc"
	>(0x7c00000UL, 0xffe00000UL, DecodeOpLDFI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73074 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73078 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73083 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73087 "isa_tms320.tcc"
	>(0x7a00000UL, 0xffe00000UL, DecodeOpLDFI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73091 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73095 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73100 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73104 "isa_tms320.tcc"
	>(0x10800000UL, 0xffffffffUL, DecodeOpMAXSPEED<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73108 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73112 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73117 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73121 "isa_tms320.tcc"
	>(0x10800001UL, 0xffffffffUL, DecodeOpLOPOWER<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73125 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73129 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73134 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73138 "isa_tms320.tcc"
	>(0x6000001UL, 0xffffffffUL, DecodeOpIDLE2<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73142 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73146 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73151 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73155 "isa_tms320.tcc"
	>(0x74000020UL, 0xffe0ffe0UL, DecodeOpTRAPcond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73159 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73163 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73168 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73172 "isa_tms320.tcc"
	>(0x66000000UL, 0xffffffffUL, DecodeOpSWI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73176 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73180 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73185 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73189 "isa_tms320.tcc"
	>(0x13fb0000UL, 0xffff0000UL, DecodeOpRPTS_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73193 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73197 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73202 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73206 "isa_tms320.tcc"
	>(0x13db0000UL, 0xffff0000UL, DecodeOpRPTS_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73210 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73214 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73219 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73223 "isa_tms320.tcc"
	>(0x13bb0000UL, 0xffff0000UL, DecodeOpRPTS_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73227 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73231 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73236 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73240 "isa_tms320.tcc"
	>(0x139b0000UL, 0xffffffe0UL, DecodeOpRPTS_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73244 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73248 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73253 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73257 "isa_tms320.tcc"
	>(0x64000000UL, 0xff000000UL, DecodeOpRPTB<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73261 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73265 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73270 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73274 "isa_tms320.tcc"
	>(0x78800000UL, 0xffe0ffffUL, DecodeOpRETScond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73278 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73282 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73287 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73291 "isa_tms320.tcc"
	>(0x78000000UL, 0xffe0ffffUL, DecodeOpRETIcond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73295 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73299 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73304 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73308 "isa_tms320.tcc"
	>(0xcc00000UL, 0xffff0000UL, DecodeOpNOP_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73312 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73316 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73321 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73325 "isa_tms320.tcc"
	>(0xc800000UL, 0xffffffe0UL, DecodeOpNOP_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73329 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73333 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73338 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73342 "isa_tms320.tcc"
	>(0x6000000UL, 0xffffffffUL, DecodeOpIDLE<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73346 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73350 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73355 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73359 "isa_tms320.tcc"
	>(0x1b400000UL, 0xffff0000UL, DecodeOpIACK_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73363 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73367 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73372 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73376 "isa_tms320.tcc"
	>(0x1b200000UL, 0xffff0000UL, DecodeOpIACK_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73380 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73384 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73389 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73393 "isa_tms320.tcc"
	>(0x6e200000UL, 0xfe200000UL, DecodeOpDBcondD_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73397 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73401 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73406 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73410 "isa_tms320.tcc"
	>(0x6c200000UL, 0xfe20ffe0UL, DecodeOpDBcondD_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73414 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73418 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73423 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73427 "isa_tms320.tcc"
	>(0x6e000000UL, 0xfe200000UL, DecodeOpDBcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73431 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73435 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73440 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73444 "isa_tms320.tcc"
	>(0x6c000000UL, 0xfe20ffe0UL, DecodeOpDBcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73448 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73452 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73457 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73461 "isa_tms320.tcc"
	>(0x72000000UL, 0xffe00000UL, DecodeOpCALLcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73465 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73469 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73474 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73478 "isa_tms320.tcc"
	>(0x70000000UL, 0xffe0ffe0UL, DecodeOpCALLcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73482 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73486 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73491 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73495 "isa_tms320.tcc"
	>(0x62000000UL, 0xff000000UL, DecodeOpCALL<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73499 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73503 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73508 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73512 "isa_tms320.tcc"
	>(0x61000000UL, 0xff000000UL, DecodeOpBRD<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73516 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73520 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73525 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73529 "isa_tms320.tcc"
	>(0x60000000UL, 0xff000000UL, DecodeOpBR<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73533 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73537 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73542 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73546 "isa_tms320.tcc"
	>(0x6a200000UL, 0xffe00000UL, DecodeOpBcondD_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73550 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73554 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73559 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73563 "isa_tms320.tcc"
	>(0x68200000UL, 0xffe0ffe0UL, DecodeOpBcondD_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73567 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73571 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73576 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73580 "isa_tms320.tcc"
	>(0x6a000000UL, 0xffe00000UL, DecodeOpBcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73584 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73588 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73593 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73597 "isa_tms320.tcc"
	>(0x68000000UL, 0xffe0ffe0UL, DecodeOpBcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73601 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73605 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73610 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73614 "isa_tms320.tcc"
	>(0x28600000UL, 0xffe00000UL, DecodeOpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73618 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73622 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73627 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73631 "isa_tms320.tcc"
	>(0x28400000UL, 0xffe0e000UL, DecodeOpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73635 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73639 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73644 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73648 "isa_tms320.tcc"
	>(0x28200000UL, 0xffe000e0UL, DecodeOpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73652 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73656 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73661 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73665 "isa_tms320.tcc"
	>(0x28000000UL, 0xffe0e0e0UL, DecodeOpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73669 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73673 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73678 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73682 "isa_tms320.tcc"
	>(0x27e00000UL, 0xffff0000UL, DecodeOpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73686 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73690 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73695 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73699 "isa_tms320.tcc"
	>(0x27c00000UL, 0xffffe000UL, DecodeOpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73703 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73707 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73712 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73716 "isa_tms320.tcc"
	>(0x27a00000UL, 0xffff00e0UL, DecodeOpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73720 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73724 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73729 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73733 "isa_tms320.tcc"
	>(0x27800000UL, 0xffffe0e0UL, DecodeOpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73737 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73741 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73746 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73750 "isa_tms320.tcc"
	>(0x27600000UL, 0xffe00000UL, DecodeOpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73754 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73758 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73763 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73767 "isa_tms320.tcc"
	>(0x27400000UL, 0xffe0e000UL, DecodeOpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73771 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73775 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73780 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73784 "isa_tms320.tcc"
	>(0x27200000UL, 0xffe000e0UL, DecodeOpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73788 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73792 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73797 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73801 "isa_tms320.tcc"
	>(0x27000000UL, 0xffe0e0e0UL, DecodeOpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73805 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73809 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73814 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73818 "isa_tms320.tcc"
	>(0x26e00000UL, 0xfff80000UL, DecodeOpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73822 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73826 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73831 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73835 "isa_tms320.tcc"
	>(0x26c00000UL, 0xfff8f800UL, DecodeOpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73839 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73843 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73848 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73852 "isa_tms320.tcc"
	>(0x26a00000UL, 0xfff800f8UL, DecodeOpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73856 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73860 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73865 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73869 "isa_tms320.tcc"
	>(0x26800000UL, 0xfff8f8f8UL, DecodeOpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73873 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73877 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73882 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73886 "isa_tms320.tcc"
	>(0x26600000UL, 0xffe00000UL, DecodeOpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73890 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73894 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73899 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73903 "isa_tms320.tcc"
	>(0x26400000UL, 0xffe0e000UL, DecodeOpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73907 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73911 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73916 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73920 "isa_tms320.tcc"
	>(0x26200000UL, 0xffe000e0UL, DecodeOpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73924 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73928 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73933 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73937 "isa_tms320.tcc"
	>(0x26000000UL, 0xffe0e0e0UL, DecodeOpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73941 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73945 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73950 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73954 "isa_tms320.tcc"
	>(0x25e00000UL, 0xffe00000UL, DecodeOpOR3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73958 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73962 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73967 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73971 "isa_tms320.tcc"
	>(0x25c00000UL, 0xffe0e000UL, DecodeOpOR3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73975 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73979 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73984 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73988 "isa_tms320.tcc"
	>(0x25a00000UL, 0xffe000e0UL, DecodeOpOR3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73992 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73996 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74001 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74005 "isa_tms320.tcc"
	>(0x25800000UL, 0xffe0e0e0UL, DecodeOpOR3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74009 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74013 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74018 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74022 "isa_tms320.tcc"
	>(0x25600000UL, 0xffe00000UL, DecodeOpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74026 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74030 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74035 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74039 "isa_tms320.tcc"
	>(0x25400000UL, 0xffe0e000UL, DecodeOpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74043 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74047 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74052 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74056 "isa_tms320.tcc"
	>(0x25200000UL, 0xffe000e0UL, DecodeOpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74060 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74064 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74069 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74073 "isa_tms320.tcc"
	>(0x25000000UL, 0xffe0e0e0UL, DecodeOpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74077 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74081 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74086 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74090 "isa_tms320.tcc"
	>(0x24e00000UL, 0xfff80000UL, DecodeOpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74094 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74098 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74103 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74107 "isa_tms320.tcc"
	>(0x24c00000UL, 0xfff8f800UL, DecodeOpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74111 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74115 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74120 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74124 "isa_tms320.tcc"
	>(0x24a00000UL, 0xfff800f8UL, DecodeOpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74128 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74132 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74137 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74141 "isa_tms320.tcc"
	>(0x24800000UL, 0xfff8f8f8UL, DecodeOpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74145 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74149 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74154 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74158 "isa_tms320.tcc"
	>(0x24600000UL, 0xffe00000UL, DecodeOpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74162 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74166 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74171 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74175 "isa_tms320.tcc"
	>(0x24400000UL, 0xffe0e000UL, DecodeOpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74179 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74183 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74188 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74192 "isa_tms320.tcc"
	>(0x24200000UL, 0xffe000e0UL, DecodeOpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74196 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74200 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74205 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74209 "isa_tms320.tcc"
	>(0x24000000UL, 0xffe0e0e0UL, DecodeOpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74213 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74217 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74222 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74226 "isa_tms320.tcc"
	>(0x23e00000UL, 0xffff0000UL, DecodeOpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74230 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74234 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74239 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74243 "isa_tms320.tcc"
	>(0x23c00000UL, 0xffffe000UL, DecodeOpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74247 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74251 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74256 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74260 "isa_tms320.tcc"
	>(0x23a00000UL, 0xffff00e0UL, DecodeOpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74264 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74268 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74273 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74277 "isa_tms320.tcc"
	>(0x23800000UL, 0xffffe0e0UL, DecodeOpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74281 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74285 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74290 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74294 "isa_tms320.tcc"
	>(0x23600000UL, 0xffff0000UL, DecodeOpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74298 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74302 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74307 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74311 "isa_tms320.tcc"
	>(0x23400000UL, 0xfffff800UL, DecodeOpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74315 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74319 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74324 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74328 "isa_tms320.tcc"
	>(0x23200000UL, 0xffff00f8UL, DecodeOpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74332 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74336 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74341 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74345 "isa_tms320.tcc"
	>(0x23000000UL, 0xfffff8f8UL, DecodeOpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74349 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74353 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74358 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74362 "isa_tms320.tcc"
	>(0x22e00000UL, 0xffe00000UL, DecodeOpASH3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74366 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74370 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74375 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74379 "isa_tms320.tcc"
	>(0x22c00000UL, 0xffe0e000UL, DecodeOpASH3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74383 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74387 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74392 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74396 "isa_tms320.tcc"
	>(0x22a00000UL, 0xffe000e0UL, DecodeOpASH3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74400 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74404 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74409 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74413 "isa_tms320.tcc"
	>(0x22800000UL, 0xffe0e0e0UL, DecodeOpASH3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74417 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74421 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74426 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74430 "isa_tms320.tcc"
	>(0x22600000UL, 0xffe00000UL, DecodeOpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74434 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74438 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74443 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74447 "isa_tms320.tcc"
	>(0x22400000UL, 0xffe0e000UL, DecodeOpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74451 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74455 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74460 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74464 "isa_tms320.tcc"
	>(0x22200000UL, 0xffe000e0UL, DecodeOpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74468 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74472 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74477 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74481 "isa_tms320.tcc"
	>(0x22000000UL, 0xffe0e0e0UL, DecodeOpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74485 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74489 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74494 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74498 "isa_tms320.tcc"
	>(0x21e00000UL, 0xffe00000UL, DecodeOpAND3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74502 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74506 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74511 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74515 "isa_tms320.tcc"
	>(0x21c00000UL, 0xffe0e000UL, DecodeOpAND3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74519 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74523 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74528 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74532 "isa_tms320.tcc"
	>(0x21a00000UL, 0xffe000e0UL, DecodeOpAND3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74536 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74540 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74545 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74549 "isa_tms320.tcc"
	>(0x21800000UL, 0xffe0e0e0UL, DecodeOpAND3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74553 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74557 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74562 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74566 "isa_tms320.tcc"
	>(0x21600000UL, 0xffe00000UL, DecodeOpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74570 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74574 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74579 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74583 "isa_tms320.tcc"
	>(0x21400000UL, 0xffe0e000UL, DecodeOpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74587 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74591 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74596 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74600 "isa_tms320.tcc"
	>(0x21200000UL, 0xffe000e0UL, DecodeOpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74604 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74608 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74613 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74617 "isa_tms320.tcc"
	>(0x21000000UL, 0xffe0e0e0UL, DecodeOpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74621 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74625 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74630 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74634 "isa_tms320.tcc"
	>(0x20e00000UL, 0xfff80000UL, DecodeOpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74638 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74642 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74647 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74651 "isa_tms320.tcc"
	>(0x20c00000UL, 0xfff8f800UL, DecodeOpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74655 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74659 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74664 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74668 "isa_tms320.tcc"
	>(0x20a00000UL, 0xfff800f8UL, DecodeOpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74672 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74676 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74681 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74685 "isa_tms320.tcc"
	>(0x20800000UL, 0xfff8f8f8UL, DecodeOpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74689 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74693 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74698 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74702 "isa_tms320.tcc"
	>(0x20600000UL, 0xffe00000UL, DecodeOpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74706 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74710 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74715 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74719 "isa_tms320.tcc"
	>(0x20400000UL, 0xffe0e000UL, DecodeOpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74723 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74727 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74732 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74736 "isa_tms320.tcc"
	>(0x20200000UL, 0xffe000e0UL, DecodeOpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74740 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74744 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74749 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74753 "isa_tms320.tcc"
	>(0x20000000UL, 0xffe0e0e0UL, DecodeOpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74757 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74761 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74766 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74770 "isa_tms320.tcc"
	>(0x1ae00000UL, 0xffe00000UL, DecodeOpXOR_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74774 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74778 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74783 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74787 "isa_tms320.tcc"
	>(0x1ac00000UL, 0xffe00000UL, DecodeOpXOR_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74791 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74795 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74800 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74804 "isa_tms320.tcc"
	>(0x1aa00000UL, 0xffe00000UL, DecodeOpXOR_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74808 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74812 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74817 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74821 "isa_tms320.tcc"
	>(0x1a800000UL, 0xffe0ffe0UL, DecodeOpXOR_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74825 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74829 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74834 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74838 "isa_tms320.tcc"
	>(0x1a600000UL, 0xffe00000UL, DecodeOpTSTB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74842 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74846 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74851 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74855 "isa_tms320.tcc"
	>(0x1a400000UL, 0xffe00000UL, DecodeOpTSTB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74859 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74863 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74868 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74872 "isa_tms320.tcc"
	>(0x1a200000UL, 0xffe00000UL, DecodeOpTSTB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74876 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74880 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74885 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74889 "isa_tms320.tcc"
	>(0x1a000000UL, 0xffe0ffe0UL, DecodeOpTSTB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74893 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74897 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74902 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74906 "isa_tms320.tcc"
	>(0x19e00000UL, 0xffe00000UL, DecodeOpSUBRI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74910 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74914 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74919 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74923 "isa_tms320.tcc"
	>(0x19c00000UL, 0xffe00000UL, DecodeOpSUBRI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74927 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74931 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74936 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74940 "isa_tms320.tcc"
	>(0x19a00000UL, 0xffe00000UL, DecodeOpSUBRI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74944 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74948 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74953 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74957 "isa_tms320.tcc"
	>(0x19800000UL, 0xffe0ffe0UL, DecodeOpSUBRI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74961 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74965 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74970 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74974 "isa_tms320.tcc"
	>(0x19600000UL, 0xfff80000UL, DecodeOpSUBRF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74978 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74982 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74987 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74991 "isa_tms320.tcc"
	>(0x19400000UL, 0xfff80000UL, DecodeOpSUBRF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74995 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74999 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75004 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75008 "isa_tms320.tcc"
	>(0x19200000UL, 0xfff80000UL, DecodeOpSUBRF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75012 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75016 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75021 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75025 "isa_tms320.tcc"
	>(0x19000000UL, 0xfff8fff8UL, DecodeOpSUBRF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75029 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75033 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75038 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75042 "isa_tms320.tcc"
	>(0x18e00000UL, 0xffe00000UL, DecodeOpSUBRB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75046 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75050 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75055 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75059 "isa_tms320.tcc"
	>(0x18c00000UL, 0xffe00000UL, DecodeOpSUBRB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75063 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75067 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75072 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75076 "isa_tms320.tcc"
	>(0x18a00000UL, 0xffe00000UL, DecodeOpSUBRB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75080 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75084 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75089 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75093 "isa_tms320.tcc"
	>(0x18800000UL, 0xffe0ffe0UL, DecodeOpSUBRB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75097 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75101 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75106 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75110 "isa_tms320.tcc"
	>(0x18600000UL, 0xffe00000UL, DecodeOpSUBI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75114 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75118 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75123 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75127 "isa_tms320.tcc"
	>(0x18400000UL, 0xffe00000UL, DecodeOpSUBI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75131 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75135 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75140 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75144 "isa_tms320.tcc"
	>(0x18200000UL, 0xffe00000UL, DecodeOpSUBI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75148 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75152 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75157 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75161 "isa_tms320.tcc"
	>(0x18000000UL, 0xffe0ffe0UL, DecodeOpSUBI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75165 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75169 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75174 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75178 "isa_tms320.tcc"
	>(0x17e00000UL, 0xfff80000UL, DecodeOpSUBF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75182 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75186 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75191 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75195 "isa_tms320.tcc"
	>(0x17c00000UL, 0xfff80000UL, DecodeOpSUBF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75199 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75203 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75208 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75212 "isa_tms320.tcc"
	>(0x17a00000UL, 0xfff80000UL, DecodeOpSUBF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75216 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75220 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75225 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75229 "isa_tms320.tcc"
	>(0x17800000UL, 0xfff8fff8UL, DecodeOpSUBF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75233 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75237 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75242 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75246 "isa_tms320.tcc"
	>(0x17600000UL, 0xffe00000UL, DecodeOpSUBC_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75250 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75254 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75259 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75263 "isa_tms320.tcc"
	>(0x17400000UL, 0xffe00000UL, DecodeOpSUBC_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75267 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75271 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75276 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75280 "isa_tms320.tcc"
	>(0x17200000UL, 0xffe00000UL, DecodeOpSUBC_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75284 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75288 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75293 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75297 "isa_tms320.tcc"
	>(0x17000000UL, 0xffe0ffe0UL, DecodeOpSUBC_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75301 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75305 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75310 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75314 "isa_tms320.tcc"
	>(0x16e00000UL, 0xffe00000UL, DecodeOpSUBB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75318 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75322 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75327 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75331 "isa_tms320.tcc"
	>(0x16c00000UL, 0xffe00000UL, DecodeOpSUBB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75335 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75339 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75344 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75348 "isa_tms320.tcc"
	>(0x16a00000UL, 0xffe00000UL, DecodeOpSUBB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75352 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75356 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75361 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75365 "isa_tms320.tcc"
	>(0x16800000UL, 0xffe0ffe0UL, DecodeOpSUBB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75369 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75373 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75378 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75382 "isa_tms320.tcc"
	>(0x1360ffffUL, 0xffe0ffffUL, DecodeOpRORC<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75386 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75390 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75395 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75399 "isa_tms320.tcc"
	>(0x12e0ffffUL, 0xffe0ffffUL, DecodeOpROR<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75403 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75407 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75412 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75416 "isa_tms320.tcc"
	>(0x12600001UL, 0xffe0ffffUL, DecodeOpROLC<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75420 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75424 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75429 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75433 "isa_tms320.tcc"
	>(0x11e00001UL, 0xffe0ffffUL, DecodeOpROL<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75437 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75441 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75446 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75450 "isa_tms320.tcc"
	>(0x11600000UL, 0xfff80000UL, DecodeOpRND_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75454 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75458 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75463 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75467 "isa_tms320.tcc"
	>(0x11400000UL, 0xfff80000UL, DecodeOpRND_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75471 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75475 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75480 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75484 "isa_tms320.tcc"
	>(0x11200000UL, 0xfff80000UL, DecodeOpRND_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75488 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75492 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75497 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75501 "isa_tms320.tcc"
	>(0x11000000UL, 0xfff8fff8UL, DecodeOpRND_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75505 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75509 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75514 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75518 "isa_tms320.tcc"
	>(0x10600000UL, 0xffe00000UL, DecodeOpOR_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75522 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75526 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75531 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75535 "isa_tms320.tcc"
	>(0x10400000UL, 0xffe00000UL, DecodeOpOR_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75539 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75543 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75548 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75552 "isa_tms320.tcc"
	>(0x10200000UL, 0xffe00000UL, DecodeOpOR_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75556 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75560 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75565 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75569 "isa_tms320.tcc"
	>(0x10000000UL, 0xffe0ffe0UL, DecodeOpOR_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75573 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75577 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75582 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75586 "isa_tms320.tcc"
	>(0xde00000UL, 0xffe00000UL, DecodeOpNOT_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75590 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75594 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75599 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75603 "isa_tms320.tcc"
	>(0xdc00000UL, 0xffe00000UL, DecodeOpNOT_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75607 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75611 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75616 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75620 "isa_tms320.tcc"
	>(0xda00000UL, 0xffe00000UL, DecodeOpNOT_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75624 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75628 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75633 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75637 "isa_tms320.tcc"
	>(0xd800000UL, 0xffe0ffe0UL, DecodeOpNOT_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75641 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75645 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75650 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75654 "isa_tms320.tcc"
	>(0xd600000UL, 0xfff80000UL, DecodeOpNORM_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75658 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75662 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75667 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75671 "isa_tms320.tcc"
	>(0xd400000UL, 0xfff80000UL, DecodeOpNORM_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75675 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75679 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75684 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75688 "isa_tms320.tcc"
	>(0xd200000UL, 0xfff80000UL, DecodeOpNORM_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75692 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75696 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75701 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75705 "isa_tms320.tcc"
	>(0xd000000UL, 0xfff8fff8UL, DecodeOpNORM_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75709 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75713 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75718 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75722 "isa_tms320.tcc"
	>(0xc600000UL, 0xffe00000UL, DecodeOpNEGI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75726 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75730 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75735 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75739 "isa_tms320.tcc"
	>(0xc400000UL, 0xffe00000UL, DecodeOpNEGI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75743 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75747 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75752 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75756 "isa_tms320.tcc"
	>(0xc200000UL, 0xffe00000UL, DecodeOpNEGI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75760 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75764 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75769 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75773 "isa_tms320.tcc"
	>(0xc000000UL, 0xffe0ffe0UL, DecodeOpNEGI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75777 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75781 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75786 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75790 "isa_tms320.tcc"
	>(0xbe00000UL, 0xfff80000UL, DecodeOpNEGF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75794 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75798 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75803 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75807 "isa_tms320.tcc"
	>(0xbc00000UL, 0xfff80000UL, DecodeOpNEGF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75811 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75815 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75820 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75824 "isa_tms320.tcc"
	>(0xba00000UL, 0xfff80000UL, DecodeOpNEGF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75828 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75832 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75837 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75841 "isa_tms320.tcc"
	>(0xb800000UL, 0xfff8fff8UL, DecodeOpNEGF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75845 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75849 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75854 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75858 "isa_tms320.tcc"
	>(0xb600000UL, 0xffe00000UL, DecodeOpNEGB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75862 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75866 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75871 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75875 "isa_tms320.tcc"
	>(0xb400000UL, 0xffe00000UL, DecodeOpNEGB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75879 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75883 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75888 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75892 "isa_tms320.tcc"
	>(0xb200000UL, 0xffe00000UL, DecodeOpNEGB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75896 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75900 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75905 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75909 "isa_tms320.tcc"
	>(0xb000000UL, 0xffe0ffe0UL, DecodeOpNEGB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75913 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75917 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75922 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75926 "isa_tms320.tcc"
	>(0xae00000UL, 0xffe00000UL, DecodeOpMPYI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75930 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75934 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75939 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75943 "isa_tms320.tcc"
	>(0xac00000UL, 0xffe00000UL, DecodeOpMPYI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75947 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75951 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75956 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75960 "isa_tms320.tcc"
	>(0xaa00000UL, 0xffe00000UL, DecodeOpMPYI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75964 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75968 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75973 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75977 "isa_tms320.tcc"
	>(0xa800000UL, 0xffe0ffe0UL, DecodeOpMPYI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75981 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75985 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75990 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75994 "isa_tms320.tcc"
	>(0xa600000UL, 0xfff80000UL, DecodeOpMPYF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75998 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76002 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76007 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76011 "isa_tms320.tcc"
	>(0xa400000UL, 0xfff80000UL, DecodeOpMPYF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76015 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76019 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76024 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76028 "isa_tms320.tcc"
	>(0xa200000UL, 0xfff80000UL, DecodeOpMPYF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76032 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76036 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76041 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76045 "isa_tms320.tcc"
	>(0xa000000UL, 0xfff8fff8UL, DecodeOpMPYF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76049 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76053 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76058 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76062 "isa_tms320.tcc"
	>(0x9e00000UL, 0xffe00000UL, DecodeOpLSH_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76066 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76070 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76075 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76079 "isa_tms320.tcc"
	>(0x9c00000UL, 0xffe00000UL, DecodeOpLSH_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76083 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76087 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76092 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76096 "isa_tms320.tcc"
	>(0x9a00000UL, 0xffe00000UL, DecodeOpLSH_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76100 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76104 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76109 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76113 "isa_tms320.tcc"
	>(0x9800000UL, 0xffe0ffe0UL, DecodeOpLSH_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76117 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76121 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76126 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76130 "isa_tms320.tcc"
	>(0x5e00000UL, 0xfff80000UL, DecodeOpFLOAT_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76134 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76138 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76143 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76147 "isa_tms320.tcc"
	>(0x5c00000UL, 0xfff80000UL, DecodeOpFLOAT_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76151 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76155 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76160 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76164 "isa_tms320.tcc"
	>(0x5a00000UL, 0xfff80000UL, DecodeOpFLOAT_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76168 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76172 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76177 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76181 "isa_tms320.tcc"
	>(0x5800000UL, 0xfff8fff8UL, DecodeOpFLOAT_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76185 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76189 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76194 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76198 "isa_tms320.tcc"
	>(0x5600000UL, 0xffe00000UL, DecodeOpFIX_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76202 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76206 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76211 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76215 "isa_tms320.tcc"
	>(0x5400000UL, 0xffe00000UL, DecodeOpFIX_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76219 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76223 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76228 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76232 "isa_tms320.tcc"
	>(0x5200000UL, 0xffe00000UL, DecodeOpFIX_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76236 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76240 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76245 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76249 "isa_tms320.tcc"
	>(0x5000000UL, 0xffe0fff8UL, DecodeOpFIX_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76253 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76257 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76262 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76266 "isa_tms320.tcc"
	>(0x4e00000UL, 0xffe00000UL, DecodeOpCMPI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76270 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76274 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76279 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76283 "isa_tms320.tcc"
	>(0x4c00000UL, 0xffe00000UL, DecodeOpCMPI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76287 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76291 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76296 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76300 "isa_tms320.tcc"
	>(0x4a00000UL, 0xffe00000UL, DecodeOpCMPI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76304 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76308 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76313 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76317 "isa_tms320.tcc"
	>(0x4800000UL, 0xffe0ffe0UL, DecodeOpCMPI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76321 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76325 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76330 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76334 "isa_tms320.tcc"
	>(0x4600000UL, 0xfff80000UL, DecodeOpCMPF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76338 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76342 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76347 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76351 "isa_tms320.tcc"
	>(0x4400000UL, 0xfff80000UL, DecodeOpCMPF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76355 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76359 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76364 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76368 "isa_tms320.tcc"
	>(0x4200000UL, 0xfff80000UL, DecodeOpCMPF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76372 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76376 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76381 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76385 "isa_tms320.tcc"
	>(0x4000000UL, 0xfff8fff8UL, DecodeOpCMPF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76389 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76393 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76398 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76402 "isa_tms320.tcc"
	>(0x3e00000UL, 0xffe00000UL, DecodeOpASH_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76406 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76410 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76415 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76419 "isa_tms320.tcc"
	>(0x3c00000UL, 0xffe00000UL, DecodeOpASH_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76423 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76427 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76432 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76436 "isa_tms320.tcc"
	>(0x3a00000UL, 0xffe00000UL, DecodeOpASH_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76440 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76444 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76449 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76453 "isa_tms320.tcc"
	>(0x3800000UL, 0xffe0ffe0UL, DecodeOpASH_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76457 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76461 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76466 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76470 "isa_tms320.tcc"
	>(0x3600000UL, 0xffe00000UL, DecodeOpANDN_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76474 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76478 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76483 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76487 "isa_tms320.tcc"
	>(0x3400000UL, 0xffe00000UL, DecodeOpANDN_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76491 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76495 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76500 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76504 "isa_tms320.tcc"
	>(0x3200000UL, 0xffe00000UL, DecodeOpANDN_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76508 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76512 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76517 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76521 "isa_tms320.tcc"
	>(0x3000000UL, 0xffe0ffe0UL, DecodeOpANDN_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76525 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76529 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76534 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76538 "isa_tms320.tcc"
	>(0x2e00000UL, 0xffe00000UL, DecodeOpAND_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76542 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76546 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76551 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76555 "isa_tms320.tcc"
	>(0x2c00000UL, 0xffe00000UL, DecodeOpAND_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76559 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76563 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76568 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76572 "isa_tms320.tcc"
	>(0x2a00000UL, 0xffe00000UL, DecodeOpAND_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76576 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76580 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76585 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76589 "isa_tms320.tcc"
	>(0x2800000UL, 0xffe0ffe0UL, DecodeOpAND_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76593 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76597 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76602 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76606 "isa_tms320.tcc"
	>(0x2600000UL, 0xffe00000UL, DecodeOpADDI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76610 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76614 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76619 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76623 "isa_tms320.tcc"
	>(0x2400000UL, 0xffe00000UL, DecodeOpADDI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76627 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76631 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76636 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76640 "isa_tms320.tcc"
	>(0x2200000UL, 0xffe00000UL, DecodeOpADDI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76644 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76648 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76653 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76657 "isa_tms320.tcc"
	>(0x2000000UL, 0xffe0ffe0UL, DecodeOpADDI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76661 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76665 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76670 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76674 "isa_tms320.tcc"
	>(0x1e00000UL, 0xfff80000UL, DecodeOpADDF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76678 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76682 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76687 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76691 "isa_tms320.tcc"
	>(0x1c00000UL, 0xfff80000UL, DecodeOpADDF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76695 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76699 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76704 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76708 "isa_tms320.tcc"
	>(0x1a00000UL, 0xfff80000UL, DecodeOpADDF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76712 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76716 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76721 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76725 "isa_tms320.tcc"
	>(0x1800000UL, 0xfff8fff8UL, DecodeOpADDF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76729 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76733 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76738 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76742 "isa_tms320.tcc"
	>(0x1600000UL, 0xffe00000UL, DecodeOpADDC_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76746 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76750 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76755 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76759 "isa_tms320.tcc"
	>(0x1400000UL, 0xffe00000UL, DecodeOpADDC_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76763 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76767 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76772 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76776 "isa_tms320.tcc"
	>(0x1200000UL, 0xffe00000UL, DecodeOpADDC_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76780 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76784 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76789 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76793 "isa_tms320.tcc"
	>(0x1000000UL, 0xffe0ffe0UL, DecodeOpADDC_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76797 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76801 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76806 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76810 "isa_tms320.tcc"
	>(0xe00000UL, 0xffe00000UL, DecodeOpABSI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76814 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76818 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76823 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76827 "isa_tms320.tcc"
	>(0xc00000UL, 0xffe00000UL, DecodeOpABSI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76831 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76835 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76840 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76844 "isa_tms320.tcc"
	>(0xa00000UL, 0xffe00000UL, DecodeOpABSI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76848 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76852 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76857 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76861 "isa_tms320.tcc"
	>(0x800000UL, 0xffe0ffe0UL, DecodeOpABSI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76865 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76869 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76874 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76878 "isa_tms320.tcc"
	>(0x600000UL, 0xfff80000UL, DecodeOpABSF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76882 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76886 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76891 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76895 "isa_tms320.tcc"
	>(0x400000UL, 0xfff80000UL, DecodeOpABSF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76899 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76903 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76908 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76912 "isa_tms320.tcc"
	>(0x200000UL, 0xfff80000UL, DecodeOpABSF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76916 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76920 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76925 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76929 "isa_tms320.tcc"
	>(0x0UL, 0xfff8fff8UL, DecodeOpABSF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76933 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76937 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76942 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76946 "isa_tms320.tcc"
	>(0x15400000UL, 0xffe00000UL, DecodeOpSTI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76950 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76954 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76959 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76963 "isa_tms320.tcc"
	>(0x15200000UL, 0xfff80000UL, DecodeOpSTI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76967 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76971 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76976 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76980 "isa_tms320.tcc"
	>(0x14400000UL, 0xfff80000UL, DecodeOpSTF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76984 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76988 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76993 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76997 "isa_tms320.tcc"
	>(0x14200000UL, 0xffe00000UL, DecodeOpSTF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77001 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77005 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77010 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77014 "isa_tms320.tcc"
	>(0xfa00000UL, 0xfff8ffffUL, DecodeOpPUSHF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77018 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77022 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77027 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77031 "isa_tms320.tcc"
	>(0xf200000UL, 0xffe0ffffUL, DecodeOpPUSH<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77035 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77039 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77044 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77048 "isa_tms320.tcc"
	>(0xea00000UL, 0xfff8ffffUL, DecodeOpPOPF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77052 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77056 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77061 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77065 "isa_tms320.tcc"
	>(0xe200000UL, 0xffe0ffffUL, DecodeOpPOP<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77069 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77073 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77078 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77082 "isa_tms320.tcc"
	>(0x8700000UL, 0xffffff00UL, DecodeOpLDP<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77086 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77090 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77095 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77099 "isa_tms320.tcc"
	>(0x9600000UL, 0xfff8f000UL, DecodeOpLDM_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77103 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77107 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77112 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77116 "isa_tms320.tcc"
	>(0x9400000UL, 0xfff80000UL, DecodeOpLDM_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77120 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77124 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77129 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77133 "isa_tms320.tcc"
	>(0x9200000UL, 0xfff80000UL, DecodeOpLDM_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77137 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77141 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77146 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77150 "isa_tms320.tcc"
	>(0x9000000UL, 0xfff8ffe0UL, DecodeOpLDM_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77154 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77158 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77163 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77167 "isa_tms320.tcc"
	>(0x50600000UL, 0xf0600000UL, DecodeOpLDIcond_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77171 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77175 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77180 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77184 "isa_tms320.tcc"
	>(0x50400000UL, 0xf0600000UL, DecodeOpLDIcond_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77188 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77192 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77197 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77201 "isa_tms320.tcc"
	>(0x50200000UL, 0xf0600000UL, DecodeOpLDIcond_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77205 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77209 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77214 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77218 "isa_tms320.tcc"
	>(0x50000000UL, 0xf060ffe0UL, DecodeOpLDIcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77222 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77226 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77231 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77235 "isa_tms320.tcc"
	>(0x8600000UL, 0xffe00000UL, DecodeOpLDI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77239 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77243 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77248 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77252 "isa_tms320.tcc"
	>(0x8400000UL, 0xffe00000UL, DecodeOpLDI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77256 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77260 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77265 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77269 "isa_tms320.tcc"
	>(0x8200000UL, 0xffe00000UL, DecodeOpLDI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77273 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77277 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77282 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77286 "isa_tms320.tcc"
	>(0x8000000UL, 0xffe0ffe0UL, DecodeOpLDI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77290 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77294 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77299 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77303 "isa_tms320.tcc"
	>(0x40600000UL, 0xf0780000UL, DecodeOpLDFcond_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77307 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77311 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77316 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77320 "isa_tms320.tcc"
	>(0x40400000UL, 0xf0780000UL, DecodeOpLDFcond_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77324 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77328 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77333 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77337 "isa_tms320.tcc"
	>(0x40200000UL, 0xf0780000UL, DecodeOpLDFcond_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77341 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77345 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77350 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77354 "isa_tms320.tcc"
	>(0x40000000UL, 0xf078ffe0UL, DecodeOpLDFcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77358 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77362 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77367 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77371 "isa_tms320.tcc"
	>(0x7600000UL, 0xfff80000UL, DecodeOpLDF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77375 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77379 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77384 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77388 "isa_tms320.tcc"
	>(0x7400000UL, 0xfff80000UL, DecodeOpLDF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77392 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77396 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77401 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77405 "isa_tms320.tcc"
	>(0x7200000UL, 0xfff80000UL, DecodeOpLDF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77409 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77413 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77418 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77422 "isa_tms320.tcc"
	>(0x7000000UL, 0xfff8ffe0UL, DecodeOpLDF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77426 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77430 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77435 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77439 "isa_tms320.tcc"
	>(0x6e00000UL, 0xfff80000UL, DecodeOpLDE_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77443 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77447 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77452 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77456 "isa_tms320.tcc"
	>(0x6c00000UL, 0xfff80000UL, DecodeOpLDE_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77460 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77464 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77469 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77473 "isa_tms320.tcc"
	>(0x6a00000UL, 0xfff80000UL, DecodeOpLDE_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77477 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77481 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77486 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77490 "isa_tms320.tcc"
	>(0x6800000UL, 0xfff8ffe0UL, DecodeOpLDE_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77494 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77498 "isa_tms320.tcc"
	>));
}

template <
#line 45 "isa/tms320.isa"
class
#line 77505 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77508 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77512 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77515 "isa_tms320.tcc"
>
Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 77520 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77524 "isa_tms320.tcc"
>::~Decoder()
{
	InvalidateDecodingCache();
}

template <
#line 45 "isa/tms320.isa"
class
#line 77533 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77536 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77543 "isa_tms320.tcc"
>
void Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 77548 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77552 "isa_tms320.tcc"
>::Fetch(void *, typename CONFIG::address_t, uint32_t)
{
	assert( ! "Calling unimplemented virtual method Fetch" );
}

template <
#line 45 "isa/tms320.isa"
class
#line 77561 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77564 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77568 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77571 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77580 "isa_tms320.tcc"
> *Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 77584 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77588 "isa_tms320.tcc"
>::NCDecode(typename CONFIG::address_t addr)
{
	Operation<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77594 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77598 "isa_tms320.tcc"
	> *operation;
	CodeType code;
	Fetch(&code, addr, sizeof(code));
#if BYTE_ORDER == LITTLE_ENDIAN
	if(!little_endian)
#else
	if(little_endian)
#endif
	{
		code = ((code & 0xff000000UL) >> 24) | ((code & 0x00ff0000UL) >> 8) | ((code & 0x0000ff00UL) << 8) | ((code & 0x000000ffUL) << 24);
	}
	unsigned int count = decode_table.size();
	unsigned int idx;
	for(idx = 0; idx < count; idx++)
	{
		if((code & decode_table[idx].opcode_mask) == decode_table[idx].opcode)
		{
			operation = decode_table[idx].decode(code, addr);
			return operation;
		}
	}
	operation = new Operation<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77623 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77627 "isa_tms320.tcc"
	>(code, addr, "???");
	return operation;
}

template <
#line 45 "isa/tms320.isa"
class
#line 77635 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77642 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77645 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77650 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77654 "isa_tms320.tcc"
> *Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 77658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77662 "isa_tms320.tcc"
>::NCDecode(typename CONFIG::address_t addr, CodeType code)
{
	Operation<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77668 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77672 "isa_tms320.tcc"
	> *operation;
	unsigned int count = decode_table.size();
	unsigned int idx;
	for(idx = 0; idx < count; idx++)
	{
		if((code & decode_table[idx].opcode_mask) == decode_table[idx].opcode)
		{
			operation = decode_table[idx].decode(code, addr);
			return operation;
		}
	}
	operation = new Operation<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77687 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77691 "isa_tms320.tcc"
	>(code, addr, "???");
	return operation;
}

template <
#line 45 "isa/tms320.isa"
class
#line 77699 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77702 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77706 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77709 "isa_tms320.tcc"
>
void Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 77714 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77718 "isa_tms320.tcc"
>::InvalidateDecodingCache()
{
	uint32_t index;
	mru_page = 0;
	for(index = 0; index < NUM_DECODE_HASH_TABLE_ENTRIES; index++)
	{
		DecodeMapPage<
#line 45 "isa/tms320.isa"
		CONFIG
#line 77728 "isa_tms320.tcc"
		,
#line 45 "isa/tms320.isa"
		DEBUG
#line 77732 "isa_tms320.tcc"
		> *page, *next_page;
		page = decode_hash_table[index];
		if(page)
		{
			do
			{
				next_page = page->next;
				delete page;
				page = next_page;
			} while(page);
			decode_hash_table[index] = 0;
		}
	}
}

template <
#line 45 "isa/tms320.isa"
class
#line 77751 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77754 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77758 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77761 "isa_tms320.tcc"
>
void Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 77766 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77770 "isa_tms320.tcc"
>::InvalidateDecodingCacheEntry(typename CONFIG::address_t addr)
{
	typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
	if(mru_page && mru_page->key == page_key) mru_page = 0;
	uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
	DecodeMapPage<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77779 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77783 "isa_tms320.tcc"
	> *prev, *cur;
	cur = decode_hash_table[index];
	if(cur)
	{
		if(cur->key == page_key)
		{
			decode_hash_table[index] = cur->next;
			delete cur;
			return;
		}
		prev = cur;
		cur = cur->next;
		if(cur)
		{
			do
			{
				if(cur->key == page_key)
				{
					prev->next = cur->next;
					cur->next = 0;
					delete cur;
					return;
				}
				prev = cur;
			} while((cur = cur->next) != 0);
		}
	}
}

template <
#line 45 "isa/tms320.isa"
class
#line 77816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77819 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77823 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77826 "isa_tms320.tcc"
>
inline DecodeMapPage<
#line 45 "isa/tms320.isa"
CONFIG
#line 77831 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77835 "isa_tms320.tcc"
> *Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 77839 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77843 "isa_tms320.tcc"
>::FindPage(typename CONFIG::address_t page_key)
{
	if(mru_page && mru_page->key == page_key) return mru_page;
	uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
	DecodeMapPage<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77851 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77855 "isa_tms320.tcc"
	> *prev, *cur;
	cur = decode_hash_table[index];
	if(cur)
	{
		if(cur->key == page_key)
		{
			mru_page = cur;
			return cur;
		}
		prev = cur;
		cur = cur->next;
		if(cur)
		{
			do
			{
				if(cur->key == page_key)
				{
					prev->next = cur->next;
					cur->next= decode_hash_table[index];
					decode_hash_table[index] = cur;
					mru_page = cur;
					return cur;
				}
				prev = cur;
			} while((cur = cur->next) != 0);
		}
	}
	return 0;
}

template <
#line 45 "isa/tms320.isa"
class
#line 77889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77899 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77908 "isa_tms320.tcc"
> *Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 77912 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77916 "isa_tms320.tcc"
>::Decode(typename CONFIG::address_t addr)
{
	Operation<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77922 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77926 "isa_tms320.tcc"
	> *operation;
	typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
	DecodeMapPage<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77932 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77936 "isa_tms320.tcc"
	> *page;
	page = FindPage(page_key);
	if(!page)
	{
		page = new DecodeMapPage<
#line 45 "isa/tms320.isa"
		CONFIG
#line 77944 "isa_tms320.tcc"
		,
#line 45 "isa/tms320.isa"
		DEBUG
#line 77948 "isa_tms320.tcc"
		>(page_key);
		uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
		page->next = decode_hash_table[index];
		decode_hash_table[index] = page;
		mru_page = page;
	}
	operation = page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)];
	if(operation)
	{
		return operation;
	}
	operation = NCDecode(addr);
	page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
	return operation;
}

template <
#line 45 "isa/tms320.isa"
class
#line 77968 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77971 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77975 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77978 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77987 "isa_tms320.tcc"
> *Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 77991 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77995 "isa_tms320.tcc"
>::Decode(typename CONFIG::address_t addr, CodeType insn)
{
	Operation<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78001 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78005 "isa_tms320.tcc"
	> *operation;
	typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
	DecodeMapPage<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78011 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78015 "isa_tms320.tcc"
	> *page;
	page = FindPage(page_key);
	if(!page)
	{
		page = new DecodeMapPage<
#line 45 "isa/tms320.isa"
		CONFIG
#line 78023 "isa_tms320.tcc"
		,
#line 45 "isa/tms320.isa"
		DEBUG
#line 78027 "isa_tms320.tcc"
		> (page_key);
		uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
		page->next = decode_hash_table[index];
		decode_hash_table[index] = page;
		mru_page = page;
	}
	operation = page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)];
	if(operation)
	{
		if(operation->GetEncoding() == insn && operation->GetAddr() == addr)
		return operation;
		delete operation;
	}
	operation = NCDecode(addr, insn);
	page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
	return operation;
}

template <
#line 45 "isa/tms320.isa"
class
#line 78049 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78052 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78056 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78059 "isa_tms320.tcc"
>
void Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 78064 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78068 "isa_tms320.tcc"
>::SetLittleEndian()
{
	little_endian = true;
}

template <
#line 45 "isa/tms320.isa"
class
#line 78077 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78080 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78084 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78087 "isa_tms320.tcc"
>
void Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 78092 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78096 "isa_tms320.tcc"
>::SetBigEndian()
{
	little_endian = false;
}

} } } } } } }
