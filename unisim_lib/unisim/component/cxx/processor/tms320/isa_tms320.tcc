#include "isa_tms320.hh"
#include <cassert>
#line 71 "isa/tms320.isa"

/* code to be included at the beginning of the implementation of the library */
#include <iostream>
#include <string>
#include "unisim/component/cxx/processor/tms320/exception.hh"

namespace unisim {
	namespace component {
		namespace cxx {
			namespace processor {
				namespace tms320 {

					using std::ostream;
					using std::hex;
					using std::dec;
					using std::endl;
					using std::string;

					static const char *REG_NAME[] = {
						"R0",  "R1",  "R2",  "R3",  "R4",  "R5",  "R6",  "R7",
						"AR0", "AR1", "AR2", "AR3", "AR4", "AR5", "AR6", "AR7",
						"DP", "IR0", "IR1",  "BK",  "SP",  "ST",  "IE",  "IF",
						"IOF",  "RS",  "RE",  "RC",    0,     0,     0,     0
					};

					static const char *COND_NAME[] = {
						"U",    // 00000
						"LO",   // 00001
						"LS",   // 00010
						"HI",   // 00011
						"HS",   // 00100
						"EQ",   // 00101
						"NE",   // 00110
						"LT",   // 00111
						"LE",   // 01000
						"GT",   // 01001
						"GE",   // 01010
						0,      // 01011
						"NV",   // 01100
						"V",    // 01101
						"NUF",  // 01110
						"UF",   // 01111
						"NLV",  // 10000
						"LV",   // 10001
						"NLUF", // 10010
						"LUF",  // 10011
						"ZUF",  // 10100
						0,      // 10101
						0,      // 10110
						0,      // 10111
						0,      // 11000
						0,      // 11001
						0,      // 11010
						0,      // 11011
						0,      // 11100
						0,      // 11101
						0,      // 11110
						0       // 11111
					};

					using unisim::util::arithmetic::Add32;
					using unisim::util::arithmetic::SignedSatAdd32;
					using unisim::util::arithmetic::Sub32;
					using unisim::util::arithmetic::SignedSatSub32;
					using unisim::util::arithmetic::RotateLeft;
					using unisim::util::arithmetic::RotateRight;
					using unisim::util::arithmetic::ShiftLeft;
					using unisim::util::arithmetic::ShiftRight;
					using unisim::util::arithmetic::ShiftArithmeticRight;
					using unisim::util::arithmetic::SignExtend;

				} // end of namespace tms320
			} // end of namespace processor
		} // end of namespace cxx
	} // end of namespace component
} // end of namespace unisim

#line 82 "isa_tms320.tcc"
namespace unisim { namespace component { namespace cxx { namespace processor { namespace tms320 { namespace isa { namespace tms320 {
template <
#line 45 "isa/tms320.isa"
class
#line 87 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106 "isa_tms320.tcc"
>::Operation(CodeType _code, typename CONFIG::address_t _addr, const char *_name)
:
encoding(_code),
addr(_addr),
name(_name)
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 118 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 121 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 125 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 128 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 137 "isa_tms320.tcc"
>::~Operation()
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 152 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 155 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 159 "isa_tms320.tcc"
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 163 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 167 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 171 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 174 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 178 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 181 "isa_tms320.tcc"
)
{
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	{
		return false;
	}
#line 188 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 193 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 196 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 200 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 203 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 207 "isa_tms320.tcc"
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 211 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 215 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 219 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 222 "isa_tms320.tcc"
)
{
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	{
		throw UnknownOpcodeException<CONFIG, DEBUG>(this);
	}
#line 229 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 244 "isa_tms320.tcc"
>
class OpLDE_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 253 "isa_tms320.tcc"
>
{
public:
	OpLDE_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 263 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 267 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 270 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 274 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 277 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 357 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 361 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 364 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 372 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 375 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 379 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 382 "isa_tms320.tcc"
>
class OpLDE_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 391 "isa_tms320.tcc"
>
{
public:
	OpLDE_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 401 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 405 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 408 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 412 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 415 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 495 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 499 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 502 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 510 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 513 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 517 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 520 "isa_tms320.tcc"
>
class OpLDE_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 529 "isa_tms320.tcc"
>
{
public:
	OpLDE_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 541 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 545 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 548 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 552 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 555 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 635 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 639 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 642 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 653 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 657 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 660 "isa_tms320.tcc"
>
class OpLDE_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 665 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 669 "isa_tms320.tcc"
>
{
public:
	OpLDE_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 679 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 683 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 686 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 690 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 693 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 773 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 777 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 780 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 798 "isa_tms320.tcc"
>
class OpLDF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 807 "isa_tms320.tcc"
>
{
public:
	OpLDF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 817 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 821 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 824 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 828 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 831 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 911 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 915 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 918 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 926 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 929 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 933 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 936 "isa_tms320.tcc"
>
class OpLDF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 941 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 945 "isa_tms320.tcc"
>
{
public:
	OpLDF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 955 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 959 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 962 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 966 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 969 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1049 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1053 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1056 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1064 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1067 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1071 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1074 "isa_tms320.tcc"
>
class OpLDF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1079 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1083 "isa_tms320.tcc"
>
{
public:
	OpLDF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1095 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1099 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1102 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1106 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1109 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1189 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1193 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1196 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1204 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1207 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1211 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1214 "isa_tms320.tcc"
>
class OpLDF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1219 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1223 "isa_tms320.tcc"
>
{
public:
	OpLDF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1233 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1237 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1240 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1244 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1247 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1327 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1331 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1334 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1342 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1349 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1352 "isa_tms320.tcc"
>
class OpLDFcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1357 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1361 "isa_tms320.tcc"
>
{
public:
	OpLDFcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1372 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1376 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1379 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1383 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1386 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1466 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1470 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1473 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1481 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1491 "isa_tms320.tcc"
>
class OpLDFcond_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1500 "isa_tms320.tcc"
>
{
public:
	OpLDFcond_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1511 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1515 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1518 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1522 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1525 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1605 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1609 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1612 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1620 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1627 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1630 "isa_tms320.tcc"
>
class OpLDFcond_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1635 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1639 "isa_tms320.tcc"
>
{
public:
	OpLDFcond_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1652 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1656 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1659 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1663 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1666 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1746 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1750 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1753 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1761 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1768 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1771 "isa_tms320.tcc"
>
class OpLDFcond_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1780 "isa_tms320.tcc"
>
{
public:
	OpLDFcond_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1791 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1795 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1798 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1802 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1805 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 1885 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1889 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1892 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 1900 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 1903 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 1907 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 1910 "isa_tms320.tcc"
>
class OpLDI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 1915 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 1919 "isa_tms320.tcc"
>
{
public:
	OpLDI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 1929 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 1933 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 1936 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 1940 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 1943 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2023 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2027 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2030 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2038 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2041 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2045 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2048 "isa_tms320.tcc"
>
class OpLDI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2053 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2057 "isa_tms320.tcc"
>
{
public:
	OpLDI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2067 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2071 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2074 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2078 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2081 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2161 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2165 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2168 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2176 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2179 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2183 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2186 "isa_tms320.tcc"
>
class OpLDI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2191 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2195 "isa_tms320.tcc"
>
{
public:
	OpLDI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2207 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2211 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2214 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2218 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2221 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2301 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2305 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2308 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2316 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2319 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2323 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2326 "isa_tms320.tcc"
>
class OpLDI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2331 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2335 "isa_tms320.tcc"
>
{
public:
	OpLDI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2345 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2349 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2352 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2356 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2359 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2439 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2443 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2446 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2457 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2461 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2464 "isa_tms320.tcc"
>
class OpLDIcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2469 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2473 "isa_tms320.tcc"
>
{
public:
	OpLDIcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2484 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2488 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2491 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2495 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2498 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2578 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2582 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2585 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2593 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2600 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2603 "isa_tms320.tcc"
>
class OpLDIcond_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2608 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2612 "isa_tms320.tcc"
>
{
public:
	OpLDIcond_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2623 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2627 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2630 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2634 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2637 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2717 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2721 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2724 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2732 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2735 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2739 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2742 "isa_tms320.tcc"
>
class OpLDIcond_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2747 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2751 "isa_tms320.tcc"
>
{
public:
	OpLDIcond_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2764 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2768 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2771 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2775 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2778 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2858 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2862 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2865 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 2873 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 2876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 2880 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 2883 "isa_tms320.tcc"
>
class OpLDIcond_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 2888 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 2892 "isa_tms320.tcc"
>
{
public:
	OpLDIcond_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 2903 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 2907 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 2910 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 2914 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 2917 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 2997 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3001 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3004 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3022 "isa_tms320.tcc"
>
class OpLDM_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3031 "isa_tms320.tcc"
>
{
public:
	OpLDM_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3041 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3045 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3048 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3052 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3055 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3135 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3139 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3142 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3157 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3160 "isa_tms320.tcc"
>
class OpLDM_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3165 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3169 "isa_tms320.tcc"
>
{
public:
	OpLDM_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3179 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3183 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3186 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3190 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3193 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3273 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3277 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3280 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3288 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3295 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3298 "isa_tms320.tcc"
>
class OpLDM_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3303 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3307 "isa_tms320.tcc"
>
{
public:
	OpLDM_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3319 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3323 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3326 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3330 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3333 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3413 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3417 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3420 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3428 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3431 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3435 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3438 "isa_tms320.tcc"
>
class OpLDM_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3447 "isa_tms320.tcc"
>
{
public:
	OpLDM_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3457 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3461 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3464 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3468 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3471 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3551 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3555 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3558 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3566 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3576 "isa_tms320.tcc"
>
class OpLDP : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3581 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3585 "isa_tms320.tcc"
>
{
public:
	OpLDP(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3594 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3598 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3601 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3605 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3608 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3688 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3692 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3695 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3703 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3706 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3710 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3713 "isa_tms320.tcc"
>
class OpPOP : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3718 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3722 "isa_tms320.tcc"
>
{
public:
	OpPOP(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3731 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3735 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3738 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3742 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3745 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3825 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3829 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3832 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3850 "isa_tms320.tcc"
>
class OpPOPF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3855 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3859 "isa_tms320.tcc"
>
{
public:
	OpPOPF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 3868 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3872 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3875 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 3879 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 3882 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 3962 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 3966 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 3969 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 3977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 3980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 3984 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 3987 "isa_tms320.tcc"
>
class OpPUSH : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 3992 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 3996 "isa_tms320.tcc"
>
{
public:
	OpPUSH(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4005 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4009 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4012 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4016 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4019 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4099 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4103 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4106 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4114 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4117 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4121 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4124 "isa_tms320.tcc"
>
class OpPUSHF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4129 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4133 "isa_tms320.tcc"
>
{
public:
	OpPUSHF(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4142 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4146 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4149 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4153 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4156 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4236 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4240 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4243 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4258 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4261 "isa_tms320.tcc"
>
class OpSTF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4266 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4270 "isa_tms320.tcc"
>
{
public:
	OpSTF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4280 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4284 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4287 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4291 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4294 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4374 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4378 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4381 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4389 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4392 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4396 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4399 "isa_tms320.tcc"
>
class OpSTF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4404 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4408 "isa_tms320.tcc"
>
{
public:
	OpSTF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4420 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4424 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4427 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4431 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4434 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4514 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4518 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4521 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4532 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4536 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4539 "isa_tms320.tcc"
>
class OpSTI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4548 "isa_tms320.tcc"
>
{
public:
	OpSTI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4558 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4562 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4565 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4569 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4572 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4652 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4656 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4659 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4677 "isa_tms320.tcc"
>
class OpSTI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4682 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4686 "isa_tms320.tcc"
>
{
public:
	OpSTI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4698 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4702 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4705 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4709 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4712 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4792 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4796 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4799 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4807 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4810 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4814 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4817 "isa_tms320.tcc"
>
class OpABSF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4826 "isa_tms320.tcc"
>
{
public:
	OpABSF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4836 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4840 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4843 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4847 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4850 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 4930 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4934 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4937 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 4945 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 4948 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 4952 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 4955 "isa_tms320.tcc"
>
class OpABSF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 4960 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 4964 "isa_tms320.tcc"
>
{
public:
	OpABSF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 4974 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 4978 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 4981 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 4985 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 4988 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5068 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5072 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5075 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5083 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5090 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5093 "isa_tms320.tcc"
>
class OpABSF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5098 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5102 "isa_tms320.tcc"
>
{
public:
	OpABSF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5114 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5118 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5121 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5125 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5128 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5208 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5212 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5215 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5223 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5226 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5233 "isa_tms320.tcc"
>
class OpABSF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5242 "isa_tms320.tcc"
>
{
public:
	OpABSF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5252 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5256 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5259 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5263 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5266 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5346 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5350 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5353 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5361 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5364 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5371 "isa_tms320.tcc"
>
class OpABSI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5380 "isa_tms320.tcc"
>
{
public:
	OpABSI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5390 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5394 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5397 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5401 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5404 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5484 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5488 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5491 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5509 "isa_tms320.tcc"
>
class OpABSI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5514 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5518 "isa_tms320.tcc"
>
{
public:
	OpABSI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5528 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5532 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5535 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5539 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5542 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5622 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5626 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5629 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5640 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5644 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5647 "isa_tms320.tcc"
>
class OpABSI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5652 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5656 "isa_tms320.tcc"
>
{
public:
	OpABSI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5668 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5672 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5675 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5679 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5682 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5762 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5766 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5769 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5777 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5780 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5784 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5787 "isa_tms320.tcc"
>
class OpABSI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5796 "isa_tms320.tcc"
>
{
public:
	OpABSI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5806 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5810 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5813 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5817 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5820 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 5900 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5904 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5907 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 5915 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 5918 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 5922 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 5925 "isa_tms320.tcc"
>
class OpADDC_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 5930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 5934 "isa_tms320.tcc"
>
{
public:
	OpADDC_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 5944 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 5948 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 5951 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 5955 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 5958 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6038 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6042 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6045 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6053 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6060 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6063 "isa_tms320.tcc"
>
class OpADDC_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6068 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6072 "isa_tms320.tcc"
>
{
public:
	OpADDC_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6082 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6086 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6089 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6093 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6096 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6176 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6180 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6183 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6191 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6194 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6201 "isa_tms320.tcc"
>
class OpADDC_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6206 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6210 "isa_tms320.tcc"
>
{
public:
	OpADDC_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6222 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6226 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6229 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6233 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6236 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6316 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6320 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6323 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6331 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6334 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6338 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6341 "isa_tms320.tcc"
>
class OpADDC_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6350 "isa_tms320.tcc"
>
{
public:
	OpADDC_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6360 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6364 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6367 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6371 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6374 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6454 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6458 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6461 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6476 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6479 "isa_tms320.tcc"
>
class OpADDF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6488 "isa_tms320.tcc"
>
{
public:
	OpADDF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6498 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6502 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6505 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6509 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6512 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6592 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6596 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6599 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6607 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6610 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6614 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6617 "isa_tms320.tcc"
>
class OpADDF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6622 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6626 "isa_tms320.tcc"
>
{
public:
	OpADDF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6636 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6640 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6643 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6647 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6650 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6730 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6734 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6737 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6745 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6748 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6752 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6755 "isa_tms320.tcc"
>
class OpADDF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6760 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6764 "isa_tms320.tcc"
>
{
public:
	OpADDF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6776 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6780 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6783 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6787 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6790 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 6870 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6874 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6877 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 6885 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 6888 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 6892 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 6895 "isa_tms320.tcc"
>
class OpADDF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 6900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 6904 "isa_tms320.tcc"
>
{
public:
	OpADDF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 6914 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 6918 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 6921 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 6925 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 6928 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7008 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7012 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7015 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7023 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7026 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7030 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7033 "isa_tms320.tcc"
>
class OpADDI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7042 "isa_tms320.tcc"
>
{
public:
	OpADDI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7052 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7056 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7059 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7063 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7066 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7146 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7150 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7153 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7161 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7164 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7171 "isa_tms320.tcc"
>
class OpADDI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7176 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7180 "isa_tms320.tcc"
>
{
public:
	OpADDI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7190 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7194 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7197 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7201 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7204 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7284 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7288 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7291 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7299 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7302 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7306 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7309 "isa_tms320.tcc"
>
class OpADDI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7314 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7318 "isa_tms320.tcc"
>
{
public:
	OpADDI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7330 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7334 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7337 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7341 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7344 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7424 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7428 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7431 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7439 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7446 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7449 "isa_tms320.tcc"
>
class OpADDI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7458 "isa_tms320.tcc"
>
{
public:
	OpADDI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7468 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7472 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7475 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7479 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7482 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7562 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7566 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7569 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7577 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7580 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7584 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7587 "isa_tms320.tcc"
>
class OpAND_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7596 "isa_tms320.tcc"
>
{
public:
	OpAND_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7606 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7610 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7613 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7617 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7620 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7700 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7704 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7707 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7715 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7718 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7725 "isa_tms320.tcc"
>
class OpAND_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7734 "isa_tms320.tcc"
>
{
public:
	OpAND_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7744 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7748 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7751 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7755 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7758 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7838 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7842 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7845 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7853 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7856 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 7860 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 7863 "isa_tms320.tcc"
>
class OpAND_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 7868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 7872 "isa_tms320.tcc"
>
{
public:
	OpAND_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 7884 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7888 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7891 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 7895 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 7898 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 7978 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 7982 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 7985 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 7993 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 7996 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8003 "isa_tms320.tcc"
>
class OpAND_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8008 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8012 "isa_tms320.tcc"
>
{
public:
	OpAND_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8022 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8026 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8029 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8033 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8036 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8116 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8120 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8123 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8131 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8134 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8138 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8141 "isa_tms320.tcc"
>
class OpANDN_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8150 "isa_tms320.tcc"
>
{
public:
	OpANDN_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8160 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8164 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8167 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8171 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8174 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8254 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8258 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8261 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8269 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8272 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8279 "isa_tms320.tcc"
>
class OpANDN_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8284 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8288 "isa_tms320.tcc"
>
{
public:
	OpANDN_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8298 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8302 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8305 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8309 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8312 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8392 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8396 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8399 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8407 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8410 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8414 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8417 "isa_tms320.tcc"
>
class OpANDN_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8422 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8426 "isa_tms320.tcc"
>
{
public:
	OpANDN_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8438 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8442 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8445 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8449 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8452 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8532 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8536 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8539 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8547 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8550 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8554 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8557 "isa_tms320.tcc"
>
class OpANDN_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8562 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8566 "isa_tms320.tcc"
>
{
public:
	OpANDN_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8576 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8580 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8583 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8587 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8590 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8670 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8674 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8677 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8685 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8688 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8692 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8695 "isa_tms320.tcc"
>
class OpASH_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8704 "isa_tms320.tcc"
>
{
public:
	OpASH_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8714 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8718 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8721 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8725 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8728 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8808 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8812 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8815 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8823 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8826 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8830 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8833 "isa_tms320.tcc"
>
class OpASH_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8838 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8842 "isa_tms320.tcc"
>
{
public:
	OpASH_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8852 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8856 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8859 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 8863 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 8866 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 8946 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8950 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8953 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 8961 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 8964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 8968 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 8971 "isa_tms320.tcc"
>
class OpASH_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 8976 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 8980 "isa_tms320.tcc"
>
{
public:
	OpASH_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 8992 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 8996 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 8999 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9003 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9006 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9086 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9090 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9093 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9111 "isa_tms320.tcc"
>
class OpASH_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9120 "isa_tms320.tcc"
>
{
public:
	OpASH_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9130 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9134 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9137 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9141 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9144 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9224 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9228 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9231 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9239 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9242 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9246 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9249 "isa_tms320.tcc"
>
class OpCMPF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9258 "isa_tms320.tcc"
>
{
public:
	OpCMPF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9268 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9272 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9275 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9279 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9282 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9362 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9366 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9369 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9377 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9384 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9387 "isa_tms320.tcc"
>
class OpCMPF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9392 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9396 "isa_tms320.tcc"
>
{
public:
	OpCMPF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9406 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9410 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9413 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9417 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9420 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9500 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9504 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9507 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9515 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9518 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9522 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9525 "isa_tms320.tcc"
>
class OpCMPF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9530 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9534 "isa_tms320.tcc"
>
{
public:
	OpCMPF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9546 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9550 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9553 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9557 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9560 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9640 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9644 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9647 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9662 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9665 "isa_tms320.tcc"
>
class OpCMPF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9674 "isa_tms320.tcc"
>
{
public:
	OpCMPF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9684 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9688 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9691 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9695 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9698 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9778 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9782 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9785 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9793 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9800 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9803 "isa_tms320.tcc"
>
class OpCMPI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9812 "isa_tms320.tcc"
>
{
public:
	OpCMPI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9822 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9826 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9829 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9833 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9836 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 9916 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9920 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9923 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 9931 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 9934 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 9938 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 9941 "isa_tms320.tcc"
>
class OpCMPI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 9946 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 9950 "isa_tms320.tcc"
>
{
public:
	OpCMPI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 9960 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 9964 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 9967 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 9971 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 9974 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10054 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10058 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10061 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10069 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10072 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10076 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10079 "isa_tms320.tcc"
>
class OpCMPI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10084 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10088 "isa_tms320.tcc"
>
{
public:
	OpCMPI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10100 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10104 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10107 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10111 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10114 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10194 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10198 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10201 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10219 "isa_tms320.tcc"
>
class OpCMPI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10228 "isa_tms320.tcc"
>
{
public:
	OpCMPI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10238 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10242 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10245 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10249 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10252 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10332 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10336 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10339 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10347 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10350 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10354 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10357 "isa_tms320.tcc"
>
class OpFIX_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10362 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10366 "isa_tms320.tcc"
>
{
public:
	OpFIX_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10376 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10380 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10383 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10387 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10390 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10470 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10474 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10477 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10495 "isa_tms320.tcc"
>
class OpFIX_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10500 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10504 "isa_tms320.tcc"
>
{
public:
	OpFIX_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10514 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10518 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10521 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10525 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10528 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10608 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10612 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10615 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10626 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10633 "isa_tms320.tcc"
>
class OpFIX_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10642 "isa_tms320.tcc"
>
{
public:
	OpFIX_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10654 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10658 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10661 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10665 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10668 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10748 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10752 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10755 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10766 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10770 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10773 "isa_tms320.tcc"
>
class OpFIX_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10778 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10782 "isa_tms320.tcc"
>
{
public:
	OpFIX_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10792 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10796 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10799 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10803 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10806 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 10886 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10890 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10893 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 10901 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 10904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 10908 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 10911 "isa_tms320.tcc"
>
class OpFLOAT_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 10916 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 10920 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 10930 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 10934 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 10937 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 10941 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 10944 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11024 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11028 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11031 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11039 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11046 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11049 "isa_tms320.tcc"
>
class OpFLOAT_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11054 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11058 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11068 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11072 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11075 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11079 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11082 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11162 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11166 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11169 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11177 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11180 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11184 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11187 "isa_tms320.tcc"
>
class OpFLOAT_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11196 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11208 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11212 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11215 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11219 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11222 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11302 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11306 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11309 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11317 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11324 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11327 "isa_tms320.tcc"
>
class OpFLOAT_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11332 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11336 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11346 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11350 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11353 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11357 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11360 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11440 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11444 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11447 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11455 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11458 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11462 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11465 "isa_tms320.tcc"
>
class OpLSH_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11470 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11474 "isa_tms320.tcc"
>
{
public:
	OpLSH_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11484 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11488 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11491 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11495 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11498 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11578 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11582 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11585 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11593 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11600 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11603 "isa_tms320.tcc"
>
class OpLSH_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11608 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11612 "isa_tms320.tcc"
>
{
public:
	OpLSH_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11622 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11626 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11629 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11633 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11636 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11716 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11720 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11723 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11731 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11734 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11738 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11741 "isa_tms320.tcc"
>
class OpLSH_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11746 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11750 "isa_tms320.tcc"
>
{
public:
	OpLSH_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11762 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11766 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11769 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11773 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11776 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11856 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11860 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11863 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 11871 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 11874 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 11878 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 11881 "isa_tms320.tcc"
>
class OpLSH_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 11886 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 11890 "isa_tms320.tcc"
>
{
public:
	OpLSH_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 11900 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11904 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 11907 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 11911 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 11914 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 11994 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 11998 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12001 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12009 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12012 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12016 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12019 "isa_tms320.tcc"
>
class OpMPYF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12024 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12028 "isa_tms320.tcc"
>
{
public:
	OpMPYF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12038 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12042 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12045 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12049 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12052 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12132 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12136 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12139 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12150 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12154 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12157 "isa_tms320.tcc"
>
class OpMPYF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12162 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12166 "isa_tms320.tcc"
>
{
public:
	OpMPYF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12176 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12180 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12183 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12187 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12190 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12270 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12274 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12277 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12285 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12292 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12295 "isa_tms320.tcc"
>
class OpMPYF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12300 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12304 "isa_tms320.tcc"
>
{
public:
	OpMPYF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12316 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12320 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12323 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12327 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12330 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12410 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12414 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12417 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12425 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12428 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12432 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12435 "isa_tms320.tcc"
>
class OpMPYF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12440 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12444 "isa_tms320.tcc"
>
{
public:
	OpMPYF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12454 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12458 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12461 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12465 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12468 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12548 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12552 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12555 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12563 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12566 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12570 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12573 "isa_tms320.tcc"
>
class OpMPYI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12578 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12582 "isa_tms320.tcc"
>
{
public:
	OpMPYI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12592 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12596 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12599 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12603 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12606 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12686 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12690 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12693 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12701 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12708 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12711 "isa_tms320.tcc"
>
class OpMPYI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12716 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12720 "isa_tms320.tcc"
>
{
public:
	OpMPYI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12730 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12734 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12737 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12741 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12744 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12824 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12828 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12831 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12839 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12842 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12846 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12849 "isa_tms320.tcc"
>
class OpMPYI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12854 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12858 "isa_tms320.tcc"
>
{
public:
	OpMPYI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 12870 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12874 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12877 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 12881 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 12884 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 12964 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 12968 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 12971 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 12979 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 12982 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 12986 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 12989 "isa_tms320.tcc"
>
class OpMPYI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 12994 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 12998 "isa_tms320.tcc"
>
{
public:
	OpMPYI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13008 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13012 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13015 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13019 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13022 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13102 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13106 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13109 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13117 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13120 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13127 "isa_tms320.tcc"
>
class OpNEGB_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13132 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13136 "isa_tms320.tcc"
>
{
public:
	OpNEGB_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13146 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13150 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13153 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13157 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13160 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13240 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13244 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13247 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13255 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13258 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13262 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13265 "isa_tms320.tcc"
>
class OpNEGB_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13270 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13274 "isa_tms320.tcc"
>
{
public:
	OpNEGB_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13284 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13288 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13291 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13295 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13298 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13378 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13382 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13385 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13393 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13396 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13400 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13403 "isa_tms320.tcc"
>
class OpNEGB_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13408 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13412 "isa_tms320.tcc"
>
{
public:
	OpNEGB_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13424 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13428 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13431 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13435 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13438 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13518 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13522 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13525 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13533 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13536 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13543 "isa_tms320.tcc"
>
class OpNEGB_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13548 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13552 "isa_tms320.tcc"
>
{
public:
	OpNEGB_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13562 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13566 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13569 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13573 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13576 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13656 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13660 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13663 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13671 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13674 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13678 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13681 "isa_tms320.tcc"
>
class OpNEGF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13686 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13690 "isa_tms320.tcc"
>
{
public:
	OpNEGF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13700 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13704 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13707 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13711 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13714 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13794 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13798 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13801 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13809 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13812 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13819 "isa_tms320.tcc"
>
class OpNEGF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13824 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13828 "isa_tms320.tcc"
>
{
public:
	OpNEGF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13838 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13842 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13845 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13849 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13852 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 13932 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13936 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13939 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 13947 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 13950 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 13954 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 13957 "isa_tms320.tcc"
>
class OpNEGF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 13962 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 13966 "isa_tms320.tcc"
>
{
public:
	OpNEGF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 13978 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 13982 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 13985 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 13989 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 13992 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14072 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14076 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14079 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14094 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14097 "isa_tms320.tcc"
>
class OpNEGF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14106 "isa_tms320.tcc"
>
{
public:
	OpNEGF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14116 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14120 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14123 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14127 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14130 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14210 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14214 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14217 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14225 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14228 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14232 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14235 "isa_tms320.tcc"
>
class OpNEGI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14240 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14244 "isa_tms320.tcc"
>
{
public:
	OpNEGI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14254 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14258 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14261 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14265 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14268 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14348 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14352 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14355 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14363 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14366 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14370 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14373 "isa_tms320.tcc"
>
class OpNEGI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14382 "isa_tms320.tcc"
>
{
public:
	OpNEGI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14392 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14396 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14399 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14403 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14406 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14486 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14490 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14493 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14501 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14504 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14508 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14511 "isa_tms320.tcc"
>
class OpNEGI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14520 "isa_tms320.tcc"
>
{
public:
	OpNEGI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14532 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14536 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14539 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14543 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14546 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14626 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14630 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14633 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14641 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14651 "isa_tms320.tcc"
>
class OpNEGI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14656 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14660 "isa_tms320.tcc"
>
{
public:
	OpNEGI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14670 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14674 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14677 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14681 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14684 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14764 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14768 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14771 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14779 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14782 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14786 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14789 "isa_tms320.tcc"
>
class OpNORM_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14794 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14798 "isa_tms320.tcc"
>
{
public:
	OpNORM_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14808 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14812 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14815 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14819 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14822 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 14902 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14906 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14909 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 14917 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 14920 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 14924 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 14927 "isa_tms320.tcc"
>
class OpNORM_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 14932 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 14936 "isa_tms320.tcc"
>
{
public:
	OpNORM_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 14946 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 14950 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 14953 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 14957 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 14960 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15040 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15044 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15047 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15055 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15058 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15062 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15065 "isa_tms320.tcc"
>
class OpNORM_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15074 "isa_tms320.tcc"
>
{
public:
	OpNORM_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15086 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15090 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15093 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15097 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15100 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15180 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15184 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15187 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15205 "isa_tms320.tcc"
>
class OpNORM_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15210 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15214 "isa_tms320.tcc"
>
{
public:
	OpNORM_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15224 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15228 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15231 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15235 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15238 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15318 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15322 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15325 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15333 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15336 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15340 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15343 "isa_tms320.tcc"
>
class OpNOT_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15352 "isa_tms320.tcc"
>
{
public:
	OpNOT_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15362 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15366 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15369 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15373 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15376 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15456 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15460 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15463 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15471 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15474 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15478 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15481 "isa_tms320.tcc"
>
class OpNOT_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15486 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15490 "isa_tms320.tcc"
>
{
public:
	OpNOT_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15500 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15504 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15507 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15511 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15514 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15594 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15598 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15601 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15609 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15612 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15619 "isa_tms320.tcc"
>
class OpNOT_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15624 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15628 "isa_tms320.tcc"
>
{
public:
	OpNOT_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15640 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15644 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15647 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15651 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15654 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15734 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15738 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15741 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15749 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15752 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15756 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15759 "isa_tms320.tcc"
>
class OpNOT_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15768 "isa_tms320.tcc"
>
{
public:
	OpNOT_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15778 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15782 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15785 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15789 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15792 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 15872 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15876 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15879 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 15887 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 15890 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 15894 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 15897 "isa_tms320.tcc"
>
class OpOR_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 15902 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 15906 "isa_tms320.tcc"
>
{
public:
	OpOR_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 15916 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 15920 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 15923 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 15927 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 15930 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16010 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16014 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16017 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16025 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16028 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16032 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16035 "isa_tms320.tcc"
>
class OpOR_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16040 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16044 "isa_tms320.tcc"
>
{
public:
	OpOR_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16054 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16058 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16061 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16065 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16068 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16148 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16152 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16155 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16163 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16166 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16170 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16173 "isa_tms320.tcc"
>
class OpOR_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16182 "isa_tms320.tcc"
>
{
public:
	OpOR_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16194 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16198 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16201 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16205 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16208 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16288 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16292 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16295 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16303 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16306 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16310 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16313 "isa_tms320.tcc"
>
class OpOR_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16318 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16322 "isa_tms320.tcc"
>
{
public:
	OpOR_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16332 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16336 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16339 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16343 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16346 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16426 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16430 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16433 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16441 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16444 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16448 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16451 "isa_tms320.tcc"
>
class OpRND_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16456 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16460 "isa_tms320.tcc"
>
{
public:
	OpRND_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16470 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16474 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16477 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16481 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16484 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16564 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16568 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16571 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16579 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16582 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16589 "isa_tms320.tcc"
>
class OpRND_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16594 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16598 "isa_tms320.tcc"
>
{
public:
	OpRND_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16608 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16612 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16615 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16619 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16622 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16702 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16706 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16709 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16717 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16720 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16724 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16727 "isa_tms320.tcc"
>
class OpRND_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16736 "isa_tms320.tcc"
>
{
public:
	OpRND_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16748 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16752 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16755 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16759 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16762 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16842 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16846 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16849 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16857 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16860 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 16864 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 16867 "isa_tms320.tcc"
>
class OpRND_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 16872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 16876 "isa_tms320.tcc"
>
{
public:
	OpRND_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 16886 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16890 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16893 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 16897 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 16900 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 16980 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 16984 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 16987 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 16995 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 16998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17002 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17005 "isa_tms320.tcc"
>
class OpROL : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17014 "isa_tms320.tcc"
>
{
public:
	OpROL(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17023 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17027 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17030 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17034 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17037 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17117 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17121 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17124 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17132 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17135 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17139 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17142 "isa_tms320.tcc"
>
class OpROLC : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17147 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17151 "isa_tms320.tcc"
>
{
public:
	OpROLC(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17160 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17164 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17167 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17171 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17174 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17254 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17258 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17261 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17269 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17272 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17279 "isa_tms320.tcc"
>
class OpROR : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17284 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17288 "isa_tms320.tcc"
>
{
public:
	OpROR(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17297 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17301 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17304 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17308 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17311 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17391 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17395 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17398 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17406 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17409 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17413 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17416 "isa_tms320.tcc"
>
class OpRORC : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17421 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17425 "isa_tms320.tcc"
>
{
public:
	OpRORC(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17434 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17438 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17441 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17445 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17448 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17528 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17532 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17535 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17543 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17546 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17550 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17553 "isa_tms320.tcc"
>
class OpSUBB_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17558 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17562 "isa_tms320.tcc"
>
{
public:
	OpSUBB_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17572 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17576 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17579 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17583 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17586 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17666 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17670 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17673 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17691 "isa_tms320.tcc"
>
class OpSUBB_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17700 "isa_tms320.tcc"
>
{
public:
	OpSUBB_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17710 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17714 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17717 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17721 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17724 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17804 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17808 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17811 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17819 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17826 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17829 "isa_tms320.tcc"
>
class OpSUBB_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17834 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17838 "isa_tms320.tcc"
>
{
public:
	OpSUBB_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17850 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17854 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17857 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17861 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 17864 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 17944 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17948 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17951 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 17959 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 17962 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 17966 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 17969 "isa_tms320.tcc"
>
class OpSUBB_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 17974 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 17978 "isa_tms320.tcc"
>
{
public:
	OpSUBB_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 17988 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 17992 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 17995 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 17999 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18002 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18082 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18086 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18089 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18097 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18100 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18104 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18107 "isa_tms320.tcc"
>
class OpSUBC_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18112 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18116 "isa_tms320.tcc"
>
{
public:
	OpSUBC_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18126 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18130 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18133 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18137 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18140 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18220 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18224 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18227 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18242 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18245 "isa_tms320.tcc"
>
class OpSUBC_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18250 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18254 "isa_tms320.tcc"
>
{
public:
	OpSUBC_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18264 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18268 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18271 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18275 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18278 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18358 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18362 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18365 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18373 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18380 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18383 "isa_tms320.tcc"
>
class OpSUBC_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18388 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18392 "isa_tms320.tcc"
>
{
public:
	OpSUBC_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18404 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18408 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18411 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18415 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18418 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18498 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18502 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18505 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18513 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18523 "isa_tms320.tcc"
>
class OpSUBC_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18528 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18532 "isa_tms320.tcc"
>
{
public:
	OpSUBC_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18542 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18546 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18549 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18553 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18556 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18636 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18640 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18643 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18654 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18661 "isa_tms320.tcc"
>
class OpSUBF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18666 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18670 "isa_tms320.tcc"
>
{
public:
	OpSUBF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18680 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18684 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18687 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18691 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18694 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18774 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18778 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18781 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18796 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18799 "isa_tms320.tcc"
>
class OpSUBF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18808 "isa_tms320.tcc"
>
{
public:
	OpSUBF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18818 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18822 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18825 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18829 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18832 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 18912 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18916 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18919 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 18927 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 18930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 18934 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 18937 "isa_tms320.tcc"
>
class OpSUBF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 18942 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 18946 "isa_tms320.tcc"
>
{
public:
	OpSUBF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 18958 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 18962 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 18965 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 18969 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 18972 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19052 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19056 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19059 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19067 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19077 "isa_tms320.tcc"
>
class OpSUBF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19086 "isa_tms320.tcc"
>
{
public:
	OpSUBF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19096 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19100 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19103 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19107 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19110 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19190 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19194 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19197 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19208 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19212 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19215 "isa_tms320.tcc"
>
class OpSUBI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19220 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19224 "isa_tms320.tcc"
>
{
public:
	OpSUBI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19234 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19238 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19241 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19245 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19248 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19328 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19332 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19335 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19343 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19350 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19353 "isa_tms320.tcc"
>
class OpSUBI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19358 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19362 "isa_tms320.tcc"
>
{
public:
	OpSUBI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19372 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19376 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19379 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19383 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19386 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19466 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19470 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19473 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19481 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19491 "isa_tms320.tcc"
>
class OpSUBI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19500 "isa_tms320.tcc"
>
{
public:
	OpSUBI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19512 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19516 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19519 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19523 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19526 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19606 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19610 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19613 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19621 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19624 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19628 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19631 "isa_tms320.tcc"
>
class OpSUBI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19636 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19640 "isa_tms320.tcc"
>
{
public:
	OpSUBI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19650 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19654 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19657 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19661 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19664 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19744 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19748 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19751 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19759 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19762 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19766 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19769 "isa_tms320.tcc"
>
class OpSUBRB_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19778 "isa_tms320.tcc"
>
{
public:
	OpSUBRB_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19788 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19792 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19795 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19799 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19802 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 19882 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19886 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19889 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 19897 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 19900 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 19904 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 19907 "isa_tms320.tcc"
>
class OpSUBRB_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 19912 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 19916 "isa_tms320.tcc"
>
{
public:
	OpSUBRB_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 19926 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 19930 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 19933 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 19937 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 19940 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20020 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20024 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20027 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20035 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20042 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20045 "isa_tms320.tcc"
>
class OpSUBRB_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20050 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20054 "isa_tms320.tcc"
>
{
public:
	OpSUBRB_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20066 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20070 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20073 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20077 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20080 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20160 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20164 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20167 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20182 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20185 "isa_tms320.tcc"
>
class OpSUBRB_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20190 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20194 "isa_tms320.tcc"
>
{
public:
	OpSUBRB_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20204 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20208 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20211 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20215 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20218 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20298 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20302 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20305 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20313 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20316 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20320 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20323 "isa_tms320.tcc"
>
class OpSUBRF_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20332 "isa_tms320.tcc"
>
{
public:
	OpSUBRF_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20342 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20346 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20349 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20353 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20356 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20436 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20440 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20443 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20458 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20461 "isa_tms320.tcc"
>
class OpSUBRF_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20466 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20470 "isa_tms320.tcc"
>
{
public:
	OpSUBRF_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20480 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20484 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20487 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20491 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20494 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20574 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20578 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20581 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20589 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20599 "isa_tms320.tcc"
>
class OpSUBRF_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20608 "isa_tms320.tcc"
>
{
public:
	OpSUBRF_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20620 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20624 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20627 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20631 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20634 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20714 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20718 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20721 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20732 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20736 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20739 "isa_tms320.tcc"
>
class OpSUBRF_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20748 "isa_tms320.tcc"
>
{
public:
	OpSUBRF_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20758 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20762 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20765 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20769 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20772 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20852 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20856 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20859 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 20867 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 20870 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 20874 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 20877 "isa_tms320.tcc"
>
class OpSUBRI_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 20882 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 20886 "isa_tms320.tcc"
>
{
public:
	OpSUBRI_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 20896 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20900 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20903 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 20907 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 20910 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 20990 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 20994 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 20997 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21005 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21008 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21015 "isa_tms320.tcc"
>
class OpSUBRI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21020 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21024 "isa_tms320.tcc"
>
{
public:
	OpSUBRI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21034 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21038 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21041 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21045 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21048 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21128 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21132 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21135 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21143 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21153 "isa_tms320.tcc"
>
class OpSUBRI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21158 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21162 "isa_tms320.tcc"
>
{
public:
	OpSUBRI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21174 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21178 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21181 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21185 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21188 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21268 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21272 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21275 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21283 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21286 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21290 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21293 "isa_tms320.tcc"
>
class OpSUBRI_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21298 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21302 "isa_tms320.tcc"
>
{
public:
	OpSUBRI_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21312 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21316 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21319 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21323 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21326 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21406 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21410 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21413 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21421 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21424 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21428 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21431 "isa_tms320.tcc"
>
class OpTSTB_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21436 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21440 "isa_tms320.tcc"
>
{
public:
	OpTSTB_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21450 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21454 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21457 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21461 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21464 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21544 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21548 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21551 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21559 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21562 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21566 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21569 "isa_tms320.tcc"
>
class OpTSTB_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21574 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21578 "isa_tms320.tcc"
>
{
public:
	OpTSTB_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21588 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21592 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21595 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21599 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21602 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21682 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21686 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21689 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21697 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21704 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21707 "isa_tms320.tcc"
>
class OpTSTB_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21716 "isa_tms320.tcc"
>
{
public:
	OpTSTB_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21728 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21732 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21735 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21739 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21742 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21822 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21826 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21829 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21837 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21840 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21844 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21847 "isa_tms320.tcc"
>
class OpTSTB_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21852 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21856 "isa_tms320.tcc"
>
{
public:
	OpTSTB_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 21866 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21870 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21873 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 21877 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 21880 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 21960 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 21964 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 21967 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 21975 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 21978 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 21982 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 21985 "isa_tms320.tcc"
>
class OpXOR_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 21990 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 21994 "isa_tms320.tcc"
>
{
public:
	OpXOR_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22004 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22008 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22011 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22015 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22018 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22098 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22102 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22105 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22113 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22120 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22123 "isa_tms320.tcc"
>
class OpXOR_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22128 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22132 "isa_tms320.tcc"
>
{
public:
	OpXOR_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22142 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22146 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22149 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22153 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22156 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22236 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22240 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22243 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22258 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22261 "isa_tms320.tcc"
>
class OpXOR_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22266 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22270 "isa_tms320.tcc"
>
{
public:
	OpXOR_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22282 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22286 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22289 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22293 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22296 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22376 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22380 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22383 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22391 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22394 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22398 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22401 "isa_tms320.tcc"
>
class OpXOR_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22406 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22410 "isa_tms320.tcc"
>
{
public:
	OpXOR_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22420 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22424 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22427 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22431 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22434 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22514 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22518 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22521 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22532 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22536 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22539 "isa_tms320.tcc"
>
class OpADDC3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22548 "isa_tms320.tcc"
>
{
public:
	OpADDC3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22559 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22563 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22566 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22570 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22573 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22653 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22657 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22660 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22668 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22671 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22675 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22678 "isa_tms320.tcc"
>
class OpADDC3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22683 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22687 "isa_tms320.tcc"
>
{
public:
	OpADDC3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22699 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22703 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22706 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22710 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22713 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22793 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22797 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22800 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22811 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22815 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22818 "isa_tms320.tcc"
>
class OpADDC3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22827 "isa_tms320.tcc"
>
{
public:
	OpADDC3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22839 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22843 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22846 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22850 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22853 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 22933 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22937 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22940 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 22948 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 22951 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 22955 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 22958 "isa_tms320.tcc"
>
class OpADDC3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 22963 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 22967 "isa_tms320.tcc"
>
{
public:
	OpADDC3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 22980 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 22984 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 22987 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 22991 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 22994 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23074 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23078 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23081 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23089 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23092 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23096 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23099 "isa_tms320.tcc"
>
class OpADDF3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23108 "isa_tms320.tcc"
>
{
public:
	OpADDF3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23119 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23123 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23126 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23130 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23133 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23213 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23217 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23220 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23228 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23231 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23238 "isa_tms320.tcc"
>
class OpADDF3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23247 "isa_tms320.tcc"
>
{
public:
	OpADDF3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23259 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23263 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23266 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23270 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23273 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23353 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23357 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23360 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23371 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23375 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23378 "isa_tms320.tcc"
>
class OpADDF3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23387 "isa_tms320.tcc"
>
{
public:
	OpADDF3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23399 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23403 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23406 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23410 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23413 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23493 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23497 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23500 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23508 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23511 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23515 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23518 "isa_tms320.tcc"
>
class OpADDF3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23527 "isa_tms320.tcc"
>
{
public:
	OpADDF3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23540 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23544 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23547 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23551 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23554 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23634 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23638 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23641 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23649 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23652 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23656 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23659 "isa_tms320.tcc"
>
class OpADDI3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23664 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23668 "isa_tms320.tcc"
>
{
public:
	OpADDI3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23679 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23683 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23686 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23690 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23693 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23773 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23777 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23780 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23798 "isa_tms320.tcc"
>
class OpADDI3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23807 "isa_tms320.tcc"
>
{
public:
	OpADDI3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23819 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23823 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23826 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23830 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23833 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 23913 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23917 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23920 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 23928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 23931 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 23935 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 23938 "isa_tms320.tcc"
>
class OpADDI3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 23943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 23947 "isa_tms320.tcc"
>
{
public:
	OpADDI3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 23959 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 23963 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 23966 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 23970 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 23973 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24053 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24057 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24060 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24078 "isa_tms320.tcc"
>
class OpADDI3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24087 "isa_tms320.tcc"
>
{
public:
	OpADDI3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24100 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24104 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24107 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24111 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24114 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24194 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24198 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24201 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24219 "isa_tms320.tcc"
>
class OpAND3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24228 "isa_tms320.tcc"
>
{
public:
	OpAND3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24239 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24243 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24246 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24250 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24253 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24333 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24337 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24340 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24348 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24351 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24355 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24358 "isa_tms320.tcc"
>
class OpAND3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24363 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24367 "isa_tms320.tcc"
>
{
public:
	OpAND3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24379 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24383 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24386 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24390 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24393 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24473 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24477 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24480 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24491 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24495 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24498 "isa_tms320.tcc"
>
class OpAND3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24507 "isa_tms320.tcc"
>
{
public:
	OpAND3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24519 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24523 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24526 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24530 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24533 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24613 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24617 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24620 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24628 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24631 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24635 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24638 "isa_tms320.tcc"
>
class OpAND3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24647 "isa_tms320.tcc"
>
{
public:
	OpAND3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24660 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24664 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24667 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24671 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24674 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24754 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24758 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24761 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24769 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24772 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24776 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24779 "isa_tms320.tcc"
>
class OpANDN3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24784 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24788 "isa_tms320.tcc"
>
{
public:
	OpANDN3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24799 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24803 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24806 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24810 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24813 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 24893 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24897 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24900 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 24908 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 24911 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 24915 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 24918 "isa_tms320.tcc"
>
class OpANDN3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 24923 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 24927 "isa_tms320.tcc"
>
{
public:
	OpANDN3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 24939 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 24943 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 24946 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 24950 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 24953 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25033 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25037 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25040 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25051 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25055 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25058 "isa_tms320.tcc"
>
class OpANDN3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25063 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25067 "isa_tms320.tcc"
>
{
public:
	OpANDN3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25079 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25083 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25086 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25090 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25093 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25173 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25177 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25180 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25188 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25191 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25198 "isa_tms320.tcc"
>
class OpANDN3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25203 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25207 "isa_tms320.tcc"
>
{
public:
	OpANDN3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25220 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25224 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25227 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25231 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25234 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25314 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25318 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25321 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25329 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25332 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25336 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25339 "isa_tms320.tcc"
>
class OpASH3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25344 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25348 "isa_tms320.tcc"
>
{
public:
	OpASH3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25359 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25363 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25366 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25370 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25373 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25453 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25457 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25460 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25468 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25471 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25475 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25478 "isa_tms320.tcc"
>
class OpASH3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25483 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25487 "isa_tms320.tcc"
>
{
public:
	OpASH3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25499 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25503 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25506 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25510 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25513 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25593 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25597 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25600 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25608 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25611 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25615 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25618 "isa_tms320.tcc"
>
class OpASH3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25627 "isa_tms320.tcc"
>
{
public:
	OpASH3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25639 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25643 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25646 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25650 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25653 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25733 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25737 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25740 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25748 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25751 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25755 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25758 "isa_tms320.tcc"
>
class OpASH3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25763 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25767 "isa_tms320.tcc"
>
{
public:
	OpASH3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25780 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25784 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25787 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25791 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25794 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 25874 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25878 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25881 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 25889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 25892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 25896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 25899 "isa_tms320.tcc"
>
class OpCMPF3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 25904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 25908 "isa_tms320.tcc"
>
{
public:
	OpCMPF3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 25918 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 25922 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 25925 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 25929 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 25932 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26012 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26016 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26019 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26037 "isa_tms320.tcc"
>
class OpCMPF3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26046 "isa_tms320.tcc"
>
{
public:
	OpCMPF3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26057 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26061 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26064 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26068 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26071 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26151 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26155 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26158 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26166 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26169 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26173 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26176 "isa_tms320.tcc"
>
class OpCMPF3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26181 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26185 "isa_tms320.tcc"
>
{
public:
	OpCMPF3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26196 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26200 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26203 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26207 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26210 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26290 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26294 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26297 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26305 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26308 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26312 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26315 "isa_tms320.tcc"
>
class OpCMPF3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26324 "isa_tms320.tcc"
>
{
public:
	OpCMPF3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26336 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26340 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26343 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26347 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26350 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26430 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26434 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26437 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26445 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26448 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26452 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26455 "isa_tms320.tcc"
>
class OpCMPI3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26460 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26464 "isa_tms320.tcc"
>
{
public:
	OpCMPI3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26474 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26478 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26481 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26485 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26488 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26568 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26572 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26575 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26583 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26586 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26590 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26593 "isa_tms320.tcc"
>
class OpCMPI3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26598 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26602 "isa_tms320.tcc"
>
{
public:
	OpCMPI3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26613 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26617 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26620 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26624 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26627 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26707 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26711 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26714 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26725 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26732 "isa_tms320.tcc"
>
class OpCMPI3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26737 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26741 "isa_tms320.tcc"
>
{
public:
	OpCMPI3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26752 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26756 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26759 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26763 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26766 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26846 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26850 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26853 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 26861 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 26864 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 26868 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 26871 "isa_tms320.tcc"
>
class OpCMPI3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 26876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 26880 "isa_tms320.tcc"
>
{
public:
	OpCMPI3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 26892 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26896 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26899 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 26903 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 26906 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 26986 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 26990 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 26993 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27001 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27004 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27008 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27011 "isa_tms320.tcc"
>
class OpLSH3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27016 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27020 "isa_tms320.tcc"
>
{
public:
	OpLSH3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27031 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27035 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27038 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27042 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27045 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27125 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27129 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27132 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27140 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27143 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27150 "isa_tms320.tcc"
>
class OpLSH3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27155 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27159 "isa_tms320.tcc"
>
{
public:
	OpLSH3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27171 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27175 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27178 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27182 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27185 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27265 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27269 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27272 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27283 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27287 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27290 "isa_tms320.tcc"
>
class OpLSH3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27295 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27299 "isa_tms320.tcc"
>
{
public:
	OpLSH3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27311 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27315 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27318 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27322 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27325 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27405 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27409 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27412 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27420 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27423 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27427 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27430 "isa_tms320.tcc"
>
class OpLSH3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27435 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27439 "isa_tms320.tcc"
>
{
public:
	OpLSH3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27452 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27456 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27459 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27463 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27466 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27546 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27550 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27553 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27561 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27564 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27568 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27571 "isa_tms320.tcc"
>
class OpMPYF3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27580 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27591 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27595 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27598 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27602 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27605 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27685 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27689 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27692 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27700 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27703 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27707 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27710 "isa_tms320.tcc"
>
class OpMPYF3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27719 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27731 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27735 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27738 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27742 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27745 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27825 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27829 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27832 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27850 "isa_tms320.tcc"
>
class OpMPYF3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27855 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27859 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 27871 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27875 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27878 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 27882 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 27885 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 27965 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 27969 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 27972 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 27980 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 27983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 27987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 27990 "isa_tms320.tcc"
>
class OpMPYF3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 27995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 27999 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28012 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28016 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28019 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28023 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28026 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28106 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28110 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28113 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28121 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28124 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28128 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28131 "isa_tms320.tcc"
>
class OpMPYI3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28136 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28140 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28151 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28155 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28158 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28162 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28165 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28245 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28249 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28252 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28260 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28263 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28267 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28270 "isa_tms320.tcc"
>
class OpMPYI3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28275 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28279 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28291 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28295 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28298 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28302 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28305 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28385 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28389 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28392 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28400 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28407 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28410 "isa_tms320.tcc"
>
class OpMPYI3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28415 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28419 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28431 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28435 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28438 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28442 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28445 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28525 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28529 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28532 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28543 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28547 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28550 "isa_tms320.tcc"
>
class OpMPYI3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28555 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28559 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28572 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28576 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28579 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28583 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28586 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28666 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28670 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28673 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28691 "isa_tms320.tcc"
>
class OpOR3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28700 "isa_tms320.tcc"
>
{
public:
	OpOR3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28711 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28715 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28718 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28722 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28725 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28805 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28809 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28812 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28820 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28827 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28830 "isa_tms320.tcc"
>
class OpOR3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28839 "isa_tms320.tcc"
>
{
public:
	OpOR3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28851 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28855 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28858 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 28862 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 28865 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 28945 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28949 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28952 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 28960 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 28963 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 28967 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 28970 "isa_tms320.tcc"
>
class OpOR3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 28975 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 28979 "isa_tms320.tcc"
>
{
public:
	OpOR3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 28991 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 28995 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 28998 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29002 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29005 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29085 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29089 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29092 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29100 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29103 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29107 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29110 "isa_tms320.tcc"
>
class OpOR3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29115 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29119 "isa_tms320.tcc"
>
{
public:
	OpOR3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29132 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29136 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29139 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29143 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29146 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29226 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29230 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29233 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29244 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29248 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29251 "isa_tms320.tcc"
>
class OpSUBB3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29256 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29260 "isa_tms320.tcc"
>
{
public:
	OpSUBB3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29271 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29275 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29278 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29282 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29285 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29365 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29369 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29372 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29380 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29390 "isa_tms320.tcc"
>
class OpSUBB3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29395 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29399 "isa_tms320.tcc"
>
{
public:
	OpSUBB3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29411 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29415 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29418 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29422 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29425 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29505 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29509 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29512 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29530 "isa_tms320.tcc"
>
class OpSUBB3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29539 "isa_tms320.tcc"
>
{
public:
	OpSUBB3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29551 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29555 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29558 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29562 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29565 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29645 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29649 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29652 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29660 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29670 "isa_tms320.tcc"
>
class OpSUBB3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29675 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29679 "isa_tms320.tcc"
>
{
public:
	OpSUBB3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29692 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29696 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29699 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29703 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29706 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29786 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29790 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29793 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29801 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29811 "isa_tms320.tcc"
>
class OpSUBF3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29816 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29820 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29831 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29835 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29838 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29842 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29845 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 29925 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29929 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29932 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 29940 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 29943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 29947 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 29950 "isa_tms320.tcc"
>
class OpSUBF3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 29955 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 29959 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 29971 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 29975 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 29978 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 29982 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 29985 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30065 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30069 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30072 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30080 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30090 "isa_tms320.tcc"
>
class OpSUBF3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30095 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30099 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30111 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30115 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30118 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30122 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30125 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30205 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30209 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30212 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30220 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30223 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30227 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30230 "isa_tms320.tcc"
>
class OpSUBF3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30235 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30239 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30252 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30256 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30259 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30263 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30266 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30346 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30350 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30353 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30361 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30364 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30371 "isa_tms320.tcc"
>
class OpSUBI3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30380 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30391 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30395 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30398 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30402 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30405 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30485 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30489 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30492 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30510 "isa_tms320.tcc"
>
class OpSUBI3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30519 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30531 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30535 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30538 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30542 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30545 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30625 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30629 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30632 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30647 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30650 "isa_tms320.tcc"
>
class OpSUBI3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30655 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30659 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30671 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30675 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30678 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30682 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30685 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30765 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30769 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30772 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30783 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30787 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30790 "isa_tms320.tcc"
>
class OpSUBI3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30795 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30799 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30812 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30816 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30819 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30823 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30826 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 30906 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30910 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30913 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 30921 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 30924 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 30928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 30931 "isa_tms320.tcc"
>
class OpTSTB3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 30936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 30940 "isa_tms320.tcc"
>
{
public:
	OpTSTB3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 30950 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 30954 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 30957 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 30961 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 30964 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31044 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31048 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31051 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31059 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31062 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31066 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31069 "isa_tms320.tcc"
>
class OpTSTB3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31074 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31078 "isa_tms320.tcc"
>
{
public:
	OpTSTB3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31089 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31093 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31096 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31100 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31103 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31183 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31187 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31190 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31201 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31208 "isa_tms320.tcc"
>
class OpTSTB3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31217 "isa_tms320.tcc"
>
{
public:
	OpTSTB3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31228 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31232 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31235 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31239 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31242 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31322 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31326 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31329 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31337 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31340 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31347 "isa_tms320.tcc"
>
class OpTSTB3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31352 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31356 "isa_tms320.tcc"
>
{
public:
	OpTSTB3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31368 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31372 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31375 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31379 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31382 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31462 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31466 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31469 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31477 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31480 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31487 "isa_tms320.tcc"
>
class OpXOR3_reg_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31492 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31496 "isa_tms320.tcc"
>
{
public:
	OpXOR3_reg_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31507 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31511 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31514 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31518 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31521 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31601 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31605 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31608 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31619 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31626 "isa_tms320.tcc"
>
class OpXOR3_indir_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31631 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31635 "isa_tms320.tcc"
>
{
public:
	OpXOR3_indir_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31647 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31651 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31654 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31658 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31661 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31741 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31745 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31748 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31756 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31759 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31766 "isa_tms320.tcc"
>
class OpXOR3_reg_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31771 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31775 "isa_tms320.tcc"
>
{
public:
	OpXOR3_reg_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t src1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31787 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31791 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31794 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31798 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31801 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 31881 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31885 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31888 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 31896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 31899 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 31903 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 31906 "isa_tms320.tcc"
>
class OpXOR3_indir_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 31911 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 31915 "isa_tms320.tcc"
>
{
public:
	OpXOR3_indir_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod1;
	uint32_t ar1;
	uint32_t mod2;
	uint32_t ar2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 31928 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 31932 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 31935 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 31939 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 31942 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32022 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32026 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32029 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32037 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32040 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32044 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32047 "isa_tms320.tcc"
>
class OpBcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32052 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32056 "isa_tms320.tcc"
>
{
public:
	OpBcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t reg;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32066 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32070 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32073 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32077 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32080 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32160 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32164 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32167 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32182 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32185 "isa_tms320.tcc"
>
class OpBcond_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32190 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32194 "isa_tms320.tcc"
>
{
public:
	OpBcond_disp(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32204 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32208 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32211 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32215 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32218 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32298 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32302 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32305 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32313 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32316 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32320 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32323 "isa_tms320.tcc"
>
class OpBcondD_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32332 "isa_tms320.tcc"
>
{
public:
	OpBcondD_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t reg;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32342 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32346 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32349 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32353 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32356 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32436 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32440 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32443 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32458 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32461 "isa_tms320.tcc"
>
class OpBcondD_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32466 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32470 "isa_tms320.tcc"
>
{
public:
	OpBcondD_disp(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32480 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32484 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32487 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32491 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32494 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32574 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32578 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32581 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32589 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32599 "isa_tms320.tcc"
>
class OpBR : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32608 "isa_tms320.tcc"
>
{
public:
	OpBR(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32617 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32621 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32624 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32628 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32631 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32711 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32715 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32718 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32726 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32729 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32733 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32736 "isa_tms320.tcc"
>
class OpBRD : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32741 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32745 "isa_tms320.tcc"
>
{
public:
	OpBRD(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32754 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32758 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32761 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32765 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32768 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32848 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32852 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32855 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 32863 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 32866 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 32870 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 32873 "isa_tms320.tcc"
>
class OpCALL : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 32878 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 32882 "isa_tms320.tcc"
>
{
public:
	OpCALL(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 32891 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32895 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32898 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 32902 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 32905 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 32985 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 32989 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 32992 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33010 "isa_tms320.tcc"
>
class OpCALLcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33019 "isa_tms320.tcc"
>
{
public:
	OpCALLcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t reg;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33029 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33033 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33036 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33040 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33043 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33123 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33127 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33130 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33138 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33141 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33148 "isa_tms320.tcc"
>
class OpCALLcond_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33157 "isa_tms320.tcc"
>
{
public:
	OpCALLcond_disp(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33167 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33171 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33174 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33178 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33181 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33261 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33265 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33268 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33283 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33286 "isa_tms320.tcc"
>
class OpDBcond_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33295 "isa_tms320.tcc"
>
{
public:
	OpDBcond_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar;
	uint32_t cond;
	uint32_t reg;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33306 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33310 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33313 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33317 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33320 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33400 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33404 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33407 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33422 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33425 "isa_tms320.tcc"
>
class OpDBcond_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33434 "isa_tms320.tcc"
>
{
public:
	OpDBcond_disp(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar;
	uint32_t cond;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33445 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33449 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33452 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33456 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33459 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33539 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33543 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33546 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33554 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33557 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33561 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33564 "isa_tms320.tcc"
>
class OpDBcondD_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33573 "isa_tms320.tcc"
>
{
public:
	OpDBcondD_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar;
	uint32_t cond;
	uint32_t reg;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33584 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33588 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33591 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33595 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33598 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33678 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33682 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33685 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33693 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33700 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33703 "isa_tms320.tcc"
>
class OpDBcondD_disp : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33708 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33712 "isa_tms320.tcc"
>
{
public:
	OpDBcondD_disp(CodeType code, typename CONFIG::address_t addr);
	uint32_t ar;
	uint32_t cond;
	int32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33723 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33727 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33730 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33734 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33737 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33817 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33821 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33824 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33832 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33839 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33842 "isa_tms320.tcc"
>
class OpIACK_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33851 "isa_tms320.tcc"
>
{
public:
	OpIACK_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33860 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33864 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33867 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 33871 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 33874 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 33954 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 33958 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 33961 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 33969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 33972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 33976 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 33979 "isa_tms320.tcc"
>
class OpIACK_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 33984 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 33988 "isa_tms320.tcc"
>
{
public:
	OpIACK_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 33999 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34003 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34006 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34010 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34013 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34093 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34097 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34100 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34111 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34115 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34118 "isa_tms320.tcc"
>
class OpIDLE : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34123 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34127 "isa_tms320.tcc"
>
{
public:
	OpIDLE(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34135 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34139 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34142 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34146 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34149 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34229 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34233 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34236 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34244 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34247 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34254 "isa_tms320.tcc"
>
class OpNOP_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34259 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34263 "isa_tms320.tcc"
>
{
public:
	OpNOP_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t reg;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34272 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34276 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34279 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34283 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34286 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34366 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34370 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34373 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34381 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34384 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34388 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34391 "isa_tms320.tcc"
>
class OpNOP_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34396 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34400 "isa_tms320.tcc"
>
{
public:
	OpNOP_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34411 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34415 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34418 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34422 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34425 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34505 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34509 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34512 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34530 "isa_tms320.tcc"
>
class OpRETIcond : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34539 "isa_tms320.tcc"
>
{
public:
	OpRETIcond(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34548 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34552 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34555 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34559 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34562 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34642 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34646 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34649 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34657 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34660 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34664 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34667 "isa_tms320.tcc"
>
class OpRETScond : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34672 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34676 "isa_tms320.tcc"
>
{
public:
	OpRETScond(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34685 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34689 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34692 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34696 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34699 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34779 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34783 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34786 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34794 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34797 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34801 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34804 "isa_tms320.tcc"
>
class OpRPTB : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34809 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34813 "isa_tms320.tcc"
>
{
public:
	OpRPTB(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34822 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34826 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34829 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34833 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34836 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 34916 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34920 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34923 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 34931 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 34934 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 34938 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 34941 "isa_tms320.tcc"
>
class OpRPTS_reg : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 34946 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 34950 "isa_tms320.tcc"
>
{
public:
	OpRPTS_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 34959 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 34963 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 34966 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 34970 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 34973 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35053 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35057 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35060 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35078 "isa_tms320.tcc"
>
class OpRPTS_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35087 "isa_tms320.tcc"
>
{
public:
	OpRPTS_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t direct;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35096 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35100 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35103 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35107 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35110 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35190 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35194 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35197 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35208 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35212 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35215 "isa_tms320.tcc"
>
class OpRPTS_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35220 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35224 "isa_tms320.tcc"
>
{
public:
	OpRPTS_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35235 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35239 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35242 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35246 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35249 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35329 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35333 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35336 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35347 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35354 "isa_tms320.tcc"
>
class OpRPTS_imm : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35359 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35363 "isa_tms320.tcc"
>
{
public:
	OpRPTS_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t imm;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35372 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35376 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35379 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35383 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35386 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35466 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35470 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35473 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35481 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35491 "isa_tms320.tcc"
>
class OpSWI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35500 "isa_tms320.tcc"
>
{
public:
	OpSWI(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35508 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35512 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35515 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35519 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35522 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35602 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35606 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35609 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35617 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35620 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35624 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35627 "isa_tms320.tcc"
>
class OpTRAPcond : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35632 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35636 "isa_tms320.tcc"
>
{
public:
	OpTRAPcond(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t n;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35646 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35650 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35653 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35657 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35660 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35740 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35744 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35747 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35755 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35758 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35762 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35765 "isa_tms320.tcc"
>
class OpIDLE2 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35770 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35774 "isa_tms320.tcc"
>
{
public:
	OpIDLE2(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35782 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35786 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35789 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35793 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35796 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 35876 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35880 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35883 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 35891 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 35894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 35898 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 35901 "isa_tms320.tcc"
>
class OpLOPOWER : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 35906 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 35910 "isa_tms320.tcc"
>
{
public:
	OpLOPOWER(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 35918 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 35922 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 35925 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 35929 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 35932 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36012 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36016 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36019 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36037 "isa_tms320.tcc"
>
class OpMAXSPEED : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36046 "isa_tms320.tcc"
>
{
public:
	OpMAXSPEED(CodeType code, typename CONFIG::address_t addr);
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 36054 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36058 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36061 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 36065 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 36068 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36148 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36152 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36155 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36163 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36166 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36170 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36173 "isa_tms320.tcc"
>
class OpLDFI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36182 "isa_tms320.tcc"
>
{
public:
	OpLDFI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36267 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36271 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36274 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36282 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36285 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36289 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36292 "isa_tms320.tcc"
>
class OpLDFI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36297 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36301 "isa_tms320.tcc"
>
{
public:
	OpLDFI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36388 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36392 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36395 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36403 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36406 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36410 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36413 "isa_tms320.tcc"
>
class OpLDII_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36422 "isa_tms320.tcc"
>
{
public:
	OpLDII_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t direct;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36507 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36511 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36514 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36522 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36532 "isa_tms320.tcc"
>
class OpLDII_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36537 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36541 "isa_tms320.tcc"
>
{
public:
	OpLDII_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36628 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36632 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36635 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36643 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36646 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36653 "isa_tms320.tcc"
>
class OpSIGI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36662 "isa_tms320.tcc"
>
{
public:
	OpSIGI(CodeType code, typename CONFIG::address_t addr);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36745 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36749 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36752 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36760 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36763 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36767 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36770 "isa_tms320.tcc"
>
class OpSTFI_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36775 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36779 "isa_tms320.tcc"
>
{
public:
	OpSTFI_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t direct;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36864 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36868 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36871 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 36879 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 36882 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 36886 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 36889 "isa_tms320.tcc"
>
class OpSTFI_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 36894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 36898 "isa_tms320.tcc"
>
{
public:
	OpSTFI_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 36985 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 36989 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 36992 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37010 "isa_tms320.tcc"
>
class OpSTII_dir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37019 "isa_tms320.tcc"
>
{
public:
	OpSTII_dir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t direct;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37104 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37108 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37111 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37119 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37122 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37126 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37129 "isa_tms320.tcc"
>
class OpSTII_indir : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37134 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37138 "isa_tms320.tcc"
>
{
public:
	OpSTII_indir(CodeType code, typename CONFIG::address_t addr);
	uint32_t src;
	uint32_t mod;
	uint32_t ar;
	uint32_t disp;
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37225 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37229 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37232 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37240 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37247 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37250 "isa_tms320.tcc"
>
class OpABSF_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37255 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37259 "isa_tms320.tcc"
>
{
public:
	OpABSF_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37273 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37277 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37280 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37284 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37287 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37367 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37371 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37374 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37382 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37385 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37389 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37392 "isa_tms320.tcc"
>
class OpABSF_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37397 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37401 "isa_tms320.tcc"
>
{
public:
	OpABSF_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37414 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37418 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37421 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37425 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37428 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37508 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37512 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37515 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37523 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37526 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37530 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37533 "isa_tms320.tcc"
>
class OpABSI_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37538 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37542 "isa_tms320.tcc"
>
{
public:
	OpABSI_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37556 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37560 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37563 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37567 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37570 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37650 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37654 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37657 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37665 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37668 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37672 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37675 "isa_tms320.tcc"
>
class OpABSI_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37680 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37684 "isa_tms320.tcc"
>
{
public:
	OpABSI_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37697 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37701 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37704 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37708 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37711 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37791 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37795 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37798 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37806 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37809 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37813 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37816 "isa_tms320.tcc"
>
class OpADDF3_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37821 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37825 "isa_tms320.tcc"
>
{
public:
	OpADDF3_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37840 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37844 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37847 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37851 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37854 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 37934 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37938 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37941 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 37949 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 37952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 37956 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 37959 "isa_tms320.tcc"
>
class OpADDF3_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 37964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 37968 "isa_tms320.tcc"
>
{
public:
	OpADDF3_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 37982 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 37986 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 37989 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 37993 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 37996 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38076 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38080 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38083 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38091 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38094 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38098 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38101 "isa_tms320.tcc"
>
class OpADDI3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38106 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38110 "isa_tms320.tcc"
>
{
public:
	OpADDI3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38125 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38129 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38132 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38136 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38139 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38219 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38223 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38226 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38244 "isa_tms320.tcc"
>
class OpADDI3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38253 "isa_tms320.tcc"
>
{
public:
	OpADDI3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38267 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38271 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38274 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38278 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38281 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38361 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38365 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38368 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38383 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38386 "isa_tms320.tcc"
>
class OpAND3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38395 "isa_tms320.tcc"
>
{
public:
	OpAND3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38410 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38414 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38417 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38421 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38424 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38504 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38508 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38511 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38519 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38522 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38526 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38529 "isa_tms320.tcc"
>
class OpAND3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38534 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38538 "isa_tms320.tcc"
>
{
public:
	OpAND3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38552 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38556 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38559 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38563 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38566 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38646 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38650 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38653 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38661 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38664 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38668 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38671 "isa_tms320.tcc"
>
class OpASH3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38676 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38680 "isa_tms320.tcc"
>
{
public:
	OpASH3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t count;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38695 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38699 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38702 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38706 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38709 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38789 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38793 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38796 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38804 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38807 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38811 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38814 "isa_tms320.tcc"
>
class OpASH3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38819 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38823 "isa_tms320.tcc"
>
{
public:
	OpASH3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t count;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38837 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38841 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38844 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38848 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38851 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 38931 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38935 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38938 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 38946 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 38949 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 38953 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 38956 "isa_tms320.tcc"
>
class OpFIX_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 38961 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 38965 "isa_tms320.tcc"
>
{
public:
	OpFIX_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 38979 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 38983 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 38986 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 38990 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 38993 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39073 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39077 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39080 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39088 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39091 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39095 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39098 "isa_tms320.tcc"
>
class OpFIX_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39103 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39107 "isa_tms320.tcc"
>
{
public:
	OpFIX_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39120 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39124 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39127 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39131 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39134 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39214 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39218 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39221 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39229 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39232 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39236 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39239 "isa_tms320.tcc"
>
class OpFLOAT_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39244 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39248 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39262 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39266 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39269 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39273 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39276 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39356 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39360 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39363 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39371 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39374 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39378 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39381 "isa_tms320.tcc"
>
class OpFLOAT_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39386 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39390 "isa_tms320.tcc"
>
{
public:
	OpFLOAT_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39403 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39407 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39410 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39414 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39417 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39497 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39501 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39504 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39512 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39519 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39522 "isa_tms320.tcc"
>
class OpLDF_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39531 "isa_tms320.tcc"
>
{
public:
	OpLDF_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39545 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39549 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39552 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39556 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39559 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39639 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39643 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39646 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39654 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39657 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39661 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39664 "isa_tms320.tcc"
>
class OpLDF_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39669 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39673 "isa_tms320.tcc"
>
{
public:
	OpLDF_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39686 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39690 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39693 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39697 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39700 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39780 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39784 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39787 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39798 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39802 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39805 "isa_tms320.tcc"
>
class OpLDI_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39810 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39814 "isa_tms320.tcc"
>
{
public:
	OpLDI_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39828 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39832 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39835 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39839 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39842 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 39922 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39926 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39929 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 39937 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 39940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 39944 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 39947 "isa_tms320.tcc"
>
class OpLDI_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 39952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 39956 "isa_tms320.tcc"
>
{
public:
	OpLDI_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 39969 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 39973 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 39976 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 39980 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 39983 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40063 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40067 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40070 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40078 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40081 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40085 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40088 "isa_tms320.tcc"
>
class OpLSH3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40093 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40097 "isa_tms320.tcc"
>
{
public:
	OpLSH3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t count;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40112 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40116 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40119 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40123 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40126 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40206 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40210 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40213 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40221 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40228 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40231 "isa_tms320.tcc"
>
class OpLSH3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40236 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40240 "isa_tms320.tcc"
>
{
public:
	OpLSH3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t count;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40254 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40258 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40261 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40265 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40268 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40348 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40352 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40355 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40363 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40366 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40370 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40373 "isa_tms320.tcc"
>
class OpMPYF3_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40382 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40397 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40401 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40404 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40408 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40411 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40491 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40495 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40498 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40509 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40513 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40516 "isa_tms320.tcc"
>
class OpMPYF3_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40521 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40525 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40539 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40543 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40546 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40550 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40553 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40633 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40637 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40640 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40651 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40658 "isa_tms320.tcc"
>
class OpMPYI3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40667 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40682 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40686 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40689 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40693 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40696 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40776 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40780 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40783 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40791 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40794 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40798 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40801 "isa_tms320.tcc"
>
class OpMPYI3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40806 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40810 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40824 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40828 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40831 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40835 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40838 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 40918 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40922 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40925 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 40933 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 40936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 40940 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 40943 "isa_tms320.tcc"
>
class OpNEGF_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 40948 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 40952 "isa_tms320.tcc"
>
{
public:
	OpNEGF_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 40966 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 40970 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 40973 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 40977 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 40980 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41060 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41064 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41067 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41078 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41082 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41085 "isa_tms320.tcc"
>
class OpNEGF_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41094 "isa_tms320.tcc"
>
{
public:
	OpNEGF_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41107 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41111 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41114 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41118 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41121 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41201 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41205 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41208 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41219 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41223 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41226 "isa_tms320.tcc"
>
class OpNEGI_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41231 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41235 "isa_tms320.tcc"
>
{
public:
	OpNEGI_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41249 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41253 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41256 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41260 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41263 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41343 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41347 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41350 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41358 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41361 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41365 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41368 "isa_tms320.tcc"
>
class OpNEGI_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41373 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41377 "isa_tms320.tcc"
>
{
public:
	OpNEGI_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41390 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41394 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41397 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41401 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41404 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41484 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41488 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41491 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41509 "isa_tms320.tcc"
>
class OpNOT_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41514 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41518 "isa_tms320.tcc"
>
{
public:
	OpNOT_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41532 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41536 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41539 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41543 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41546 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41626 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41630 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41633 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41641 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41651 "isa_tms320.tcc"
>
class OpNOT_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41656 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41660 "isa_tms320.tcc"
>
{
public:
	OpNOT_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41673 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41677 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41680 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41684 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41687 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41767 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41771 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41774 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41792 "isa_tms320.tcc"
>
class OpOR3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41797 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41801 "isa_tms320.tcc"
>
{
public:
	OpOR3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41816 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41820 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41823 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41827 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41830 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 41910 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41914 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41917 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 41925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 41928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 41932 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 41935 "isa_tms320.tcc"
>
class OpOR3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 41940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 41944 "isa_tms320.tcc"
>
{
public:
	OpOR3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 41958 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 41962 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 41965 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 41969 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 41972 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42052 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42056 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42059 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42067 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42077 "isa_tms320.tcc"
>
class OpSTF_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42086 "isa_tms320.tcc"
>
{
public:
	OpSTF_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t d1_mod;
	uint32_t d1_ar;
	uint32_t d2_mod;
	uint32_t d2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42100 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42104 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42107 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42111 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42114 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42194 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42198 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42201 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42219 "isa_tms320.tcc"
>
class OpSTF_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42228 "isa_tms320.tcc"
>
{
public:
	OpSTF_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t d1_mod;
	uint32_t d1_ar;
	uint32_t dst2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42241 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42245 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42248 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42252 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42255 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42335 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42339 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42342 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42350 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42353 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42357 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42360 "isa_tms320.tcc"
>
class OpSTI_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42365 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42369 "isa_tms320.tcc"
>
{
public:
	OpSTI_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t d1_mod;
	uint32_t d1_ar;
	uint32_t d2_mod;
	uint32_t d2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42383 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42387 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42390 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42394 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42397 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42477 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42481 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42484 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42495 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42502 "isa_tms320.tcc"
>
class OpSTI_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42511 "isa_tms320.tcc"
>
{
public:
	OpSTI_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t src2;
	uint32_t src1;
	uint32_t d1_mod;
	uint32_t d1_ar;
	uint32_t dst2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42524 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42528 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42531 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42535 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42538 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42618 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42622 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42625 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42633 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42636 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42643 "isa_tms320.tcc"
>
class OpSUBF3_STF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42648 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42652 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_STF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42667 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42671 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42674 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42678 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42681 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42761 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42765 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42768 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42776 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42779 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42783 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42786 "isa_tms320.tcc"
>
class OpSUBF3_STF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42795 "isa_tms320.tcc"
>
{
public:
	OpSUBF3_STF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42809 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42813 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42816 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42820 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42823 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 42903 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42907 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42910 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 42918 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 42921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 42925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 42928 "isa_tms320.tcc"
>
class OpSUBI3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 42933 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 42937 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 42952 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 42956 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 42959 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 42963 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 42966 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43046 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43050 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43053 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43061 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43064 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43071 "isa_tms320.tcc"
>
class OpSUBI3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43076 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43080 "isa_tms320.tcc"
>
{
public:
	OpSUBI3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43094 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43098 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43101 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43105 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43108 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43188 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43192 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43195 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43203 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43206 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43210 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43213 "isa_tms320.tcc"
>
class OpXOR3_STI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43218 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43222 "isa_tms320.tcc"
>
{
public:
	OpXOR3_STI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43237 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43241 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43244 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43248 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43251 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43331 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43335 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43338 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43346 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43349 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43353 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43356 "isa_tms320.tcc"
>
class OpXOR3_STI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43361 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43365 "isa_tms320.tcc"
>
{
public:
	OpXOR3_STI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t src1;
	uint32_t src3;
	uint32_t d2_mod;
	uint32_t d2_ar;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43379 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43383 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43386 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43390 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43393 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43473 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43477 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43480 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43491 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43495 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43498 "isa_tms320.tcc"
>
class OpLDF_LDF : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43507 "isa_tms320.tcc"
>
{
public:
	OpLDF_LDF(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t dst2;
	uint32_t s1_mod;
	uint32_t s1_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43521 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43525 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43528 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43532 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43535 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43615 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43619 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43622 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43633 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43640 "isa_tms320.tcc"
>
class OpLDF_LDF_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43645 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43649 "isa_tms320.tcc"
>
{
public:
	OpLDF_LDF_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t dst2;
	uint32_t s1_mod;
	uint32_t s1_ar;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43662 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43666 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43669 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43673 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43676 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43756 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43760 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43763 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43771 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43778 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43781 "isa_tms320.tcc"
>
class OpLDI_LDI : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43786 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43790 "isa_tms320.tcc"
>
{
public:
	OpLDI_LDI(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t dst2;
	uint32_t s1_mod;
	uint32_t s1_ar;
	uint32_t s2_mod;
	uint32_t s2_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43804 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43808 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43811 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43815 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43818 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 43898 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43902 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43905 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 43913 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 43916 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 43920 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 43923 "isa_tms320.tcc"
>
class OpLDI_LDI_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 43928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 43932 "isa_tms320.tcc"
>
{
public:
	OpLDI_LDI_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t dst1;
	uint32_t dst2;
	uint32_t s1_mod;
	uint32_t s1_ar;
	uint32_t src2;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 43945 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 43949 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 43952 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 43956 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 43959 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44039 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44043 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44046 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44054 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44057 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44061 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44064 "isa_tms320.tcc"
>
class OpMPYF3_ADDF3 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44069 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44073 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_ADDF3(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t s3_mod;
	uint32_t s3_ar;
	uint32_t s4_mod;
	uint32_t s4_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44090 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44094 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44097 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44101 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44104 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44184 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44188 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44191 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44199 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44202 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44206 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44209 "isa_tms320.tcc"
>
class OpMPYF3_ADDF3_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44214 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44218 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_ADDF3_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t src3;
	uint32_t src4;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44233 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44237 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44240 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44244 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44247 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44327 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44331 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44334 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44342 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44349 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44352 "isa_tms320.tcc"
>
class OpMPYF3_SUBF3 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44357 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44361 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_SUBF3(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t s3_mod;
	uint32_t s3_ar;
	uint32_t s4_mod;
	uint32_t s4_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44378 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44382 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44385 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44389 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44392 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44472 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44476 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44479 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44487 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44490 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44494 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44497 "isa_tms320.tcc"
>
class OpMPYF3_SUBF3_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44506 "isa_tms320.tcc"
>
{
public:
	OpMPYF3_SUBF3_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t src3;
	uint32_t src4;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44521 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44525 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44528 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44532 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44535 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44615 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44619 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44622 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44633 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44640 "isa_tms320.tcc"
>
class OpMPYI3_ADDI3 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44645 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44649 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_ADDI3(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t s3_mod;
	uint32_t s3_ar;
	uint32_t s4_mod;
	uint32_t s4_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44666 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44670 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44673 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44677 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44680 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44760 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44764 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44767 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44775 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44778 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44785 "isa_tms320.tcc"
>
class OpMPYI3_ADDI3_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44790 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44794 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_ADDI3_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t src3;
	uint32_t src4;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44809 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44813 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44816 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44820 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44823 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 44903 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44907 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44910 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 44918 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 44921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 44925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 44928 "isa_tms320.tcc"
>
class OpMPYI3_SUBI3 : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 44933 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 44937 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_SUBI3(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t s3_mod;
	uint32_t s3_ar;
	uint32_t s4_mod;
	uint32_t s4_ar;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 44954 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 44958 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 44961 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 44965 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 44968 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 45048 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 45052 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 45055 "isa_tms320.tcc"
	);
private:
};

template <
#line 45 "isa/tms320.isa"
class
#line 45063 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45066 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45070 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45073 "isa_tms320.tcc"
>
class OpMPYI3_SUBI3_ext : public Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45078 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45082 "isa_tms320.tcc"
>
{
public:
	OpMPYI3_SUBI3_ext(CodeType code, typename CONFIG::address_t addr);
	uint32_t p;
	uint32_t d1;
	uint32_t d2;
	uint32_t src1;
	uint32_t src2;
	uint32_t src3;
	uint32_t src4;
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	bool
#line 45097 "isa_tms320.tcc"
	disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 45101 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 45104 "isa_tms320.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	std::ostream &
#line 45108 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	os
#line 45111 "isa_tms320.tcc"
	);
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	// include "constructors_dec.isa"
	/*
	*  Copyright (c) 2009,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*          Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	virtual
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	void
#line 45191 "isa_tms320.tcc"
	execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	CPU<CONFIG, DEBUG> &
#line 45195 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
	cpu
#line 45198 "isa_tms320.tcc"
	);
private:
};

/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of load/store operations:
* - LDE          load floating-point exponent
* - LDF          load floating-point value
* - LDFcond      load floating-point value conditionally
* - LDI          load integer
* - LDIcond      load integer conditionally
* - LDM          load floating-point mantissa
* - LDP          load data page pointer
* - POP          pop integer from stack
* - POPF         pop floating-point value from stack
* - PUSH         push integer on stack
* - PUSHF        push floating-point value on stack
* - STF          store floating-point value
* - STI          store integer
*/
/************************************************
* LDE (load floating-point exponent)
* op LDE(0b000[3]:0b001101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 45259 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45262 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45266 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45269 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45273 "isa_tms320.tcc"
OpLDE_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 45277 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45281 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45285 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45288 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45292 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45295 "isa_tms320.tcc"
)
{
#line 59 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!dst_reg_name || !src_reg_name) return false;

		os << "LDE " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 45307 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45312 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45315 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45319 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45322 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45326 "isa_tms320.tcc"
OpLDE_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 45330 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45334 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45338 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45341 "isa_tms320.tcc"
)
{
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 45348 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45354 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45357 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45361 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45364 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45369 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45373 "isa_tms320.tcc"
> *DecodeOpLDE_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDE_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45379 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45383 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45390 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45393 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45397 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45400 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45404 "isa_tms320.tcc"
OpLDE_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45408 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45412 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45416 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45419 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45423 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45426 "isa_tms320.tcc"
)
{
#line 74 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDE " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;
		return true;
	}
#line 45437 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45442 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45445 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45449 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45452 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45456 "isa_tms320.tcc"
OpLDE_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45460 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45464 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45468 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45471 "isa_tms320.tcc"
)
{
#line 82 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 45478 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45491 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45494 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45499 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45503 "isa_tms320.tcc"
> *DecodeOpLDE_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDE_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45509 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45513 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45530 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45534 "isa_tms320.tcc"
OpLDE_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45538 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45542 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45546 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45549 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45553 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45556 "isa_tms320.tcc"
)
{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDE " << disasm_src_indir << ", " << dst_reg_name;
		return true;
	}
#line 45568 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45580 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45583 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45587 "isa_tms320.tcc"
OpLDE_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45591 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45595 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45599 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45602 "isa_tms320.tcc"
)
{
#line 97 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 45609 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45615 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45618 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45622 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45625 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45630 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45634 "isa_tms320.tcc"
> *DecodeOpLDE_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDE_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45640 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45644 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45654 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45661 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45665 "isa_tms320.tcc"
OpLDE_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 45669 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45673 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45677 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45680 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45684 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45687 "isa_tms320.tcc"
)
{
#line 103 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;
		os << "LDE " << cpu.DisasmShortFloat(imm) << ", " << dst_reg_name;
		return true;
	}
#line 45698 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45703 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45706 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45710 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45713 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45717 "isa_tms320.tcc"
OpLDE_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 45721 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45725 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45729 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45732 "isa_tms320.tcc"
)
{
#line 111 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 45739 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45745 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45748 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45752 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45755 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45760 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45764 "isa_tms320.tcc"
> *DecodeOpLDE_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDE_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45770 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45774 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDE (load floating-point exponent)
*************************************************/
/************************************************
* LDF (load floating-point value)
* op LDF(0b000[3]:0b001110[6]:g[2]:dst[5]:ext<32> src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 45787 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45790 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45794 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45797 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45801 "isa_tms320.tcc"
OpLDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 45805 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45809 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45813 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45816 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45820 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45823 "isa_tms320.tcc"
)
{
#line 125 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!dst_reg_name || !src_reg_name) return false;

		os << "LDF " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 45835 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45850 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45854 "isa_tms320.tcc"
OpLDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 45858 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45862 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45866 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45869 "isa_tms320.tcc"
)
{
#line 134 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 45876 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 45882 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45885 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45892 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 45897 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45901 "isa_tms320.tcc"
> *DecodeOpLDF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 45907 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 45911 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 45918 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45928 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 45932 "isa_tms320.tcc"
OpLDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45940 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45944 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45947 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 45951 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 45954 "isa_tms320.tcc"
)
{
#line 140 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;
		return true;
	}
#line 45965 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 45970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 45973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 45977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 45980 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 45984 "isa_tms320.tcc"
OpLDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 45988 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 45992 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 45996 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 45999 "isa_tms320.tcc"
)
{
#line 148 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 46006 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46022 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46031 "isa_tms320.tcc"
> *DecodeOpLDF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46037 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46041 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46051 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46055 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46058 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46062 "isa_tms320.tcc"
OpLDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46066 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46070 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46074 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46077 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46081 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46084 "isa_tms320.tcc"
)
{
#line 154 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDF " << disasm_src_indir << ", " << dst_reg_name;
		return true;
	}
#line 46096 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46111 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46115 "isa_tms320.tcc"
OpLDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46119 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46123 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46127 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46130 "isa_tms320.tcc"
)
{
#line 163 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 46137 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46143 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46153 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46158 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46162 "isa_tms320.tcc"
> *DecodeOpLDF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46168 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46172 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46179 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46182 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46186 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46189 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46193 "isa_tms320.tcc"
OpLDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 46197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46201 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46205 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46208 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46212 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46215 "isa_tms320.tcc"
)
{
#line 169 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;
		os << "LDF " << cpu.DisasmShortFloat(imm) << ", " << dst_reg_name;
		return true;
	}
#line 46226 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46231 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46234 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46238 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46241 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46245 "isa_tms320.tcc"
OpLDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 46249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46253 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46257 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46260 "isa_tms320.tcc"
)
{
#line 177 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 46267 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46273 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46276 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46283 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46292 "isa_tms320.tcc"
> *DecodeOpLDF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46298 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46302 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDF (load floating-point value)
*************************************************/
/************************************************
* LDFcond (load floating-point value conditionally)
* op LDFcond(0b0100[4]:cond[4]:g[2]:dst[5]:ext<32> src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 46315 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46318 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46322 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46325 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46329 "isa_tms320.tcc"
OpLDFcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 46333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46337 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46341 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46344 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46348 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46351 "isa_tms320.tcc"
)
{
#line 191 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!cond_name || !dst_reg_name || !src_reg_name) return false;

		os << "LDF" << cond_name << " " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 46364 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46369 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46372 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46379 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46383 "isa_tms320.tcc"
OpLDFcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 46387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46391 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46395 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46398 "isa_tms320.tcc"
)
{
#line 201 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 46405 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46411 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46414 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46418 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46421 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46426 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46430 "isa_tms320.tcc"
> *DecodeOpLDFcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46436 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46440 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46450 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46457 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46461 "isa_tms320.tcc"
OpLDFcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46469 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46473 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46476 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46480 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46483 "isa_tms320.tcc"
)
{
#line 207 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];
		if(!cond_name || !dst_reg_name) return false;

		os << "LDF" << cond_name << " " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;
		return true;
	}
#line 46495 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46510 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46514 "isa_tms320.tcc"
OpLDFcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46518 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46522 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46526 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46529 "isa_tms320.tcc"
)
{
#line 216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 46536 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46542 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46549 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46552 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46557 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46561 "isa_tms320.tcc"
> *DecodeOpLDFcond_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFcond_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46567 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46571 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46578 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46581 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46588 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46592 "isa_tms320.tcc"
OpLDFcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46600 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46604 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46607 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46611 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46614 "isa_tms320.tcc"
)
{
#line 222 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];
		if(!cond_name || !dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDF" << cond_name << " " << disasm_src_indir << ", " << dst_reg_name;
		return true;
	}
#line 46627 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46632 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46635 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46639 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46642 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46646 "isa_tms320.tcc"
OpLDFcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 46650 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46654 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46658 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46661 "isa_tms320.tcc"
)
{
#line 232 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 46668 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46677 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46684 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46689 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46693 "isa_tms320.tcc"
> *DecodeOpLDFcond_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFcond_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46699 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46703 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46710 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46713 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46717 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46720 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46724 "isa_tms320.tcc"
OpLDFcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 46728 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46732 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46736 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46739 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46743 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46746 "isa_tms320.tcc"
)
{
#line 238 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];

		if(!cond_name || !dst_reg_name) return false;
		os << "LDF" << cond_name << " " << cpu.DisasmShortFloat(imm) << ", " << dst_reg_name;
		return true;
	}
#line 46758 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46766 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46770 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46773 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46777 "isa_tms320.tcc"
OpLDFcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 46781 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46785 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46789 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46792 "isa_tms320.tcc"
)
{
#line 247 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 46799 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46805 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46812 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46815 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46820 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46824 "isa_tms320.tcc"
> *DecodeOpLDFcond_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFcond_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46830 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46834 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDFcond (load floating-point value conditionally)
*************************************************/
/*************************************************
* LDI (load integer)
* op LDI(0b000[3]:0b010000[6]:g[2]:dst[5]:ext<32> src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 46847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46854 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46857 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 46861 "isa_tms320.tcc"
OpLDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 46865 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46869 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46873 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46876 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 46880 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 46883 "isa_tms320.tcc"
)
{
#line 261 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!dst_reg_name || !src_reg_name) return false;

		os << "LDI " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 46895 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 46900 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46903 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46907 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46910 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 46914 "isa_tms320.tcc"
OpLDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 46918 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46922 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 46926 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 46929 "isa_tms320.tcc"
)
{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source and destination register number are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Write back result in destination operand
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 46957 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 46963 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 46966 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 46970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 46973 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 46978 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 46982 "isa_tms320.tcc"
> *DecodeOpLDI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 46988 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 46992 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 46999 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47002 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47006 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47009 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47013 "isa_tms320.tcc"
OpLDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47017 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47021 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47025 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47028 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47032 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47035 "isa_tms320.tcc"
)
{
#line 297 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;

		return true;
	}
#line 47047 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47052 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47055 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47059 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47062 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47066 "isa_tms320.tcc"
OpLDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47074 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47078 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47081 "isa_tms320.tcc"
)
{
#line 306 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 47112 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47118 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47121 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47125 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47128 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47137 "isa_tms320.tcc"
> *DecodeOpLDI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47143 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47147 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47154 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47157 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47161 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47164 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47168 "isa_tms320.tcc"
OpLDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47172 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47176 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47180 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47183 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47187 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47190 "isa_tms320.tcc"
)
{
#line 336 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDI " << disasm_src_indir << ", " << dst_reg_name;

		return true;
	}
#line 47203 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47208 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47211 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47215 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47218 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47222 "isa_tms320.tcc"
OpLDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47226 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47230 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47234 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47237 "isa_tms320.tcc"
)
{
#line 346 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 47281 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47287 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47290 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47294 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47297 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47302 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47306 "isa_tms320.tcc"
> *DecodeOpLDI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47312 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47316 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47323 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47326 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47330 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47333 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47337 "isa_tms320.tcc"
OpLDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 47341 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47345 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47349 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47352 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47356 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47359 "isa_tms320.tcc"
)
{
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDI " << imm << ", " << dst_reg_name;
		return true;
	}
#line 47370 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47375 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47382 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47385 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47389 "isa_tms320.tcc"
OpLDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 47393 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47397 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47401 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47404 "isa_tms320.tcc"
)
{
#line 397 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result
		uint32_t result = imm; // imm has already been sign extended by the decoder

		// Write back result in destination operand
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 47432 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47438 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47441 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47445 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47448 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47453 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47457 "isa_tms320.tcc"
> *DecodeOpLDI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47463 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47467 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDI (load integer)
*************************************************/
/*************************************************
* LDIcond (load integer conditionally)
* op LDIcond(0b0101[4]:cond[4]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 47480 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47483 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47487 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47490 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47494 "isa_tms320.tcc"
OpLDIcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 47498 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47502 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47506 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47509 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47513 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47516 "isa_tms320.tcc"
)
{
#line 432 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *src_reg_name = REG_NAME[src];
		const char *dst_reg_name = REG_NAME[dst];
		if(!cond_name || !src_reg_name || !dst_reg_name) return false;

		os << "LDI" << cond_name << " " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 47529 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47534 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47537 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47541 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47544 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47548 "isa_tms320.tcc"
OpLDIcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 47552 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47556 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47560 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47563 "isa_tms320.tcc"
)
{
#line 442 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source and destination registers, and the condition are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Write back result in destination operand
		cpu.SetReg(dst, result);
	}
#line 47583 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47589 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47599 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47608 "isa_tms320.tcc"
> *DecodeOpLDIcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDIcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47614 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47618 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47625 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47628 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47632 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47635 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47639 "isa_tms320.tcc"
OpLDIcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47647 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47651 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47654 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47658 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47661 "isa_tms320.tcc"
)
{
#line 461 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];
		if(!cond_name || !dst_reg_name) return false;

		os << "LDI" << cond_name << " " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;

		return true;
	}
#line 47674 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47679 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47682 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47686 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47689 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47693 "isa_tms320.tcc"
OpLDIcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47697 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47701 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47705 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47708 "isa_tms320.tcc"
)
{
#line 471 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register and the condition are valid
		if(unlikely(!cpu.HasReg(dst) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea);

		// Write back result
		cpu.SetReg(dst, result);
	}
#line 47731 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47737 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47740 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47744 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47747 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47752 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47756 "isa_tms320.tcc"
> *DecodeOpLDIcond_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDIcond_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47762 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47766 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47773 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47783 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47787 "isa_tms320.tcc"
OpLDIcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47795 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47799 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47802 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47806 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47809 "isa_tms320.tcc"
)
{
#line 493 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];

		if(!cond_name || !dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDI" << cond_name << " " << disasm_src_indir << ", " << dst_reg_name;

		return true;
	}
#line 47824 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47832 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47836 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47839 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 47843 "isa_tms320.tcc"
OpLDIcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 47847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47851 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47855 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47858 "isa_tms320.tcc"
)
{
#line 505 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register and the condition are valid
		if(unlikely(!cpu.HasReg(dst) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}
	}
#line 47894 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 47900 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47903 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47907 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47910 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 47915 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47919 "isa_tms320.tcc"
> *DecodeOpLDIcond_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDIcond_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 47925 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 47929 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 47936 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47939 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47943 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 47946 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 47950 "isa_tms320.tcc"
OpLDIcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 47954 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 47958 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 47962 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 47965 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 47969 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 47972 "isa_tms320.tcc"
)
{
#line 540 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *dst_reg_name = REG_NAME[dst];

		if(!cond_name || !dst_reg_name) return false;

		os << "LDI" << cond_name << " " << imm << ", " << dst_reg_name;
		return true;
	}
#line 47985 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 47990 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 47993 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 47997 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48000 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48004 "isa_tms320.tcc"
OpLDIcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 48008 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48012 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48016 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48019 "isa_tms320.tcc"
)
{
#line 550 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register and the condition are valid
		if(unlikely(!cpu.HasReg(dst) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Compute the result
		uint32_t result = imm; // imm has already been sign extended by the decoder

		// Write back result in destination operand
		cpu.SetReg(dst, result);
	}
#line 48039 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48045 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48048 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48052 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48055 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48060 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48064 "isa_tms320.tcc"
> *DecodeOpLDIcond_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDIcond_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48070 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48074 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDIcond (load integer conditionally)
*************************************************/
/*************************************************
* LDM (load floating-point mantissa)
* op LDM(0b000[3]:0b010010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 48087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48094 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48097 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48101 "isa_tms320.tcc"
OpLDM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 48105 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48109 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48113 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48116 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48120 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48123 "isa_tms320.tcc"
)
{
#line 577 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		const char *src_reg_name = REG_NAME[src];
		if(!dst_reg_name || !src_reg_name) return false;

		os << "LDM " << src_reg_name << ", " << dst_reg_name;
		return true;
	}
#line 48135 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48140 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48143 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48150 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48154 "isa_tms320.tcc"
OpLDM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 48158 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48162 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48166 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48169 "isa_tms320.tcc"
)
{
#line 586 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 48176 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48182 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48185 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48189 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48192 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48201 "isa_tms320.tcc"
> *DecodeOpLDM_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDM_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48207 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48211 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 48218 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48221 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48225 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48228 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48232 "isa_tms320.tcc"
OpLDM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48236 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48240 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48244 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48247 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48251 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48254 "isa_tms320.tcc"
)
{
#line 592 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name) return false;

		os << "LDM " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_reg_name;
		return true;
	}
#line 48265 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48270 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48273 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48277 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48280 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48284 "isa_tms320.tcc"
OpLDM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48292 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48296 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48299 "isa_tms320.tcc"
)
{
#line 600 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 48306 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48312 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48315 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48319 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48322 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48327 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48331 "isa_tms320.tcc"
> *DecodeOpLDM_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDM_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48337 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48341 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 48348 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48351 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48355 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48358 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48362 "isa_tms320.tcc"
OpLDM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48366 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48370 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48374 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48377 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48381 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48384 "isa_tms320.tcc"
)
{
#line 606 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_src_indir;
		const char *dst_reg_name = REG_NAME[dst];
		if(!dst_reg_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "LDM " << disasm_src_indir << ", " << dst_reg_name;
		return true;
	}
#line 48396 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48401 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48404 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48408 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48411 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48415 "isa_tms320.tcc"
OpLDM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 48419 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48423 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48427 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48430 "isa_tms320.tcc"
)
{
#line 615 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 48437 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48443 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48446 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48450 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48453 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48458 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48462 "isa_tms320.tcc"
> *DecodeOpLDM_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDM_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48468 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48472 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 48479 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48482 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48486 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48489 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48493 "isa_tms320.tcc"
OpLDM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 48497 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48501 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48505 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48508 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48512 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48515 "isa_tms320.tcc"
)
{
#line 621 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;
		os << "LDM " << cpu.DisasmShortFloat(imm) << ", " << dst_reg_name;
		return true;
	}
#line 48526 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48531 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48534 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48538 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48541 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48545 "isa_tms320.tcc"
OpLDM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 48549 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48553 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48557 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48560 "isa_tms320.tcc"
)
{
#line 629 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 48567 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48580 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48583 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48588 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48592 "isa_tms320.tcc"
> *DecodeOpLDM_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDM_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48598 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48602 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDM (load floating-point mantissa)
*************************************************/
/*************************************************
* LDP (load data page pointer)
* op LDP(0b000[3]:0b010000[6]:0b11[2]:0b10000[5]:0b00000000[8]:src[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 48615 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48618 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48622 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48625 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48629 "isa_tms320.tcc"
OpLDP<
#line 45 "isa/tms320.isa"
CONFIG
#line 48633 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48637 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48641 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48644 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48648 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48651 "isa_tms320.tcc"
)
{
#line 643 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		os << "LDP @0x" << hex << (src << 16) << dec;
		return true;
	}
#line 48659 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48664 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48667 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48671 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48674 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48678 "isa_tms320.tcc"
OpLDP<
#line 45 "isa/tms320.isa"
CONFIG
#line 48682 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48686 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48690 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48693 "isa_tms320.tcc"
)
{
#line 648 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Update DP
		cpu.SetDP(src);
	}
#line 48701 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48707 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48710 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48714 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48717 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48722 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48726 "isa_tms320.tcc"
> *DecodeOpLDP(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDP<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48732 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48736 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDP (load data page pointer)
*************************************************/
/*************************************************
* POP (pop integer from stack)
* op POP(0b000[3]:0b011100[6]:0b01[2]:dst[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 48749 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48752 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48756 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48759 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48763 "isa_tms320.tcc"
OpPOP<
#line 45 "isa/tms320.isa"
CONFIG
#line 48767 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48771 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48775 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48778 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48782 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48785 "isa_tms320.tcc"
)
{
#line 663 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;

		os << "POP " << dst_reg_name;

		if(cpu.GetPC() == (Operation<CONFIG, DEBUG>::GetAddr() / 4))
		{
			os << " <" << cpu.GetObjectFriendlyName(cpu.GetSP()) << ">";
		}
		return true;
	}
#line 48802 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48807 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48810 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48814 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48817 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48821 "isa_tms320.tcc"
OpPOP<
#line 45 "isa/tms320.isa"
CONFIG
#line 48825 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48829 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48833 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48836 "isa_tms320.tcc"
)
{
#line 677 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read SP
		typename CONFIG::address_t sp = cpu.GetSP();

		// Read the word at SP from memory
		uint32_t result = cpu.IntLoad(sp & ADDRESS_MASK);

		// Compute the new value of SP
		sp = sp - 1;

		// Write back the result
		cpu.SetReg(dst, result);

		// Update SP
		cpu.SetSP(sp);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 48873 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 48879 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48882 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48886 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48889 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 48894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48898 "isa_tms320.tcc"
> *DecodeOpPOP(CodeType code, typename CONFIG::address_t addr)
{
	return new OpPOP<
#line 45 "isa/tms320.isa"
	CONFIG
#line 48904 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 48908 "isa_tms320.tcc"
	>(code, addr);
}

/* end of POP (pop integer from stack)
*************************************************/
/*************************************************
* POPF (pop floating-point value from stack)
* op POPF(0b000[3]:0b011101[6]:0b01[2]:dst[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 48921 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48924 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48931 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 48935 "isa_tms320.tcc"
OpPOPF<
#line 45 "isa/tms320.isa"
CONFIG
#line 48939 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48943 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 48947 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 48950 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 48954 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 48957 "isa_tms320.tcc"
)
{
#line 721 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *dst_reg_name = REG_NAME[dst];

		if(!dst_reg_name) return false;

		os << "POPF " << dst_reg_name;
		return true;
	}
#line 48969 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 48974 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 48977 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 48981 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 48984 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 48988 "isa_tms320.tcc"
OpPOPF<
#line 45 "isa/tms320.isa"
CONFIG
#line 48992 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 48996 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49000 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49003 "isa_tms320.tcc"
)
{
#line 730 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		//throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);

		// FIXME: this is an integer POP, not a floating point POP

		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read SP
		typename CONFIG::address_t sp = cpu.GetSP();

		// Read the word at SP from memory
		uint32_t result = cpu.IntLoad(sp & ADDRESS_MASK);

		// Compute the new value of SP
		sp = sp - 1;

		// Write back the result
		cpu.SetReg(dst, result);

		// Update SP
		cpu.SetSP(sp);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 49044 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49050 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49053 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49057 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49060 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49065 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49069 "isa_tms320.tcc"
> *DecodeOpPOPF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpPOPF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49075 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49079 "isa_tms320.tcc"
	>(code, addr);
}

/* end of POPF (pop floating-point value from stack)
*************************************************/
/*************************************************
* PUSH (push integer on stack)
* op PUSH(0b000[3]:0b011110[6]:0b01[2]:src[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49092 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49095 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49099 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49102 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49106 "isa_tms320.tcc"
OpPUSH<
#line 45 "isa/tms320.isa"
CONFIG
#line 49110 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49114 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49118 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49121 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49125 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49128 "isa_tms320.tcc"
)
{
#line 778 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *src_reg_name = REG_NAME[src];

		if(!src_reg_name) return false;

		os << "PUSH " << src_reg_name;

		if(cpu.GetPC() == (Operation<CONFIG, DEBUG>::GetAddr() / 4))
		{
			os << " <" << cpu.GetObjectFriendlyName(cpu.GetSP() + 1) << ">";
		}
		return true;
	}
#line 49145 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49157 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49160 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49164 "isa_tms320.tcc"
OpPUSH<
#line 45 "isa/tms320.isa"
CONFIG
#line 49168 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49172 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49176 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49179 "isa_tms320.tcc"
)
{
#line 792 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source register number is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Store the source operand at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, src_value);

		// Update SP
		cpu.SetSP(sp);
	}
#line 49202 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49208 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49211 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49215 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49218 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49223 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49227 "isa_tms320.tcc"
> *DecodeOpPUSH(CodeType code, typename CONFIG::address_t addr)
{
	return new OpPUSH<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49233 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49237 "isa_tms320.tcc"
	>(code, addr);
}

/* end of POPF (pop floating-point value from stack)
*************************************************/
/*************************************************
* PUSHF (push floating-point value on stack)
* op PUSHF(0b000[3]:0b011111[6]:0b01[2]:src[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49250 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49253 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49257 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49260 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49264 "isa_tms320.tcc"
OpPUSHF<
#line 45 "isa/tms320.isa"
CONFIG
#line 49268 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49272 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49276 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49279 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49283 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49286 "isa_tms320.tcc"
)
{
#line 822 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *src_reg_name = REG_NAME[src];

		if(!src_reg_name) return false;

		os << "PUSHF " << src_reg_name;
		return true;
	}
#line 49298 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49303 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49306 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49310 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49313 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49317 "isa_tms320.tcc"
OpPUSHF<
#line 45 "isa/tms320.isa"
CONFIG
#line 49321 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49325 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49329 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49332 "isa_tms320.tcc"
)
{
#line 831 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		//	throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);

		// FIXME: This is an integer PUSH, not an floating point PUSH

		// Check whether the source register number is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Store the source operand at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, src_value);

		// Update SP
		cpu.SetSP(sp);
	}
#line 49359 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49365 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49368 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49372 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49375 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49384 "isa_tms320.tcc"
> *DecodeOpPUSHF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpPUSHF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49390 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49394 "isa_tms320.tcc"
	>(code, addr);
}

/* end of PUSHF (push floating-point value on stack)
*************************************************/
/*************************************************
* STF (store floating-point value)
* op STF(0b000[3]:0b101000[6]:g[2]:src[5]:dst[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49407 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49410 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49414 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49417 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49421 "isa_tms320.tcc"
OpSTF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49425 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49429 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49433 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49436 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49440 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49443 "isa_tms320.tcc"
)
{
#line 865 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *src_reg_name = REG_NAME[src];
		if(!src_reg_name) return false;

		os << "STF " << src_reg_name << ", " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec;
		return true;
	}
#line 49454 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49459 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49462 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49466 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49469 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49473 "isa_tms320.tcc"
OpSTF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49477 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49481 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49485 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49488 "isa_tms320.tcc"
)
{
#line 873 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 49495 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49501 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49504 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49508 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49511 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49520 "isa_tms320.tcc"
> *DecodeOpSTF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49526 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49530 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 49537 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49540 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49544 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49547 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49551 "isa_tms320.tcc"
OpSTF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49555 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49559 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49563 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49566 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49570 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49573 "isa_tms320.tcc"
)
{
#line 879 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_dst_indir;
		const char *src_reg_name = REG_NAME[src];
		if(!src_reg_name || !cpu.DisasmIndir(disasm_dst_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "STF " << src_reg_name << ", " << disasm_dst_indir;
		return true;
	}
#line 49585 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49590 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49593 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49597 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49600 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49604 "isa_tms320.tcc"
OpSTF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49608 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49612 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49616 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49619 "isa_tms320.tcc"
)
{
#line 888 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 49626 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49632 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49635 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49639 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49642 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49647 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49651 "isa_tms320.tcc"
> *DecodeOpSTF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49657 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49661 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STF (store floating-point value)
*************************************************/
/*************************************************
* STI (store integer)
* op STI(0b000[3]:0b101010[6]:g[2]:src[5]:dst[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 49674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49677 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49684 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49688 "isa_tms320.tcc"
OpSTI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49692 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49696 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49700 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49703 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49707 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49710 "isa_tms320.tcc"
)
{
#line 902 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		const char *src_reg_name = REG_NAME[src];
		if(!src_reg_name) return false;

		os << "STI " << src_reg_name << ", " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec;

		return true;
	}
#line 49722 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49727 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49734 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49737 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49741 "isa_tms320.tcc"
OpSTI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49745 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49749 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49753 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49756 "isa_tms320.tcc"
)
{
#line 911 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source register number is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Store the word into memory
		cpu.IntStore(ea, result);
	}
#line 49776 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49792 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49797 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49801 "isa_tms320.tcc"
> *DecodeOpSTI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49807 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49811 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 49818 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49821 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49825 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49828 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 49832 "isa_tms320.tcc"
OpSTI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49836 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49840 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49844 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49847 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 49851 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 49854 "isa_tms320.tcc"
)
{
#line 930 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		string disasm_dst_indir;
		const char *src_reg_name = REG_NAME[src];
		if(!src_reg_name || !cpu.DisasmIndir(disasm_dst_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;

		os << "STI " << src_reg_name << ", " << disasm_dst_indir;

		return true;
	}
#line 49867 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 49872 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49875 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49879 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49882 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 49886 "isa_tms320.tcc"
OpSTI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 49890 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49894 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 49898 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 49901 "isa_tms320.tcc"
)
{
#line 940 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/load_store.isa"
	{
		// Check whether the source register number is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Store the word into memory
		cpu.IntStore(ea, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}
	}
#line 49934 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 49940 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 49943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 49947 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 49950 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 49955 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 49959 "isa_tms320.tcc"
> *DecodeOpSTI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 49965 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 49969 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STI (store integer)
*************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of 2 operands operations:
* - ABSF         absolute value of a floating-point number
* - ABSI         absolute value of an integer
* - ADDC         add integers with carry
* - ADDF         add floating-point values
* - ADDI         add integers
* - AND          bitwise-logical AND
* - ANDN         bitwise-logical AND with complement
* - ASH          arithmetic shift
* - CMPF         compare floating-point values
* - CMPI         compare integers
* - FIX          convert floating-point value to integer
* - FLOAT        convert integer to floating-point value
* - LSH          logical shift
* - MPYF         multiply floating-point values
* - MPYI         multiply integers
* - NEGB         negate integer with borrow
* - NEGF         negate floating-point value
* - NEGI         negate integer
* - NORM         normalize floating-point value
* - NOT          bitwise-logical complement
* - OR           bitwise-logical OR
* - RND          round floating-point value
* - ROL          rotate left
* - ROLC         rotate left through carry
* - ROR          rotate right
* - RORC         rotate right through carry
* - SUBB         subtract integers with borrow
* - SUBC         subtract integers conditionally
* - SUBF         subtract floating-point values
* - SUBI         subtract integer
* - SUBRB        subtract reverse integer with borrow
* - SUBRF        subtract reverse floating-point value
* - SUBRI        subtract reverse integer
* - TSTB         test bit fields
* - XOR          bitwise-exclusive OR
*/
/**********************************************************
* ABSF (absolute value of a floating-point number)
* op ABSF(0b000[3]:0b000000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 50053 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50060 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50063 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50067 "isa_tms320.tcc"
OpABSF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 50071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50075 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50079 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50082 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50086 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50089 "isa_tms320.tcc"
)
{
#line 84 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ABSF " << src_name << ", " << dst_name;
		return true;
	}
#line 50103 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50111 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50115 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50118 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50122 "isa_tms320.tcc"
OpABSF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 50126 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50130 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50134 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50137 "isa_tms320.tcc"
)
{
#line 127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 50144 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50157 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50160 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50165 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50169 "isa_tms320.tcc"
> *DecodeOpABSF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50175 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50179 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 50186 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50189 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50193 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50196 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50200 "isa_tms320.tcc"
OpABSF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50204 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50208 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50212 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50215 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50219 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50222 "isa_tms320.tcc"
)
{
#line 95 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "ABSF @0x" << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 50236 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50244 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50248 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50251 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50255 "isa_tms320.tcc"
OpABSF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50259 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50263 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50267 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50270 "isa_tms320.tcc"
)
{
#line 131 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 50277 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50283 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50286 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50290 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50293 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50298 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50302 "isa_tms320.tcc"
> *DecodeOpABSF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50308 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50312 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 50319 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50322 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50326 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50329 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50333 "isa_tms320.tcc"
OpABSF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50337 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50341 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50345 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50348 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50352 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50355 "isa_tms320.tcc"
)
{
#line 106 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ABSF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 50369 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50374 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50377 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50381 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50384 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50388 "isa_tms320.tcc"
OpABSF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50392 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50396 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50400 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50403 "isa_tms320.tcc"
)
{
#line 135 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 50410 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50416 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50419 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50423 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50426 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50431 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50435 "isa_tms320.tcc"
> *DecodeOpABSF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50441 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50445 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 50452 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50455 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50459 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50462 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50466 "isa_tms320.tcc"
OpABSF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 50470 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50474 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50478 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50481 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50485 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50488 "isa_tms320.tcc"
)
{
#line 117 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ABSF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 50501 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50509 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50513 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50516 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50520 "isa_tms320.tcc"
OpABSF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 50524 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50528 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50532 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50535 "isa_tms320.tcc"
)
{
#line 139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 50542 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50548 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50551 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50555 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50558 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50563 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50567 "isa_tms320.tcc"
> *DecodeOpABSF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50573 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50577 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ABSF (absolute value of a floating-point number)
**********************************************************/
/**********************************************************
* ABSI (absolute value of an integer)
* op ABSI(0b000[3]:0b000001[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 50590 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50593 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50597 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50600 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50604 "isa_tms320.tcc"
OpABSI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 50608 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50612 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50616 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50619 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50623 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50626 "isa_tms320.tcc"
)
{
#line 156 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ABSI " << src_name << ", " << dst_name;
		return true;
	}
#line 50640 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50645 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50648 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50652 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50655 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50659 "isa_tms320.tcc"
OpABSI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 50663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50667 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50671 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50674 "isa_tms320.tcc"
)
{
#line 199 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t overflow;     // the overflow (0 or 1)

		if(src_value == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = ((int32_t) src_value >= 0) ? src_value : -src_value;
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_Z | M_ST_V,    // or mask
			0,
			overflow
			);
		}
	}
#line 50720 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50726 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50729 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50733 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50736 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50741 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50745 "isa_tms320.tcc"
> *DecodeOpABSI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50751 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50755 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 50762 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50765 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50769 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50772 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50776 "isa_tms320.tcc"
OpABSI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50780 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50784 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50788 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50791 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50795 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50798 "isa_tms320.tcc"
)
{
#line 167 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "ABSI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 50812 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50817 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50820 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50824 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50827 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 50831 "isa_tms320.tcc"
OpABSI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50839 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50843 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50846 "isa_tms320.tcc"
)
{
#line 242 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t overflow;     // the overflow (0 or 1)

		if(src_value == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = ((int32_t) src_value >= 0) ? src_value : -src_value;
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_Z | M_ST_V,    // or mask
			0,
			overflow
			);
		}
	}
#line 50895 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 50901 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50908 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50911 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 50916 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50920 "isa_tms320.tcc"
> *DecodeOpABSI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 50926 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 50930 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 50937 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50944 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 50947 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 50951 "isa_tms320.tcc"
OpABSI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 50955 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 50959 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 50963 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 50966 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 50970 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 50973 "isa_tms320.tcc"
)
{
#line 178 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ABSI " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 50987 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 50992 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 50995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 50999 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51002 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51006 "isa_tms320.tcc"
OpABSI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51014 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51018 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51021 "isa_tms320.tcc"
)
{
#line 288 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t overflow;     // the overflow (0 or 1)

		if(src_value == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = ((int32_t) src_value >= 0) ? src_value : -src_value;
		}

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_Z | M_ST_V,    // or mask
			0,
			overflow
			);
		}
	}
#line 51083 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51089 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51092 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51096 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51099 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51108 "isa_tms320.tcc"
> *DecodeOpABSI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51114 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51118 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 51125 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51128 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51132 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51135 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51139 "isa_tms320.tcc"
OpABSI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 51143 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51147 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51151 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51154 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51158 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51161 "isa_tms320.tcc"
)
{
#line 189 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ABSI " << imm << ", " << dst_name;
		return true;
	}
#line 51174 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51179 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51182 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51186 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51189 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51193 "isa_tms320.tcc"
OpABSI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 51197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51201 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51205 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51208 "isa_tms320.tcc"
)
{
#line 347 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t overflow;     // the overflow (0 or 1)

		if((uint32_t) imm == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = (imm >= 0) ? imm : -imm;
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_Z | M_ST_V,    // or mask
			0,
			overflow
			);
		}
	}
#line 51254 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51260 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51263 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51267 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51270 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51275 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51279 "isa_tms320.tcc"
> *DecodeOpABSI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51285 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51289 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ABSI (absolute value of an integer)
**********************************************************/
/**********************************************************
* ADDC (add integers with carry)
* op ADDC(0b000[3]:0b000010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 51302 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51305 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51309 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51312 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51316 "isa_tms320.tcc"
OpADDC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 51320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51324 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51328 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51331 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51335 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51338 "isa_tms320.tcc"
)
{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ADDC " << src_name << ", " << dst_name;
		return true;
	}
#line 51352 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51357 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51364 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51367 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51371 "isa_tms320.tcc"
OpADDC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 51375 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51379 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51383 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51386 "isa_tms320.tcc"
)
{
#line 447 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, carry_in);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, carry_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 51433 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51439 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51446 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51449 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51458 "isa_tms320.tcc"
> *DecodeOpADDC_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51464 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51468 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 51475 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51478 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51482 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51485 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51489 "isa_tms320.tcc"
OpADDC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51493 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51497 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51501 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51504 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51508 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51511 "isa_tms320.tcc"
)
{
#line 414 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "ADDC " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 51525 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51530 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51533 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51537 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51540 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51544 "isa_tms320.tcc"
OpADDC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51548 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51552 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51556 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51559 "isa_tms320.tcc"
)
{
#line 491 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, carry_in);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, carry_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 51609 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51615 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51618 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51622 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51625 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51630 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51634 "isa_tms320.tcc"
> *DecodeOpADDC_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51640 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51644 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 51651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51654 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51661 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51665 "isa_tms320.tcc"
OpADDC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51669 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51673 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51677 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51680 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51684 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51687 "isa_tms320.tcc"
)
{
#line 425 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ADDC " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 51702 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51707 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51710 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51714 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51717 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51721 "isa_tms320.tcc"
OpADDC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 51725 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51729 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51733 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51736 "isa_tms320.tcc"
)
{
#line 538 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, carry_in);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, carry_in);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 51799 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51805 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51812 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51815 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51820 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51824 "isa_tms320.tcc"
> *DecodeOpADDC_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51830 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 51834 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 51841 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51844 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51848 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51851 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 51855 "isa_tms320.tcc"
OpADDC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 51859 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51863 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51867 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51870 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 51874 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 51877 "isa_tms320.tcc"
)
{
#line 437 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ADDC " << imm << ", " << dst_name;
		return true;
	}
#line 51890 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 51895 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51898 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51902 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51905 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 51909 "isa_tms320.tcc"
OpADDC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 51913 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51917 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 51921 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 51924 "isa_tms320.tcc"
)
{
#line 598 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, imm, carry_in);
		else
		Add32(result, carry_out, overflow, dst_value, imm, carry_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 51968 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 51974 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 51977 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 51981 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 51984 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 51989 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 51993 "isa_tms320.tcc"
> *DecodeOpADDC_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 51999 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52003 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDC (add integers with carry)
**********************************************************/
/**********************************************************
* ADDF (add floating-point values)
* op ADDF(0b000[3]:0b000011[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 52016 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52019 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52023 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52026 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52030 "isa_tms320.tcc"
OpADDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 52034 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52038 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52042 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52045 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52049 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52052 "isa_tms320.tcc"
)
{
#line 652 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ADDF " << src_name << ", " << dst_name;
		return true;
	}
#line 52066 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52071 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52074 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52078 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52081 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52085 "isa_tms320.tcc"
OpADDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 52089 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52093 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52097 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52100 "isa_tms320.tcc"
)
{
#line 695 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 52107 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52113 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52120 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52123 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52128 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52132 "isa_tms320.tcc"
> *DecodeOpADDF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52138 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52142 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52149 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52152 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52156 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52159 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52163 "isa_tms320.tcc"
OpADDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52167 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52171 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52175 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52178 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52182 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52185 "isa_tms320.tcc"
)
{
#line 663 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "ADDF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 52199 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52204 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52207 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52211 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52214 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52218 "isa_tms320.tcc"
OpADDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52222 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52226 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52230 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52233 "isa_tms320.tcc"
)
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 52240 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52246 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52253 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52256 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52261 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52265 "isa_tms320.tcc"
> *DecodeOpADDF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52271 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52275 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52282 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52285 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52289 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52292 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52296 "isa_tms320.tcc"
OpADDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52300 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52304 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52308 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52311 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52315 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52318 "isa_tms320.tcc"
)
{
#line 674 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ADDF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 52332 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52337 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52340 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52344 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52347 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52351 "isa_tms320.tcc"
OpADDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52355 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52359 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52363 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52366 "isa_tms320.tcc"
)
{
#line 703 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 52373 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52379 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52382 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52386 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52389 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52394 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52398 "isa_tms320.tcc"
> *DecodeOpADDF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52404 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52408 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52422 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52425 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52429 "isa_tms320.tcc"
OpADDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 52433 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52437 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52441 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52444 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52448 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52451 "isa_tms320.tcc"
)
{
#line 685 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ADDF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 52464 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52476 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52479 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52483 "isa_tms320.tcc"
OpADDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 52487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52491 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52495 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52498 "isa_tms320.tcc"
)
{
#line 707 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 52505 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52511 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52514 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52518 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52521 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52526 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52530 "isa_tms320.tcc"
> *DecodeOpADDF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52536 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52540 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDF (add floating-point values)
**********************************************************/
/**********************************************************
* ADDI (add integers)
* op ADDI(0b000[3]:0b000100[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 52553 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52556 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52560 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52563 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52567 "isa_tms320.tcc"
OpADDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 52571 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52575 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52579 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52582 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52586 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52589 "isa_tms320.tcc"
)
{
#line 724 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ADDI " << src_name << ", " << dst_name;
		return true;
	}
#line 52603 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52608 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52611 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52615 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52618 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52622 "isa_tms320.tcc"
OpADDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 52626 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52630 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52634 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52637 "isa_tms320.tcc"
)
{
#line 768 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, 0);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 52681 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52687 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52690 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52694 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52697 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52702 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52706 "isa_tms320.tcc"
> *DecodeOpADDI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52712 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52716 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52723 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52726 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52730 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52733 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52737 "isa_tms320.tcc"
OpADDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52741 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52745 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52749 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52752 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52756 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52759 "isa_tms320.tcc"
)
{
#line 735 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "ADDI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 52773 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52778 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52781 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52785 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52788 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52792 "isa_tms320.tcc"
OpADDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52800 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52804 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52807 "isa_tms320.tcc"
)
{
#line 809 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, 0);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 52854 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 52860 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52867 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52870 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 52875 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52879 "isa_tms320.tcc"
> *DecodeOpADDI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 52885 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 52889 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 52896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52899 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52903 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52906 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 52910 "isa_tms320.tcc"
OpADDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52914 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52918 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52922 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52925 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 52929 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 52932 "isa_tms320.tcc"
)
{
#line 746 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ADDI " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 52947 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 52952 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 52955 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 52959 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 52962 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 52966 "isa_tms320.tcc"
OpADDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 52970 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 52974 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 52978 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 52981 "isa_tms320.tcc"
)
{
#line 853 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, src_value, 0);
		else
		Add32(result, carry_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 53041 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53047 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53050 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53054 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53057 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53062 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53066 "isa_tms320.tcc"
> *DecodeOpADDI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53072 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53076 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 53083 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53090 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53093 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53097 "isa_tms320.tcc"
OpADDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 53101 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53105 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53109 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53112 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53116 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53119 "isa_tms320.tcc"
)
{
#line 758 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ADDI " << imm << ", " << dst_name;
		return true;
	}
#line 53132 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53144 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53147 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53151 "isa_tms320.tcc"
OpADDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 53155 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53159 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53163 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53166 "isa_tms320.tcc"
)
{
#line 910 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, dst_value, imm, 0);
		else
		Add32(result, carry_out, overflow, dst_value, imm, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 53207 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53213 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53216 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53220 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53223 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53228 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53232 "isa_tms320.tcc"
> *DecodeOpADDI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53238 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53242 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDI (add integers)
**********************************************************/
/**********************************************************
* AND (bitwise-logical AND)
* op AND(0b000[3]:0b000101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 53255 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53258 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53262 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53265 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53269 "isa_tms320.tcc"
OpAND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 53273 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53277 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53281 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53284 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53288 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53291 "isa_tms320.tcc"
)
{
#line 961 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "AND " << src_name << ", " << dst_name;
		return true;
	}
#line 53305 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53310 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53313 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53317 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53320 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53324 "isa_tms320.tcc"
OpAND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 53328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53332 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53336 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53339 "isa_tms320.tcc"
)
{
#line 1005 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 53373 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53379 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53382 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53386 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53389 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53394 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53398 "isa_tms320.tcc"
> *DecodeOpAND_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53404 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53408 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 53415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53422 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53425 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53429 "isa_tms320.tcc"
OpAND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 53433 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53437 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53441 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53444 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53448 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53451 "isa_tms320.tcc"
)
{
#line 972 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "AND " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 53465 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53470 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53473 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53477 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53480 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53484 "isa_tms320.tcc"
OpAND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 53488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53492 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53496 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53499 "isa_tms320.tcc"
)
{
#line 1036 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 53536 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53542 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53549 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53552 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53557 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53561 "isa_tms320.tcc"
> *DecodeOpAND_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53567 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53571 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 53578 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53581 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53588 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53592 "isa_tms320.tcc"
OpAND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 53596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53600 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53604 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53607 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53611 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53614 "isa_tms320.tcc"
)
{
#line 983 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "AND " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 53629 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53634 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53637 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53641 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53644 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53648 "isa_tms320.tcc"
OpAND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 53652 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53656 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53660 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53663 "isa_tms320.tcc"
)
{
#line 1070 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 53713 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53719 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53722 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53726 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53729 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53734 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53738 "isa_tms320.tcc"
> *DecodeOpAND_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53744 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53748 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 53755 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53758 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53762 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53765 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53769 "isa_tms320.tcc"
OpAND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 53773 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53777 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53781 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53784 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53788 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53791 "isa_tms320.tcc"
)
{
#line 995 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "AND " << imm << ", " << dst_name;
		return true;
	}
#line 53804 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53809 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53812 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53819 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53823 "isa_tms320.tcc"
OpAND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 53827 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53831 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53835 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53838 "isa_tms320.tcc"
)
{
#line 1117 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = imm & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 53869 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 53875 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53878 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53882 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53885 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 53890 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53894 "isa_tms320.tcc"
> *DecodeOpAND_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 53900 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 53904 "isa_tms320.tcc"
	>(code, addr);
}

/* end of AND (bitwise-logical AND)
**********************************************************/
/**********************************************************
* ANDN (bitwise-logical AND with complement)
* op ANDN(0b000[3]:0b000110[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 53917 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53920 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53924 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53927 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 53931 "isa_tms320.tcc"
OpANDN_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 53935 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53939 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53943 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 53946 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 53950 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 53953 "isa_tms320.tcc"
)
{
#line 1158 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ANDN " << src_name << ", " << dst_name;
		return true;
	}
#line 53967 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 53972 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 53975 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 53979 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 53982 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 53986 "isa_tms320.tcc"
OpANDN_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 53990 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 53994 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 53998 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54001 "isa_tms320.tcc"
)
{
#line 1202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = ~src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 54035 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54041 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54051 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54060 "isa_tms320.tcc"
> *DecodeOpANDN_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54066 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54070 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54077 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54080 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54084 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54087 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54091 "isa_tms320.tcc"
OpANDN_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54095 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54099 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54103 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54106 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54110 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54113 "isa_tms320.tcc"
)
{
#line 1169 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "ANDN " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 54127 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 54132 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54135 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54139 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54142 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 54146 "isa_tms320.tcc"
OpANDN_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54150 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54154 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54158 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54161 "isa_tms320.tcc"
)
{
#line 1233 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = ~src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 54198 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54204 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54207 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54211 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54214 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54219 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54223 "isa_tms320.tcc"
> *DecodeOpANDN_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54229 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54233 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54240 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54247 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54250 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54254 "isa_tms320.tcc"
OpANDN_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54258 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54262 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54266 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54269 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54273 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54276 "isa_tms320.tcc"
)
{
#line 1180 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ANDN " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 54291 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 54296 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54299 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54303 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54306 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 54310 "isa_tms320.tcc"
OpANDN_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54314 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54318 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54322 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54325 "isa_tms320.tcc"
)
{
#line 1267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = ~src_value & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 54375 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54381 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54384 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54388 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54391 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54396 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54400 "isa_tms320.tcc"
> *DecodeOpANDN_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54406 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54410 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54417 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54420 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54424 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54427 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54431 "isa_tms320.tcc"
OpANDN_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 54435 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54439 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54443 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54446 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54450 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54453 "isa_tms320.tcc"
)
{
#line 1192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ANDN " << imm << ", " << dst_name;
		return true;
	}
#line 54466 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 54471 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54474 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54478 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54481 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 54485 "isa_tms320.tcc"
OpANDN_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 54489 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54493 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54497 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54500 "isa_tms320.tcc"
)
{
#line 1314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = ~imm & dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 54531 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54537 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54540 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54544 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54547 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54552 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54556 "isa_tms320.tcc"
> *DecodeOpANDN_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54562 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54566 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ANDN (bitwise-logical AND with complement)
**********************************************************/
/**********************************************************
* ASH (arithmetic shift)
* op ASH(0b000[3]:0b000111[6]:g[2]:dst[5]:count[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 54579 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54582 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54589 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54593 "isa_tms320.tcc"
OpASH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 54597 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54601 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54605 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54608 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54612 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54615 "isa_tms320.tcc"
)
{
#line 1355 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "ASH " << src_name << ", " << dst_name;
		return true;
	}
#line 54629 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 54634 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54637 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54641 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54644 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 54648 "isa_tms320.tcc"
OpASH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 54652 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54656 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54660 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54663 "isa_tms320.tcc"
)
{
#line 1398 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(dst_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 54733 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54739 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54742 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54746 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54749 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54754 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54758 "isa_tms320.tcc"
> *DecodeOpASH_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54764 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54768 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54775 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54778 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54785 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54789 "isa_tms320.tcc"
OpASH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54793 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54797 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54801 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54804 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 54808 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 54811 "isa_tms320.tcc"
)
{
#line 1366 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "ASH " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 54825 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 54830 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54833 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54837 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54840 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 54844 "isa_tms320.tcc"
OpASH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54852 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 54856 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 54859 "isa_tms320.tcc"
)
{
#line 1465 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(dst_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 54932 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 54938 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54941 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54945 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54948 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 54953 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54957 "isa_tms320.tcc"
> *DecodeOpASH_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 54963 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 54967 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 54974 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 54977 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 54981 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 54984 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 54988 "isa_tms320.tcc"
OpASH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 54992 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 54996 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55000 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55003 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55007 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55010 "isa_tms320.tcc"
)
{
#line 1377 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "ASH " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 55024 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55029 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55032 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55036 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55039 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55043 "isa_tms320.tcc"
OpASH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 55047 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55051 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55055 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55058 "isa_tms320.tcc"
)
{
#line 1535 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(dst_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 55138 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55144 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55147 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55151 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55154 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55159 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55163 "isa_tms320.tcc"
> *DecodeOpASH_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55169 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55173 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 55180 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55183 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55187 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55190 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55194 "isa_tms320.tcc"
OpASH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 55198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55202 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55206 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55209 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55213 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55216 "isa_tms320.tcc"
)
{
#line 1388 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ASH " << imm << ", " << dst_name;
		return true;
	}
#line 55229 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55244 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55248 "isa_tms320.tcc"
OpASH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 55252 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55256 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55260 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55263 "isa_tms320.tcc"
)
{
#line 1612 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Sign extend the 7 LSB of the immediate value to get the shift count
		int32_t count = imm; // imm has alread been sign extended by the decoder

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(dst_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 55330 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55336 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55339 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55343 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55346 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55351 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55355 "isa_tms320.tcc"
> *DecodeOpASH_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55361 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55365 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ASH (arithmetic shift)
**********************************************************/
/**********************************************************
* CMPF (compare floating-point values)
* op CMPF(0b000[3]:0b001000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 55378 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55381 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55385 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55388 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55392 "isa_tms320.tcc"
OpCMPF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 55396 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55400 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55404 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55407 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55411 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55414 "isa_tms320.tcc"
)
{
#line 1689 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "CMPF " << src_name << ", " << dst_name;
		return true;
	}
#line 55428 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55433 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55436 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55443 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55447 "isa_tms320.tcc"
OpCMPF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 55451 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55455 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55459 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55462 "isa_tms320.tcc"
)
{
#line 1732 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 55469 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55475 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55478 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55482 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55485 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55490 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55494 "isa_tms320.tcc"
> *DecodeOpCMPF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55500 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55504 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 55511 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55514 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55518 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55521 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55525 "isa_tms320.tcc"
OpCMPF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 55529 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55533 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55537 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55540 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55544 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55547 "isa_tms320.tcc"
)
{
#line 1700 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "CMPF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 55561 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55566 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55576 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55580 "isa_tms320.tcc"
OpCMPF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 55584 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55588 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55592 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55595 "isa_tms320.tcc"
)
{
#line 1736 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 55602 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55608 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55611 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55615 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55618 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55627 "isa_tms320.tcc"
> *DecodeOpCMPF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55633 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55637 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 55644 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55647 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55654 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55658 "isa_tms320.tcc"
OpCMPF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 55662 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55666 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55670 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55673 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55677 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55680 "isa_tms320.tcc"
)
{
#line 1711 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "CMPF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 55694 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55699 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55702 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55706 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55709 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55713 "isa_tms320.tcc"
OpCMPF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 55717 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55721 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55725 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55728 "isa_tms320.tcc"
)
{
#line 1740 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 55735 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55741 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55748 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55751 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55756 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55760 "isa_tms320.tcc"
> *DecodeOpCMPF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55766 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55770 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 55777 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55780 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55784 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55787 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55791 "isa_tms320.tcc"
OpCMPF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 55795 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55799 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55803 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55806 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55810 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55813 "isa_tms320.tcc"
)
{
#line 1722 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "CMPF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 55826 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55831 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55834 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55838 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55841 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55845 "isa_tms320.tcc"
OpCMPF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 55849 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55853 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55857 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55860 "isa_tms320.tcc"
)
{
#line 1744 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 55867 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 55873 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55880 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55883 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 55888 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55892 "isa_tms320.tcc"
> *DecodeOpCMPF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 55898 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 55902 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CMPF (compare floating-point values)
**********************************************************/
/**********************************************************
* CMPI (compare integers)
* op CMPI(0b000[3]:0b001001[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 55915 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55918 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55922 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55925 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 55929 "isa_tms320.tcc"
OpCMPI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 55933 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55937 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55941 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55944 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 55948 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 55951 "isa_tms320.tcc"
)
{
#line 1761 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "CMPI " << src_name << ", " << dst_name;
		return true;
	}
#line 55965 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 55970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 55973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 55977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 55980 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 55984 "isa_tms320.tcc"
OpCMPI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 55988 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 55992 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 55996 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 55999 "isa_tms320.tcc"
)
{
#line 1805 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 56032 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56038 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56041 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56045 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56048 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56053 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56057 "isa_tms320.tcc"
> *DecodeOpCMPI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56063 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56067 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56077 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56081 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56084 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56088 "isa_tms320.tcc"
OpCMPI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56092 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56096 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56100 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56103 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56107 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56110 "isa_tms320.tcc"
)
{
#line 1772 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "CMPI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 56124 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56129 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56132 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56136 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56139 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56143 "isa_tms320.tcc"
OpCMPI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56147 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56151 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56155 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56158 "isa_tms320.tcc"
)
{
#line 1835 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 56194 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56200 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56203 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56207 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56210 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56215 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56219 "isa_tms320.tcc"
> *DecodeOpCMPI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56225 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56229 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56236 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56239 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56243 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56246 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56250 "isa_tms320.tcc"
OpCMPI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56258 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56262 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56265 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56269 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56272 "isa_tms320.tcc"
)
{
#line 1783 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "CMPI " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 56287 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56292 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56295 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56299 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56302 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56306 "isa_tms320.tcc"
OpCMPI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56310 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56314 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56318 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56321 "isa_tms320.tcc"
)
{
#line 1868 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 56370 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56383 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56386 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56395 "isa_tms320.tcc"
> *DecodeOpCMPI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56401 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56405 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56412 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56415 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56419 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56422 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56426 "isa_tms320.tcc"
OpCMPI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 56430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56434 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56438 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56441 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56445 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56448 "isa_tms320.tcc"
)
{
#line 1795 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "CMPI " << imm << ", " << dst_name;
		return true;
	}
#line 56461 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56466 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56469 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56473 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56476 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56480 "isa_tms320.tcc"
OpCMPI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 56484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56488 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56492 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56495 "isa_tms320.tcc"
)
{
#line 1914 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, dst_value, imm, 0);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 56525 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56531 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56534 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56538 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56541 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56546 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56550 "isa_tms320.tcc"
> *DecodeOpCMPI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56556 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56560 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CMPI (compare integers)
**********************************************************/
/**********************************************************
* FIX (convert floating-point value to integer)
* op FIX(0b000[3]:0b001010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 56573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56580 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56583 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56587 "isa_tms320.tcc"
OpFIX_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 56591 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56595 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56599 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56602 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56606 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56609 "isa_tms320.tcc"
)
{
#line 1954 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "FIX " << src_name << ", " << dst_name;
		return true;
	}
#line 56623 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56628 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56631 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56635 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56638 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56642 "isa_tms320.tcc"
OpFIX_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 56646 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56650 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56654 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56657 "isa_tms320.tcc"
)
{
#line 1997 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 56664 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56670 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56673 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56677 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56680 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56685 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56689 "isa_tms320.tcc"
> *DecodeOpFIX_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56695 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56699 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56706 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56709 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56713 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56716 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56720 "isa_tms320.tcc"
OpFIX_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56724 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56728 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56732 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56735 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56739 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56742 "isa_tms320.tcc"
)
{
#line 1965 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "FIX " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 56756 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56761 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56768 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56771 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56775 "isa_tms320.tcc"
OpFIX_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56779 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56783 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56787 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56790 "isa_tms320.tcc"
)
{
#line 2001 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 56797 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56803 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56806 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56810 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56813 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56818 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56822 "isa_tms320.tcc"
> *DecodeOpFIX_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56828 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56832 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56839 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56842 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56846 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56849 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56853 "isa_tms320.tcc"
OpFIX_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56857 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56861 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56865 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56868 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 56872 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 56875 "isa_tms320.tcc"
)
{
#line 1976 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "FIX " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 56889 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 56894 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56897 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56901 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56904 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 56908 "isa_tms320.tcc"
OpFIX_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 56912 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56916 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56920 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 56923 "isa_tms320.tcc"
)
{
#line 2005 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 56930 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 56936 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56939 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56943 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56946 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 56951 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56955 "isa_tms320.tcc"
> *DecodeOpFIX_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 56961 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 56965 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 56972 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 56975 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 56979 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 56982 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 56986 "isa_tms320.tcc"
OpFIX_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 56990 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 56994 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 56998 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57001 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57005 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57008 "isa_tms320.tcc"
)
{
#line 1987 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "FIX " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 57021 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57026 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57029 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57033 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57036 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57040 "isa_tms320.tcc"
OpFIX_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 57044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57048 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57052 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57055 "isa_tms320.tcc"
)
{
#line 2009 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 57062 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57078 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57087 "isa_tms320.tcc"
> *DecodeOpFIX_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57093 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57097 "isa_tms320.tcc"
	>(code, addr);
}

/* end of FIX (convert floating-point value to integer)
**********************************************************/
/**********************************************************
* FLOAT (convert integer to floating-point value)
* op FLOAT(0b000[3]:0b001011[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 57110 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57113 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57117 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57120 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57124 "isa_tms320.tcc"
OpFLOAT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 57128 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57132 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57136 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57139 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57143 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57146 "isa_tms320.tcc"
)
{
#line 2026 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "FLOAT " << src_name << ", " << dst_name;
		return true;
	}
#line 57160 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57165 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57168 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57172 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57175 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57179 "isa_tms320.tcc"
OpFLOAT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 57183 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57187 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57191 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57194 "isa_tms320.tcc"
)
{
#line 2069 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 57201 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57207 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57210 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57214 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57217 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57222 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57226 "isa_tms320.tcc"
> *DecodeOpFLOAT_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57232 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57236 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 57243 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57246 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57250 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57253 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57257 "isa_tms320.tcc"
OpFLOAT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 57261 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57265 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57269 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57272 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57276 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57279 "isa_tms320.tcc"
)
{
#line 2037 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "FLOAT " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 57293 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57298 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57301 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57305 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57308 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57312 "isa_tms320.tcc"
OpFLOAT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 57316 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57320 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57324 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57327 "isa_tms320.tcc"
)
{
#line 2073 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 57334 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57340 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57343 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57347 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57350 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57355 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57359 "isa_tms320.tcc"
> *DecodeOpFLOAT_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57365 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57369 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 57376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57383 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57386 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57390 "isa_tms320.tcc"
OpFLOAT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 57394 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57398 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57402 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57405 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57409 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57412 "isa_tms320.tcc"
)
{
#line 2048 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "FLOAT " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 57426 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57431 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57434 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57438 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57441 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57445 "isa_tms320.tcc"
OpFLOAT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 57449 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57453 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57457 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57460 "isa_tms320.tcc"
)
{
#line 2077 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 57467 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57473 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57476 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57480 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57483 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57492 "isa_tms320.tcc"
> *DecodeOpFLOAT_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57498 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57502 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 57509 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57512 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57516 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57519 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57523 "isa_tms320.tcc"
OpFLOAT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 57527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57531 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57535 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57538 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57542 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57545 "isa_tms320.tcc"
)
{
#line 2059 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "FLOAT " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 57558 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57563 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57566 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57570 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57573 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57577 "isa_tms320.tcc"
OpFLOAT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 57581 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57585 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57589 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57592 "isa_tms320.tcc"
)
{
#line 2081 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 57599 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57605 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57608 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57612 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57615 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57620 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57624 "isa_tms320.tcc"
> *DecodeOpFLOAT_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57630 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57634 "isa_tms320.tcc"
	>(code, addr);
}

/* end of FLOAT (convert integer to floating-point value)
**********************************************************/
/**********************************************************
* LSH (logical shift)
* op LSH(0b000[3]:0b010011[6]:g[2]:dst[5]:count[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 57647 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57650 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57654 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57657 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57661 "isa_tms320.tcc"
OpLSH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 57665 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57669 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57673 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57676 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57680 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57683 "isa_tms320.tcc"
)
{
#line 2098 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "LSH " << src_name << ", " << dst_name;
		return true;
	}
#line 57697 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57702 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57705 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57709 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57712 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57716 "isa_tms320.tcc"
OpLSH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 57720 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57724 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57728 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57731 "isa_tms320.tcc"
)
{
#line 2141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t bit_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			bit_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, bit_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftRight(dst_value, count, bit_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			bit_out
			);
		}
	}
#line 57801 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 57807 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57810 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57814 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57817 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 57822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57826 "isa_tms320.tcc"
> *DecodeOpLSH_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 57832 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 57836 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 57843 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57846 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57850 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57853 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 57857 "isa_tms320.tcc"
OpLSH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 57861 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57865 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57869 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57872 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 57876 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 57879 "isa_tms320.tcc"
)
{
#line 2109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "LSH " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 57893 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 57898 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 57901 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 57905 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 57908 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 57912 "isa_tms320.tcc"
OpLSH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 57916 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 57920 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 57924 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 57927 "isa_tms320.tcc"
)
{
#line 2208 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t bit_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			bit_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, bit_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftRight(dst_value, count, bit_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			bit_out
			);
		}
	}
#line 58000 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58006 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58009 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58013 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58016 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58021 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58025 "isa_tms320.tcc"
> *DecodeOpLSH_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58031 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58035 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 58042 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58045 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58049 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58052 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58056 "isa_tms320.tcc"
OpLSH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58060 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58064 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58068 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58071 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58075 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58078 "isa_tms320.tcc"
)
{
#line 2120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "LSH " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 58092 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58097 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58100 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58104 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58107 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58111 "isa_tms320.tcc"
OpLSH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58115 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58119 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58123 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58126 "isa_tms320.tcc"
)
{
#line 2278 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the source operand value to get the shift count
		int32_t count = SignExtend(src_value, 7);

		// Compute the result
		uint8_t bit_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			bit_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, bit_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftRight(dst_value, count, bit_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			bit_out
			);
		}
	}
#line 58206 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58212 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58215 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58219 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58222 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58227 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58231 "isa_tms320.tcc"
> *DecodeOpLSH_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58237 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58241 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 58248 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58251 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58255 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58258 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58262 "isa_tms320.tcc"
OpLSH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 58266 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58270 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58274 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58277 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58281 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58284 "isa_tms320.tcc"
)
{
#line 2131 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "LSH " << imm << ", " << dst_name;
		return true;
	}
#line 58297 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58302 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58305 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58309 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58312 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58316 "isa_tms320.tcc"
OpLSH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 58320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58324 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58328 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58331 "isa_tms320.tcc"
)
{
#line 2355 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the source and destination registers are valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Sign extend the 7 LSB of the immediate value to get the shift count
		int32_t count = imm; // imm has alread been sign extended by the decoder

		// Compute the result
		uint8_t bit_out;
		uint32_t result;

		if(count == 0)
		{
			result = dst_value;
			bit_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftLeft(dst_value, count, bit_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				bit_out = 0;
			}
			else
			{
				result = ShiftRight(dst_value, count, bit_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			bit_out
			);
		}
	}
#line 58398 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58404 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58407 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58411 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58414 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58419 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58423 "isa_tms320.tcc"
> *DecodeOpLSH_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58429 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58433 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LSH (logical shift)
**********************************************************/
/**********************************************************
* MPYF (multiply floating-point values)
* op MPYF(0b000[3]:0b010100[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 58446 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58449 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58453 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58456 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58460 "isa_tms320.tcc"
OpMPYF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 58464 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58468 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58472 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58475 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58479 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58482 "isa_tms320.tcc"
)
{
#line 2432 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "MPYF " << src_name << ", " << dst_name;
		return true;
	}
#line 58496 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58501 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58504 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58508 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58511 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58515 "isa_tms320.tcc"
OpMPYF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 58519 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58523 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58527 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58530 "isa_tms320.tcc"
)
{
#line 2475 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 58537 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58543 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58546 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58550 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58553 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58558 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58562 "isa_tms320.tcc"
> *DecodeOpMPYF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58568 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58572 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 58579 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58582 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58589 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58593 "isa_tms320.tcc"
OpMPYF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58597 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58601 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58605 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58608 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58612 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58615 "isa_tms320.tcc"
)
{
#line 2443 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "MPYF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 58629 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58634 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58637 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58641 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58644 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58648 "isa_tms320.tcc"
OpMPYF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58652 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58656 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58660 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58663 "isa_tms320.tcc"
)
{
#line 2479 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 58670 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58676 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58679 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58683 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58686 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58691 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58695 "isa_tms320.tcc"
> *DecodeOpMPYF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58701 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58705 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 58712 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58719 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58722 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58726 "isa_tms320.tcc"
OpMPYF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58734 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58738 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58741 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58745 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58748 "isa_tms320.tcc"
)
{
#line 2454 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "MPYF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 58762 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58767 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58770 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58774 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58777 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58781 "isa_tms320.tcc"
OpMPYF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 58785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58789 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58793 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58796 "isa_tms320.tcc"
)
{
#line 2483 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 58803 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58809 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58812 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58819 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58824 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58828 "isa_tms320.tcc"
> *DecodeOpMPYF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58834 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58838 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 58845 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58852 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58855 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58859 "isa_tms320.tcc"
OpMPYF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 58863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58867 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58871 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58874 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 58878 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 58881 "isa_tms320.tcc"
)
{
#line 2465 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "MPYF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 58894 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 58899 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58902 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58906 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58909 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 58913 "isa_tms320.tcc"
OpMPYF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 58917 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58921 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 58925 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 58928 "isa_tms320.tcc"
)
{
#line 2487 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 58935 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 58941 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58944 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58948 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58951 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 58956 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 58960 "isa_tms320.tcc"
> *DecodeOpMPYF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 58966 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 58970 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF (multiply floating-point values)
**********************************************************/
/**********************************************************
* MPYI (multiply integers)
* op MPYI(0b000[3]:0b010101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 58983 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 58986 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 58990 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 58993 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 58997 "isa_tms320.tcc"
OpMPYI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 59001 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59005 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59009 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59012 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59016 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59019 "isa_tms320.tcc"
)
{
#line 2504 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "MPYI " << src_name << ", " << dst_name;
		return true;
	}
#line 59033 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59038 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59041 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59045 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59048 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59052 "isa_tms320.tcc"
OpMPYI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 59056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59060 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59064 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59067 "isa_tms320.tcc"
)
{
#line 2547 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand and sign extend value from 24 bits to 64 bits
		int64_t src_value = SignExtend((uint64_t)(cpu.GetReg(src) & 0xffffff), 24);

		// Read destination operand and sign extend value from 24 bits to 64 bits
		int64_t dst_value = SignExtend((uint64_t)(cpu.GetReg(dst) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src_value * dst_value;   // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 59114 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59120 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59123 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59127 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59130 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59135 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59139 "isa_tms320.tcc"
> *DecodeOpMPYI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59145 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59149 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59156 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59159 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59163 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59166 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59170 "isa_tms320.tcc"
OpMPYI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59174 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59178 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59182 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59185 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59189 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59192 "isa_tms320.tcc"
)
{
#line 2515 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "MPYI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 59206 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59211 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59214 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59218 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59221 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59225 "isa_tms320.tcc"
OpMPYI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59229 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59233 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59237 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59240 "isa_tms320.tcc"
)
{
#line 2591 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand and sign extend value from 24 bits to 64 bits
		int64_t dst_value = SignExtend((uint64_t)(cpu.GetReg(dst) & 0xffffff), 24);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src_value = SignExtend((uint64_t)(cpu.IntLoad(ea) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src_value * dst_value;   // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 59290 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59296 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59299 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59303 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59306 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59311 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59315 "isa_tms320.tcc"
> *DecodeOpMPYI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59321 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59325 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59332 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59335 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59339 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59342 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59346 "isa_tms320.tcc"
OpMPYI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59350 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59354 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59358 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59361 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59365 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59368 "isa_tms320.tcc"
)
{
#line 2526 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "MPYI " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 59382 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59390 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59394 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59397 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59401 "isa_tms320.tcc"
OpMPYI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59405 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59409 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59413 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59416 "isa_tms320.tcc"
)
{
#line 2638 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand and sign extend value from 24 bits to 64 bits
		int64_t dst_value = SignExtend((uint64_t)(cpu.GetReg(dst) & 0xffffff), 24);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory and sign extend value from 24 bits to 64 bits
		uint32_t src_value = SignExtend((uint64_t)(cpu.IntLoad(ea) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src_value * dst_value;   // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 59479 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59495 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59500 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59504 "isa_tms320.tcc"
> *DecodeOpMPYI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59510 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59514 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59521 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59524 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59528 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59531 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59535 "isa_tms320.tcc"
OpMPYI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 59539 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59543 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59547 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59550 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59554 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59557 "isa_tms320.tcc"
)
{
#line 2537 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "MPYI " << imm << ", " << dst_name;
		return true;
	}
#line 59570 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59575 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59578 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59582 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59585 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59589 "isa_tms320.tcc"
OpMPYI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 59593 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59597 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59601 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59604 "isa_tms320.tcc"
)
{
#line 2698 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand and sign extend value from 24 bits to 64 bits
		int64_t dst_value = SignExtend((uint64_t)(cpu.GetReg(dst) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		// Note: imm has been sign extended from 16 bits to 32 bits the decoder
		// Below, imm is sign extended from 32 bits to 64 bits
		int64_t result64 = imm * dst_value;         // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 59650 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59656 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59659 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59663 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59666 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59671 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59675 "isa_tms320.tcc"
> *DecodeOpMPYI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59681 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59685 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYI (multiply integers)
**********************************************************/
/**********************************************************
* NEGB (negate integer with borrow)
* op NEGB(0b000[3]:0b010110[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 59698 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59701 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59705 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59708 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59712 "isa_tms320.tcc"
OpNEGB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 59716 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59720 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59724 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59727 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59731 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59734 "isa_tms320.tcc"
)
{
#line 2754 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NEGB " << src_name << ", " << dst_name;
		return true;
	}
#line 59748 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59753 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59756 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59760 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59763 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59767 "isa_tms320.tcc"
OpNEGB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 59771 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59775 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59779 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59782 "isa_tms320.tcc"
)
{
#line 2797 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 59826 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 59832 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59839 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59842 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 59847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59851 "isa_tms320.tcc"
> *DecodeOpNEGB_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 59857 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 59861 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 59868 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59871 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59875 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59878 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 59882 "isa_tms320.tcc"
OpNEGB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59886 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59890 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59894 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59897 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 59901 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 59904 "isa_tms320.tcc"
)
{
#line 2765 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "NEGB " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 59918 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 59923 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 59926 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 59930 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 59933 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 59937 "isa_tms320.tcc"
OpNEGB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 59941 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 59945 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 59949 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 59952 "isa_tms320.tcc"
)
{
#line 2838 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 59999 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60005 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60008 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60015 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60020 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60024 "isa_tms320.tcc"
> *DecodeOpNEGB_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60030 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60034 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60041 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60051 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60055 "isa_tms320.tcc"
OpNEGB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60059 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60063 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60067 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60070 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60074 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60077 "isa_tms320.tcc"
)
{
#line 2776 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "NEGB " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 60091 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60096 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60099 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60106 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60110 "isa_tms320.tcc"
OpNEGB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60118 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60122 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60125 "isa_tms320.tcc"
)
{
#line 2882 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 60185 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60191 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60194 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60201 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60206 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60210 "isa_tms320.tcc"
> *DecodeOpNEGB_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60216 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60220 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60227 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60230 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60237 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60241 "isa_tms320.tcc"
OpNEGB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 60245 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60249 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60253 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60256 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60260 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60263 "isa_tms320.tcc"
)
{
#line 2787 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NEGB " << imm << ", " << dst_name;
		return true;
	}
#line 60276 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60281 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60284 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60288 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60291 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60295 "isa_tms320.tcc"
OpNEGB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 60299 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60303 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60307 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60310 "isa_tms320.tcc"
)
{
#line 2939 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, imm, borrow_in);
		else
		Sub32(result, borrow_out, overflow, 0, imm, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 60351 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60357 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60364 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60367 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60372 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60376 "isa_tms320.tcc"
> *DecodeOpNEGB_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60382 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60386 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGB (negate integer with borrow)
**********************************************************/
/**********************************************************
* NEGF (negate floating-point value)
* op NEGF(0b000[3]:0b010111[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 60399 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60402 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60406 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60409 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60413 "isa_tms320.tcc"
OpNEGF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 60417 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60421 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60425 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60428 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60432 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60435 "isa_tms320.tcc"
)
{
#line 2990 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NEGF " << src_name << ", " << dst_name;
		return true;
	}
#line 60449 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60457 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60461 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60464 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60468 "isa_tms320.tcc"
OpNEGF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 60472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60476 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60480 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60483 "isa_tms320.tcc"
)
{
#line 3033 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 60490 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60496 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60499 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60503 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60506 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60511 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60515 "isa_tms320.tcc"
> *DecodeOpNEGF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60521 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60525 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60532 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60539 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60542 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60546 "isa_tms320.tcc"
OpNEGF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60550 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60554 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60558 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60561 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60565 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60568 "isa_tms320.tcc"
)
{
#line 3001 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "NEGF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 60582 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60587 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60590 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60594 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60597 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60601 "isa_tms320.tcc"
OpNEGF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60605 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60609 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60613 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60616 "isa_tms320.tcc"
)
{
#line 3037 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 60623 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60629 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60632 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60636 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60639 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60644 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60648 "isa_tms320.tcc"
> *DecodeOpNEGF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60654 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60658 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60665 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60668 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60672 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60675 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60679 "isa_tms320.tcc"
OpNEGF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60683 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60687 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60691 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60694 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60698 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60701 "isa_tms320.tcc"
)
{
#line 3012 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "NEGF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 60715 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60720 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60723 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60727 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60730 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60734 "isa_tms320.tcc"
OpNEGF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 60738 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60742 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60746 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60749 "isa_tms320.tcc"
)
{
#line 3041 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 60756 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60762 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60765 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60769 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60772 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60777 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60781 "isa_tms320.tcc"
> *DecodeOpNEGF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60787 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60791 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 60798 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60801 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60805 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60808 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60812 "isa_tms320.tcc"
OpNEGF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 60816 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60820 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60824 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60827 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60831 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60834 "isa_tms320.tcc"
)
{
#line 3023 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NEGF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 60847 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60852 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60855 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60859 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60862 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 60866 "isa_tms320.tcc"
OpNEGF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 60870 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60874 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60878 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60881 "isa_tms320.tcc"
)
{
#line 3045 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 60888 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 60894 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60897 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60901 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60904 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 60909 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60913 "isa_tms320.tcc"
> *DecodeOpNEGF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 60919 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 60923 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGF (negate floating-point value)
**********************************************************/
/**********************************************************
* NEGI (negate integer)
* op NEGI(0b000[3]:0b011000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 60936 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60939 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60943 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 60946 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 60950 "isa_tms320.tcc"
OpNEGI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 60954 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 60958 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 60962 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 60965 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 60969 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 60972 "isa_tms320.tcc"
)
{
#line 3062 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NEGI " << src_name << ", " << dst_name;
		return true;
	}
#line 60986 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 60991 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 60994 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 60998 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61001 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61005 "isa_tms320.tcc"
OpNEGI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 61009 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61013 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61017 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61020 "isa_tms320.tcc"
)
{
#line 3105 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 61061 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61067 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61077 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61086 "isa_tms320.tcc"
> *DecodeOpNEGI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61092 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61096 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61106 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61110 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61113 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61117 "isa_tms320.tcc"
OpNEGI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61121 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61125 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61129 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61132 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61136 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61139 "isa_tms320.tcc"
)
{
#line 3073 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "NEGI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 61153 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61158 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61161 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61165 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61168 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61172 "isa_tms320.tcc"
OpNEGI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61176 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61180 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61184 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61187 "isa_tms320.tcc"
)
{
#line 3143 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 61231 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61237 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61240 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61244 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61247 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61252 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61256 "isa_tms320.tcc"
> *DecodeOpNEGI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61262 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61266 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61273 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61276 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61283 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61287 "isa_tms320.tcc"
OpNEGI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61295 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61299 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61302 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61306 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61309 "isa_tms320.tcc"
)
{
#line 3084 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "NEGI " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 61323 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61328 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61331 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61335 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61338 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61342 "isa_tms320.tcc"
OpNEGI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61350 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61354 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61357 "isa_tms320.tcc"
)
{
#line 3184 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, 0, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 61414 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61420 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61423 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61427 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61430 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61435 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61439 "isa_tms320.tcc"
> *DecodeOpNEGI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61445 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61449 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61456 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61459 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61463 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61466 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61470 "isa_tms320.tcc"
OpNEGI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 61474 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61478 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61482 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61485 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61489 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61492 "isa_tms320.tcc"
)
{
#line 3095 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NEGI " << imm << ", " << dst_name;
		return true;
	}
#line 61505 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61510 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61513 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61517 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61520 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61524 "isa_tms320.tcc"
OpNEGI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 61528 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61532 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61536 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61539 "isa_tms320.tcc"
)
{
#line 3238 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, imm, 0);
		else
		Sub32(result, borrow_out, overflow, 0, imm, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 61580 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61589 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61593 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61596 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61601 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61605 "isa_tms320.tcc"
> *DecodeOpNEGI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61611 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61615 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGI (negate integer)
**********************************************************/
/**********************************************************
* NORM (normalize floating-point value)
* op NORM(0b000[3]:0b011010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 61628 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61631 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61635 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61638 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61642 "isa_tms320.tcc"
OpNORM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 61646 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61650 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61654 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61657 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61661 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61664 "isa_tms320.tcc"
)
{
#line 3289 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NORM " << src_name << ", " << dst_name;
		return true;
	}
#line 61678 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61683 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61686 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61690 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61693 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61697 "isa_tms320.tcc"
OpNORM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 61701 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61705 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61709 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61712 "isa_tms320.tcc"
)
{
#line 3332 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 61719 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61725 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61728 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61732 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61735 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61740 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61744 "isa_tms320.tcc"
> *DecodeOpNORM_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNORM_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61750 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61754 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61761 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61768 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61771 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61775 "isa_tms320.tcc"
OpNORM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61779 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61783 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61787 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61790 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61794 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61797 "isa_tms320.tcc"
)
{
#line 3300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "NORM " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 61811 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61819 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61823 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61826 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61830 "isa_tms320.tcc"
OpNORM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61834 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61838 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61842 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61845 "isa_tms320.tcc"
)
{
#line 3336 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 61852 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61858 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61861 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61865 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61868 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 61873 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61877 "isa_tms320.tcc"
> *DecodeOpNORM_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNORM_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 61883 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 61887 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 61894 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61897 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61901 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61904 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 61908 "isa_tms320.tcc"
OpNORM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61912 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61916 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61920 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61923 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 61927 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 61930 "isa_tms320.tcc"
)
{
#line 3311 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "NORM " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 61944 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 61949 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61956 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 61959 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 61963 "isa_tms320.tcc"
OpNORM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 61967 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 61971 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 61975 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 61978 "isa_tms320.tcc"
)
{
#line 3340 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 61985 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 61991 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 61994 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 61998 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62001 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62006 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62010 "isa_tms320.tcc"
> *DecodeOpNORM_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNORM_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62016 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62020 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62034 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62037 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62041 "isa_tms320.tcc"
OpNORM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 62045 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62049 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62053 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62056 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62060 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62063 "isa_tms320.tcc"
)
{
#line 3322 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NORM " << imm << ", " << dst_name;
		return true;
	}
#line 62076 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62081 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62084 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62088 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62091 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62095 "isa_tms320.tcc"
OpNORM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 62099 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62103 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62107 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62110 "isa_tms320.tcc"
)
{
#line 3344 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 62117 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62123 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62126 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62130 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62133 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62138 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62142 "isa_tms320.tcc"
> *DecodeOpNORM_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNORM_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62148 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62152 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NORM (normalize floating-point value)
**********************************************************/
/**********************************************************
* NOT (bitwise-logical complement)
* op NOT(0b000[3]:0b011011[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 62165 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62168 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62172 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62175 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62179 "isa_tms320.tcc"
OpNOT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 62183 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62187 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62191 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62194 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62198 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62201 "isa_tms320.tcc"
)
{
#line 3361 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "NOT " << src_name << ", " << dst_name;
		return true;
	}
#line 62215 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62220 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62223 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62227 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62230 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62234 "isa_tms320.tcc"
OpNOT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 62238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62242 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62246 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62249 "isa_tms320.tcc"
)
{
#line 3404 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Compute the result
		uint32_t result = ~src_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 62280 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62286 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62289 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62293 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62296 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62301 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62305 "isa_tms320.tcc"
> *DecodeOpNOT_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62311 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62315 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62322 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62325 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62329 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62332 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62336 "isa_tms320.tcc"
OpNOT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62340 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62344 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62348 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62351 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62355 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62358 "isa_tms320.tcc"
)
{
#line 3372 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "NOT " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 62372 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62377 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62384 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62387 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62391 "isa_tms320.tcc"
OpNOT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62395 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62399 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62403 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62406 "isa_tms320.tcc"
)
{
#line 3432 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = ~src_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 62440 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62446 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62449 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62453 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62456 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62461 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62465 "isa_tms320.tcc"
> *DecodeOpNOT_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62471 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62475 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62482 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62485 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62489 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62492 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62496 "isa_tms320.tcc"
OpNOT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62500 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62504 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62508 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62511 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62515 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62518 "isa_tms320.tcc"
)
{
#line 3383 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "NOT " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 62532 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62537 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62540 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62544 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62547 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62551 "isa_tms320.tcc"
OpNOT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62555 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62559 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62563 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62566 "isa_tms320.tcc"
)
{
#line 3463 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = ~src_value;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 62613 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62619 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62622 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62626 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62629 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62634 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62638 "isa_tms320.tcc"
> *DecodeOpNOT_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62644 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62648 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62662 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62665 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62669 "isa_tms320.tcc"
OpNOT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 62673 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62677 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62681 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62684 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62688 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62691 "isa_tms320.tcc"
)
{
#line 3394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "NOT " << imm << ", " << dst_name;
		return true;
	}
#line 62704 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62709 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62716 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62719 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62723 "isa_tms320.tcc"
OpNOT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 62727 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62731 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62735 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62738 "isa_tms320.tcc"
)
{
#line 3507 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = ~imm;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 62769 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62775 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62778 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62785 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62790 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62794 "isa_tms320.tcc"
> *DecodeOpNOT_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62800 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62804 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NOT (bitwise-logical complement)
**********************************************************/
/**********************************************************
* OR (bitwise-logical OR)
* op OR(0b000[3]:0b100000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 62817 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62820 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62824 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62827 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62831 "isa_tms320.tcc"
OpOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 62835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62839 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62843 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62846 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 62850 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 62853 "isa_tms320.tcc"
)
{
#line 3548 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "OR " << src_name << ", " << dst_name;
		return true;
	}
#line 62867 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 62872 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62875 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62879 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62882 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 62886 "isa_tms320.tcc"
OpOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 62890 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62894 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 62898 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 62901 "isa_tms320.tcc"
)
{
#line 3591 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = src_value | dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 62935 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 62941 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62944 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62948 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62951 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 62956 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62960 "isa_tms320.tcc"
> *DecodeOpOR_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 62966 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 62970 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 62977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 62980 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 62984 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 62987 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 62991 "isa_tms320.tcc"
OpOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 62995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 62999 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63003 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63006 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63010 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63013 "isa_tms320.tcc"
)
{
#line 3559 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "OR " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 63027 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63032 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63035 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63039 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63042 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63046 "isa_tms320.tcc"
OpOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63050 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63054 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63058 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63061 "isa_tms320.tcc"
)
{
#line 3622 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value | dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 63098 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63104 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63107 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63111 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63114 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63119 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63123 "isa_tms320.tcc"
> *DecodeOpOR_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63129 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63133 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63140 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63143 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63150 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63154 "isa_tms320.tcc"
OpOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63158 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63162 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63166 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63169 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63173 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63176 "isa_tms320.tcc"
)
{
#line 3570 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "OR " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 63190 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63205 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63209 "isa_tms320.tcc"
OpOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63217 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63221 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63224 "isa_tms320.tcc"
)
{
#line 3656 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value | dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 63274 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63283 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63287 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63290 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63295 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63299 "isa_tms320.tcc"
> *DecodeOpOR_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63305 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63309 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63316 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63319 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63323 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63326 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63330 "isa_tms320.tcc"
OpOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 63334 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63338 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63342 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63345 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63349 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63352 "isa_tms320.tcc"
)
{
#line 3581 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "OR " << imm << ", " << dst_name;
		return true;
	}
#line 63365 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63370 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63373 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63377 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63380 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63384 "isa_tms320.tcc"
OpOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 63388 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63392 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63396 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63399 "isa_tms320.tcc"
)
{
#line 3703 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = imm | dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 63430 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63436 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63439 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63443 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63446 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63451 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63455 "isa_tms320.tcc"
> *DecodeOpOR_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63461 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63465 "isa_tms320.tcc"
	>(code, addr);
}

/* end of OR (bitwise-logical OR)
**********************************************************/
/**********************************************************
* RND (round floating-point value)
* op RND(0b000[3]:0b100010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 63478 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63481 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63488 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63492 "isa_tms320.tcc"
OpRND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 63496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63500 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63504 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63507 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63511 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63514 "isa_tms320.tcc"
)
{
#line 3744 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "RND " << src_name << ", " << dst_name;
		return true;
	}
#line 63528 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63533 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63536 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63540 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63543 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63547 "isa_tms320.tcc"
OpRND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 63551 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63555 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63559 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63562 "isa_tms320.tcc"
)
{
#line 3787 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 63569 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63575 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63578 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63582 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63585 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63590 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63594 "isa_tms320.tcc"
> *DecodeOpRND_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRND_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63600 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63604 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63611 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63618 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63621 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63625 "isa_tms320.tcc"
OpRND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63629 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63633 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63637 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63640 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63644 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63647 "isa_tms320.tcc"
)
{
#line 3755 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "RND " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 63661 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63666 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63669 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63673 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63676 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63680 "isa_tms320.tcc"
OpRND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63688 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63692 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63695 "isa_tms320.tcc"
)
{
#line 3791 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 63702 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63708 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63711 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63715 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63718 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63723 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63727 "isa_tms320.tcc"
> *DecodeOpRND_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRND_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63733 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63737 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63744 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63747 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63751 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63754 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63758 "isa_tms320.tcc"
OpRND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63762 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63766 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63770 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63773 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63777 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63780 "isa_tms320.tcc"
)
{
#line 3766 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "RND " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 63794 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63799 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63802 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63806 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63809 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63813 "isa_tms320.tcc"
OpRND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 63817 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63821 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63825 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63828 "isa_tms320.tcc"
)
{
#line 3795 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 63835 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63841 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63844 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63848 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63851 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63856 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63860 "isa_tms320.tcc"
> *DecodeOpRND_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRND_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63866 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 63870 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 63877 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63880 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63884 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63887 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 63891 "isa_tms320.tcc"
OpRND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 63895 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63899 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63903 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63906 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 63910 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 63913 "isa_tms320.tcc"
)
{
#line 3777 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "RND " << imm << ", " << dst_name;
		return true;
	}
#line 63926 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 63931 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63934 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63938 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63941 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 63945 "isa_tms320.tcc"
OpRND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 63949 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63953 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 63957 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 63960 "isa_tms320.tcc"
)
{
#line 3799 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 63967 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 63973 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 63976 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 63980 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 63983 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 63988 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 63992 "isa_tms320.tcc"
> *DecodeOpRND_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRND_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 63998 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64002 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RND (round floating-point value)
**********************************************************/
/**********************************************************
* ROL (rotate left)
* op ROL(0b000[3]:0b100011[6]:0b11[2]:dst[5]:0b0000000000000001[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 64015 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64018 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64022 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64025 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64029 "isa_tms320.tcc"
OpROL<
#line 45 "isa/tms320.isa"
CONFIG
#line 64033 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64037 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64041 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64044 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64048 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64051 "isa_tms320.tcc"
)
{
#line 3813 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ROL " << dst_name;
		return true;
	}
#line 64064 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64069 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64072 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64076 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64079 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64083 "isa_tms320.tcc"
OpROL<
#line 45 "isa/tms320.isa"
CONFIG
#line 64087 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64091 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64095 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64098 "isa_tms320.tcc"
)
{
#line 3823 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint8_t carry_out;
		uint32_t result = RotateLeft(dst_value, 1, carry_out);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 64131 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64144 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64147 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64152 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64156 "isa_tms320.tcc"
> *DecodeOpROL(CodeType code, typename CONFIG::address_t addr)
{
	return new OpROL<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64162 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64166 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ROL (rotate left)
**********************************************************/
/**********************************************************
* ROLC (rotate left through carry)
* op ROLC(0b000[3]:0b100100[6]:0b11[2]:dst[5]:0b0000000000000001[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 64179 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64182 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64186 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64189 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64193 "isa_tms320.tcc"
OpROLC<
#line 45 "isa/tms320.isa"
CONFIG
#line 64197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64201 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64205 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64208 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64212 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64215 "isa_tms320.tcc"
)
{
#line 3863 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ROLC " << dst_name;
		return true;
	}
#line 64228 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64233 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64236 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64240 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64243 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64247 "isa_tms320.tcc"
OpROLC<
#line 45 "isa/tms320.isa"
CONFIG
#line 64251 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64255 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64259 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64262 "isa_tms320.tcc"
)
{
#line 3873 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint8_t carry_out;
		uint32_t result = RotateLeft(dst_value, 1, carry_in, carry_out);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 64298 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64304 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64307 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64311 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64314 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64319 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64323 "isa_tms320.tcc"
> *DecodeOpROLC(CodeType code, typename CONFIG::address_t addr)
{
	return new OpROLC<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64329 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64333 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ROLC (rotate left through carry)
**********************************************************/
/**********************************************************
* ROR (rotate right)
* op ROR(0b000[3]:0b100101[6]:0b11[2]:dst[5]:0b1111111111111111[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 64346 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64349 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64353 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64356 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64360 "isa_tms320.tcc"
OpROR<
#line 45 "isa/tms320.isa"
CONFIG
#line 64364 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64368 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64372 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64375 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64379 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64382 "isa_tms320.tcc"
)
{
#line 3916 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "ROR " << dst_name;
		return true;
	}
#line 64395 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64400 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64407 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64410 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64414 "isa_tms320.tcc"
OpROR<
#line 45 "isa/tms320.isa"
CONFIG
#line 64418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64422 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64426 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64429 "isa_tms320.tcc"
)
{
#line 3926 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint8_t carry_out;
		uint32_t result = RotateRight(dst_value, 1, carry_out);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 64462 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64468 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64471 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64475 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64478 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64483 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64487 "isa_tms320.tcc"
> *DecodeOpROR(CodeType code, typename CONFIG::address_t addr)
{
	return new OpROR<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64493 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64497 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ROR (rotate right)
**********************************************************/
/**********************************************************
* RORC (rotate right through carry)
* op RORC(0b000[3]:0b100110[6]:0b11[2]:dst[5]:0b1111111111111111[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 64510 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64513 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64517 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64520 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64524 "isa_tms320.tcc"
OpRORC<
#line 45 "isa/tms320.isa"
CONFIG
#line 64528 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64532 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64536 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64539 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64543 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64546 "isa_tms320.tcc"
)
{
#line 3966 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "RORC " << dst_name;
		return true;
	}
#line 64559 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64564 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64567 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64571 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64574 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64578 "isa_tms320.tcc"
OpRORC<
#line 45 "isa/tms320.isa"
CONFIG
#line 64582 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64586 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64590 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64593 "isa_tms320.tcc"
)
{
#line 3976 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check whether the destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint8_t carry_out;
		uint32_t result = RotateRight(dst_value, 1, carry_in, carry_out);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 64629 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64635 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64642 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64645 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64650 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64654 "isa_tms320.tcc"
> *DecodeOpRORC(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRORC<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64660 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64664 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RORC (rotate right through carry)
**********************************************************/
/**********************************************************
* SUBB (subtract integers with borrow)
* op SUBB(0b000[3]:0b101101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 64677 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64680 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64684 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64687 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64691 "isa_tms320.tcc"
OpSUBB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 64695 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64699 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64703 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64706 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64710 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64713 "isa_tms320.tcc"
)
{
#line 4022 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBB " << src_name << ", " << dst_name;
		return true;
	}
#line 64727 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64732 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64735 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64739 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64742 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64746 "isa_tms320.tcc"
OpSUBB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 64750 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64754 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64758 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64761 "isa_tms320.tcc"
)
{
#line 4066 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 64808 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64814 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64817 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64821 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64824 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 64829 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64833 "isa_tms320.tcc"
> *DecodeOpSUBB_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 64839 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 64843 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 64850 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64853 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64857 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64860 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 64864 "isa_tms320.tcc"
OpSUBB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64872 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64876 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64879 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 64883 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 64886 "isa_tms320.tcc"
)
{
#line 4033 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "SUBB " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 64900 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 64905 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64908 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64912 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 64915 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 64919 "isa_tms320.tcc"
OpSUBB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 64923 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 64927 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 64931 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 64934 "isa_tms320.tcc"
)
{
#line 4110 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 64984 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 64990 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 64993 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 64997 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65000 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65005 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65009 "isa_tms320.tcc"
> *DecodeOpSUBB_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65015 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65019 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65026 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65029 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65033 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65036 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 65040 "isa_tms320.tcc"
OpSUBB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65048 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65052 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65055 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65059 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65062 "isa_tms320.tcc"
)
{
#line 4044 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBB " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 65077 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65082 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65085 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65089 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65092 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65096 "isa_tms320.tcc"
OpSUBB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65100 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65104 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65108 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65111 "isa_tms320.tcc"
)
{
#line 4157 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 65174 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65180 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65183 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65187 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65190 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65195 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65199 "isa_tms320.tcc"
> *DecodeOpSUBB_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65205 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65209 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65219 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65223 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65226 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 65230 "isa_tms320.tcc"
OpSUBB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 65234 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65238 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65242 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65245 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65249 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65252 "isa_tms320.tcc"
)
{
#line 4056 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBB " << imm << ", " << dst_name;
		return true;
	}
#line 65265 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65270 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65273 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65277 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65280 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65284 "isa_tms320.tcc"
OpSUBB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 65288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65292 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65296 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65299 "isa_tms320.tcc"
)
{
#line 4217 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, imm, borrow_in);
		else
		Sub32(result, borrow_out, overflow, dst_value, imm, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 65343 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65349 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65352 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65356 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65359 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65364 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65368 "isa_tms320.tcc"
> *DecodeOpSUBB_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65374 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65378 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBB (subtract integers with borrow)
**********************************************************/
/**********************************************************
* SUBC (subtract integers conditionally)
* op SUBC(0b000[3]:0b101110[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 65391 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65394 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65398 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65401 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 65405 "isa_tms320.tcc"
OpSUBC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 65409 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65413 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65417 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65420 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65424 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65427 "isa_tms320.tcc"
)
{
#line 4271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBC " << src_name << ", " << dst_name;
		return true;
	}
#line 65441 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65446 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65449 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65453 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65456 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65460 "isa_tms320.tcc"
OpSUBC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 65464 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65468 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65472 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65475 "isa_tms320.tcc"
)
{
#line 4314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		int32_t substract_result = dst_value - src_value;
		uint32_t result = (substract_result << 1) | ((substract_result >= 0) ? 1 : 0);

		// Write back result
		cpu.SetReg(dst, result);
	}
#line 65499 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65505 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65508 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65512 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65515 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65520 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65524 "isa_tms320.tcc"
> *DecodeOpSUBC_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBC_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65530 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65534 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65541 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65544 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65548 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65551 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 65555 "isa_tms320.tcc"
OpSUBC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65559 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65563 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65567 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65570 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65574 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65577 "isa_tms320.tcc"
)
{
#line 4282 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "SUBC " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 65591 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65599 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65603 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65606 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65610 "isa_tms320.tcc"
OpSUBC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65618 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65622 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65625 "isa_tms320.tcc"
)
{
#line 4335 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		int32_t substract_result = dst_value - src_value;
		uint32_t result = (substract_result << 1) | ((substract_result >= 0) ? 1 : 0);

		// Write back result
		cpu.SetReg(dst, result);
	}
#line 65652 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65661 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65665 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65668 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65673 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65677 "isa_tms320.tcc"
> *DecodeOpSUBC_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBC_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65683 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65687 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65694 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65697 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65701 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65704 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 65708 "isa_tms320.tcc"
OpSUBC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65716 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65720 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65723 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65727 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65730 "isa_tms320.tcc"
)
{
#line 4293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBC " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 65744 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65749 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65752 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65756 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65759 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65763 "isa_tms320.tcc"
OpSUBC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 65767 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65771 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65775 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65778 "isa_tms320.tcc"
)
{
#line 4359 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		int32_t substract_result = dst_value - src_value;
		uint32_t result = (substract_result << 1) | ((substract_result >= 0) ? 1 : 0);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}
	}
#line 65818 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65824 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65827 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65831 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65834 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65839 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65843 "isa_tms320.tcc"
> *DecodeOpSUBC_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBC_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65849 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65853 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 65860 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65867 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65870 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 65874 "isa_tms320.tcc"
OpSUBC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 65878 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65882 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65886 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65889 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 65893 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 65896 "isa_tms320.tcc"
)
{
#line 4304 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBC " << imm << ", " << dst_name;
		return true;
	}
#line 65909 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 65914 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65917 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65921 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65924 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 65928 "isa_tms320.tcc"
OpSUBC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 65932 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65936 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 65940 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 65943 "isa_tms320.tcc"
)
{
#line 4396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		int32_t substract_result = dst_value - imm;
		uint32_t result = (substract_result << 1) | ((substract_result >= 0) ? 1 : 0);

		// Write back result
		cpu.SetReg(dst, result);
	}
#line 65964 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 65970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 65973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 65977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 65980 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 65985 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 65989 "isa_tms320.tcc"
> *DecodeOpSUBC_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBC_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 65995 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 65999 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBC (subtract integers conditionally)
**********************************************************/
/**********************************************************
* SUBF (subtract floating-point values)
* op SUBF(0b000[3]:0b101111[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 66012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66022 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66026 "isa_tms320.tcc"
OpSUBF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66034 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66038 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66041 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66045 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66048 "isa_tms320.tcc"
)
{
#line 4427 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBF " << src_name << ", " << dst_name;
		return true;
	}
#line 66062 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66067 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66077 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66081 "isa_tms320.tcc"
OpSUBF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66085 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66089 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66093 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66096 "isa_tms320.tcc"
)
{
#line 4470 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 66103 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66109 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66112 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66116 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66119 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66124 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66128 "isa_tms320.tcc"
> *DecodeOpSUBF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66134 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66138 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66152 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66155 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66159 "isa_tms320.tcc"
OpSUBF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66163 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66167 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66171 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66174 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66178 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66181 "isa_tms320.tcc"
)
{
#line 4438 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "SUBF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 66195 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66200 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66203 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66207 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66210 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66214 "isa_tms320.tcc"
OpSUBF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66218 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66222 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66226 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66229 "isa_tms320.tcc"
)
{
#line 4474 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 66236 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66242 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66245 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66249 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66252 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66257 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66261 "isa_tms320.tcc"
> *DecodeOpSUBF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66267 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66271 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66278 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66281 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66285 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66288 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66292 "isa_tms320.tcc"
OpSUBF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66296 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66300 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66304 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66307 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66311 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66314 "isa_tms320.tcc"
)
{
#line 4449 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 66328 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66333 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66336 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66340 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66343 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66347 "isa_tms320.tcc"
OpSUBF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66351 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66355 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66359 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66362 "isa_tms320.tcc"
)
{
#line 4478 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 66369 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66375 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66382 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66385 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66390 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66394 "isa_tms320.tcc"
> *DecodeOpSUBF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66400 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66404 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66411 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66414 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66418 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66421 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66425 "isa_tms320.tcc"
OpSUBF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 66429 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66433 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66437 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66440 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66444 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66447 "isa_tms320.tcc"
)
{
#line 4460 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 66460 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66465 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66468 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66472 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66475 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66479 "isa_tms320.tcc"
OpSUBF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 66483 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66487 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66491 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66494 "isa_tms320.tcc"
)
{
#line 4482 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 66501 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66510 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66514 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66517 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66522 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66526 "isa_tms320.tcc"
> *DecodeOpSUBF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66532 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66536 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBF (subtract floating-point values)
**********************************************************/
/**********************************************************
* SUBI (subtract integer)
* op SUBI(0b000[3]:0b110000[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 66549 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66552 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66556 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66559 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66563 "isa_tms320.tcc"
OpSUBI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66567 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66571 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66575 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66578 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66582 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66585 "isa_tms320.tcc"
)
{
#line 4499 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBI " << src_name << ", " << dst_name;
		return true;
	}
#line 66599 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66604 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66607 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66611 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66614 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66618 "isa_tms320.tcc"
OpSUBI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 66622 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66626 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66630 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66633 "isa_tms320.tcc"
)
{
#line 4543 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 66677 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66683 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66686 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66690 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66693 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66698 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66702 "isa_tms320.tcc"
> *DecodeOpSUBI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66708 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66712 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66719 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66722 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66726 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66729 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66733 "isa_tms320.tcc"
OpSUBI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66737 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66741 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66745 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66748 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66752 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66755 "isa_tms320.tcc"
)
{
#line 4510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "SUBI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 66769 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66774 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66777 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66781 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66784 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66788 "isa_tms320.tcc"
OpSUBI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66796 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66800 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66803 "isa_tms320.tcc"
)
{
#line 4584 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 66850 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 66856 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66859 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66863 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66866 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 66871 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66875 "isa_tms320.tcc"
> *DecodeOpSUBI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 66881 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 66885 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 66892 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66895 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66899 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66902 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 66906 "isa_tms320.tcc"
OpSUBI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66910 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66914 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66918 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66921 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 66925 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 66928 "isa_tms320.tcc"
)
{
#line 4521 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBI " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 66943 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 66948 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 66951 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 66955 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 66958 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 66962 "isa_tms320.tcc"
OpSUBI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 66966 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 66970 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 66974 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 66977 "isa_tms320.tcc"
)
{
#line 4628 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, src_value, 0);
		else
		Sub32(result, borrow_out, overflow, dst_value, src_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 67037 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67043 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67046 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67050 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67053 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67058 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67062 "isa_tms320.tcc"
> *DecodeOpSUBI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67068 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67072 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67079 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67086 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67089 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67093 "isa_tms320.tcc"
OpSUBI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 67097 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67101 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67105 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67108 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67112 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 67115 "isa_tms320.tcc"
)
{
#line 4533 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBI " << imm << ", " << dst_name;
		return true;
	}
#line 67128 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 67133 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67136 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67140 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67143 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67147 "isa_tms320.tcc"
OpSUBI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 67151 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67155 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67159 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67162 "isa_tms320.tcc"
)
{
#line 4685 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, dst_value, imm, 0);
		else
		Sub32(result, borrow_out, overflow, dst_value, imm, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 67203 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67219 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67228 "isa_tms320.tcc"
> *DecodeOpSUBI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67234 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67238 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBI (subtract integer)
**********************************************************/
/**********************************************************
* SUBRB (subtract reverse integer with borrow)
* op SUBRB(0b000[3]:0b110001[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 67251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67258 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67261 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67265 "isa_tms320.tcc"
OpSUBRB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67269 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67273 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67277 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67280 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67284 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 67287 "isa_tms320.tcc"
)
{
#line 4736 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBRB " << src_name << ", " << dst_name;
		return true;
	}
#line 67301 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 67306 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67309 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67313 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67316 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67320 "isa_tms320.tcc"
OpSUBRB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67324 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67328 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67332 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67335 "isa_tms320.tcc"
)
{
#line 4780 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 67382 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67388 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67395 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67398 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67407 "isa_tms320.tcc"
> *DecodeOpSUBRB_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67413 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67417 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67424 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67427 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67431 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67434 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67438 "isa_tms320.tcc"
OpSUBRB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67446 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67450 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67453 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67457 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 67460 "isa_tms320.tcc"
)
{
#line 4747 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "SUBRB " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 67474 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 67479 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67482 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67486 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67489 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67493 "isa_tms320.tcc"
OpSUBRB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67497 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67501 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67505 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67508 "isa_tms320.tcc"
)
{
#line 4824 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 67558 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67564 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67567 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67571 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67574 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67579 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67583 "isa_tms320.tcc"
> *DecodeOpSUBRB_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67589 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67593 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67600 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67603 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67607 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67610 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67614 "isa_tms320.tcc"
OpSUBRB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67618 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67622 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67626 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67629 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67633 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 67636 "isa_tms320.tcc"
)
{
#line 4758 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBRB " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 67651 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 67656 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67659 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67663 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67666 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67670 "isa_tms320.tcc"
OpSUBRB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 67674 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67678 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67682 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67685 "isa_tms320.tcc"
)
{
#line 4871 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 67748 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67754 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67757 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67761 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67764 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67769 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67773 "isa_tms320.tcc"
> *DecodeOpSUBRB_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67779 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67783 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 67790 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67793 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67797 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67800 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67804 "isa_tms320.tcc"
OpSUBRB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 67808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67812 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67816 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67819 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67823 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 67826 "isa_tms320.tcc"
)
{
#line 4770 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBRB " << imm << ", " << dst_name;
		return true;
	}
#line 67839 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 67844 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67851 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67854 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 67858 "isa_tms320.tcc"
OpSUBRB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 67862 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67866 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67870 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67873 "isa_tms320.tcc"
)
{
#line 4931 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, imm, dst_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, imm, dst_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 67917 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 67923 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67926 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67930 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67933 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 67938 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67942 "isa_tms320.tcc"
> *DecodeOpSUBRB_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 67948 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 67952 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBRB (subtract reverse integer with borrow)
**********************************************************/
/**********************************************************
* SUBRF (subtract reverse floating-point value)
* op SUBRF(0b000[3]:0b110010[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 67965 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 67968 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 67972 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 67975 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 67979 "isa_tms320.tcc"
OpSUBRF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 67983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 67987 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 67991 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 67994 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 67998 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68001 "isa_tms320.tcc"
)
{
#line 4985 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBRF " << src_name << ", " << dst_name;
		return true;
	}
#line 68015 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68020 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68023 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68027 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68030 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68034 "isa_tms320.tcc"
OpSUBRF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68042 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68046 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68049 "isa_tms320.tcc"
)
{
#line 5028 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 68056 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68062 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68065 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68069 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68072 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68077 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68081 "isa_tms320.tcc"
> *DecodeOpSUBRF_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68087 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68091 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68098 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68101 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68105 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68108 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68112 "isa_tms320.tcc"
OpSUBRF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68120 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68124 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68127 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68131 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68134 "isa_tms320.tcc"
)
{
#line 4996 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "SUBRF " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 68148 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68153 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68156 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68160 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68163 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68167 "isa_tms320.tcc"
OpSUBRF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68175 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68179 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68182 "isa_tms320.tcc"
)
{
#line 5032 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 68189 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68205 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68210 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68214 "isa_tms320.tcc"
> *DecodeOpSUBRF_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68220 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68224 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68231 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68234 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68238 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68241 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68245 "isa_tms320.tcc"
OpSUBRF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68249 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68253 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68257 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68260 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68264 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68267 "isa_tms320.tcc"
)
{
#line 5007 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBRF " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 68281 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68286 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68289 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68293 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68296 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68300 "isa_tms320.tcc"
OpSUBRF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68304 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68308 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68312 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68315 "isa_tms320.tcc"
)
{
#line 5036 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 68322 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68328 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68331 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68335 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68338 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68343 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68347 "isa_tms320.tcc"
> *DecodeOpSUBRF_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68353 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68357 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68364 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68367 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68371 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68374 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68378 "isa_tms320.tcc"
OpSUBRF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 68382 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68386 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68390 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68393 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68397 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68400 "isa_tms320.tcc"
)
{
#line 5018 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBRF " << cpu.DisasmShortFloat(imm) << ", " << dst_name;
		return true;
	}
#line 68413 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68418 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68421 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68425 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68428 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68432 "isa_tms320.tcc"
OpSUBRF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 68436 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68440 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68444 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68447 "isa_tms320.tcc"
)
{
#line 5040 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 68454 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68460 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68463 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68467 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68470 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68475 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68479 "isa_tms320.tcc"
> *DecodeOpSUBRF_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68485 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68489 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBRF (subtract reverse floating-point value)
**********************************************************/
/**********************************************************
* SUBRI (subtract reverse integer)
* op SUBRI(0b000[3]:0b110011[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 68502 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68505 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68509 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68512 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68516 "isa_tms320.tcc"
OpSUBRI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68520 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68524 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68528 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68531 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68535 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68538 "isa_tms320.tcc"
)
{
#line 5057 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "SUBRI " << src_name << ", " << dst_name;
		return true;
	}
#line 68552 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68557 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68560 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68564 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68567 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68571 "isa_tms320.tcc"
OpSUBRI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 68575 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68579 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68583 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68586 "isa_tms320.tcc"
)
{
#line 5101 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, 0);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 68630 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68636 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68639 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68643 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68646 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68651 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68655 "isa_tms320.tcc"
> *DecodeOpSUBRI_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68661 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68665 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68672 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68675 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68679 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68682 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68686 "isa_tms320.tcc"
OpSUBRI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68690 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68694 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68698 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68701 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68705 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68708 "isa_tms320.tcc"
)
{
#line 5068 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "SUBRI " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 68722 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68727 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68730 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68734 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68737 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68741 "isa_tms320.tcc"
OpSUBRI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68745 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68749 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68753 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68756 "isa_tms320.tcc"
)
{
#line 5142 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, 0);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 68803 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68809 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68812 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68819 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 68824 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68828 "isa_tms320.tcc"
> *DecodeOpSUBRI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 68834 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 68838 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 68845 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68852 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68855 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 68859 "isa_tms320.tcc"
OpSUBRI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68867 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68871 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68874 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 68878 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 68881 "isa_tms320.tcc"
)
{
#line 5079 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "SUBRI " << disasm_src_indir << ", " << dst_name;

		return true;
	}
#line 68896 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 68901 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68908 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 68911 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 68915 "isa_tms320.tcc"
OpSUBRI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 68919 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 68923 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 68927 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 68930 "isa_tms320.tcc"
)
{
#line 5186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src_value, dst_value, 0);
		else
		Sub32(result, borrow_out, overflow, src_value, dst_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 68984 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 68990 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 68993 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 68997 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69000 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69005 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69009 "isa_tms320.tcc"
> *DecodeOpSUBRI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69015 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69019 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69026 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69029 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69033 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69036 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69040 "isa_tms320.tcc"
OpSUBRI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 69044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69048 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69052 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69055 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69059 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69062 "isa_tms320.tcc"
)
{
#line 5091 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "SUBRI " << imm << ", " << dst_name;
		return true;
	}
#line 69075 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69080 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69090 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69094 "isa_tms320.tcc"
OpSUBRI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 69098 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69102 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69106 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69109 "isa_tms320.tcc"
)
{
#line 5237 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, imm, dst_value, 0);
		else
		Sub32(result, borrow_out, overflow, imm, dst_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 69150 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69156 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69159 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69163 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69166 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69175 "isa_tms320.tcc"
> *DecodeOpSUBRI_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBRI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69181 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69185 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBRI (subtract reverse integer)
**********************************************************/
/**********************************************************
* TSTB (test bit fields)
* op TSTB(0b000[3]:0b110100[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 69198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69201 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69208 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69212 "isa_tms320.tcc"
OpTSTB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 69216 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69220 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69224 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69227 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69231 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69234 "isa_tms320.tcc"
)
{
#line 5288 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "TSTB " << src_name << ", " << dst_name;
		return true;
	}
#line 69248 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69253 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69256 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69260 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69263 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69267 "isa_tms320.tcc"
OpTSTB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 69271 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69275 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69279 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69282 "isa_tms320.tcc"
)
{
#line 5331 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 69309 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69315 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69318 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69322 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69325 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69330 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69334 "isa_tms320.tcc"
> *DecodeOpTSTB_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69340 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69344 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69354 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69358 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69361 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69365 "isa_tms320.tcc"
OpTSTB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69369 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69373 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69377 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69380 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69384 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69387 "isa_tms320.tcc"
)
{
#line 5299 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "TSTB " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 69401 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69406 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69409 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69413 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69416 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69420 "isa_tms320.tcc"
OpTSTB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69424 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69428 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69432 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69435 "isa_tms320.tcc"
)
{
#line 5355 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value & dst_value;

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 69465 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69471 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69474 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69478 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69481 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69486 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69490 "isa_tms320.tcc"
> *DecodeOpTSTB_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69496 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69500 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69510 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69514 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69517 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69521 "isa_tms320.tcc"
OpTSTB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69525 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69529 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69533 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69536 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69540 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69543 "isa_tms320.tcc"
)
{
#line 5310 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "TSTB " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 69557 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69562 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69565 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69569 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69572 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69576 "isa_tms320.tcc"
OpTSTB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 69580 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69584 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69588 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69591 "isa_tms320.tcc"
)
{
#line 5382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value & dst_value;

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 69634 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69647 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69650 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69655 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69659 "isa_tms320.tcc"
> *DecodeOpTSTB_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69665 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69669 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69676 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69679 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69683 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69686 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69690 "isa_tms320.tcc"
OpTSTB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 69694 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69698 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69702 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69705 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69709 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69712 "isa_tms320.tcc"
)
{
#line 5321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "TSTB " << imm << ", " << dst_name;
		return true;
	}
#line 69725 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69730 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69733 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69737 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69740 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69744 "isa_tms320.tcc"
OpTSTB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 69748 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69752 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69756 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69759 "isa_tms320.tcc"
)
{
#line 5422 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = imm & dst_value;

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 69783 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69789 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69796 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69799 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69808 "isa_tms320.tcc"
> *DecodeOpTSTB_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69814 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69818 "isa_tms320.tcc"
	>(code, addr);
}

/* end of TSTB (test bit fields)
**********************************************************/
/**********************************************************
* XOR (bitwise-exclusive OR)
* op XOR(0b000[3]:0b110101[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 69831 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69834 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69838 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69841 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 69845 "isa_tms320.tcc"
OpXOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 69849 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69853 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69857 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69860 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 69864 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 69867 "isa_tms320.tcc"
)
{
#line 5456 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src_name = REG_NAME[src];

		if (!dst_name || !src_name)
		return false;

		os << "XOR " << src_name << ", " << dst_name;
		return true;
	}
#line 69881 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 69886 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69889 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69893 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69896 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 69900 "isa_tms320.tcc"
OpXOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 69904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69908 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 69912 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 69915 "isa_tms320.tcc"
)
{
#line 5499 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read source operand
		uint32_t src_value = cpu.GetReg(src);

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = src_value ^ dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 69949 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 69955 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69958 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69962 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 69965 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 69970 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 69974 "isa_tms320.tcc"
> *DecodeOpXOR_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 69980 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 69984 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 69991 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 69994 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 69998 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70001 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70005 "isa_tms320.tcc"
OpXOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 70009 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70013 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70017 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70020 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70024 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70027 "isa_tms320.tcc"
)
{
#line 5467 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (dst_name != NULL)
		return false;

		os << "XOR " << hex << cpu.DisasmDir(Operation<CONFIG, DEBUG>::GetAddr() / 4, direct) << dec << ", " << dst_name;

		return true;
	}
#line 70041 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70046 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70049 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70053 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70056 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 70060 "isa_tms320.tcc"
OpXOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 70064 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70068 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70072 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70075 "isa_tms320.tcc"
)
{
#line 5530 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the source operand effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value ^ dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 70112 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 70118 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70121 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70125 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70128 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70137 "isa_tms320.tcc"
> *DecodeOpXOR_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70143 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70147 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70154 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70157 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70161 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70164 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70168 "isa_tms320.tcc"
OpXOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 70172 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70176 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70180 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70183 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70187 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70190 "isa_tms320.tcc"
)
{
#line 5478 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		string disasm_src_indir;
		const char *dst_name = REG_NAME[dst];

		if (!dst_name || !cpu.DisasmIndir(disasm_src_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp))
		return false;

		os << "XOR " << disasm_src_indir << ", " << dst_name;
		return true;
	}
#line 70204 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70219 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 70223 "isa_tms320.tcc"
OpXOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 70227 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70231 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70235 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70238 "isa_tms320.tcc"
)
{
#line 5564 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand from memory
		uint32_t src_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src_value ^ dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 70288 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 70294 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70297 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70301 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70304 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70309 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70313 "isa_tms320.tcc"
> *DecodeOpXOR_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70319 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70323 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70330 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70333 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70337 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70340 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70344 "isa_tms320.tcc"
OpXOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 70348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70352 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70356 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70359 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70363 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70366 "isa_tms320.tcc"
)
{
#line 5489 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		const char *dst_name = REG_NAME[dst];

		if (!dst_name)
		return false;

		os << "XOR " << imm << ", " << dst_name;
		return true;
	}
#line 70379 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70384 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70391 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70394 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 70398 "isa_tms320.tcc"
OpXOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 70402 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70406 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70410 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70413 "isa_tms320.tcc"
)
{
#line 5611 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/2op.isa"
	{
		// Check that destination register is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read destination operand
		uint32_t dst_value = cpu.GetReg(dst);

		// Compute the result
		uint32_t result = imm ^ dst_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 70444 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 70450 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70453 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70457 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70460 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70469 "isa_tms320.tcc"
> *DecodeOpXOR_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70475 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70479 "isa_tms320.tcc"
	>(code, addr);
}

/* end of XOR (bitwise-exclusive OR)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of 3 operands operations:
* - ADDC3        add with carry
* - ADDF3        add floating-point values
* - ADDI3        add integers
* - AND3         bitwise-logical AND
* - ANDN3        bitwise-logical AND with complement
* - ASH3         arithmetic shift
* - CMPF3        compare floating-point values
* - CMPI3        compare integers
* - LSH3         logical shift
* - MPYF3        multiply floating-point values
* - MPYI3        multiply integers
* - OR3          bitwise-logical OR
* - SUBB3        subtract integers with borrow
* - SUBF3        subtract floating-point values
* - SUBI3        subtract integers
* - TSTB3        test bit fields
* - XOR3         bitwise-exclusive OR
*/
/**********************************************************
* ADDC3 (add with carry)
* op ADDC3(0b001[3]:0b000000[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 70545 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70548 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70552 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70555 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70559 "isa_tms320.tcc"
OpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 70563 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70567 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70571 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70574 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70578 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70581 "isa_tms320.tcc"
)
{
#line 66 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ADDC3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 70596 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70601 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70608 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70611 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 70615 "isa_tms320.tcc"
OpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 70619 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70623 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70627 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70630 "isa_tms320.tcc"
)
{
#line 114 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, carry_in);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, carry_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 70677 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 70683 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70686 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70690 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70693 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70698 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70702 "isa_tms320.tcc"
> *DecodeOpADDC3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70708 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70712 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70719 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70722 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70726 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70729 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70733 "isa_tms320.tcc"
OpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 70737 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70741 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70745 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70748 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70752 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70755 "isa_tms320.tcc"
)
{
#line 78 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "ADDC3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 70770 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70775 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70778 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70785 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 70789 "isa_tms320.tcc"
OpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 70793 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70797 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70801 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70804 "isa_tms320.tcc"
)
{
#line 158 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, carry_in);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, carry_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 70861 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 70867 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70870 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70874 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70877 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 70882 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70886 "isa_tms320.tcc"
> *DecodeOpADDC3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 70892 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 70896 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 70903 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70906 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70910 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70913 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 70917 "isa_tms320.tcc"
OpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 70921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70925 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70929 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70932 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 70936 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 70939 "isa_tms320.tcc"
)
{
#line 90 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDC3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 70954 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 70959 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 70962 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 70966 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 70969 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 70973 "isa_tms320.tcc"
OpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 70977 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 70981 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 70985 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 70988 "isa_tms320.tcc"
)
{
#line 212 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, carry_in);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, carry_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 71045 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71051 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71054 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71058 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71061 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71066 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71070 "isa_tms320.tcc"
> *DecodeOpADDC3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71076 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71080 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71094 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71097 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71101 "isa_tms320.tcc"
OpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71105 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71109 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71113 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71116 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71120 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71123 "isa_tms320.tcc"
)
{
#line 102 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDC3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 71138 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71143 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71150 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71153 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71157 "isa_tms320.tcc"
OpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71161 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71165 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71169 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71172 "isa_tms320.tcc"
)
{
#line 266 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Read carry in
		uint8_t carry_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, carry_in);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, carry_in);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 71258 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71264 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71271 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71274 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71283 "isa_tms320.tcc"
> *DecodeOpADDC3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71289 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71293 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDC3 (add with carry)
**********************************************************/
/**********************************************************
* ADDF3 (add floating-point values)
* op ADDF3(0b001[3]:0b000001[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 71306 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71309 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71313 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71316 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71320 "isa_tms320.tcc"
OpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 71324 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71328 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71332 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71335 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71339 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71342 "isa_tms320.tcc"
)
{
#line 362 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ADDF3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 71357 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71362 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71365 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71369 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71372 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71376 "isa_tms320.tcc"
OpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 71380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71384 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71388 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71391 "isa_tms320.tcc"
)
{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 71398 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71404 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71407 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71411 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71414 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71419 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71423 "isa_tms320.tcc"
> *DecodeOpADDF3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71429 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71433 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71450 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71454 "isa_tms320.tcc"
OpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 71458 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71462 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71466 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71469 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71473 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71476 "isa_tms320.tcc"
)
{
#line 374 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "ADDF3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 71491 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71496 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71499 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71503 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71506 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71510 "isa_tms320.tcc"
OpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 71514 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71518 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71522 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71525 "isa_tms320.tcc"
)
{
#line 414 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 71532 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71538 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71541 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71545 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71548 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71553 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71557 "isa_tms320.tcc"
> *DecodeOpADDF3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71563 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71567 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71574 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71577 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71581 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71584 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71588 "isa_tms320.tcc"
OpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71596 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71600 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71603 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71607 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71610 "isa_tms320.tcc"
)
{
#line 386 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 71625 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71633 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71637 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71640 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71644 "isa_tms320.tcc"
OpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71648 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71652 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71656 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71659 "isa_tms320.tcc"
)
{
#line 418 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 71666 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71672 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71675 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71679 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71682 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71687 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71691 "isa_tms320.tcc"
> *DecodeOpADDF3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71697 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71701 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 71708 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71711 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71715 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71718 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71722 "isa_tms320.tcc"
OpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71726 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71730 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71734 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71737 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71741 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71744 "isa_tms320.tcc"
)
{
#line 398 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDF3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 71759 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71764 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71767 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71771 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71774 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71778 "isa_tms320.tcc"
OpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 71782 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71786 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71790 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71793 "isa_tms320.tcc"
)
{
#line 422 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 71800 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71806 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71809 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71813 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71816 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71821 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71825 "isa_tms320.tcc"
> *DecodeOpADDF3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 71831 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 71835 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDF3 (add floating-point values)
**********************************************************/
/**********************************************************
* ADDI3 (add integers)
* op ADDI3(0b001[3]:0b000010[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 71848 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71851 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71855 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71858 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 71862 "isa_tms320.tcc"
OpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 71866 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71870 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71874 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71877 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 71881 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 71884 "isa_tms320.tcc"
)
{
#line 439 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ADDI3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 71899 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 71904 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71907 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71911 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71914 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 71918 "isa_tms320.tcc"
OpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 71922 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 71926 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 71930 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 71933 "isa_tms320.tcc"
)
{
#line 487 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 71977 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 71983 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 71986 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 71990 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 71993 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 71998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72002 "isa_tms320.tcc"
> *DecodeOpADDI3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72008 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72012 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 72019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72022 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72026 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72029 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 72033 "isa_tms320.tcc"
OpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 72037 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72041 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72045 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72048 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 72052 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 72055 "isa_tms320.tcc"
)
{
#line 451 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "ADDI3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 72070 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 72075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72078 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72082 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72085 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 72089 "isa_tms320.tcc"
OpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 72093 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72097 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72101 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72104 "isa_tms320.tcc"
)
{
#line 528 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 72158 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 72164 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72167 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72171 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72174 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 72179 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72183 "isa_tms320.tcc"
> *DecodeOpADDI3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72189 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72193 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 72200 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72203 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72207 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72210 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 72214 "isa_tms320.tcc"
OpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 72218 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72222 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72226 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72229 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 72233 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 72236 "isa_tms320.tcc"
)
{
#line 463 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 72251 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 72256 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72259 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72263 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72266 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 72270 "isa_tms320.tcc"
OpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 72274 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72278 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72282 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72285 "isa_tms320.tcc"
)
{
#line 579 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 72339 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 72345 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72352 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72355 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 72360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72364 "isa_tms320.tcc"
> *DecodeOpADDI3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72370 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72374 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 72381 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72384 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72388 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72391 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 72395 "isa_tms320.tcc"
OpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 72399 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72403 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72407 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72410 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 72414 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 72417 "isa_tms320.tcc"
)
{
#line 475 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ADDI3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 72432 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 72437 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72440 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72444 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72447 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 72451 "isa_tms320.tcc"
OpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 72455 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72459 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72463 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72466 "isa_tms320.tcc"
)
{
#line 630 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			carry_out,
			overflow
			);
		}
	}
#line 72549 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 72555 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72558 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72562 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72565 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 72570 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72574 "isa_tms320.tcc"
> *DecodeOpADDI3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72580 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72584 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ADDI3 (add integers)
**********************************************************/
/**********************************************************
* AND3 (bitwise-logical AND)
* op AND3(0b001[3]:0b000011[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 72597 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72600 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72604 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72607 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 72611 "isa_tms320.tcc"
OpAND3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 72615 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72619 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72623 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72626 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 72630 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 72633 "isa_tms320.tcc"
)
{
#line 724 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "AND3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 72648 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 72653 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72656 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72660 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72663 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 72667 "isa_tms320.tcc"
OpAND3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 72671 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72675 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72679 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72682 "isa_tms320.tcc"
)
{
#line 772 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 72716 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 72722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72725 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72729 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72732 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 72737 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72741 "isa_tms320.tcc"
> *DecodeOpAND3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72747 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72751 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 72758 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72761 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72765 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72768 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 72772 "isa_tms320.tcc"
OpAND3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 72776 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72780 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72784 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72787 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 72791 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 72794 "isa_tms320.tcc"
)
{
#line 736 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "AND3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 72809 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 72814 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72817 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72821 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72824 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 72828 "isa_tms320.tcc"
OpAND3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 72832 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72836 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72840 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72843 "isa_tms320.tcc"
)
{
#line 804 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 72887 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 72893 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72896 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72900 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72903 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 72908 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72912 "isa_tms320.tcc"
> *DecodeOpAND3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 72918 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 72922 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 72929 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72932 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72936 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72939 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 72943 "isa_tms320.tcc"
OpAND3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 72947 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 72951 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 72955 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 72958 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 72962 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 72965 "isa_tms320.tcc"
)
{
#line 748 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "AND3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 72980 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 72985 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 72988 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 72992 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 72995 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 72999 "isa_tms320.tcc"
OpAND3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73007 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73011 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73014 "isa_tms320.tcc"
)
{
#line 845 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 73058 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 73064 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73067 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73071 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73074 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 73079 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73083 "isa_tms320.tcc"
> *DecodeOpAND3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73089 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73093 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 73100 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73103 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73107 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73110 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73114 "isa_tms320.tcc"
OpAND3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73118 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73122 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73126 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73129 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73133 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73136 "isa_tms320.tcc"
)
{
#line 760 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "AND3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 73151 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73156 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73159 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73163 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73166 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 73170 "isa_tms320.tcc"
OpAND3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73174 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73178 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73182 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73185 "isa_tms320.tcc"
)
{
#line 886 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 73258 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 73264 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73271 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73274 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 73279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73283 "isa_tms320.tcc"
> *DecodeOpAND3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73289 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73293 "isa_tms320.tcc"
	>(code, addr);
}

/* end of AND3 (bitwise-logical AND)
**********************************************************/
/**********************************************************
* ANDN3 (bitwise-logical AND with complement)
* op ANDN3(0b001[3]:0b000100[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 73306 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73309 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73313 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73316 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73320 "isa_tms320.tcc"
OpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 73324 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73328 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73332 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73335 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73339 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73342 "isa_tms320.tcc"
)
{
#line 969 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{ const char *dst_name = REG_NAME[dst]; const char *src1_name = REG_NAME[src1]; const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ANDN3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 73354 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73359 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73362 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73366 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73369 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 73373 "isa_tms320.tcc"
OpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 73377 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73381 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73385 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73388 "isa_tms320.tcc"
)
{
#line 1014 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & ~src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 73422 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 73428 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73431 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73435 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73438 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 73443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73447 "isa_tms320.tcc"
> *DecodeOpANDN3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73453 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73457 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 73464 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73467 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73471 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73474 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73478 "isa_tms320.tcc"
OpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 73482 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73486 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73490 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73493 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73497 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73500 "isa_tms320.tcc"
)
{
#line 978 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "ANDN3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 73515 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73520 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73530 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 73534 "isa_tms320.tcc"
OpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 73538 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73542 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73546 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73549 "isa_tms320.tcc"
)
{
#line 1046 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & ~src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 73593 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 73599 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73602 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73606 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73609 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 73614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73618 "isa_tms320.tcc"
> *DecodeOpANDN3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73624 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73628 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 73635 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73642 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73645 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73649 "isa_tms320.tcc"
OpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73653 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73657 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73661 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73664 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73668 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73671 "isa_tms320.tcc"
)
{
#line 990 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ANDN3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 73686 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73691 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73694 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73698 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73701 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 73705 "isa_tms320.tcc"
OpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73709 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73713 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73717 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73720 "isa_tms320.tcc"
)
{
#line 1087 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src1_value & ~src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 73764 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 73770 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73773 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73777 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73780 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 73785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73789 "isa_tms320.tcc"
> *DecodeOpANDN3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73795 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73799 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 73806 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73809 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73813 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73816 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 73820 "isa_tms320.tcc"
OpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73824 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73828 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73832 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73835 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 73839 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 73842 "isa_tms320.tcc"
)
{
#line 1002 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ANDN3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 73857 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 73862 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73865 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73869 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73872 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 73876 "isa_tms320.tcc"
OpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 73880 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73884 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 73888 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 73891 "isa_tms320.tcc"
)
{
#line 1128 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result = src1_value & ~src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 73964 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 73970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 73973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 73977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 73980 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 73985 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 73989 "isa_tms320.tcc"
> *DecodeOpANDN3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 73995 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 73999 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ANDN3 (bitwise-logical AND with complement)
**********************************************************/
/**********************************************************
* ASH3 (arithmetic shift)
* op ASH3(0b001[3]:0b000101[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 74012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74022 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 74026 "isa_tms320.tcc"
OpASH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 74030 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74034 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74038 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74041 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 74045 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 74048 "isa_tms320.tcc"
)
{
#line 1211 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "ASH3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 74063 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 74068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74078 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 74082 "isa_tms320.tcc"
OpASH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 74086 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74090 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74094 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74097 "isa_tms320.tcc"
)
{
#line 1259 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src1_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 74167 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 74173 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74176 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74180 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74183 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 74188 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74192 "isa_tms320.tcc"
> *DecodeOpASH3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74198 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74202 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 74209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74219 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 74223 "isa_tms320.tcc"
OpASH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 74227 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74231 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74235 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74238 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 74242 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 74245 "isa_tms320.tcc"
)
{
#line 1223 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "ASH3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 74260 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 74265 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74268 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74272 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74275 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 74279 "isa_tms320.tcc"
OpASH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 74283 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74287 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74291 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74294 "isa_tms320.tcc"
)
{
#line 1326 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src1_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 74374 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 74380 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74390 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 74395 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74399 "isa_tms320.tcc"
> *DecodeOpASH3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74405 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74409 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 74416 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74419 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74423 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74426 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 74430 "isa_tms320.tcc"
OpASH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 74434 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74438 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74442 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74445 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 74449 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 74452 "isa_tms320.tcc"
)
{
#line 1235 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ASH3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 74467 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 74472 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74475 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74479 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74482 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 74486 "isa_tms320.tcc"
OpASH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 74490 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74494 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74498 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74501 "isa_tms320.tcc"
)
{
#line 1403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src1_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 74581 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 74587 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74590 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74594 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74597 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 74602 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74606 "isa_tms320.tcc"
> *DecodeOpASH3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74612 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74616 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 74623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74626 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74633 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 74637 "isa_tms320.tcc"
OpASH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 74641 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74645 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74649 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74652 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 74656 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 74659 "isa_tms320.tcc"
)
{
#line 1247 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "ASH3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 74674 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 74679 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74682 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74686 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74689 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 74693 "isa_tms320.tcc"
OpASH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 74697 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74701 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74705 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74708 "isa_tms320.tcc"
)
{
#line 1480 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src1_value, count, carry_out);
			}
		}

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 74817 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 74823 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74826 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74830 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74833 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 74838 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74842 "isa_tms320.tcc"
> *DecodeOpASH3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74848 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74852 "isa_tms320.tcc"
	>(code, addr);
}

/* end of ASH3 (arithmetic shift)
**********************************************************/
/**********************************************************
* CMPF3 (compare floating-point values)
* op CMPF3(0b001[3]:0b000110[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 74865 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74872 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74875 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 74879 "isa_tms320.tcc"
OpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 74883 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74887 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74891 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74894 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 74898 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 74901 "isa_tms320.tcc"
)
{
#line 1599 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!src1_name || !src2_name)
		return false;

		os << "CMPF3 " << src2_name << ", " << src1_name;
		return true;
	}
#line 74915 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 74920 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74923 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74927 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74930 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 74934 "isa_tms320.tcc"
OpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 74938 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74942 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 74946 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 74949 "isa_tms320.tcc"
)
{
#line 1643 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 74956 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 74962 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 74965 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 74969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 74972 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 74977 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 74981 "isa_tms320.tcc"
> *DecodeOpCMPF3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 74987 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 74991 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 74998 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75001 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75005 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75008 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75012 "isa_tms320.tcc"
OpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75016 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75020 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75024 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75027 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75031 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75034 "isa_tms320.tcc"
)
{
#line 1610 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "CMPF3 " << src2_name << ", " << disasm_src1_indir;
		return true;
	}
#line 75048 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75053 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75060 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75063 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75067 "isa_tms320.tcc"
OpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75075 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75079 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75082 "isa_tms320.tcc"
)
{
#line 1647 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 75089 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75095 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75098 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75102 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75105 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75110 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75114 "isa_tms320.tcc"
> *DecodeOpCMPF3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75120 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75124 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 75131 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75134 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75138 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75141 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75145 "isa_tms320.tcc"
OpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75149 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75153 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75157 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75160 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75164 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75167 "isa_tms320.tcc"
)
{
#line 1621 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "CMPF3 " << disasm_src2_indir << ", " << src1_name;
		return true;
	}
#line 75181 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75186 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75189 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75193 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75196 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75200 "isa_tms320.tcc"
OpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75204 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75208 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75212 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75215 "isa_tms320.tcc"
)
{
#line 1651 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 75222 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75228 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75231 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75238 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75247 "isa_tms320.tcc"
> *DecodeOpCMPF3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75253 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75257 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 75264 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75271 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75274 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75278 "isa_tms320.tcc"
OpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75282 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75286 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75290 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75293 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75297 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75300 "isa_tms320.tcc"
)
{
#line 1632 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "CMPF3 " << disasm_src2_indir << ", " << disasm_src1_indir;
		return true;
	}
#line 75314 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75319 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75322 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75326 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75329 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75333 "isa_tms320.tcc"
OpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75337 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75341 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75345 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75348 "isa_tms320.tcc"
)
{
#line 1655 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 75355 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75361 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75364 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75371 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75376 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75380 "isa_tms320.tcc"
> *DecodeOpCMPF3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75386 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75390 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CMPF3 (compare floating-point values)
**********************************************************/
/**********************************************************
* CMPI3 (compare integers)
* op CMPI3(0b001[3]:0b000111[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 75403 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75406 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75410 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75413 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75417 "isa_tms320.tcc"
OpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75421 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75425 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75429 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75432 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75436 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75439 "isa_tms320.tcc"
)
{
#line 1672 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!src1_name || !src2_name)
		return false;

		os << "CMPI3 " << src2_name << ", " << src1_name;
		return true;
	}
#line 75453 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75458 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75461 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75465 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75468 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75472 "isa_tms320.tcc"
OpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75476 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75480 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75484 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75487 "isa_tms320.tcc"
)
{
#line 1716 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 75520 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75526 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75529 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75533 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75536 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75541 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75545 "isa_tms320.tcc"
> *DecodeOpCMPI3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75551 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75555 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 75562 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75565 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75569 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75572 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75576 "isa_tms320.tcc"
OpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75580 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75584 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75588 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75591 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75595 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75598 "isa_tms320.tcc"
)
{
#line 1683 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "CMPI3 " << src2_name << ", " << disasm_src1_indir;
		return true;
	}
#line 75612 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75617 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75620 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75624 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75627 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75631 "isa_tms320.tcc"
OpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 75635 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75639 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75643 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75646 "isa_tms320.tcc"
)
{
#line 1746 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 75689 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75695 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75698 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75702 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75705 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75710 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75714 "isa_tms320.tcc"
> *DecodeOpCMPI3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75720 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75724 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 75731 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75734 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75738 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75741 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75745 "isa_tms320.tcc"
OpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75749 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75753 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75757 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75760 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75764 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75767 "isa_tms320.tcc"
)
{
#line 1694 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "CMPI3 " << disasm_src2_indir << ", " << src1_name;
		return true;
	}
#line 75781 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75786 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75789 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75793 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75796 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75800 "isa_tms320.tcc"
OpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75808 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75812 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75815 "isa_tms320.tcc"
)
{
#line 1786 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 75858 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 75864 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75867 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75871 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75874 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 75879 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75883 "isa_tms320.tcc"
> *DecodeOpCMPI3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 75889 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 75893 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 75900 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75903 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75907 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75910 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 75914 "isa_tms320.tcc"
OpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75918 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75922 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75926 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75929 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 75933 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 75936 "isa_tms320.tcc"
)
{
#line 1705 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "CMPI3 " << disasm_src2_indir << ", " << disasm_src1_indir;
		return true;
	}
#line 75950 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 75955 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 75958 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 75962 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 75965 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 75969 "isa_tms320.tcc"
OpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 75973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 75977 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 75981 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 75984 "isa_tms320.tcc"
)
{
#line 1826 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 76050 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 76056 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76059 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76063 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76066 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 76071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76075 "isa_tms320.tcc"
> *DecodeOpCMPI3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76081 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76085 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CMPI3 (compare integers)
**********************************************************/
/**********************************************************
* LSH3 (logical shift)
* op LSH3(0b001[3]:0b001000[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 76098 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76101 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76105 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76108 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 76112 "isa_tms320.tcc"
OpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 76116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76120 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76124 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76127 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 76131 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 76134 "isa_tms320.tcc"
)
{
#line 1902 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "LSH3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 76149 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 76154 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76157 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76161 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76164 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 76168 "isa_tms320.tcc"
OpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 76172 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76176 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76180 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76183 "isa_tms320.tcc"
)
{
#line 1950 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src1_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 76253 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 76259 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76262 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76266 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76269 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 76274 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76278 "isa_tms320.tcc"
> *DecodeOpLSH3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76284 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76288 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 76295 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76298 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76302 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76305 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 76309 "isa_tms320.tcc"
OpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 76313 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76317 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76321 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76324 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 76328 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 76331 "isa_tms320.tcc"
)
{
#line 1914 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "LSH3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 76346 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 76351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76354 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76358 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76361 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 76365 "isa_tms320.tcc"
OpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 76369 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76373 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76377 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76380 "isa_tms320.tcc"
)
{
#line 2017 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src1_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 76460 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 76466 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76469 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76473 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76476 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 76481 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76485 "isa_tms320.tcc"
> *DecodeOpLSH3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76491 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76495 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 76502 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76505 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76509 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76512 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 76516 "isa_tms320.tcc"
OpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 76520 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76524 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76528 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76531 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 76535 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 76538 "isa_tms320.tcc"
)
{
#line 1926 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "LSH3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 76553 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 76558 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76561 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76565 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76568 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 76572 "isa_tms320.tcc"
OpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 76576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76580 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76584 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76587 "isa_tms320.tcc"
)
{
#line 2094 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src1_value, count, carry_out);
			}
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 76667 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 76673 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76676 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76680 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76683 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 76688 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76692 "isa_tms320.tcc"
> *DecodeOpLSH3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76698 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76702 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 76709 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76716 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76719 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 76723 "isa_tms320.tcc"
OpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 76727 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76731 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76735 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76738 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 76742 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 76745 "isa_tms320.tcc"
)
{
#line 1938 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "LSH3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 76760 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 76765 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76768 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76772 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76775 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 76779 "isa_tms320.tcc"
OpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 76783 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76787 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76791 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76794 "isa_tms320.tcc"
)
{
#line 2171 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Sign extend the 7 LSB of the 2nd source operand value to get the shift count
		int32_t count = SignExtend(src2_value, 7);

		// Compute the result
		uint8_t carry_out;
		uint32_t result;

		if(count == 0)
		{
			result = src1_value;
			carry_out = 0;
		}
		else if(count >= 0)
		{
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src1_value, count, carry_out);
			}
		}
		else
		{
			count = -count;
			if(count >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src1_value, count, carry_out);
			}
		}

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_N | M_ST_Z | M_ST_C,  // or mask
			carry_out
			);
		}
	}
#line 76903 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 76909 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76912 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76916 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76919 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 76924 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76928 "isa_tms320.tcc"
> *DecodeOpLSH3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 76934 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 76938 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LSH3 (logical shift)
**********************************************************/
/**********************************************************
* MPYF3 (multiply floating-point values)
* op MPYF3(0b001[3]:0b001001[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 76951 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 76954 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 76958 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 76961 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 76965 "isa_tms320.tcc"
OpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 76969 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 76973 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 76977 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 76980 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 76984 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 76987 "isa_tms320.tcc"
)
{
#line 2290 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "MPYF3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 77002 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77007 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77014 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77017 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77021 "isa_tms320.tcc"
OpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 77025 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77029 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77033 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77036 "isa_tms320.tcc"
)
{
#line 2338 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 77043 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77049 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77052 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77056 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77059 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77064 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77068 "isa_tms320.tcc"
> *DecodeOpMPYF3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77074 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77078 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 77085 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77088 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77092 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77095 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77099 "isa_tms320.tcc"
OpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 77103 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77107 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77111 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77114 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77118 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77121 "isa_tms320.tcc"
)
{
#line 2302 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "MPYF3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 77136 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77141 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77144 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77148 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77151 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77155 "isa_tms320.tcc"
OpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 77159 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77163 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77167 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77170 "isa_tms320.tcc"
)
{
#line 2342 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 77177 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77183 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77186 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77190 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77193 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77202 "isa_tms320.tcc"
> *DecodeOpMPYF3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77208 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77212 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 77219 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77222 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77226 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77229 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77233 "isa_tms320.tcc"
OpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77241 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77245 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77248 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77252 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77255 "isa_tms320.tcc"
)
{
#line 2314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "MPYF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 77270 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77275 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77278 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77282 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77285 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77289 "isa_tms320.tcc"
OpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77293 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77297 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77301 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77304 "isa_tms320.tcc"
)
{
#line 2346 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 77311 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77317 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77324 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77327 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77332 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77336 "isa_tms320.tcc"
> *DecodeOpMPYF3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77342 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77346 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 77353 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77356 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77360 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77363 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77367 "isa_tms320.tcc"
OpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77371 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77375 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77379 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77382 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77386 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77389 "isa_tms320.tcc"
)
{
#line 2326 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "MPYF3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 77404 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77409 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77412 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77416 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77419 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77423 "isa_tms320.tcc"
OpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77427 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77431 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77435 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77438 "isa_tms320.tcc"
)
{
#line 2350 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 77445 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77458 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77461 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77466 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77470 "isa_tms320.tcc"
> *DecodeOpMPYF3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77476 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77480 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF3 (multiply floating-point values)
**********************************************************/
/**********************************************************
* MPYI3 (multiply integers)
* op MPYI3(0b001[3]:0b001010[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 77493 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77503 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77507 "isa_tms320.tcc"
OpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 77511 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77515 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77519 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77522 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77526 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77529 "isa_tms320.tcc"
)
{
#line 2367 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "MPYI3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 77544 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77549 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77552 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77556 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77559 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77563 "isa_tms320.tcc"
OpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 77567 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77571 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77575 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77578 "isa_tms320.tcc"
)
{
#line 2415 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that source and destination registers are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.GetReg(src1) & 0xffffff), 24);

		// Read 2nd source operand and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.GetReg(src2) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 77625 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77631 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77634 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77638 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77641 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77646 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77650 "isa_tms320.tcc"
> *DecodeOpMPYI3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77656 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77660 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 77667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77677 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77681 "isa_tms320.tcc"
OpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 77685 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77689 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77693 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77696 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77700 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77703 "isa_tms320.tcc"
)
{
#line 2379 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "MPYI3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 77718 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77723 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77726 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77730 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77733 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77737 "isa_tms320.tcc"
OpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 77741 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77745 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77749 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77752 "isa_tms320.tcc"
)
{
#line 2459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.IntLoad(ea) & 0xffffff), 24);

		// Read 2nd source operand and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.GetReg(src2) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 77809 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77815 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77818 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77822 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77825 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 77830 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77834 "isa_tms320.tcc"
> *DecodeOpMPYI3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 77840 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 77844 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 77851 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77854 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77858 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77861 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 77865 "isa_tms320.tcc"
OpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77869 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77873 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77877 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77880 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 77884 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 77887 "isa_tms320.tcc"
)
{
#line 2391 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "MPYI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 77902 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 77907 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 77910 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 77914 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 77917 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 77921 "isa_tms320.tcc"
OpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 77925 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 77929 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 77933 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 77936 "isa_tms320.tcc"
)
{
#line 2513 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.GetReg(src1) & 0xffffff), 24);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.IntLoad(ea) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 77993 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 77999 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78002 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78006 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78009 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 78014 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78018 "isa_tms320.tcc"
> *DecodeOpMPYI3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78024 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78028 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 78035 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78038 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78042 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78045 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 78049 "isa_tms320.tcc"
OpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 78053 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78057 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78061 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78064 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78068 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78071 "isa_tms320.tcc"
)
{
#line 2403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "MPYI3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 78086 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 78091 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78094 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78098 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78101 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 78105 "isa_tms320.tcc"
OpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 78109 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78113 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78117 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78120 "isa_tms320.tcc"
)
{
#line 2567 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.IntLoad(ea1) & 0xffffff), 24);

		// Read 1st source operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.IntLoad(ea2) & 0xffffff), 24);

		// Compute the 32-bit result and overflow
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
			0,
			overflow
			);
		}
	}
#line 78206 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 78212 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78215 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78219 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78222 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 78227 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78231 "isa_tms320.tcc"
> *DecodeOpMPYI3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78237 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78241 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYI3 (multiply integers)
**********************************************************/
/**********************************************************
* OR3 (bitwise-logical OR)
* op OR3(0b001[3]:0b001011[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 78254 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78257 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78261 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78264 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 78268 "isa_tms320.tcc"
OpOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 78272 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78276 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78280 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78283 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78287 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78290 "isa_tms320.tcc"
)
{
#line 2663 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "OR3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 78305 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 78310 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78313 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78317 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78320 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 78324 "isa_tms320.tcc"
OpOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 78328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78332 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78336 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78339 "isa_tms320.tcc"
)
{
#line 2711 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value | src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 78373 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 78379 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78382 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78386 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78389 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 78394 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78398 "isa_tms320.tcc"
> *DecodeOpOR3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78404 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78408 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 78415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78422 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78425 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 78429 "isa_tms320.tcc"
OpOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 78433 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78437 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78441 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78444 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78448 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78451 "isa_tms320.tcc"
)
{
#line 2675 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "OR3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 78466 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 78471 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78474 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78478 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78481 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 78485 "isa_tms320.tcc"
OpOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 78489 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78493 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78497 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78500 "isa_tms320.tcc"
)
{
#line 2743 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value | src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 78544 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 78550 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78553 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78557 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78560 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 78565 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78569 "isa_tms320.tcc"
> *DecodeOpOR3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78575 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78579 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 78586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78589 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78593 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78596 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 78600 "isa_tms320.tcc"
OpOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 78604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78608 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78612 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78615 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78619 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78622 "isa_tms320.tcc"
)
{
#line 2687 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "OR3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 78637 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 78642 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78645 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78649 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78652 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 78656 "isa_tms320.tcc"
OpOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 78660 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78664 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78668 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78671 "isa_tms320.tcc"
)
{
#line 2784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src1_value | src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 78715 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 78721 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78724 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78728 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78731 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 78736 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78740 "isa_tms320.tcc"
> *DecodeOpOR3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78746 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78750 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 78757 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78760 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78764 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78767 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 78771 "isa_tms320.tcc"
OpOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 78775 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78779 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78783 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78786 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78790 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78793 "isa_tms320.tcc"
)
{
#line 2699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "OR3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 78808 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 78813 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78816 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78820 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78823 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 78827 "isa_tms320.tcc"
OpOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 78831 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78835 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78839 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78842 "isa_tms320.tcc"
)
{
#line 2825 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result = src1_value | src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 78915 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 78921 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78924 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78928 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78931 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 78936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78940 "isa_tms320.tcc"
> *DecodeOpOR3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 78946 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 78950 "isa_tms320.tcc"
	>(code, addr);
}

/* end of OR3 (bitwise-logical OR)
**********************************************************/
/**********************************************************
* SUBB3 (subtract integers with borrow)
* op SUBB3(0b001[3]:0b001100[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 78963 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 78966 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 78970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 78973 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 78977 "isa_tms320.tcc"
OpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 78981 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 78985 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 78989 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 78992 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 78996 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 78999 "isa_tms320.tcc"
)
{
#line 2908 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "SUBB3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 79014 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 79019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79022 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79026 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79029 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 79033 "isa_tms320.tcc"
OpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79037 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79041 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79045 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79048 "isa_tms320.tcc"
)
{
#line 2956 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 79095 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 79101 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79104 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79108 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79111 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 79116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79120 "isa_tms320.tcc"
> *DecodeOpSUBB3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 79126 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 79130 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 79137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79144 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79147 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 79151 "isa_tms320.tcc"
OpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79155 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79159 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79163 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79166 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 79170 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 79173 "isa_tms320.tcc"
)
{
#line 2920 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "SUBB3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 79188 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 79193 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79196 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79200 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79203 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 79207 "isa_tms320.tcc"
OpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79211 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79215 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79219 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79222 "isa_tms320.tcc"
)
{
#line 3000 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 79279 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 79285 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79292 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79295 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 79300 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79304 "isa_tms320.tcc"
> *DecodeOpSUBB3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 79310 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 79314 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 79321 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79324 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79328 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79331 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 79335 "isa_tms320.tcc"
OpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 79339 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79343 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79347 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79350 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 79354 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 79357 "isa_tms320.tcc"
)
{
#line 2932 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBB3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 79372 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 79377 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79384 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79387 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 79391 "isa_tms320.tcc"
OpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 79395 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79399 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79403 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79406 "isa_tms320.tcc"
)
{
#line 3054 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 79463 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 79469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79476 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79479 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 79484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79488 "isa_tms320.tcc"
> *DecodeOpSUBB3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 79494 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 79498 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 79505 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79508 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79512 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79515 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 79519 "isa_tms320.tcc"
OpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 79523 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79527 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79531 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79534 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 79538 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 79541 "isa_tms320.tcc"
)
{
#line 2944 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBB3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 79556 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 79561 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79564 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79568 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79571 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 79575 "isa_tms320.tcc"
OpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 79579 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79583 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79587 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79590 "isa_tms320.tcc"
)
{
#line 3108 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Read borrow in
		uint8_t borrow_in = cpu.GetST_C();

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, borrow_in);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 79676 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 79682 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79685 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79689 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79692 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 79697 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79701 "isa_tms320.tcc"
> *DecodeOpSUBB3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 79707 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 79711 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBB3 (subtract integers with borrow)
**********************************************************/
/**********************************************************
* SUBF3 (subtract floating-point values)
* op SUBF3(0b001[3]:0b001101[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 79724 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79727 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79731 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79734 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 79738 "isa_tms320.tcc"
OpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79742 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79746 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79750 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79753 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 79757 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 79760 "isa_tms320.tcc"
)
{
#line 3204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "SUBF3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 79775 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 79780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79783 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79787 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79790 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 79794 "isa_tms320.tcc"
OpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79798 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79802 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79806 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79809 "isa_tms320.tcc"
)
{
#line 3252 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 79816 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 79822 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79825 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79832 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 79837 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79841 "isa_tms320.tcc"
> *DecodeOpSUBF3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 79847 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 79851 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 79858 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79861 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79865 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79868 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 79872 "isa_tms320.tcc"
OpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79876 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79880 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79884 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79887 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 79891 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 79894 "isa_tms320.tcc"
)
{
#line 3216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "SUBF3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 79909 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 79914 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79917 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79921 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79924 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 79928 "isa_tms320.tcc"
OpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 79932 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79936 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 79940 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 79943 "isa_tms320.tcc"
)
{
#line 3256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 79950 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 79956 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79959 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79963 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 79966 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 79971 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 79975 "isa_tms320.tcc"
> *DecodeOpSUBF3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 79981 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 79985 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 79992 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 79995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 79999 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80002 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80006 "isa_tms320.tcc"
OpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80014 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80018 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80021 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80025 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80028 "isa_tms320.tcc"
)
{
#line 3228 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 80043 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 80048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80051 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80055 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80058 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 80062 "isa_tms320.tcc"
OpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80066 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80070 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80074 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80077 "isa_tms320.tcc"
)
{
#line 3260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 80084 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80090 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80093 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80097 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80100 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80105 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80109 "isa_tms320.tcc"
> *DecodeOpSUBF3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80115 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80119 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 80126 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80129 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80133 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80136 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80140 "isa_tms320.tcc"
OpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80144 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80148 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80152 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80155 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80159 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80162 "isa_tms320.tcc"
)
{
#line 3240 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBF3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 80177 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 80182 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80185 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80189 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80192 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 80196 "isa_tms320.tcc"
OpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80200 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80204 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80208 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80211 "isa_tms320.tcc"
)
{
#line 3264 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 80218 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80224 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80227 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80231 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80234 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80239 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80243 "isa_tms320.tcc"
> *DecodeOpSUBF3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80249 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80253 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBF3 (subtract floating-point values)
**********************************************************/
/**********************************************************
* SUBI3 (subtract integers)
* op SUBI3(0b001[3]:0b001110[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 80266 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80269 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80273 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80276 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80280 "isa_tms320.tcc"
OpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 80284 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80288 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80292 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80295 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80299 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80302 "isa_tms320.tcc"
)
{
#line 3281 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "SUBI3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 80317 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 80322 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80325 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80329 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80332 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 80336 "isa_tms320.tcc"
OpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 80340 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80344 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80348 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80351 "isa_tms320.tcc"
)
{
#line 3329 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 80395 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80401 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80404 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80408 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80411 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80416 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80420 "isa_tms320.tcc"
> *DecodeOpSUBI3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80426 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80430 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 80437 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80440 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80444 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80447 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80451 "isa_tms320.tcc"
OpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 80455 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80459 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80463 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80466 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80470 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80473 "isa_tms320.tcc"
)
{
#line 3293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "SUBI3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 80488 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 80493 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80503 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 80507 "isa_tms320.tcc"
OpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 80511 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80515 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80519 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80522 "isa_tms320.tcc"
)
{
#line 3370 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 80576 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80582 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80585 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80589 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80592 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80597 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80601 "isa_tms320.tcc"
> *DecodeOpSUBI3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80607 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80611 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 80618 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80621 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80625 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80628 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80632 "isa_tms320.tcc"
OpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80636 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80640 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80644 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80647 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80651 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80654 "isa_tms320.tcc"
)
{
#line 3305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 80669 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 80674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80677 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80684 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 80688 "isa_tms320.tcc"
OpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80692 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80696 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80700 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80703 "isa_tms320.tcc"
)
{
#line 3421 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 80757 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80766 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80770 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80773 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80778 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80782 "isa_tms320.tcc"
> *DecodeOpSUBI3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80788 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 80792 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 80799 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80802 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80806 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80809 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 80813 "isa_tms320.tcc"
OpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80817 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80821 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80825 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80828 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 80832 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 80835 "isa_tms320.tcc"
)
{
#line 3317 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "SUBI3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 80850 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 80855 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80858 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80862 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80865 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 80869 "isa_tms320.tcc"
OpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 80873 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80877 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 80881 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 80884 "isa_tms320.tcc"
)
{
#line 3472 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src1_value, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, src1_value, src2_value, 0);

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
			M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
			borrow_out,
			overflow
			);
		}
	}
#line 80967 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 80973 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 80976 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 80980 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 80983 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 80988 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 80992 "isa_tms320.tcc"
> *DecodeOpSUBI3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 80998 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 81002 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBI3 (subtract integers)
**********************************************************/
/**********************************************************
* TSTB3 (test bit fields)
* op TSTB3(0b001[3]:0b001111[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 81015 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81018 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81022 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81025 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 81029 "isa_tms320.tcc"
OpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 81033 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81037 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81041 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81044 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 81048 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 81051 "isa_tms320.tcc"
)
{
#line 3565 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!src1_name || !src2_name)
		return false;

		os << "TSTB3 " << src2_name << ", " << src1_name;
		return true;
	}
#line 81065 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81070 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81073 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81077 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81080 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81084 "isa_tms320.tcc"
OpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 81088 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81092 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81096 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81099 "isa_tms320.tcc"
)
{
#line 3609 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 81126 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 81132 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81135 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81139 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81142 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 81147 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81151 "isa_tms320.tcc"
> *DecodeOpTSTB3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 81157 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 81161 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 81168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81178 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 81182 "isa_tms320.tcc"
OpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 81186 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81190 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81194 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81197 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 81201 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 81204 "isa_tms320.tcc"
)
{
#line 3576 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "TSTB3 " << src2_name << ", " << disasm_src1_indir;
		return true;
	}
#line 81218 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81223 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81226 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81233 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81237 "isa_tms320.tcc"
OpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 81241 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81245 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81249 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81252 "isa_tms320.tcc"
)
{
#line 3634 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether 2nd source operand is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 81289 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 81295 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81298 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81302 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81305 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 81310 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81314 "isa_tms320.tcc"
> *DecodeOpTSTB3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 81320 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 81324 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 81331 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81334 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81338 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81341 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 81345 "isa_tms320.tcc"
OpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81349 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81353 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81357 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81360 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 81364 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 81367 "isa_tms320.tcc"
)
{
#line 3587 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "TSTB3 " << disasm_src2_indir << ", " << src1_name;
		return true;
	}
#line 81381 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81386 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81389 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81393 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81396 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81400 "isa_tms320.tcc"
OpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81404 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81408 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81412 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81415 "isa_tms320.tcc"
)
{
#line 3668 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether 1st source operand is valid
		if(unlikely(!cpu.HasReg(src1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 81452 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 81458 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81461 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81465 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81468 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 81473 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81477 "isa_tms320.tcc"
> *DecodeOpTSTB3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 81483 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 81487 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 81494 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81497 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81501 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81504 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 81508 "isa_tms320.tcc"
OpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81512 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81516 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81520 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81523 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 81527 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 81530 "isa_tms320.tcc"
)
{
#line 3598 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "TSTB3 " << disasm_src2_indir << ", " << disasm_src1_indir;
		return true;
	}
#line 81544 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81549 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81552 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81556 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81559 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81563 "isa_tms320.tcc"
OpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 81567 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81571 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81575 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81578 "isa_tms320.tcc"
)
{
#line 3702 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result = src1_value & src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 81638 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 81644 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81647 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81651 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81654 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 81659 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81663 "isa_tms320.tcc"
> *DecodeOpTSTB3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 81669 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 81673 "isa_tms320.tcc"
	>(code, addr);
}

/* end of TSTB3 (test bit fields)
**********************************************************/
/**********************************************************
* XOR3 (bitwise-exclusive OR)
* op XOR3(0b001[3]:0b010000[6]:t[2]:dst[5]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 81686 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81689 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81693 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81696 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 81700 "isa_tms320.tcc"
OpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 81704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81708 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81712 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81715 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 81719 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 81722 "isa_tms320.tcc"
)
{
#line 3772 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !src1_name || !src2_name)
		return false;

		os << "XOR3 " << src2_name << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 81737 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81742 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81745 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81749 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81752 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81756 "isa_tms320.tcc"
OpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 81760 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81764 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81768 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81771 "isa_tms320.tcc"
)
{
#line 3820 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value ^ src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 81805 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 81811 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81814 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81818 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81821 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 81826 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81830 "isa_tms320.tcc"
> *DecodeOpXOR3_reg_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 81836 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 81840 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 81847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81850 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81854 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81857 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 81861 "isa_tms320.tcc"
OpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 81865 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81869 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81873 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81876 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 81880 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 81883 "isa_tms320.tcc"
)
{
#line 3784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		const char *src2_name = REG_NAME[src2];

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !src2_name)
		return false;

		os << "XOR3 " << src2_name << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 81898 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 81903 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81906 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81910 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81913 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 81917 "isa_tms320.tcc"
OpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 81921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 81925 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 81929 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 81932 "isa_tms320.tcc"
)
{
#line 3852 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src2) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea);

		// Read 2nd source operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Compute the result
		uint32_t result = src1_value ^ src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 81976 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 81982 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 81985 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 81989 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 81992 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 81997 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82001 "isa_tms320.tcc"
> *DecodeOpXOR3_indir_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82007 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82011 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 82018 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82021 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82025 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82028 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 82032 "isa_tms320.tcc"
OpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 82036 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82040 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82044 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82047 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82051 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82054 "isa_tms320.tcc"
)
{
#line 3796 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		const char *src1_name = REG_NAME[src1];
		string disasm_src2_indir;

		if (!dst_name || !src1_name || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "XOR3 " << disasm_src2_indir << ", " << src1_name << ", " << dst_name;
		return true;
	}
#line 82069 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 82074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82077 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82081 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82084 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 82088 "isa_tms320.tcc"
OpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 82092 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82096 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82100 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82103 "isa_tms320.tcc"
)
{
#line 3893 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether source and destination operands are valid
		if(unlikely(!cpu.HasReg(src1) || !cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea);

		// Compute the result
		uint32_t result = src1_value ^ src2_value;

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 82147 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 82153 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82156 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82160 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82163 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 82168 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82172 "isa_tms320.tcc"
> *DecodeOpXOR3_reg_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82178 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82182 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 82189 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82196 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82199 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 82203 "isa_tms320.tcc"
OpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 82207 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82211 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82215 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82218 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82222 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82225 "isa_tms320.tcc"
)
{
#line 3808 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		const char *dst_name = REG_NAME[dst];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!dst_name || !cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod1, ar1) || !cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod2, ar2))
		return false;

		os << "XOR3 " << disasm_src2_indir << ", " << disasm_src1_indir << ", " << dst_name;
		return true;
	}
#line 82240 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 82245 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82248 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82252 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82255 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 82259 "isa_tms320.tcc"
OpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 82263 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82267 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82271 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82274 "isa_tms320.tcc"
)
{
#line 3934 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/3op.isa"
	{
		// Check whether destination operand is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 1st source operand
		typename CONFIG::address_t ea1;        // The effective address
		bool update_ar1;                       // Whether to update ARn
		typename CONFIG::address_t output_ar1; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea1, update_ar1, output_ar1, mod1, ar1)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of the 2nd source operand
		typename CONFIG::address_t ea2;        // The effective address
		bool update_ar2;                       // Whether to update ARn
		typename CONFIG::address_t output_ar2; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea2, update_ar2, output_ar2, mod2, ar2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 1st source operand from memory
		uint32_t src1_value = cpu.IntLoad(ea1);

		// Read 2nd source operand from memory
		uint32_t src2_value = cpu.IntLoad(ea2);

		// Compute the result
		uint32_t result = src1_value ^ src2_value;

		// Check whether an auxiliary register is updated for 1st source operand
		if(update_ar1)
		{
			// Write back ARn
			cpu.SetAR23_0(ar1, output_ar1);
		}

		// Note: 13.4.2 3-Operand Addressing Modes, page 13-24
		// ...If the src1 and src2 fields both modify the same auxiliary register,
		// both addresses are correctly generated. However, only the value created
		// by the src1 field is saved into the auxiliary register specified...

		// Check whether an auxiliary register is updated for 2nd source operand
		if(update_ar2 && ar1 != ar2)
		{
			// Write back ARn
			cpu.SetAR23_0(ar2, output_ar2);
		}

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z    // or mask
			);
		}
	}
#line 82347 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 82353 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82356 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82360 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82363 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 82368 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82372 "isa_tms320.tcc"
> *DecodeOpXOR3_indir_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82378 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82382 "isa_tms320.tcc"
	>(code, addr);
}

/* end of XOR3 (bitwise-exclusive OR)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of program-control operations:
* - Bcond        branch conditionally (standard)
* - BcondD       branch conditionally (delayed)
* - BR           branch unconditionally (standard)
* - BRD          branch unconditionally (delayed)
* - CALL         call subroutine
* - CALLcond     call subroutine conditionally
* - DBcond       decrement and branch conditionally (standard)
* - DBcondD      decrement and branch conditionally (delayed)
* - IACK         interrupt acknowledge
* - IDLE         idle until interrupt
* - NOP          no operation
* - RETIcond     return from interrupt conditionally
* - RETScond     return form subroutine conditionally
* - RPTB         repeat block of instructions
* - RPTS         repeat single instruction
* - SWI          software interrupt
* - TRAPcond     trap conditionally
*/
/**********************************************************
* Bcond (branch conditionally (standard))
* op Bcond(0b011010[6]:b[1]:0b000[3]:0b0[1]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 82448 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82451 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82455 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82458 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 82462 "isa_tms320.tcc"
OpBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82466 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82470 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82474 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82477 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82481 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82484 "isa_tms320.tcc"
)
{
#line 63 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "B" << cond_name << " " << reg_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.GetReg(reg)) << ">";
		return true;
	}
#line 82497 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 82502 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82505 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82509 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82512 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 82516 "isa_tms320.tcc"
OpBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82520 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82524 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82528 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82531 "isa_tms320.tcc"
)
{
#line 73 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetReg(reg);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 82559 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 82565 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82568 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82572 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82575 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 82580 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82584 "isa_tms320.tcc"
> *DecodeOpBcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82590 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82594 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 82601 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82608 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82611 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 82615 "isa_tms320.tcc"
OpBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 82619 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82623 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82627 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82630 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82634 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82637 "isa_tms320.tcc"
)
{
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "B" << cond_name << " 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << dec;
		os << " <" << cpu.GetFunctionFriendlyName((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << ">";
		return true;
	}
#line 82649 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 82654 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82657 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82661 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82664 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 82668 "isa_tms320.tcc"
OpBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 82672 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82676 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82680 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82683 "isa_tms320.tcc"
)
{
#line 109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the branch target address
		typename CONFIG::address_t target_addr = next_pc + imm;

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 82714 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 82720 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82723 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82727 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82730 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 82735 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82739 "isa_tms320.tcc"
> *DecodeOpBcond_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82745 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82749 "isa_tms320.tcc"
	>(code, addr);
}

/* end of Bcond (branch conditionally (standard))
**********************************************************/
/**********************************************************
* BcondD (branch conditionally (delayed))
* op BcondD(0b011010[6]:b[1]:0b000[3]:0b1[1]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 82762 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82765 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82769 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82772 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 82776 "isa_tms320.tcc"
OpBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82780 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82784 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82788 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82791 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82795 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82798 "isa_tms320.tcc"
)
{
#line 147 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "B" << cond_name << "D " << reg_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.GetReg(reg)) << ">";
		return true;
	}
#line 82811 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 82816 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82819 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82823 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82826 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 82830 "isa_tms320.tcc"
OpBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 82834 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82838 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82842 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82845 "isa_tms320.tcc"
)
{
#line 157 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Rule 2: this instruction can't be one of the last 4 instructions in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && (cpu.GetPC() >= (cpu.GetRE() - 3) && (cpu.GetPC() <= cpu.GetRE())))))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetReg(reg);

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 82874 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 82880 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82883 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82887 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82890 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 82895 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82899 "isa_tms320.tcc"
> *DecodeOpBcondD_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBcondD_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 82905 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 82909 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 82916 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82919 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82923 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82926 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 82930 "isa_tms320.tcc"
OpBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 82934 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82938 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82942 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82945 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 82949 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 82952 "isa_tms320.tcc"
)
{
#line 185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "B" << cond_name << "D 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 3 + imm) << dec;
		os << " <" << cpu.GetFunctionFriendlyName((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 3 + imm) << ">";
		return true;
	}
#line 82964 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 82969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 82972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 82976 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 82979 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 82983 "isa_tms320.tcc"
OpBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 82987 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 82991 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 82995 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 82998 "isa_tms320.tcc"
)
{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Rule 2: this instruction can't be one of the last 4 instructions in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && (cpu.GetPC() >= (cpu.GetRE() - 3) && (cpu.GetPC() <= cpu.GetRE())))))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the branch target address
		typename CONFIG::address_t target_addr = next_pc + imm + 2;

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 83030 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83036 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83039 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83043 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83046 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83051 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83055 "isa_tms320.tcc"
> *DecodeOpBcondD_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBcondD_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83061 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83065 "isa_tms320.tcc"
	>(code, addr);
}

/* end of BcondD (branch conditionally (delayed))
**********************************************************/
/**********************************************************
* BR (branch unconditionally (standard))
* op BR(0b0110000[7]:0b0[1]:src[24])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 83078 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83081 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83085 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83088 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83092 "isa_tms320.tcc"
OpBR<
#line 45 "isa/tms320.isa"
CONFIG
#line 83096 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83100 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83104 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83107 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83111 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83114 "isa_tms320.tcc"
)
{
#line 233 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "BR 0x" << hex << src << dec;
		os << " <" << cpu.GetFunctionFriendlyName(src) << ">";
		return true;
	}
#line 83123 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83128 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83131 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83135 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83138 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83142 "isa_tms320.tcc"
OpBR<
#line 45 "isa/tms320.isa"
CONFIG
#line 83146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83150 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83154 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83157 "isa_tms320.tcc"
)
{
#line 239 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the branch target address
		typename CONFIG::address_t target_addr = src;

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 83176 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83182 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83185 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83189 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83192 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83201 "isa_tms320.tcc"
> *DecodeOpBR(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBR<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83207 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83211 "isa_tms320.tcc"
	>(code, addr);
}

/* end of BR (branch unconditionally (standard))
**********************************************************/
/**********************************************************
* BRD (branch unconditionally (delayed))
* op BRD(0b0110000[7]:0b1[1]:src[24])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 83224 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83227 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83231 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83234 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83238 "isa_tms320.tcc"
OpBRD<
#line 45 "isa/tms320.isa"
CONFIG
#line 83242 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83246 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83250 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83253 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83257 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83260 "isa_tms320.tcc"
)
{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "BRD 0x" << hex << src << dec;
		os << " <" << cpu.GetFunctionFriendlyName(src) << ">";
		return true;
	}
#line 83269 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83274 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83277 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83281 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83284 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83288 "isa_tms320.tcc"
OpBRD<
#line 45 "isa/tms320.isa"
CONFIG
#line 83292 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83296 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83300 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83303 "isa_tms320.tcc"
)
{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Rule 2: this instruction can't be one of the last 4 instructions in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && (cpu.GetPC() >= (cpu.GetRE() - 3) && (cpu.GetPC() <= cpu.GetRE())))))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the branch target address
		typename CONFIG::address_t target_addr = src;

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 83323 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83329 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83332 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83336 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83339 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83344 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83348 "isa_tms320.tcc"
> *DecodeOpBRD(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBRD<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83354 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83358 "isa_tms320.tcc"
	>(code, addr);
}

/* end of BRD (branch unconditionally (delayed))
**********************************************************/
/**********************************************************
* CALL (call subroutine)
* op CALL(0b0110001[7]:0b0[1]:src[24])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 83371 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83374 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83378 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83381 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83385 "isa_tms320.tcc"
OpCALL<
#line 45 "isa/tms320.isa"
CONFIG
#line 83389 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83393 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83397 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83400 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83404 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83407 "isa_tms320.tcc"
)
{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "CALL 0x" << hex << src << dec;
		os << " <" << cpu.GetFunctionFriendlyName(src) << ">";
		return true;
	}
#line 83416 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83421 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83424 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83428 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83431 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83435 "isa_tms320.tcc"
OpCALL<
#line 45 "isa/tms320.isa"
CONFIG
#line 83439 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83443 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83447 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83450 "isa_tms320.tcc"
)
{
#line 304 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the target call address
		typename CONFIG::address_t target_addr = src;

		// Store the next PC at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, next_pc);

		// Update SP
		cpu.SetSP(sp);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 83481 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83487 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83490 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83494 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83497 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83506 "isa_tms320.tcc"
> *DecodeOpCALL(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCALL<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83512 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83516 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CALL (call subroutine)
**********************************************************/
/**********************************************************
* CALLcond (call subroutine conditionally)
* op CALLcond(0b011100[6]:b[1]:0b0000[4]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 83529 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83532 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83536 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83539 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83543 "isa_tms320.tcc"
OpCALLcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 83547 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83551 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83555 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83558 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83562 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83565 "isa_tms320.tcc"
)
{
#line 342 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "CALL" << cond_name << " " << reg_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.GetReg(reg)) << ">";
		return true;
	}
#line 83578 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83583 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83586 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83590 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83593 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83597 "isa_tms320.tcc"
OpCALLcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 83601 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83605 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83609 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83612 "isa_tms320.tcc"
)
{
#line 352 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetReg(reg);

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Store the next PC at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, next_pc);

		// Update SP
		cpu.SetSP(sp);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 83652 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83661 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83665 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83668 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83673 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83677 "isa_tms320.tcc"
> *DecodeOpCALLcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCALLcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83683 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83687 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 83694 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83697 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83701 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83704 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83708 "isa_tms320.tcc"
OpCALLcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 83712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83716 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83720 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83723 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83727 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83730 "isa_tms320.tcc"
)
{
#line 391 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "CALL" << cond_name << " 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << dec;
		os << " <" << cpu.GetFunctionFriendlyName((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << ">";
		return true;
	}
#line 83742 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83747 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83750 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83754 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83757 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83761 "isa_tms320.tcc"
OpCALLcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 83765 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83769 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83773 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83776 "isa_tms320.tcc"
)
{
#line 400 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the target address
		typename CONFIG::address_t target_addr = next_pc + imm;

		// Store the next PC at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, next_pc);

		// Update SP
		cpu.SetSP(sp);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 83816 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83822 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83825 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83832 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 83837 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83841 "isa_tms320.tcc"
> *DecodeOpCALLcond_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCALLcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 83847 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 83851 "isa_tms320.tcc"
	>(code, addr);
}

/* end of CALLcond (call subroutine conditionally)
**********************************************************/
/**********************************************************
* DBcond (decrement and branch conditionally (standard))
* op DBcond(0b011011[6]:b[1]:ar[3]:0b0[1]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 83864 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83867 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83871 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83874 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 83878 "isa_tms320.tcc"
OpDBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 83882 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83886 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83890 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83893 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 83897 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 83900 "isa_tms320.tcc"
)
{
#line 447 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "DB" << cond_name << " AR" << ar << ", " << reg_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.GetReg(reg)) << ">";
		return true;
	}
#line 83913 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 83918 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 83925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 83928 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 83932 "isa_tms320.tcc"
OpDBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 83936 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 83940 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 83944 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 83947 "isa_tms320.tcc"
)
{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read ARn
		int32_t ar_value = cpu.GetReg(ar);

		// Compute new value for ARn
		ar_value = ar_value - 1;

		// Update ARn
		cpu.SetAR23_0(ar, (uint32_t) ar_value);

		// Check whether ARn is >= 0
		if(ar_value < 0) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetReg(reg);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 83987 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 83993 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 83996 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84000 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84003 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84008 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84012 "isa_tms320.tcc"
> *DecodeOpDBcond_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpDBcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84018 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84022 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 84029 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84032 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84036 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84039 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84043 "isa_tms320.tcc"
OpDBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 84047 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84051 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84055 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84058 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84062 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84065 "isa_tms320.tcc"
)
{
#line 496 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "DB" << cond_name << " AR" << ar << ", 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << dec;
		os << " <" << cpu.GetFunctionFriendlyName((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 1 + imm) << ">";
		return true;
	}
#line 84077 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84082 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84085 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84089 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84092 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84096 "isa_tms320.tcc"
OpDBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 84100 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84104 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84108 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84111 "isa_tms320.tcc"
)
{
#line 505 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read ARn
		int32_t ar_value = cpu.GetReg(ar);

		// Compute new value for ARn
		ar_value = ar_value - 1;

		// Update ARn
		cpu.SetAR23_0(ar, (uint32_t) ar_value);

		// Check whether ARn is >= 0
		if(ar_value < 0) return;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the target address
		typename CONFIG::address_t target_addr = next_pc + imm;

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 84154 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84160 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84163 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84167 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84170 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84175 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84179 "isa_tms320.tcc"
> *DecodeOpDBcond_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpDBcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84185 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84189 "isa_tms320.tcc"
	>(code, addr);
}

/* end of DBcond (decrement and branch conditionally (standard))
**********************************************************/
/**********************************************************
* DBcondD (decrement and branch conditionally (delayed))
* op DBcondD(0b011011[6]:b[1]:ar[3]:0b1[1]:cond[5]:reg_or_disp[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 84202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84205 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84212 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84216 "isa_tms320.tcc"
OpDBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 84220 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84224 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84228 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84231 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84235 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84238 "isa_tms320.tcc"
)
{
#line 555 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		const char *reg_name = REG_NAME[reg];

		if(!cond_name || !reg_name) return false;
		os << "DB" << cond_name << "D AR" << ar << ", " << reg_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.GetReg(reg)) << ">";
		return true;
	}
#line 84251 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84256 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84259 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84263 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84266 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84270 "isa_tms320.tcc"
OpDBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 84274 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84278 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84282 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84285 "isa_tms320.tcc"
)
{
#line 565 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasReg(reg) || !cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Rule 2: this instruction can't be one of the last 4 instructions in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && (cpu.GetPC() >= (cpu.GetRE() - 3) && (cpu.GetPC() <= cpu.GetRE())))))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read ARn
		int32_t ar_value = cpu.GetReg(ar);

		// Compute new value for ARn
		ar_value = ar_value - 1;

		// Update ARn
		cpu.SetAR23_0(ar, (uint32_t) ar_value);

		// Check whether ARn is >= 0
		if(ar_value < 0) return;

		// Read the source operand
		typename CONFIG::address_t target_addr = cpu.GetReg(reg);

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 84326 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84332 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84335 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84339 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84342 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84347 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84351 "isa_tms320.tcc"
> *DecodeOpDBcondD_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpDBcondD_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84357 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84361 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 84368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84371 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84375 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84378 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84382 "isa_tms320.tcc"
OpDBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 84386 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84390 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84394 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84397 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84401 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84404 "isa_tms320.tcc"
)
{
#line 605 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "DB" << cond_name << "D AR" << ar << ", 0x" << hex << ((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 3 + imm) << dec;
		os << " <" << cpu.GetFunctionFriendlyName((Operation<CONFIG, DEBUG>::GetAddr() / 4) + 3 + imm) << ">";
		return true;
	}
#line 84416 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84421 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84424 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84428 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84431 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84435 "isa_tms320.tcc"
OpDBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 84439 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84443 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84447 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84450 "isa_tms320.tcc"
)
{
#line 614 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the source register and the condition are valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Rule 2: this instruction can't be one of the last 4 instructions in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && (cpu.GetPC() >= (cpu.GetRE() - 3) && (cpu.GetPC() <= cpu.GetRE())))))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read ARn
		int32_t ar_value = cpu.GetReg(ar);

		// Compute new value for ARn
		ar_value = ar_value - 1;

		// Update ARn
		cpu.SetAR23_0(ar, (uint32_t) ar_value);

		// Check whether ARn is >= 0
		if(ar_value < 0) return;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Compute the target address
		typename CONFIG::address_t target_addr = next_pc + imm + 2;

		// Branch to the target address with a delay of 3 instructions
		cpu.Branch(target_addr, 3);
	}
#line 84494 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84503 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84507 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84510 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84519 "isa_tms320.tcc"
> *DecodeOpDBcondD_disp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpDBcondD_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84525 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84529 "isa_tms320.tcc"
	>(code, addr);
}

/* end of DBcondD (decrement and branch conditionally (delayed))
**********************************************************/
/**********************************************************
* IACK (interrupt acknowledge)
* op IACK(0b000[3]:0b110110[6]:g[2]:0b00000[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 84542 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84549 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84552 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84556 "isa_tms320.tcc"
OpIACK_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 84560 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84564 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84568 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84571 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84575 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84578 "isa_tms320.tcc"
)
{
#line 665 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "IACK @0x" << direct;
		return true;
	}
#line 84586 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84591 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84594 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84598 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84601 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84605 "isa_tms320.tcc"
OpIACK_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 84609 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84613 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84617 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84620 "isa_tms320.tcc"
)
{
#line 670 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 84627 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84633 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84636 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84640 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84643 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84648 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84652 "isa_tms320.tcc"
> *DecodeOpIACK_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpIACK_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84658 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84662 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 84669 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84672 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84676 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84679 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84683 "isa_tms320.tcc"
OpIACK_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 84687 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84691 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84695 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84698 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84702 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84705 "isa_tms320.tcc"
)
{
#line 676 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		string disasm_indir;
		if(!cpu.DisasmIndir(disasm_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;
		os << "IACK " << disasm_indir;
		return true;
	}
#line 84715 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84720 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84723 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84727 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84730 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84734 "isa_tms320.tcc"
OpIACK_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 84738 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84742 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84746 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84749 "isa_tms320.tcc"
)
{
#line 683 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 84756 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84762 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84765 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84769 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84772 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84777 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84781 "isa_tms320.tcc"
> *DecodeOpIACK_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpIACK_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84787 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84791 "isa_tms320.tcc"
	>(code, addr);
}

/* end of IACK (interrupt acknowledge)
**********************************************************/
/**********************************************************
* IDLE (idle until interrupt)
* op IDLE(0b000[3]:0b001100[6]:0[23])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 84804 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84807 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84811 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84814 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84818 "isa_tms320.tcc"
OpIDLE<
#line 45 "isa/tms320.isa"
CONFIG
#line 84822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84826 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84830 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84833 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84837 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84840 "isa_tms320.tcc"
)
{
#line 697 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "IDLE";
		return true;
	}
#line 84848 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84853 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84856 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84860 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84863 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 84867 "isa_tms320.tcc"
OpIDLE<
#line 45 "isa/tms320.isa"
CONFIG
#line 84871 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84875 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84879 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84882 "isa_tms320.tcc"
)
{
#line 702 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Set ST[GIE]
		cpu.SetST_GIE();

		// Enter idle mode 1
		cpu.Idle(1);
	}
#line 84901 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 84907 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84910 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84914 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84917 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 84922 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84926 "isa_tms320.tcc"
> *DecodeOpIDLE(CodeType code, typename CONFIG::address_t addr)
{
	return new OpIDLE<
#line 45 "isa/tms320.isa"
	CONFIG
#line 84932 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 84936 "isa_tms320.tcc"
	>(code, addr);
}

/* end of IDLE (idle until interrupt)
**********************************************************/
/**********************************************************
* NOP (no operation)
* op NOP(0b000[3]:0b011001[6]:g[2]:0b00000[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 84949 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 84952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 84956 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 84959 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 84963 "isa_tms320.tcc"
OpNOP_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 84967 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 84971 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 84975 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 84978 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 84982 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 84985 "isa_tms320.tcc"
)
{
#line 728 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{

		os << "NOP";
		return true;
	}
#line 84994 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 84999 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85002 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85006 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85009 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85013 "isa_tms320.tcc"
OpNOP_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 85017 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85021 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85025 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85028 "isa_tms320.tcc"
)
{
#line 734 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// No operation
	}
#line 85035 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85041 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85044 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85048 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85051 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85060 "isa_tms320.tcc"
> *DecodeOpNOP_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOP_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85066 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85070 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 85077 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85080 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85084 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85087 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85091 "isa_tms320.tcc"
OpNOP_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 85095 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85099 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85103 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85106 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85110 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85113 "isa_tms320.tcc"
)
{
#line 740 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		string disasm_indir;
		if(!cpu.DisasmIndir(disasm_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;
		os << "NOP " << disasm_indir;
		return true;
	}
#line 85123 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85128 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85131 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85135 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85138 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85142 "isa_tms320.tcc"
OpNOP_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 85146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85150 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85154 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85157 "isa_tms320.tcc"
)
{
#line 747 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Do a dummy load from memory
		cpu.IntLoad(ea);
	}
#line 85175 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85181 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85184 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85188 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85191 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85196 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85200 "isa_tms320.tcc"
> *DecodeOpNOP_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOP_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85206 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85210 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NOP (no operation)
**********************************************************/
/**********************************************************
* RETIcond (return from interrupt conditionally)
* op RETIcond(0b01111[5]:0b0000[4]:0b00[2]:cond[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 85223 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85226 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85233 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85237 "isa_tms320.tcc"
OpRETIcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 85241 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85245 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85249 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85252 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85256 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85259 "isa_tms320.tcc"
)
{
#line 772 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "RETI" << cond_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.IntLoad(cpu.GetSP() & ADDRESS_MASK)) << ">";
		return true;
	}
#line 85271 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85283 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85286 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85290 "isa_tms320.tcc"
OpRETIcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 85294 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85298 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85302 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85305 "isa_tms320.tcc"
)
{
#line 781 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read SP
		typename CONFIG::address_t sp = cpu.GetSP();

		// Load the target address stored at SP
		typename CONFIG::address_t target_addr = cpu.IntLoad(sp & ADDRESS_MASK);

		// Compute the new value of SP
		sp = sp - 1;

		// Update SP
		cpu.SetSP(sp);

		// Set ST[GIE]
		cpu.SetST_GIE();

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 85345 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85351 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85354 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85358 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85361 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85366 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85370 "isa_tms320.tcc"
> *DecodeOpRETIcond(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRETIcond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85376 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85380 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RETIcond (return from interrupt conditionally)
**********************************************************/
/**********************************************************
* RETScond (return form subroutine conditionally)
* op RETScond(0b01111[5]:0b0001[4]:0b00[2]:cond[5]:0[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 85393 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85396 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85400 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85403 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85407 "isa_tms320.tcc"
OpRETScond<
#line 45 "isa/tms320.isa"
CONFIG
#line 85411 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85415 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85419 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85422 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85426 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85429 "isa_tms320.tcc"
)
{
#line 828 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];

		if(!cond_name) return false;
		os << "RETS" << cond_name;
		os << " <" << cpu.GetFunctionFriendlyName(cpu.IntLoad(cpu.GetSP() & ADDRESS_MASK)) << ">";
		return true;
	}
#line 85441 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85446 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85449 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85453 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85456 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85460 "isa_tms320.tcc"
OpRETScond<
#line 45 "isa/tms320.isa"
CONFIG
#line 85464 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85468 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85472 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85475 "isa_tms320.tcc"
)
{
#line 837 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read SP
		typename CONFIG::address_t sp = cpu.GetSP();

		// Load the target address stored at SP
		typename CONFIG::address_t target_addr = cpu.IntLoad(sp & ADDRESS_MASK);

		// Compute the new value of SP
		sp = sp - 1;

		// Update SP
		cpu.SetSP(sp);

		// Branch to the target address
		cpu.Branch(target_addr);
	}
#line 85512 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85518 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85521 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85525 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85528 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85533 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85537 "isa_tms320.tcc"
> *DecodeOpRETScond(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRETScond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85543 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85547 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RETScond (return form subroutine conditionally)
**********************************************************/
/**********************************************************
* RPTB (repeat block of instructions)
* op RPTB(0b01100100[8]:src[24])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 85560 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85563 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85567 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85570 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85574 "isa_tms320.tcc"
OpRPTB<
#line 45 "isa/tms320.isa"
CONFIG
#line 85578 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85582 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85586 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85589 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85593 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85596 "isa_tms320.tcc"
)
{
#line 881 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "RPTB 0x" << hex << src << dec;
		os << " <" << cpu.GetFunctionFriendlyName(src) << ">";
		return true;
	}
#line 85605 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85610 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85613 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85617 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85620 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85624 "isa_tms320.tcc"
OpRPTB<
#line 45 "isa/tms320.isa"
CONFIG
#line 85628 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85632 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85636 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85639 "isa_tms320.tcc"
)
{
#line 887 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.ResetS();

		// Load RE with source operand value
		cpu.SetRE(src);
	}
#line 85667 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85673 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85676 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85680 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85683 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85688 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85692 "isa_tms320.tcc"
> *DecodeOpRPTB(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTB<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85698 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85702 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RPTB (repeat block of instructions)
**********************************************************/
/**********************************************************
* RPTS (repeat single instruction)
* op RPTS(0b000[3]:0b100111[6]:g[2]:0b11011[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 85715 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85718 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85722 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85725 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85729 "isa_tms320.tcc"
OpRPTS_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 85733 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85737 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85741 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85744 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85748 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85751 "isa_tms320.tcc"
)
{
#line 922 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *src_reg_name = REG_NAME[src];

		if(!src_reg_name) return false;
		os << "RPTS " << src_reg_name;
		return true;
	}
#line 85762 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85767 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85770 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85774 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85777 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85781 "isa_tms320.tcc"
OpRPTS_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 85785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85789 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85793 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85796 "isa_tms320.tcc"
)
{
#line 930 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check that source register is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		typename CONFIG::address_t src_value = cpu.GetReg(src);

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);
		cpu.SetRE(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.SetS();

		// Load RC with source operand value
		cpu.SetRC(src_value);
	}
#line 85834 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85850 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 85855 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85859 "isa_tms320.tcc"
> *DecodeOpRPTS_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTS_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 85865 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 85869 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 85876 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85879 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85883 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85886 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 85890 "isa_tms320.tcc"
OpRPTS_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 85894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85898 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85902 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85905 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 85909 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 85912 "isa_tms320.tcc"
)
{
#line 967 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "RPTS @0x" << hex << direct << dec;
		return true;
	}
#line 85920 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 85925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 85932 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 85935 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 85939 "isa_tms320.tcc"
OpRPTS_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 85943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 85947 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 85951 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 85954 "isa_tms320.tcc"
)
{
#line 972 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the effective address of the source operand
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Load the source operand value from memory
		typename CONFIG::address_t src_value = cpu.IntLoad(ea);

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);
		cpu.SetRE(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.SetS();

		// Load RC with source operand value
		cpu.SetRC(src_value);
	}
#line 85989 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 85995 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 85998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86002 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86005 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86014 "isa_tms320.tcc"
> *DecodeOpRPTS_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTS_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86020 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86024 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 86031 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86034 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86038 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86041 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86045 "isa_tms320.tcc"
OpRPTS_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 86049 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86053 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86057 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86060 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86064 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86067 "isa_tms320.tcc"
)
{
#line 1006 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		string disasm_indir;
		if(!cpu.DisasmIndir(disasm_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, mod, ar, disp)) return false;
		os << "RPTS " << disasm_indir;
		return true;
	}
#line 86077 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86082 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86085 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86089 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86092 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86096 "isa_tms320.tcc"
OpRPTS_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 86100 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86104 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86108 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86111 "isa_tms320.tcc"
)
{
#line 1013 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of the source operand
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the source operand value from memory
		typename CONFIG::address_t src_value = cpu.IntLoad(ea);

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);
		cpu.SetRE(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.SetS();

		// Load RC with source operand value
		cpu.SetRC(src_value);
	}
#line 86153 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86159 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86162 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86166 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86169 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86174 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86178 "isa_tms320.tcc"
> *DecodeOpRPTS_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTS_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86184 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86188 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 86195 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86202 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86205 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86209 "isa_tms320.tcc"
OpRPTS_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 86213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86217 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86221 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86224 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86228 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86231 "isa_tms320.tcc"
)
{
#line 1054 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "RPTS @0x" << hex << imm << dec;
		return true;
	}
#line 86239 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86244 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86247 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86254 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86258 "isa_tms320.tcc"
OpRPTS_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 86262 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86266 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86270 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86273 "isa_tms320.tcc"
)
{
#line 1059 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result
		uint32_t src_value = imm; // imm has already been sign extended by the decoder

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Write next PC into RS and RE
		cpu.SetRS(next_pc);
		cpu.SetRE(next_pc);

		// Set ST[RM]
		cpu.SetST_RM();

		// Set S
		cpu.SetS();

		// Load RC with source operand value
		cpu.SetRC(src_value);
	}
#line 86305 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86311 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86314 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86318 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86321 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86326 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86330 "isa_tms320.tcc"
> *DecodeOpRPTS_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRPTS_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86336 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86340 "isa_tms320.tcc"
	>(code, addr);
}

/* end of RPTS (repeat single instruction)
**********************************************************/
/**********************************************************
* SWI (software interrupt)
* op SWI(0b0110011[7]:0b0000[4]:0[21])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 86353 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86356 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86360 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86363 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86367 "isa_tms320.tcc"
OpSWI<
#line 45 "isa/tms320.isa"
CONFIG
#line 86371 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86375 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86379 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86382 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86386 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86389 "isa_tms320.tcc"
)
{
#line 1098 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		os << "SWI";
		return true;
	}
#line 86397 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86402 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86405 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86409 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86412 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86416 "isa_tms320.tcc"
OpSWI<
#line 45 "isa/tms320.isa"
CONFIG
#line 86420 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86424 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86428 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86431 "isa_tms320.tcc"
)
{
#line 1103 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 86438 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86444 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86447 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86454 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86459 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86463 "isa_tms320.tcc"
> *DecodeOpSWI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSWI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86469 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86473 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SWI (software interrupt)
**********************************************************/
/**********************************************************
* TRAPcond (trap conditionally)
* op TRAPcond(0b0111010[7]:0b0000[4]:cond[5]:0b01[11]:n[5])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 86486 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86489 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86493 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86496 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86500 "isa_tms320.tcc"
OpTRAPcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 86504 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86508 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86512 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86515 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86519 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86522 "isa_tms320.tcc"
)
{
#line 1118 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		const char *cond_name = COND_NAME[cond];
		if(!cond_name) return false;
		os << "TRAP" << cond_name << " " << n;
		return true;
	}
#line 86532 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86537 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86540 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86544 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86547 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86551 "isa_tms320.tcc"
OpTRAPcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 86555 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86559 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86563 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86566 "isa_tms320.tcc"
)
{
#line 1125 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/control.isa"
	{
		// Check whether the condition is valid
		if(unlikely(!cpu.HasCondition(cond)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check wether the instruction does not break some rules (pg 7-6 and 7-9)
		// Rule 1: this instruction can't be the last instruction in the block
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch() || (cpu.GetST_RM() && cpu.GetRE() == cpu.GetPC())))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check the condition
		if(!cpu.CheckCondition(cond)) return;

		// Read SP and compute its new value
		typename CONFIG::address_t sp = cpu.GetSP() + 1;

		// Read the next PC
		typename CONFIG::address_t next_pc = cpu.GetNPC();

		// Store the next PC at SP + 1
		cpu.IntStore(sp & ADDRESS_MASK, next_pc);

		// Update SP
		cpu.SetSP(sp);

		// Load trap handler address
		typename CONFIG::address_t trap_handler_addr = cpu.IntLoad(0x20 + n);

		// Reset ST[GIE] to disable further interrupts until reactivated by the software
		cpu.ResetST_GIE();

		// Branch to trap handler
		cpu.Branch(trap_handler_addr);
	}
#line 86609 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86615 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86618 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86622 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86625 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86630 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86634 "isa_tms320.tcc"
> *DecodeOpTRAPcond(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTRAPcond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86640 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86644 "isa_tms320.tcc"
	>(code, addr);
}

/* end of TRAPcond (trap conditionally)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of low-power control operations:
* - IDLE2        low-power idle
* - LOPOWER      divide clock by 16
* - MAXSPEED     restore clock to regular speed
*/
/**********************************************************
* IDLE2 (low-power idle)
* op IDLE2(0b000[3]:0b001100[6]:0b001[23])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 86696 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86699 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86703 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86706 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86710 "isa_tms320.tcc"
OpIDLE2<
#line 45 "isa/tms320.isa"
CONFIG
#line 86714 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86718 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86722 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86725 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86729 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86732 "isa_tms320.tcc"
)
{
#line 49 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		os << "IDLE2";
		return true;
	}
#line 86740 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86745 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86748 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86752 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86755 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86759 "isa_tms320.tcc"
OpIDLE2<
#line 45 "isa/tms320.isa"
CONFIG
#line 86763 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86767 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86771 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86774 "isa_tms320.tcc"
)
{
#line 54 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
		// Note: this instruction can't be one of the three instructions after a delayed branch
		if(unlikely(cpu.HasPendingBranch()))
		{
			throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
		}

		// Set ST[GIE]
		cpu.SetST_GIE();

		// Enter idle mode 2
		cpu.Idle(2);
	}
#line 86792 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86798 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86801 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86805 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86808 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86813 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86817 "isa_tms320.tcc"
> *DecodeOpIDLE2(CodeType code, typename CONFIG::address_t addr)
{
	return new OpIDLE2<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86823 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86827 "isa_tms320.tcc"
	>(code, addr);
}

/* end of IDLE2 (low-power idle)
**********************************************************/
/**********************************************************
* LOPOWER (divide clock by 16)
* op LOPOWER(0b000[3]:0b100001[6]:0b001[23])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 86840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86850 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86854 "isa_tms320.tcc"
OpLOPOWER<
#line 45 "isa/tms320.isa"
CONFIG
#line 86858 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86862 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86866 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86869 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 86873 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 86876 "isa_tms320.tcc"
)
{
#line 79 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		os << "LOPOWER";
		return true;
	}
#line 86884 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 86889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86899 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 86903 "isa_tms320.tcc"
OpLOPOWER<
#line 45 "isa/tms320.isa"
CONFIG
#line 86907 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86911 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86915 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 86918 "isa_tms320.tcc"
)
{
#line 84 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 86925 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 86931 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86934 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86938 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86941 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 86946 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86950 "isa_tms320.tcc"
> *DecodeOpLOPOWER(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLOPOWER<
#line 45 "isa/tms320.isa"
	CONFIG
#line 86956 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 86960 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LOPOWER (divide clock by 16)
**********************************************************/
/**********************************************************
* MAXSPEED (restore clock to regular speed)
* op MAXSPEED(0b000[3]:0b100001[6]:0[23])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 86973 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 86976 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 86980 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 86983 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 86987 "isa_tms320.tcc"
OpMAXSPEED<
#line 45 "isa/tms320.isa"
CONFIG
#line 86991 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 86995 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 86999 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87002 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 87006 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 87009 "isa_tms320.tcc"
)
{
#line 98 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		os << "MAXSPEED";
		return true;
	}
#line 87017 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 87022 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87025 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87029 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87032 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87036 "isa_tms320.tcc"
OpMAXSPEED<
#line 45 "isa/tms320.isa"
CONFIG
#line 87040 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87044 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87048 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87051 "isa_tms320.tcc"
)
{
#line 103 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/power.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 87058 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87064 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87067 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87071 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87074 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87079 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87083 "isa_tms320.tcc"
> *DecodeOpMAXSPEED(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMAXSPEED<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87089 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87093 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MAXSPEED (restore clock to regular speed)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of interlocked-operations:
* - LDFI         load floating-point value, interlocked
* - LDII         load integer, interlocked
* - SIGI         signal, interlocked
* - STFI         store floating-point value, interlocked
* - STII         store integer, interflocked
*/
/**********************************************************
* LDFI (load floating-point value, interlocked)
* op LDFI(0b000[3]:0b001111[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 87147 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87150 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87154 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87157 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87161 "isa_tms320.tcc"
OpLDFI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 87165 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87169 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87173 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87176 "isa_tms320.tcc"
)
{
#line 52 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 87183 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87189 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87196 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87199 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87204 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87208 "isa_tms320.tcc"
> *DecodeOpLDFI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87214 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87218 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 87225 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87228 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87232 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87235 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87239 "isa_tms320.tcc"
OpLDFI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 87243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87247 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87251 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87254 "isa_tms320.tcc"
)
{
#line 56 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 87261 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87267 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87270 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87274 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87277 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87282 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87286 "isa_tms320.tcc"
> *DecodeOpLDFI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDFI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87292 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87296 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDFI (load floating-point value, interlocked)
**********************************************************/
/**********************************************************
* LDII (load integer, interlocked)
* op LDII(0b000[3]:0b010001[6]:g[2]:dst[5]:src[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 87309 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87312 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87316 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87319 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87323 "isa_tms320.tcc"
OpLDII_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 87327 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87331 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87335 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87338 "isa_tms320.tcc"
)
{
#line 71 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea, true /* interlocked */);

		// Write back result
		cpu.SetReg(dst, result);

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z  // or mask
			);
		}
	}
#line 87369 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87375 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87382 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87385 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87390 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87394 "isa_tms320.tcc"
> *DecodeOpLDII_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDII_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87400 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87404 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 87411 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87414 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87418 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87421 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87425 "isa_tms320.tcc"
OpLDII_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 87429 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87433 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87437 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87440 "isa_tms320.tcc"
)
{
#line 99 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		// Check whether the destination register number is valid
		if(unlikely(!cpu.HasReg(dst)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the word from memory
		uint32_t result = cpu.IntLoad(ea, true /* interlocked */);

		// Write back result
		cpu.SetReg(dst, result);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}

		// Check whether destination operand is an extended precision register
		if(cpu.IsExtReg(dst))
		{
			// Generate flags (into ST)
			cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z  // or mask
			);
		}
	}
#line 87484 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87490 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87493 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87497 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87500 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87505 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87509 "isa_tms320.tcc"
> *DecodeOpLDII_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDII_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87515 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87519 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDII (load integer, interlocked)
**********************************************************/
/**********************************************************
* SIGI (signal, interlocked)
* op SIGI(0b000[3]:0b101100[6]:0b00[2]:0[21])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 87532 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87539 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87542 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87546 "isa_tms320.tcc"
OpSIGI<
#line 45 "isa/tms320.isa"
CONFIG
#line 87550 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87554 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87558 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87561 "isa_tms320.tcc"
)
{
#line 150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 87568 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87574 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87577 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87581 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87584 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87589 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87593 "isa_tms320.tcc"
> *DecodeOpSIGI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSIGI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87599 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87603 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SIGI (signal, interlocked)
**********************************************************/
/**********************************************************
* STFI (store floating-point value, interlocked)
* op STFI(0b000[3]:0b101001[6]:g[2]:src[5]:dst[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 87616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87619 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87626 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87630 "isa_tms320.tcc"
OpSTFI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 87634 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87638 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87642 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87645 "isa_tms320.tcc"
)
{
#line 165 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 87652 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87658 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87661 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87665 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87668 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87673 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87677 "isa_tms320.tcc"
> *DecodeOpSTFI_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTFI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87683 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87687 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 87694 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87697 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87701 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87704 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87708 "isa_tms320.tcc"
OpSTFI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 87712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87716 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87720 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87723 "isa_tms320.tcc"
)
{
#line 169 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 87730 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87736 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87739 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87743 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87746 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87751 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87755 "isa_tms320.tcc"
> *DecodeOpSTFI_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTFI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87761 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87765 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STFI (store floating-point value, interlocked)
**********************************************************/
/**********************************************************
* STII (store integer, interflocked)
* op STII(0b000[3]:0b101011[6]:g[2]:src[5]:dst[16])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 87778 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87781 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87785 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87788 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87792 "isa_tms320.tcc"
OpSTII_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 87796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87800 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87804 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87807 "isa_tms320.tcc"
)
{
#line 184 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		// Check whether the source register number is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Compute the effective address
		typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

		// Store the word into memory
		cpu.IntStore(ea, result, true /* interlocked */);
	}
#line 87827 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87833 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87836 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87843 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87852 "isa_tms320.tcc"
> *DecodeOpSTII_dir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTII_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87858 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87862 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 87869 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87876 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87879 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 87883 "isa_tms320.tcc"
OpSTII_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 87887 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87891 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 87895 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 87898 "isa_tms320.tcc"
)
{
#line 201 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/interlock.isa"
	{
		// Check whether the source register number is valid
		if(unlikely(!cpu.HasReg(src)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the source operand
		uint32_t result = cpu.GetReg(src);

		// Check that indirect addressing mode is valid and compute the effective address
		typename CONFIG::address_t ea;        // The effective address
		bool update_ar;                       // Whether to update ARn
		typename CONFIG::address_t output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Store the word into memory
		cpu.IntStore(ea, result, true /* interlocked */);

		if(update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(ar, output_ar);
		}
	}
#line 87931 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 87937 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 87940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 87944 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 87947 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 87952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 87956 "isa_tms320.tcc"
> *DecodeOpSTII_indir(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTII_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 87962 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 87966 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STII (store integer, interflocked)
**********************************************************/
/*
*  Copyright (c) 2009,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*          Gilles Mouchard (gilles.mouchard@cea.fr)
*/
/* List of parallel operations:
* - ABSF || STF		absolute value of a floating-point number and store floating-point value
* - ABSI || STI		absolute value of an integer and store integer
* - ADDF3 || STF		add floating-point values and store floating-point value
* - ADDI3 || STI		add integers and store integer
* - AND3 || STI		bitwise-logical AND and store integer
* - ASH3 || STI		arithmetic shift and store integer
* - FIX || STI			convert floating-point value to integer and store integer
* - FLOAT || STF		convert integer to floating-point value and store floating-point value
* - LDF || STF			load floating-point value and store floating-point value
* - LDI || STI			load integer and store integer
* - LSH3 || STI		logical shift and store integer
* - MPYF3 || STF       multiply floating-point values and store floating-point value
* - MPYI3 || STI		multiply integer and store integer
* - NEGF || STF		negate floating-point value and store floating-point value
* - NEGI || STI		negate integer and store integer
* - NOT || STI			complement value and store integer
* - OR3 || STI			bitwise-logical OR value and store integer
* - STF || STF			store floating-point values
* - STI || STI			sotre integers
* - SUBF3 || STF		subtract floating-point value and store floating-point value
* - SUBI3 || STI		subtract integer and store integer
* - XOR3 || STI		bitwise-exclusive OR values and store integer
* - LDF || LDF			load floating-point value
* - LDI || LDI			load integer
* - MPYF3 || ADDF3		multiply and add floating-point value
* - MPYF3 || SUBF3		multiply and subtract floating-point value
* - MPYI3 || ADDI3		multiply and add integer
* - MPYI3 || SUBI3		multiply and subtract integer
*/
/**********************************************************
* ABSF || STF (absolute value of a floating-point number and store floating-point value)
* op ABSF_STF(0b11[2]:0b00100[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 88043 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88046 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88050 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88053 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 88057 "isa_tms320.tcc"
OpABSF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 88061 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88065 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88069 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88072 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 88076 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 88079 "isa_tms320.tcc"
)
{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "ABSF " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 88097 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 88102 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88105 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88109 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88112 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88116 "isa_tms320.tcc"
OpABSF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 88120 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88124 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88128 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88131 "isa_tms320.tcc"
)
{
#line 104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 88138 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88144 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88147 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88151 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88154 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88159 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88163 "isa_tms320.tcc"
> *DecodeOpABSF_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88169 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88173 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 88180 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88183 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88187 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88190 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 88194 "isa_tms320.tcc"
OpABSF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 88198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88202 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88206 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88209 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 88213 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 88216 "isa_tms320.tcc"
)
{
#line 90 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "ABSF " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 88233 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 88238 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88241 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88245 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88248 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88252 "isa_tms320.tcc"
OpABSF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 88256 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88260 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88264 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88267 "isa_tms320.tcc"
)
{
#line 108 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 88274 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88283 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88287 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88290 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88295 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88299 "isa_tms320.tcc"
> *DecodeOpABSF_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88305 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88309 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ABSF || STF (absolute value of a floating-point number and store floating-point value)
**********************************************************/
/**********************************************************
* ABSI || STI (absolute value of an integer and store integer)
* op ABSI_STI(0b11[2]:0b00101[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 88323 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88326 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88330 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88333 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 88337 "isa_tms320.tcc"
OpABSI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 88341 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88345 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88349 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88352 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 88356 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 88359 "isa_tms320.tcc"
)
{
#line 124 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "ABSI " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 88377 "isa_tms320.tcc"
}
//    abs(indir(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 88385 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88388 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88392 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88395 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88399 "isa_tms320.tcc"
OpABSI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 88403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88407 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88411 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88414 "isa_tms320.tcc"
)
{
#line 156 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Compute the result of ABSI
		uint32_t result;  // the 32-bit result
		uint8_t overflow;      // the overflow (0 or 1)

		if(src2_value == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = ((int32_t) src2_value >= 0) ? src2_value : -src2_value;
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of ABSI in register 'dst1'
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_Z | M_ST_V,    // or mask
		0,
		overflow
		);
	}
#line 88492 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88498 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88501 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88505 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88508 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88513 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88517 "isa_tms320.tcc"
> *DecodeOpABSI_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88523 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88527 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 88534 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88537 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88541 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88544 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 88548 "isa_tms320.tcc"
OpABSI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 88552 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88556 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88560 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88563 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 88567 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 88570 "isa_tms320.tcc"
)
{
#line 139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "ABSI " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 88587 "isa_tms320.tcc"
}
//    abs(reg(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 88595 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88598 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88602 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88605 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88609 "isa_tms320.tcc"
OpABSI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 88613 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88617 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88621 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88624 "isa_tms320.tcc"
)
{
#line 234 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ABSI
		uint32_t result;  // the 32-bit result
		uint8_t overflow;      // the overflow (0 or 1)

		if(src2_value == 0x80000000)
		{
			overflow = 1;
			// Depending on overflow mode do signed saturation or not
			result = cpu.GetST_OVM() ? 0x7fffffff : 0x80000000;
		}
		else
		{
			overflow = 0;
			result = ((int32_t) src2_value >= 0) ? src2_value : -src2_value;
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of ABSI in register 'dst1'
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_Z | M_ST_V,    // or mask
		0,
		overflow
		);
	}
#line 88688 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88694 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88697 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88701 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88704 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88709 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88713 "isa_tms320.tcc"
> *DecodeOpABSI_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpABSI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88719 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88723 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ABSI || STI (absolute value of an integer and store integer)
**********************************************************/
/**********************************************************
* ADDF3 || STF (add floating-point values and store floating-point value)
* op ADDF3_STF(0b11[2]:0b00110[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 88737 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88740 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88744 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88747 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 88751 "isa_tms320.tcc"
OpADDF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 88755 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88759 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88763 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88766 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 88770 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 88773 "isa_tms320.tcc"
)
{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "ADDF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 88792 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 88797 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88800 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88804 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88807 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88811 "isa_tms320.tcc"
OpADDF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 88815 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88819 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88823 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88826 "isa_tms320.tcc"
)
{
#line 338 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 88833 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88839 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88842 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88846 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88849 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88854 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88858 "isa_tms320.tcc"
> *DecodeOpADDF3_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 88864 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 88868 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 88875 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88878 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88882 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88885 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 88889 "isa_tms320.tcc"
OpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 88893 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88897 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88901 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88904 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 88908 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 88911 "isa_tms320.tcc"
)
{
#line 323 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "ADDF3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 88929 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 88934 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88937 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88941 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88944 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 88948 "isa_tms320.tcc"
OpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 88952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88956 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 88960 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 88963 "isa_tms320.tcc"
)
{
#line 342 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 88970 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 88976 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 88979 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 88983 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 88986 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 88991 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 88995 "isa_tms320.tcc"
> *DecodeOpADDF3_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89001 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89005 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ADDF3 || STF (add floating-point values and store floating-point value)
**********************************************************/
/**********************************************************
* ADDI3 || STI (add integers and store integer)
* op ADDI3_STI(0b11[2]:0b00111[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 89019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89022 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89026 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89029 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 89033 "isa_tms320.tcc"
OpADDI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 89037 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89041 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89045 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89048 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 89052 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 89055 "isa_tms320.tcc"
)
{
#line 358 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "ADDI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 89074 "isa_tms320.tcc"
}
//    reg(src1) + indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 89082 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89085 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89089 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89092 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89096 "isa_tms320.tcc"
OpADDI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 89100 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89104 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89108 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89111 "isa_tms320.tcc"
)
{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ADDI3
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Check whether 'dst1' operand is an extended precision register
		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		carry_out,
		overflow
		);
	}
#line 89188 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89194 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89201 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89204 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89209 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89213 "isa_tms320.tcc"
> *DecodeOpADDI3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89219 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89223 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 89230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89233 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89237 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89240 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 89244 "isa_tms320.tcc"
OpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 89248 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89252 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89256 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89259 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 89263 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 89266 "isa_tms320.tcc"
)
{
#line 374 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "ADDI3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 89284 "isa_tms320.tcc"
}
//    reg(src1) + reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 89292 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89295 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89299 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89302 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89306 "isa_tms320.tcc"
OpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 89310 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89314 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89318 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89321 "isa_tms320.tcc"
)
{
#line 469 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' registers is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ADDI3
		uint32_t result;      // the 32-bit result
		uint8_t carry_out;    // the carry out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(result, carry_out, overflow, src1_value, src2_value, 0);
		else
		Add32(result, carry_out, overflow, src1_value, src2_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		carry_out,
		overflow
		);
	}
#line 89387 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89393 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89396 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89400 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89403 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89408 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89412 "isa_tms320.tcc"
> *DecodeOpADDI3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89418 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89422 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ADDI3 || STI (add integers and store integer)
**********************************************************/
/**********************************************************
* AND3 || STI (bitwise-logical AND and store integer)
* op AND3_STI(0b11[2]:0b01000[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 89436 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89439 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89443 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89446 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 89450 "isa_tms320.tcc"
OpAND3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 89454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89458 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89462 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89465 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 89469 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 89472 "isa_tms320.tcc"
)
{
#line 544 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "AND3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 89491 "isa_tms320.tcc"
}
//    reg(src1) AND indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 89499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89509 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89513 "isa_tms320.tcc"
OpAND3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 89517 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89521 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89525 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89528 "isa_tms320.tcc"
)
{
#line 578 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ANDI3
		uint32_t result = src1_value & src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 89594 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89600 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89603 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89607 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89610 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89615 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89619 "isa_tms320.tcc"
> *DecodeOpAND3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89625 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89629 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 89636 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89639 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89643 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89646 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 89650 "isa_tms320.tcc"
OpAND3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 89654 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89658 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89662 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89665 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 89669 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 89672 "isa_tms320.tcc"
)
{
#line 560 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "AND3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 89690 "isa_tms320.tcc"
}
//    reg(src1) AND reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 89698 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89701 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89705 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89708 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89712 "isa_tms320.tcc"
OpAND3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 89716 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89720 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89724 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89727 "isa_tms320.tcc"
)
{
#line 644 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ANDI3
		uint32_t result = src1_value & src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 89779 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 89785 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89788 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89792 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89795 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 89800 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89804 "isa_tms320.tcc"
> *DecodeOpAND3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAND3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 89810 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 89814 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of AND3 || STI (bitwise-logical AND and store integer)
**********************************************************/
/**********************************************************
* ASH3 || STI (arithmetic shift and store integer)
* op ASH3_STI(0b11[2]:0b01001[5]:dst1[3]:count[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 89828 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89831 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89835 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89838 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 89842 "isa_tms320.tcc"
OpASH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 89846 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89850 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89854 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89857 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 89861 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 89864 "isa_tms320.tcc"
)
{
#line 705 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *count_name = REG_NAME[count];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "ASH3 " << count_name << ", " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 89883 "isa_tms320.tcc"
}
//    ash(indir(src2), reg(count)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 89891 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 89894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 89898 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 89901 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 89905 "isa_tms320.tcc"
OpASH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 89909 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 89913 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 89917 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 89920 "isa_tms320.tcc"
)
{
#line 739 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read the 'count' register operand and sign extend the 7 LSB to get the shift count
		int32_t count_value = SignExtend(cpu.GetReg(count), 7);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ASH3
		uint8_t carry_out;
		uint32_t result;

		if(count_value == 0)
		{
			result = src2_value;
			carry_out = 0;
		}
		else if(count_value >= 0)
		{
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src2_value, count_value, carry_out);
			}
		}
		else
		{
			count_value = -count_value;
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src2_value, count_value, carry_out);
			}
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_N | M_ST_Z | M_ST_C,  // or mask
		carry_out
		);
	}
#line 90019 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90025 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90028 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90032 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90035 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90040 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90044 "isa_tms320.tcc"
> *DecodeOpASH3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90050 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90054 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 90061 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90064 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90068 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90071 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 90075 "isa_tms320.tcc"
OpASH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 90079 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90083 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90087 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90090 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 90094 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 90097 "isa_tms320.tcc"
)
{
#line 721 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *count_name = REG_NAME[count];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "ASH3 " << count_name << ", " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 90115 "isa_tms320.tcc"
}
//    ash(reg(src2), reg(count)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 90123 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90126 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90130 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90133 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90137 "isa_tms320.tcc"
OpASH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 90141 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90145 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90149 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90152 "isa_tms320.tcc"
)
{
#line 838 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read the 'count' register operand and sign extend the 7 LSB to get the shift count
		int32_t count_value = SignExtend(cpu.GetReg(count), 7);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of ASH3
		uint8_t carry_out;
		uint32_t result;

		if(count_value == 0)
		{
			result = src2_value;
			carry_out = 0;
		}
		else if(count_value >= 0)
		{
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src2_value, count_value, carry_out);
			}
		}
		else
		{
			count_value = -count_value;
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftArithmeticRight(src2_value, count_value, carry_out);
			}
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_N | M_ST_Z | M_ST_C,  // or mask
		carry_out
		);
	}
#line 90237 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90243 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90246 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90250 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90253 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90258 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90262 "isa_tms320.tcc"
> *DecodeOpASH3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpASH3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90268 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90272 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of ASH3 || STI (arithmetic shift and store integer)
**********************************************************/
/**********************************************************
* FIX || STI (convert floating-point value to integer and store integer)
* op FIX_STI(0b11[2]:0b01010[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 90286 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90289 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90293 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90296 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 90300 "isa_tms320.tcc"
OpFIX_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 90304 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90308 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90312 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90315 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 90319 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 90322 "isa_tms320.tcc"
)
{
#line 932 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "FIX " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 90340 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 90345 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90352 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90355 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90359 "isa_tms320.tcc"
OpFIX_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 90363 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90367 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90371 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90374 "isa_tms320.tcc"
)
{
#line 961 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 90381 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90390 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90394 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90397 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90402 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90406 "isa_tms320.tcc"
> *DecodeOpFIX_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90412 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90416 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 90423 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90426 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90430 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90433 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 90437 "isa_tms320.tcc"
OpFIX_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 90441 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90445 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90449 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90452 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 90456 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 90459 "isa_tms320.tcc"
)
{
#line 947 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "FIX " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 90476 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 90481 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90491 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90495 "isa_tms320.tcc"
OpFIX_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 90499 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90503 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90507 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90510 "isa_tms320.tcc"
)
{
#line 965 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 90517 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90523 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90526 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90530 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90533 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90538 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90542 "isa_tms320.tcc"
> *DecodeOpFIX_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFIX_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90548 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90552 "isa_tms320.tcc"
	>(code, addr);
}

/*
* end of FIX || STI (convert floating-point value to integer and store integer)
**********************************************************/
/**********************************************************
* FLOAT || STF (convert integer to floating-point value and store floating-point value)
* op FLOAT_STF(0b11[2]:0b01011[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 90566 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90576 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 90580 "isa_tms320.tcc"
OpFLOAT_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 90584 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90588 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90592 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90595 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 90599 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 90602 "isa_tms320.tcc"
)
{
#line 981 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "FLOAT " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 90620 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 90625 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90628 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90632 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90635 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90639 "isa_tms320.tcc"
OpFLOAT_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 90643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90647 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90651 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90654 "isa_tms320.tcc"
)
{
#line 1010 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 90661 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90674 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90677 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90682 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90686 "isa_tms320.tcc"
> *DecodeOpFLOAT_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90692 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90696 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 90703 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90706 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90710 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90713 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 90717 "isa_tms320.tcc"
OpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 90721 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90725 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90729 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90732 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 90736 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 90739 "isa_tms320.tcc"
)
{
#line 996 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "FLOAT " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 90756 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 90761 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90768 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90771 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90775 "isa_tms320.tcc"
OpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 90779 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90783 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90787 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90790 "isa_tms320.tcc"
)
{
#line 1014 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 90797 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90803 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90806 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90810 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90813 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90818 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90822 "isa_tms320.tcc"
> *DecodeOpFLOAT_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90828 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90832 "isa_tms320.tcc"
	>(code, addr);
}

/* end of FLOAT || STF (convert integer to floating-point value and store floating-point value)
**********************************************************/
/**********************************************************
* LDF || STF (load floating-point value and store floating-point value)
* op LDF_STF(0b11[2]:0b01100[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 90845 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90852 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90855 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 90859 "isa_tms320.tcc"
OpLDF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 90863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90867 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90871 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90874 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 90878 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 90881 "isa_tms320.tcc"
)
{
#line 1029 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "LDF " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 90899 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 90904 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90907 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90911 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90914 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 90918 "isa_tms320.tcc"
OpLDF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 90922 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90926 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 90930 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 90933 "isa_tms320.tcc"
)
{
#line 1058 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 90940 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 90946 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90949 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90953 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90956 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 90961 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 90965 "isa_tms320.tcc"
> *DecodeOpLDF_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 90971 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 90975 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 90982 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 90985 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 90989 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 90992 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 90996 "isa_tms320.tcc"
OpLDF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91000 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91004 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91008 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91011 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91015 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91018 "isa_tms320.tcc"
)
{
#line 1044 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "LDF " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91035 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 91040 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91043 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91047 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91050 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91054 "isa_tms320.tcc"
OpLDF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91058 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91062 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91066 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91069 "isa_tms320.tcc"
)
{
#line 1062 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 91076 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 91082 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91085 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91089 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91092 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 91097 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91101 "isa_tms320.tcc"
> *DecodeOpLDF_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 91107 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 91111 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDF || STF (load floating-point value and store floating-point value)
**********************************************************/
/**********************************************************
* LDI || STI (load integer and store integer)
* op LDI_STI(0b11[2]:0b01101[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 91124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91127 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91131 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91134 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91138 "isa_tms320.tcc"
OpLDI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 91142 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91146 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91150 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91153 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91157 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91160 "isa_tms320.tcc"
)
{
#line 1077 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "LDI " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91178 "isa_tms320.tcc"
}
//    indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 91186 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91189 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91193 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91196 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91200 "isa_tms320.tcc"
OpLDI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 91204 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91208 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91212 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91215 "isa_tms320.tcc"
)
{
#line 1109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address for the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address for the 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Load 'src2' value from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Store 'src3' value into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, src2_value);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

	}
#line 91265 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 91271 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91274 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91278 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91281 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 91286 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91290 "isa_tms320.tcc"
> *DecodeOpLDI_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 91296 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 91300 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 91307 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91310 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91314 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91317 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91321 "isa_tms320.tcc"
OpLDI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91325 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91329 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91333 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91336 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91340 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91343 "isa_tms320.tcc"
)
{
#line 1092 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "LDI " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91360 "isa_tms320.tcc"
}
//    reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 91368 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91371 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91375 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91378 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91382 "isa_tms320.tcc"
OpLDI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91386 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91390 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91394 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91397 "isa_tms320.tcc"
)
{
#line 1159 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether the 'src2' register operand is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address for the 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Store 'src3' value into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, src2_value);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}
	}
#line 91436 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 91442 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91445 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91449 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91452 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 91457 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91461 "isa_tms320.tcc"
> *DecodeOpLDI_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 91467 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 91471 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDI || STI (load integer and store integer)
**********************************************************/
/**********************************************************
* LSH3 || STI (logical shift and store integer)
* op LSH3_STI(0b11[2]:0b01110[5]:dst1[3]:count[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 91484 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91491 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91494 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91498 "isa_tms320.tcc"
OpLSH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 91502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91506 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91510 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91513 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91517 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91520 "isa_tms320.tcc"
)
{
#line 1206 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *count_name = REG_NAME[count];
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "LSH3 " << count << ", " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91539 "isa_tms320.tcc"
}
//    lsh(indir(src2), reg(count)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 91547 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91550 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91554 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91557 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91561 "isa_tms320.tcc"
OpLSH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 91565 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91569 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91573 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91576 "isa_tms320.tcc"
)
{
#line 1240 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read the 'count' register operand and sign extend the 7 LSB to get the shift count
		int32_t count_value = SignExtend(cpu.GetReg(count), 7);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of LSH3
		uint8_t carry_out;
		uint32_t result;

		if(count_value == 0)
		{
			result = src2_value;
			carry_out = 0;
		}
		else if(count_value >= 0)
		{
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src2_value, count_value, carry_out);
			}
		}
		else
		{
			count_value = -count_value;
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src2_value, count_value, carry_out);
			}
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_N | M_ST_Z | M_ST_C,  // or mask
		carry_out
		);
	}
#line 91675 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 91681 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91691 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 91696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91700 "isa_tms320.tcc"
> *DecodeOpLSH3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 91706 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 91710 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 91717 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91720 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91724 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91727 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91731 "isa_tms320.tcc"
OpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91735 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91739 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91743 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91746 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91750 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91753 "isa_tms320.tcc"
)
{
#line 1222 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *count_name = REG_NAME[count];
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "LSH3 " << count << ", " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91771 "isa_tms320.tcc"
}
//    lsh(reg(src2), reg(count)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 91779 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91782 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91786 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91789 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 91793 "isa_tms320.tcc"
OpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 91797 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91801 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91805 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91808 "isa_tms320.tcc"
)
{
#line 1339 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read the 'count' register operand and sign extend the 7 LSB to get the shift count
		int32_t count_value = SignExtend(cpu.GetReg(count), 7);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of LSH3
		uint8_t carry_out;
		uint32_t result;

		if(count_value == 0)
		{
			result = src2_value;
			carry_out = 0;
		}
		else if(count_value >= 0)
		{
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftLeft(src2_value, count_value, carry_out);
			}
		}
		else
		{
			count_value = -count_value;
			if(count_value >= 32)
			{
				result = 0;
				carry_out = 0;
			}
			else
			{
				result = ShiftRight(src2_value, count_value, carry_out);
			}
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_N | M_ST_Z | M_ST_C,  // or mask
		carry_out
		);
	}
#line 91893 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 91899 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91902 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91906 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91909 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 91914 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91918 "isa_tms320.tcc"
> *DecodeOpLSH3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 91924 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 91928 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LSH3 || STI (logical shift and store integer)
**********************************************************/
/**********************************************************
* MPYF3 || STF (multiply floating-point values and store floating-point value)
* op MPYF3_STF(0b11[2]:0b01111[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 91941 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 91944 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 91948 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 91951 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 91955 "isa_tms320.tcc"
OpMPYF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 91959 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 91963 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 91967 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 91970 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 91974 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 91977 "isa_tms320.tcc"
)
{
#line 1432 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "MPYF3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 91996 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 92001 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92004 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92008 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92011 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 92015 "isa_tms320.tcc"
OpMPYF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 92019 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92023 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92027 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92030 "isa_tms320.tcc"
)
{
#line 1463 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 92037 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 92043 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92046 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92050 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92053 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 92058 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92062 "isa_tms320.tcc"
> *DecodeOpMPYF3_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 92068 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 92072 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 92079 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92086 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92089 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 92093 "isa_tms320.tcc"
OpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 92097 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92101 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92105 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92108 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 92112 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 92115 "isa_tms320.tcc"
)
{
#line 1448 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "MPYF3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 92133 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 92138 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92141 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92148 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 92152 "isa_tms320.tcc"
OpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 92156 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92160 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92164 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92167 "isa_tms320.tcc"
)
{
#line 1467 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 92174 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 92180 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92183 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92187 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92190 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 92195 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92199 "isa_tms320.tcc"
> *DecodeOpMPYF3_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 92205 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 92209 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF3 || STF (multiply floating-point values and store floating-point value)
**********************************************************/
/**********************************************************
* MPYI3 || STI (multiply integer and store integer)
* op MPYI3_STI(0b11[2]:0b10000[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 92222 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92225 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92229 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92232 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 92236 "isa_tms320.tcc"
OpMPYI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 92240 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92244 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92248 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92251 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 92255 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 92258 "isa_tms320.tcc"
)
{
#line 1482 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "MPYI3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 92277 "isa_tms320.tcc"
}
//    reg(src1) * indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 92285 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92288 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92292 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92295 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 92299 "isa_tms320.tcc"
OpMPYI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 92303 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92307 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92311 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92314 "isa_tms320.tcc"
)
{
#line 1516 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.GetReg(src1) & 0xffffff), 24);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.IntLoad(s2_ea) & 0xffffff), 24);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the 32-bit result and overflow of MPYI3
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 92393 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 92399 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92402 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92406 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92409 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 92414 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92418 "isa_tms320.tcc"
> *DecodeOpMPYI3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 92424 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 92428 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 92435 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92438 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92442 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92445 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 92449 "isa_tms320.tcc"
OpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 92453 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92457 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92461 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92464 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 92468 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 92471 "isa_tms320.tcc"
)
{
#line 1498 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "MPYI3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 92489 "isa_tms320.tcc"
}
//    reg(src1) + reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 92497 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92500 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92504 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92507 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 92511 "isa_tms320.tcc"
OpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 92515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92519 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92523 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92526 "isa_tms320.tcc"
)
{
#line 1595 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src1' operand and sign extend value from 24 bits to 64 bits
		int64_t src1_value = SignExtend((uint64_t)(cpu.GetReg(src1) & 0xffffff), 24);

		// Read 'src2' operand and sign extend value from 24 bits to 64 bits
		int64_t src2_value = SignExtend((uint64_t)(cpu.GetReg(src2) & 0xffffff), 24);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the 32-bit result and overflow of MPYI3
		int64_t result64 = src1_value * src2_value; // Only 48 bits are useful
		int32_t lo32 = (int32_t) result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t overflow = ((lo32 >> 31) != hi32);
		uint32_t result;

		if(cpu.GetST_OVM() && overflow)
		result = (result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		result = lo32;                                     // No saturation

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 92595 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 92601 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92608 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92611 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 92616 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92620 "isa_tms320.tcc"
> *DecodeOpMPYI3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 92626 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 92630 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYI3 || STI (multiply integer and store integer)
**********************************************************/
/**********************************************************
* NEGF || STF (negate floating-point value and store floating-point value)
* op NEGF_STF(0b11[2]:0b10001[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 92643 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92646 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92653 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 92657 "isa_tms320.tcc"
OpNEGF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 92661 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92665 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92669 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92672 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 92676 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 92679 "isa_tms320.tcc"
)
{
#line 1672 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "NEGF " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 92697 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 92702 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92705 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92709 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92712 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 92716 "isa_tms320.tcc"
OpNEGF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 92720 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92724 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92728 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92731 "isa_tms320.tcc"
)
{
#line 1701 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 92738 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 92744 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92747 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92751 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92754 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 92759 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92763 "isa_tms320.tcc"
> *DecodeOpNEGF_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 92769 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 92773 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 92780 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92783 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92787 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92790 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 92794 "isa_tms320.tcc"
OpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 92798 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92802 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92806 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92809 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 92813 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 92816 "isa_tms320.tcc"
)
{
#line 1687 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "NEGF " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 92833 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 92838 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92841 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92845 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92848 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 92852 "isa_tms320.tcc"
OpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 92856 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92860 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92864 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92867 "isa_tms320.tcc"
)
{
#line 1705 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 92874 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 92880 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92883 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92887 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92890 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 92895 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92899 "isa_tms320.tcc"
> *DecodeOpNEGF_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 92905 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 92909 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGF || STF (negate floating-point value and store floating-point value)
**********************************************************/
/**********************************************************
* NEGI || STI (negate integer and store integer)
* op NEGI_STI(0b11[2]:0b10010[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 92922 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92925 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92929 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92932 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 92936 "isa_tms320.tcc"
OpNEGI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 92940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 92944 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 92948 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 92951 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 92955 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 92958 "isa_tms320.tcc"
)
{
#line 1720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "NEGI " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 92976 "isa_tms320.tcc"
}
//    neg(indir(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 92984 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 92987 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 92991 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 92994 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 92998 "isa_tms320.tcc"
OpNEGI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 93002 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93006 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93010 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93013 "isa_tms320.tcc"
)
{
#line 1752 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Compute the result of NEGI
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, 0, src2_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of NEGI in register 'dst1'
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 93086 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 93092 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93095 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93099 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93102 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93107 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93111 "isa_tms320.tcc"
> *DecodeOpNEGI_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 93117 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 93121 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 93128 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93131 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93135 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93138 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 93142 "isa_tms320.tcc"
OpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93146 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93150 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93154 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93157 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93161 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93164 "isa_tms320.tcc"
)
{
#line 1735 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "NEGI " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93181 "isa_tms320.tcc"
}
//    neg(reg(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 93189 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93196 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93199 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 93203 "isa_tms320.tcc"
OpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93207 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93211 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93215 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93218 "isa_tms320.tcc"
)
{
#line 1825 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of NEGI
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, 0, src2_value, 0);
		else
		Sub32(result, borrow_out, overflow, 0, src2_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of NEGI in register 'dst1'
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 93277 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 93283 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93286 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93290 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93293 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93298 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93302 "isa_tms320.tcc"
> *DecodeOpNEGI_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 93308 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 93312 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NEGI || STI (negate integer and store integer)
**********************************************************/
/**********************************************************
* NOT || STI (complement value and store integer)
* op NOT_STI(0b11[2]:0b10011[5]:dst1[3]:0b000[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 93325 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93332 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93335 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 93339 "isa_tms320.tcc"
OpNOT_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 93343 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93347 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93351 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93354 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93358 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93361 "isa_tms320.tcc"
)
{
#line 1892 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "NOT " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93379 "isa_tms320.tcc"
}
//    not(indir(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 93387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93390 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93394 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93397 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 93401 "isa_tms320.tcc"
OpNOT_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 93405 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93409 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93413 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93416 "isa_tms320.tcc"
)
{
#line 1924 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Compute the result of NOT
		uint32_t result = ~src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of NOT in register 'dst1'
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 93479 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 93485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93488 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93495 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93500 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93504 "isa_tms320.tcc"
> *DecodeOpNOT_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 93510 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 93514 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 93521 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93524 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93528 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93531 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 93535 "isa_tms320.tcc"
OpNOT_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93539 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93543 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93547 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93550 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93554 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93557 "isa_tms320.tcc"
)
{
#line 1907 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "NOT " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93574 "isa_tms320.tcc"
}
//    not(reg(src2)) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 93582 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93585 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93589 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93592 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 93596 "isa_tms320.tcc"
OpNOT_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93600 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93604 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93608 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93611 "isa_tms320.tcc"
)
{
#line 1987 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of NOT
		uint32_t result = ~src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result of NOT in register 'dst1'
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 93660 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 93666 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93669 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93673 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93676 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93681 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93685 "isa_tms320.tcc"
> *DecodeOpNOT_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpNOT_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 93691 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 93695 "isa_tms320.tcc"
	>(code, addr);
}

/* end of NOT || STI (complement value and store integer)
**********************************************************/
/**********************************************************
* OR3 || STI (bitwise-logical OR value and store integer)
* op OR3_STI(0b11[2]:0b10100[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 93708 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93711 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93715 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93718 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 93722 "isa_tms320.tcc"
OpOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 93726 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93730 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93734 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93737 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93741 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93744 "isa_tms320.tcc"
)
{
#line 2044 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "OR3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93763 "isa_tms320.tcc"
}
//    reg(src1) OR indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 93771 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93778 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93781 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 93785 "isa_tms320.tcc"
OpOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 93789 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93793 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93797 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93800 "isa_tms320.tcc"
)
{
#line 2078 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of OR3
		uint32_t result = src1_value | src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 93866 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 93872 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93875 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93879 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93882 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 93887 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93891 "isa_tms320.tcc"
> *DecodeOpOR3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 93897 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 93901 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 93908 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93911 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93915 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93918 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 93922 "isa_tms320.tcc"
OpOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93926 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93930 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93934 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93937 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 93941 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 93944 "isa_tms320.tcc"
)
{
#line 2060 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "OR3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 93962 "isa_tms320.tcc"
}
//    reg(src1) OR reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 93970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 93973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 93977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 93980 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 93984 "isa_tms320.tcc"
OpOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 93988 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 93992 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 93996 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 93999 "isa_tms320.tcc"
)
{
#line 2144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of OR3
		uint32_t result = src1_value | src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 94051 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94057 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94060 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94064 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94067 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94072 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94076 "isa_tms320.tcc"
> *DecodeOpOR3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOR3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94082 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94086 "isa_tms320.tcc"
	>(code, addr);
}

/* end of OR3 || STI (bitwise-logical OR value and store integer)
**********************************************************/
/**********************************************************
* STF || STF (store floating-point values)
* op STF_STF(0b11[2]:0b00000[5]:src2[3]:0b000[3]:src1[3]:dst1[8]:dst2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 94099 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94106 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94109 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94113 "isa_tms320.tcc"
OpSTF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 94117 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94121 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94125 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94128 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 94132 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 94135 "isa_tms320.tcc"
)
{
#line 2204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst1_indir;
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d1_mod, d1_ar) ||
		!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "STF " << src2_name << ", " << disasm_dst2_indir
		<< " || " << "STF " << src1_name << ", " << disasm_dst1_indir;
		return true;
	}
#line 94153 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 94158 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94161 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94165 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94168 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 94172 "isa_tms320.tcc"
OpSTF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 94176 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94180 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94184 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94187 "isa_tms320.tcc"
)
{
#line 2233 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 94194 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94200 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94203 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94207 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94210 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94215 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94219 "isa_tms320.tcc"
> *DecodeOpSTF_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94225 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94229 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 94236 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94239 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94243 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94246 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94250 "isa_tms320.tcc"
OpSTF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94254 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94258 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94262 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94265 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 94269 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 94272 "isa_tms320.tcc"
)
{
#line 2219 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst1_indir;
		const char *dst2_name = REG_NAME[dst2];

		if (!cpu.DisasmIndir(disasm_dst1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d1_mod, d1_ar) || !dst2_name)
		return false;

		os << "STF " << src2_name << ", " << dst2_name
		<< " || " << "STF " << src1_name << ", " << disasm_dst1_indir;
		return true;
	}
#line 94289 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 94294 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94297 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94301 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94304 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 94308 "isa_tms320.tcc"
OpSTF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94312 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94316 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94320 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94323 "isa_tms320.tcc"
)
{
#line 2237 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 94330 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94336 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94339 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94343 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94346 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94351 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94355 "isa_tms320.tcc"
> *DecodeOpSTF_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94361 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94365 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STF || STF (store floating-point values)
**********************************************************/
/**********************************************************
* STI || STI (store integers)
* op STI_STI(0b11[2]:0b00001[5]:src2[3]:0b000[3]:src1[3]:dst1[8]:dst2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 94378 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94381 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94385 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94388 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94392 "isa_tms320.tcc"
OpSTI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 94396 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94400 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94404 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94407 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 94411 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 94414 "isa_tms320.tcc"
)
{
#line 2252 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst1_indir;
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d1_mod, d1_ar) ||
		!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar))
		return false;

		os << "STI " << src2_name << ", " << disasm_dst2_indir
		<< " || " << "STI " << src1_name << ", " << disasm_dst1_indir;
		return true;
	}
#line 94432 "isa_tms320.tcc"
}
//    reg(src2) -> indir(dst2)
// ||
//    reg(src1) -> indir(dst1)
template <
#line 45 "isa/tms320.isa"
class
#line 94440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94450 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 94454 "isa_tms320.tcc"
OpSTI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 94458 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94462 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94466 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94469 "isa_tms320.tcc"
)
{
#line 2284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read the 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Check that indirect addressing mode is valid and compute the effective address of operand 'dst1'
		typename CONFIG::address_t d1_ea;        // The effective address
		bool d1_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d1_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d1_ea, d1_update_ar, d1_output_ar, d1_mod, d1_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of operand 'dst2'
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Store the word into memory
		cpu.IntStore(d2_ea, src2_value);

		// Note: If both stores are executed to the
		// same address, the value written is that of STI src2, dst2.

		// Store the word into memory
		if(d1_ea != d2_ea)
		{
			cpu.IntStore(d1_ea, src1_value);
		}

		if(d1_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d1_ar, d1_output_ar);
		}

		if(d2_update_ar && d1_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}
	}
#line 94524 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94530 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94533 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94537 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94540 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94549 "isa_tms320.tcc"
> *DecodeOpSTI_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94555 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94559 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 94566 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94573 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94576 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94580 "isa_tms320.tcc"
OpSTI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94584 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94588 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94592 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94595 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 94599 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 94602 "isa_tms320.tcc"
)
{
#line 2267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_dst1_indir;
		const char *dst2_name = REG_NAME[dst2];

		if (!cpu.DisasmIndir(disasm_dst1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d1_mod, d1_ar) || !dst2_name)
		return false;

		os << "STI " << src2_name << ", " << dst2_name
		<< " || " << "STI " << src1_name << ", " << disasm_dst1_indir;
		return true;
	}
#line 94619 "isa_tms320.tcc"
}
//    reg(src2) -> reg(dst2)
// ||
//    reg(src1) -> indir(dst1)
template <
#line 45 "isa/tms320.isa"
class
#line 94627 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94630 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94634 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94637 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 94641 "isa_tms320.tcc"
OpSTI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94645 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94649 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94653 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94656 "isa_tms320.tcc"
)
{
#line 2339 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'dst2' register is valid
		if(unlikely(!cpu.HasReg(dst2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Check that indirect addressing mode is valid and compute the effective address of operand 'dst1'
		typename CONFIG::address_t d1_ea;        // The effective address
		bool d1_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d1_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d1_ea, d1_update_ar, d1_output_ar, d1_mod, d1_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Store the word into memory
		cpu.IntStore(d1_ea, src1_value);

		// Write back 'src2' into 'dst2' register
		cpu.SetReg(dst2, src2_value);

		if(d1_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d1_ar, d1_output_ar);
		}
	}
#line 94695 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94701 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94708 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94711 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94716 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94720 "isa_tms320.tcc"
> *DecodeOpSTI_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSTI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94726 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94730 "isa_tms320.tcc"
	>(code, addr);
}

/* end of STI || STI (sotre integers)
**********************************************************/
/**********************************************************
* SUBF3 || STF (subtract floating-point value and store floating-point value)
* op SUBF3_STF(0b11[2]:0b10101[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 94743 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94746 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94750 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94753 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94757 "isa_tms320.tcc"
OpSUBF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 94761 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94765 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94769 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94772 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 94776 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 94779 "isa_tms320.tcc"
)
{
#line 2386 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "SUBF3 " << src1_name << ", " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 94798 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 94803 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94806 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94810 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94813 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 94817 "isa_tms320.tcc"
OpSUBF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 94821 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94825 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94829 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94832 "isa_tms320.tcc"
)
{
#line 2417 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 94839 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94845 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94852 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94855 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94860 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94864 "isa_tms320.tcc"
> *DecodeOpSUBF3_STF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 94870 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 94874 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 94881 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94884 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94888 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94891 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 94895 "isa_tms320.tcc"
OpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94899 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94903 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94907 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94910 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 94914 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 94917 "isa_tms320.tcc"
)
{
#line 2402 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "SUBF3 " << src1_name << ", " << src2_name << ", " << dst1_name
		<< " || " << "STF " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 94935 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 94940 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94947 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94950 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 94954 "isa_tms320.tcc"
OpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 94958 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 94962 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 94966 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 94969 "isa_tms320.tcc"
)
{
#line 2421 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 94976 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 94982 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 94985 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 94989 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 94992 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 94997 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95001 "isa_tms320.tcc"
> *DecodeOpSUBF3_STF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95007 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95011 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBF3 || STF (subtract floating-point value and store floating-point value)
**********************************************************/
/**********************************************************
* SUBI3 || STI (subtract integer and store integer)
* op SUBI3_STI(0b11[2]:0b10110[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 95024 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95031 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95034 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95038 "isa_tms320.tcc"
OpSUBI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 95042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95046 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95050 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95053 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95057 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95060 "isa_tms320.tcc"
)
{
#line 2436 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "SUBI3 " << src1_name << ", " << disasm_src2_indir << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 95079 "isa_tms320.tcc"
}
//    indir(src2) - reg(src1)  -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 95087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95094 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95097 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95101 "isa_tms320.tcc"
OpSUBI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 95105 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95109 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95113 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95116 "isa_tms320.tcc"
)
{
#line 2470 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of SUBI3
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src2_value, src1_value, 0);
		else
		Sub32(result, borrow_out, overflow, src2_value, src1_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 95192 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95198 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95201 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95208 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 95213 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95217 "isa_tms320.tcc"
> *DecodeOpSUBI3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95223 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95227 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 95234 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95237 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95241 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95244 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95248 "isa_tms320.tcc"
OpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 95252 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95256 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95260 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95263 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95267 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95270 "isa_tms320.tcc"
)
{
#line 2452 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "SUBI3 " << src1_name << ", " << src2_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 95288 "isa_tms320.tcc"
}
//    reg(src2) - reg(src1) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 95296 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95299 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95303 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95306 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95310 "isa_tms320.tcc"
OpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 95314 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95318 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95322 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95325 "isa_tms320.tcc"
)
{
#line 2546 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of SUBI3
		uint32_t result;      // the 32-bit result
		uint8_t borrow_out;   // the borrow out (0 or 1)
		uint8_t overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(result, borrow_out, overflow, src2_value, src1_value, 0);
		else
		Sub32(result, borrow_out, overflow, src2_value, src1_value, 0);

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // reset mask
		M_ST_LV | M_ST_N | M_ST_Z | M_ST_V | M_ST_C,  // or mask
		borrow_out,
		overflow
		);
	}
#line 95391 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95397 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95400 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95404 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95407 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 95412 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95416 "isa_tms320.tcc"
> *DecodeOpSUBI3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95422 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95426 "isa_tms320.tcc"
	>(code, addr);
}

/* end of SUBI3 || STI (subtract integer and store integer)
**********************************************************/
/**********************************************************
* XOR3 || STI (bitwise-exclusive OR values and store integer)
* op XOR3_STI(0b11[2]:0b10111[5]:dst1[3]:src1[3]:src3[3]:dst2[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 95439 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95446 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95449 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95453 "isa_tms320.tcc"
OpXOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 95457 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95461 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95465 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95468 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95472 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95475 "isa_tms320.tcc"
)
{
#line 2620 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "XOR3 " << disasm_src2_indir << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 95494 "isa_tms320.tcc"
}
//    reg(src1) XOR indir(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 95502 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95505 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95509 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95512 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95516 "isa_tms320.tcc"
OpXOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 95520 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95524 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95528 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95531 "isa_tms320.tcc"
)
{
#line 2654 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Check that indirect addressing mode is valid and compute the effective address of the 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src2' operand from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of XORI3
		uint32_t result = src1_value ^ src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		if(s2_update_ar && s2_ar != d2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 95597 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95603 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95606 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95610 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95613 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 95618 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95622 "isa_tms320.tcc"
> *DecodeOpXOR3_STI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95628 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95632 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 95639 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95642 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95646 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95649 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95653 "isa_tms320.tcc"
OpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 95657 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95661 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95665 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95668 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95672 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95675 "isa_tms320.tcc"
)
{
#line 2636 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		string disasm_dst2_indir;

		if (!cpu.DisasmIndir(disasm_dst2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, d2_mod, d2_ar) || !src2_name)
		return false;

		os << "XOR3 " << src2_name << ", " << src1_name << ", " << dst1_name
		<< " || " << "STI " << src3_name << ", " << disasm_dst2_indir;
		return true;
	}
#line 95693 "isa_tms320.tcc"
}
//    reg(src1) XOR reg(src2) -> reg(dst1)
// ||
//    reg(src3) -> indir(dst2)
template <
#line 45 "isa/tms320.isa"
class
#line 95701 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95708 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95711 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95715 "isa_tms320.tcc"
OpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 95719 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95723 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95727 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95730 "isa_tms320.tcc"
)
{
#line 2720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read the 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read the 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read the 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Check that indirect addressing mode is valid and compute the effective address of 'dst2' operand
		typename CONFIG::address_t d2_ea;        // The effective address
		bool d2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t d2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(d2_ea, d2_update_ar, d2_output_ar, d2_mod, d2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Compute the result of XORI3
		uint32_t result = src1_value ^ src2_value;

		// Store the word into memory
		cpu.IntStore(d2_ea, src3_value);

		// Write back result
		cpu.SetReg(dst1, result);

		if(d2_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(d2_ar, d2_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		result,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_N | M_ST_Z    // or mask
		);
	}
#line 95782 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95788 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95795 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95798 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 95803 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95807 "isa_tms320.tcc"
> *DecodeOpXOR3_STI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95813 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95817 "isa_tms320.tcc"
	>(code, addr);
}

/* end of XOR3 || STI (bitwise-exclusive OR values and store integer)
**********************************************************/
/**********************************************************
* LDF || LDF (load floating-point value)
* op LDF_LDF(0b11[2]:0b00010[5]:dst1[3]:dst2[3]:0b000[3]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 95830 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95833 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95837 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95840 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95844 "isa_tms320.tcc"
OpLDF_LDF<
#line 45 "isa/tms320.isa"
CONFIG
#line 95848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95852 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95856 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95859 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 95863 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 95866 "isa_tms320.tcc"
)
{
#line 2780 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *dst2_name = REG_NAME[dst2];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s1_mod, s1_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "LDF " << disasm_src2_indir << ", " << dst2_name
		<< " || " << "LDF " << disasm_src1_indir << ", " << dst1_name;
		return true;
	}
#line 95884 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 95889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95899 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 95903 "isa_tms320.tcc"
OpLDF_LDF<
#line 45 "isa/tms320.isa"
CONFIG
#line 95907 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95911 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95915 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95918 "isa_tms320.tcc"
)
{
#line 2809 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 95925 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 95931 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95934 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95938 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95941 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 95946 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95950 "isa_tms320.tcc"
> *DecodeOpLDF_LDF(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_LDF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 95956 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 95960 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 95967 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 95970 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 95974 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 95977 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 95981 "isa_tms320.tcc"
OpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 95985 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 95989 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 95993 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 95996 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96000 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96003 "isa_tms320.tcc"
)
{
#line 2795 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *dst2_name = REG_NAME[dst2];
		const char *src2_name = REG_NAME[src2];
		string disasm_src1_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s1_mod, s1_ar))
		return false;

		os << "LDF " << ", " << src2_name << ", " << dst2_name
		<< " || " << "LDF " << disasm_src1_indir << ", " << dst2_name;
		return true;
	}
#line 96020 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 96025 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96028 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96032 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96035 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96039 "isa_tms320.tcc"
OpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96043 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96047 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96051 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96054 "isa_tms320.tcc"
)
{
#line 2813 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 96061 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 96067 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96074 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96077 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96082 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96086 "isa_tms320.tcc"
> *DecodeOpLDF_LDF_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96092 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96096 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDF || LDF (load floating-point value)
**********************************************************/
/**********************************************************
* LDI || LDI (load integer)
* op LDI_LDI(0b11[2]:0b00011[5]:dst1[3]:dst2[3]:0b000[3]:src1[8]:src2[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 96109 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96112 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96116 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96119 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 96123 "isa_tms320.tcc"
OpLDI_LDI<
#line 45 "isa/tms320.isa"
CONFIG
#line 96127 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96131 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96135 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96138 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96142 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96145 "isa_tms320.tcc"
)
{
#line 2828 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *dst2_name = REG_NAME[dst2];
		string disasm_src1_indir;
		string disasm_src2_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s1_mod, s1_ar) ||
		!cpu.DisasmIndir(disasm_src2_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s2_mod, s2_ar))
		return false;

		os << "LDI " << disasm_src2_indir << ", " << dst2_name
		<< " || " << "LDI " << disasm_src1_indir << ", " << dst1_name;
		return true;
	}
#line 96163 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 96168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96178 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96182 "isa_tms320.tcc"
OpLDI_LDI<
#line 45 "isa/tms320.isa"
CONFIG
#line 96186 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96190 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96194 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96197 "isa_tms320.tcc"
)
{
#line 2857 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check that indirect addressing mode is valid and compute the effective address of 'src1' operand
		typename CONFIG::address_t s1_ea;        // The effective address
		bool s1_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s1_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s1_ea, s1_update_ar, s1_output_ar, s1_mod, s1_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of 'src2' operand
		typename CONFIG::address_t s2_ea;        // The effective address
		bool s2_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s2_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s2_ea, s2_update_ar, s2_output_ar, s2_mod, s2_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the 'src1' operand value from memory
		uint32_t src1_value = cpu.IntLoad(s1_ea);

		// Load the 'src2' operand value from memory
		uint32_t src2_value = cpu.IntLoad(s2_ea);

		// Write back register operand 'dst2'
		cpu.SetReg(dst2, src2_value);

		// Write back register operand 'dst1'
		if(dst1 != dst2)
		{
			cpu.SetReg(dst1, src1_value);
		}

		if(s1_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s1_ar, s1_output_ar);
		}

		if(s2_update_ar && s1_ar != s2_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s2_ar, s2_output_ar);
		}
	}
#line 96249 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 96255 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96258 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96262 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96265 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96270 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96274 "isa_tms320.tcc"
> *DecodeOpLDI_LDI(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_LDI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96280 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96284 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 96291 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96294 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96298 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96301 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 96305 "isa_tms320.tcc"
OpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96309 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96313 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96317 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96320 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96324 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96327 "isa_tms320.tcc"
)
{
#line 2843 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[dst1];
		const char *dst2_name = REG_NAME[dst2];
		const char *src2_name = REG_NAME[src2];
		string disasm_src1_indir;

		if (!cpu.DisasmIndir(disasm_src1_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s1_mod, s1_ar))
		return false;

		os << "LDI " << ", " << src2_name << ", " << dst2_name
		<< " || " << "LDI " << disasm_src1_indir << ", " << dst2_name;
		return true;
	}
#line 96344 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 96349 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96352 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96356 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96359 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96363 "isa_tms320.tcc"
OpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96367 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96371 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96375 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96378 "isa_tms320.tcc"
)
{
#line 2906 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src2' register is valid
		if(unlikely(!cpu.HasReg(src2)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of 'src1' operand
		typename CONFIG::address_t s1_ea;        // The effective address
		bool s1_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s1_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s1_ea, s1_update_ar, s1_output_ar, s1_mod, s1_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load the 'src1' operand value from memory
		uint32_t src1_value = cpu.IntLoad(s1_ea);

		// Read the 'src2' register operand value
		uint32_t src2_value = cpu.GetReg(src2);

		// Note: The assembler issues a warning
		// if the LDIs load the same register.
		// The result is that of LDI src2, dst2 (pp 13-129).

		// Write back register operand 'dst2'
		cpu.SetReg(dst2, src2_value);

		// Write back register operand 'dst1'
		if(dst1 != dst2)
		{
			cpu.SetReg(dst1, src1_value);
		}

		if(s1_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s1_ar, s1_output_ar);
		}
	}
#line 96424 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 96430 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96433 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96437 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96440 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96445 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96449 "isa_tms320.tcc"
> *DecodeOpLDI_LDI_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96455 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96459 "isa_tms320.tcc"
	>(code, addr);
}

/* end of LDI || LDI (load integer)
**********************************************************/
/**********************************************************
* MPYF3 || ADDF3 (multiply and add floating-point value)
* op MPYF3_ADDF3(0b10[2]:0b0000[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 96472 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96475 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96479 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96482 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 96486 "isa_tms320.tcc"
OpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 96490 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96494 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96498 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96501 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96505 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96508 "isa_tms320.tcc"
)
{
#line 2960 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_src3_indir;
		string disasm_src4_indir;
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!cpu.DisasmIndir(disasm_src3_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s3_mod, s3_ar) ||
		!cpu.DisasmIndir(disasm_src4_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s4_mod, s4_ar))
		return false;

		switch(p)
		{
		case 0:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = disasm_src4_indir.c_str();
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = disasm_src4_indir.c_str();
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = disasm_src3_indir.c_str();
			srcC_name = disasm_src4_indir.c_str();
			break;
		case 4:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = disasm_src4_indir.c_str();
			break;
		}

		os << "MPYF3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "ADDF3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 96560 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 96565 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96568 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96572 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96575 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96579 "isa_tms320.tcc"
OpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 96583 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96587 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96591 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96594 "isa_tms320.tcc"
)
{
#line 3058 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 96601 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 96607 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96610 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96614 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96617 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96622 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96626 "isa_tms320.tcc"
> *DecodeOpMPYF3_ADDF3(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96632 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96636 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 96643 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96646 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96653 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 96657 "isa_tms320.tcc"
OpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96661 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96665 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96669 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96672 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96676 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96679 "isa_tms320.tcc"
)
{
#line 3009 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		const char *src4_name = REG_NAME[src4];
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!src3_name ||
		!src4_name)
		return false;

		switch(p)
		{
		case 0:
			srcA_name = src3_name;
			srcB_name = src4_name;
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src4_name;
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = src3_name;
			srcC_name = src4_name;
			break;
		case 4:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = src4_name;
			break;
		}

		os << "MPYF3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "ADDF3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 96731 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 96736 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96739 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96743 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96746 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96750 "isa_tms320.tcc"
OpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 96754 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96758 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96762 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96765 "isa_tms320.tcc"
)
{
#line 3062 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 96772 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 96778 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96781 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96785 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96788 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96793 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96797 "isa_tms320.tcc"
> *DecodeOpMPYF3_ADDF3_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96803 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96807 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF3 || ADDF3 (multiply and add floating-point value)
**********************************************************/
/**********************************************************
* MPYF3 || SUBF3 (multiply and subtract floating-point value)
* op MPYF3_SUBF3(0b10[2]:0b0001[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 96820 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96823 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96827 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96830 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 96834 "isa_tms320.tcc"
OpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 96838 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96842 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96846 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96849 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 96853 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 96856 "isa_tms320.tcc"
)
{
#line 3077 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_src3_indir;
		string disasm_src4_indir;
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!cpu.DisasmIndir(disasm_src3_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s3_mod, s3_ar) ||
		!cpu.DisasmIndir(disasm_src4_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s4_mod, s4_ar))
		return false;

		switch(p)
		{
		case 0:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = disasm_src4_indir.c_str();
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = disasm_src4_indir.c_str();
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = disasm_src3_indir.c_str();
			srcC_name = disasm_src4_indir.c_str();
			break;
		case 4:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = disasm_src4_indir.c_str();
			break;
		}

		os << "MPYF3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "SUBF3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 96908 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 96913 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96916 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96920 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96923 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 96927 "isa_tms320.tcc"
OpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 96931 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96935 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 96939 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 96942 "isa_tms320.tcc"
)
{
#line 3175 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 96949 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 96955 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96958 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96962 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 96965 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 96970 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 96974 "isa_tms320.tcc"
> *DecodeOpMPYF3_SUBF3(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 96980 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 96984 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 96991 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 96994 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 96998 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97001 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 97005 "isa_tms320.tcc"
OpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 97009 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97013 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97017 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97020 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 97024 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 97027 "isa_tms320.tcc"
)
{
#line 3126 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		const char *src4_name = REG_NAME[src4];
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!src3_name ||
		!src4_name)
		return false;

		switch(p)
		{
		case 0:
			srcA_name = src3_name;
			srcB_name = src4_name;
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src4_name;
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = src3_name;
			srcC_name = src4_name;
			break;
		case 4:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = src4_name;
			break;
		}

		os << "MPYF3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "SUBF3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 97079 "isa_tms320.tcc"
}
template <
#line 45 "isa/tms320.isa"
class
#line 97084 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97087 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97091 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97094 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 97098 "isa_tms320.tcc"
OpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 97102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97106 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97110 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97113 "isa_tms320.tcc"
)
{
#line 3179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
	}
#line 97120 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 97126 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97129 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97133 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97136 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 97141 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97145 "isa_tms320.tcc"
> *DecodeOpMPYF3_SUBF3_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 97151 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 97155 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYF3 || SUBF3 (multiply and subtract floating-point value)
**********************************************************/
/**********************************************************
* MPYI3 || ADDI3 (multiply and add integer)
* op MPYI3_ADDI3(0b10[2]:0b0010[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 97168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97178 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 97182 "isa_tms320.tcc"
OpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 97186 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97190 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97194 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97197 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 97201 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 97204 "isa_tms320.tcc"
)
{
#line 3194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_src3_indir;
		string disasm_src4_indir;
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!cpu.DisasmIndir(disasm_src3_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s3_mod, s3_ar) ||
		!cpu.DisasmIndir(disasm_src4_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s4_mod, s4_ar))
		return false;

		switch(p)
		{
		case 0:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = disasm_src4_indir.c_str();
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = disasm_src4_indir.c_str();
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = disasm_src3_indir.c_str();
			srcC_name = disasm_src4_indir.c_str();
			break;
		case 4:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = disasm_src4_indir.c_str();
			break;
		}

		os << "MPYI3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "ADDI3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 97256 "isa_tms320.tcc"
}
//    srcA * srcB -> dst1
// ||
//    srcD + srcC -> dst2
template <
#line 45 "isa/tms320.isa"
class
#line 97264 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97271 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97274 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 97278 "isa_tms320.tcc"
OpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 97282 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97286 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97290 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97293 "isa_tms320.tcc"
)
{
#line 3295 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Check that indirect addressing mode is valid and compute the effective address of 'src3' operand
		typename CONFIG::address_t s3_ea;        // The effective address
		bool s3_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s3_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s3_ea, s3_update_ar, s3_output_ar, s3_mod, s3_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of 'src4' operand
		typename CONFIG::address_t s4_ea;        // The effective address
		bool s4_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s4_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s4_ea, s4_update_ar, s4_output_ar, s4_mod, s4_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load 'src3' operand from memory
		uint32_t src3_value = cpu.IntLoad(s3_ea);

		// Load 'src4' operand from memory
		uint32_t src4_value = cpu.IntLoad(s4_ea);

		// Map 'src1', 'src2', 'src3', and 'src4' to 'srcA', 'srcB', 'srcC', and 'srcD'
		// depending on the parallel addressing mode used
		uint32_t srcA_value;
		uint32_t srcB_value;
		uint32_t srcC_value;
		uint32_t srcD_value;

		switch(p)
		{
			case 0: // 00
			srcA_value = src3_value;
			srcB_value = src4_value;
			srcC_value = src2_value;
			srcD_value = src1_value;
			break;
			case 1: // 01
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src4_value;
			srcD_value = src2_value;
			break;
			case 2: // 10
			srcA_value = src1_value;
			srcB_value = src2_value;
			srcC_value = src3_value;
			srcD_value = src4_value;
			break;
			case 3: // 11
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src2_value;
			srcD_value = src4_value;
			break;
		}

		// Compute the 32-bit result and overflow of MPYI3
		// Source operand values are sign extended from 24 bits to 64 bits before the actual computation
		int64_t mpyi3_result64 = SignExtend((uint64_t)(srcA_value & 0xffffff), 24) * SignExtend((uint64_t)(srcB_value & 0xffffff), 24); // Only 48 bits are useful
		int32_t lo32 = (int32_t) mpyi3_result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (mpyi3_result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t mpyi3_overflow = ((lo32 >> 31) != hi32);
		uint32_t mpyi3_result;

		if(cpu.GetST_OVM() && mpyi3_overflow)
		mpyi3_result = (mpyi3_result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		mpyi3_result = lo32;                                     // No saturation

		// Compute the result of ADDI3
		uint32_t addi3_result;      // the 32-bit result
		uint8_t addi3_carry_out;    // the carry out (0 or 1)
		uint8_t addi3_overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(addi3_result, addi3_carry_out, addi3_overflow, srcD_value, srcC_value, 0);
		else
		Add32(addi3_result, addi3_carry_out, addi3_overflow, srcD_value, srcC_value, 0);

		// Summarize overflow bit of MPYI3 and ADDI3
		uint8_t overflow = mpyi3_overflow | addi3_overflow;

		// Write back 'dst1' register operand
		unsigned int dst1 = d1;
		cpu.SetReg(dst1, mpyi3_result);

		// Write back 'dst2' register operand
		unsigned int dst2 = d2 + 2;
		cpu.SetReg(2 + dst2, addi3_result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(s3_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s3_ar, s3_output_ar);
		}

		if(s4_update_ar && s4_ar != s4_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s4_ar, s4_output_ar);
		}

		// Generate flags (into ST)
		cpu.GenFlags(
		0,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 97427 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 97433 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97436 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97443 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 97448 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97452 "isa_tms320.tcc"
> *DecodeOpMPYI3_ADDI3(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 97458 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 97462 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 97469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97476 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97479 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 97483 "isa_tms320.tcc"
OpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 97487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97491 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97495 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97498 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 97502 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 97505 "isa_tms320.tcc"
)
{
#line 3243 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		const char *src4_name = REG_NAME[src4];
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!src3_name ||
		!src4_name)
		return false;

		switch(p)
		{
		case 0:
			srcA_name = src3_name;
			srcB_name = src4_name;
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src4_name;
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = src3_name;
			srcC_name = src4_name;
			break;
		case 4:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = src4_name;
			break;
		}

		os << "MPYI3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "ADDI3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 97557 "isa_tms320.tcc"
}
//    srcA * srcB -> dst1
// ||
//    srcD + srcC -> dst2
template <
#line 45 "isa/tms320.isa"
class
#line 97565 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97568 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97572 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97575 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 97579 "isa_tms320.tcc"
OpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 97583 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97587 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97591 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97594 "isa_tms320.tcc"
)
{
#line 3429 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src3' and 'src4' are valid registers
		if(unlikely(!cpu.HasReg(src3) || !cpu.HasReg(src4)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read 'src4' register operand
		uint32_t src4_value = cpu.GetReg(src4);

		// Map 'src1', 'src2', 'src3', and 'src4' to 'srcA', 'srcB', 'srcC', and 'srcD'
		// depending on the parallel addressing mode used
		uint32_t srcA_value;
		uint32_t srcB_value;
		uint32_t srcC_value;
		uint32_t srcD_value;

		switch(p)
		{
			case 0: // 00
			srcA_value = src3_value;
			srcB_value = src4_value;
			srcC_value = src2_value;
			srcD_value = src1_value;
			break;
			case 1: // 01
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src4_value;
			srcD_value = src2_value;
			break;
			case 2: // 10
			srcA_value = src1_value;
			srcB_value = src2_value;
			srcC_value = src3_value;
			srcD_value = src4_value;
			break;
			case 3: // 11
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src2_value;
			srcD_value = src4_value;
			break;
		}

		// Compute the 32-bit result and overflow of MPYI3
		// Source operand values are sign extended from 24 bits to 64 bits before the actual computation
		int64_t mpyi3_result64 = SignExtend((uint64_t)(srcA_value & 0xffffff), 24) * SignExtend((uint64_t)(srcB_value & 0xffffff), 24); // Only 48 bits are useful
		int32_t lo32 = (int32_t) mpyi3_result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (mpyi3_result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t mpyi3_overflow = ((lo32 >> 31) != hi32);
		uint32_t mpyi3_result;

		if(cpu.GetST_OVM() && mpyi3_overflow)
		mpyi3_result = (mpyi3_result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		mpyi3_result = lo32;                                     // No saturation

		// Compute the result of ADDI3
		uint32_t addi3_result;      // the 32-bit result
		uint8_t addi3_carry_out;    // the carry out (0 or 1)
		uint8_t addi3_overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatAdd32(addi3_result, addi3_carry_out, addi3_overflow, srcD_value, srcC_value, 0);
		else
		Add32(addi3_result, addi3_carry_out, addi3_overflow, srcD_value, srcC_value, 0);

		// Summarize overflow bit of MPYI3 and ADDI3
		uint8_t overflow = mpyi3_overflow | addi3_overflow;

		// Write back 'dst1' register operand
		unsigned int dst1 = d1;
		cpu.SetReg(dst1, mpyi3_result);

		// Write back 'dst2' register operand
		unsigned int dst2 = d2 + 2;
		cpu.SetReg(2 + dst2, addi3_result);

		// Generate flags (into ST)
		cpu.GenFlags(
		0,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 97698 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 97704 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97707 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97711 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97714 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 97719 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97723 "isa_tms320.tcc"
> *DecodeOpMPYI3_ADDI3_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 97729 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 97733 "isa_tms320.tcc"
	>(code, addr);
}

/* end of MPYI3 || ADDI3 (multiply and add integer)
**********************************************************/
/**********************************************************
* MPYI3 || SUBI3 (multiply and subtract integer)
* op MPYI3_SUBI3(0b10[2]:0b0011[4]:p[2]:d1[1]:d2[1]:src1[3]:src2[3]:src3[8]:src4[8])
*/
template <
#line 45 "isa/tms320.isa"
class
#line 97746 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97749 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97753 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97756 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 97760 "isa_tms320.tcc"
OpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 97764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97768 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97772 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97775 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 97779 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 97782 "isa_tms320.tcc"
)
{
#line 3541 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		string disasm_src3_indir;
		string disasm_src4_indir;
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!cpu.DisasmIndir(disasm_src3_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s3_mod, s3_ar) ||
		!cpu.DisasmIndir(disasm_src4_indir, Operation<CONFIG, DEBUG>::GetAddr() / 4, s4_mod, s4_ar))
		return false;

		switch(p)
		{
		case 0:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = disasm_src4_indir.c_str();
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = disasm_src4_indir.c_str();
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = disasm_src3_indir.c_str();
			srcC_name = disasm_src4_indir.c_str();
			break;
		case 4:
			srcA_name = disasm_src3_indir.c_str();
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = disasm_src4_indir.c_str();
			break;
		}

		os << "MPYI3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "SUBI3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 97834 "isa_tms320.tcc"
}
//    srcA * srcB -> dst1
// ||
//    srcD + srcC -> dst2
template <
#line 45 "isa/tms320.isa"
class
#line 97842 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 97845 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 97849 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 97852 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 97856 "isa_tms320.tcc"
OpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 97860 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 97864 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 97868 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 97871 "isa_tms320.tcc"
)
{
#line 3642 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Read 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Check that indirect addressing mode is valid and compute the effective address of 'src3' operand
		typename CONFIG::address_t s3_ea;        // The effective address
		bool s3_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s3_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s3_ea, s3_update_ar, s3_output_ar, s3_mod, s3_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Check that indirect addressing mode is valid and compute the effective address of 'src4' operand
		typename CONFIG::address_t s4_ea;        // The effective address
		bool s4_update_ar;                       // Whether to update ARn
		typename CONFIG::address_t s4_output_ar; // New value of ARn if it is updated

		if(unlikely(!cpu.ComputeIndirEA(s4_ea, s4_update_ar, s4_output_ar, s4_mod, s4_ar)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Load 'src3' operand from memory
		uint32_t src3_value = cpu.IntLoad(s3_ea);

		// Load 'src4' operand from memory
		uint32_t src4_value = cpu.IntLoad(s4_ea);

		// Map 'src1', 'src2', 'src3', and 'src4' to 'srcA', 'srcB', 'srcC', and 'srcD'
		// depending on the parallel addressing mode used
		uint32_t srcA_value;
		uint32_t srcB_value;
		uint32_t srcC_value;
		uint32_t srcD_value;

		switch(p)
		{
			case 0: // 00
			srcA_value = src3_value;
			srcB_value = src4_value;
			srcC_value = src2_value;
			srcD_value = src1_value;
			break;
			case 1: // 01
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src4_value;
			srcD_value = src2_value;
			break;
			case 2: // 10
			srcA_value = src1_value;
			srcB_value = src2_value;
			srcC_value = src3_value;
			srcD_value = src4_value;
			break;
			case 3: // 11
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src2_value;
			srcD_value = src4_value;
			break;
		}

		// Compute the 32-bit result and overflow of MPYI3
		// Source operand values are sign extended from 24 bits to 64 bits before the actual computation
		int64_t mpyi3_result64 = SignExtend((uint64_t)(srcA_value & 0xffffff), 24) * SignExtend((uint64_t)(srcB_value & 0xffffff), 24); // Only 48 bits are useful
		int32_t lo32 = (int32_t) mpyi3_result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (mpyi3_result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t mpyi3_overflow = ((lo32 >> 31) != hi32);
		uint32_t mpyi3_result;

		if(cpu.GetST_OVM() && mpyi3_overflow)
		mpyi3_result = (mpyi3_result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		mpyi3_result = lo32;                                     // No saturation

		// Compute the result of SUBI3
		uint32_t subi3_result;      // the 32-bit result
		uint8_t subi3_borrow_out;   // the borrow out (0 or 1)
		uint8_t subi3_overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(subi3_result, subi3_borrow_out, subi3_overflow, srcD_value, srcC_value, 0);
		else
		Sub32(subi3_result, subi3_borrow_out, subi3_overflow, srcD_value, srcC_value, 0);

		// Summarize overflow bit of MPYI3 and SUBI3
		uint8_t overflow = mpyi3_overflow | subi3_overflow;

		// Write back 'dst1' register operand
		unsigned int dst1 = d1;
		cpu.SetReg(dst1, mpyi3_result);

		// Write back 'dst2' register operand
		unsigned int dst2 = d2 + 2;
		cpu.SetReg(2 + dst2, subi3_result);

		// Note: ...if the src3 and src4 fields use the same auxiliary register,
		// both addresses are correctly generated, but only the value created by
		// the src3 field is saved in the auxiliary register specified...

		if(s3_update_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s3_ar, s3_output_ar);
		}

		if(s4_update_ar && s4_ar != s4_ar)
		{
			// Write back ARn
			cpu.SetAR23_0(s4_ar, s4_output_ar);
		}

		// FIXME: Don't known how to generate the underflow flag

		// Generate flags (into ST)
		cpu.GenFlags(
		0,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_UF | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 98007 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 98013 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98016 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98020 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98023 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98028 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98032 "isa_tms320.tcc"
> *DecodeOpMPYI3_SUBI3(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 98038 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 98042 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98049 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98052 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98056 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98059 "isa_tms320.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
bool
#line 98063 "isa_tms320.tcc"
OpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 98067 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98071 "isa_tms320.tcc"
>::disasm(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98075 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98078 "isa_tms320.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
std::ostream &
#line 98082 "isa_tms320.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
os
#line 98085 "isa_tms320.tcc"
)
{
#line 3590 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		const char *dst1_name = REG_NAME[d1];
		const char *dst2_name = REG_NAME[d2 + 2];
		const char *src1_name = REG_NAME[src1];
		const char *src2_name = REG_NAME[src2];
		const char *src3_name = REG_NAME[src3];
		const char *src4_name = REG_NAME[src4];
		const char *srcA_name = 0;
		const char *srcB_name = 0;
		const char *srcC_name = 0;
		const char *srcD_name = 0;

		if (!src3_name ||
		!src4_name)
		return false;

		switch(p)
		{
		case 0:
			srcA_name = src3_name;
			srcB_name = src4_name;
			srcD_name = src1_name;
			srcC_name = src2_name;
			break;
		case 1:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src4_name;
			srcC_name = src2_name;
			break;
		case 3:
			srcA_name = src1_name;
			srcB_name = src2_name;
			srcD_name = src3_name;
			srcC_name = src4_name;
			break;
		case 4:
			srcA_name = src3_name;
			srcB_name = src1_name;
			srcD_name = src2_name;
			srcC_name = src4_name;
			break;
		}

		os << "MPYI3 " << srcA_name << ", " << srcB_name << ", " << dst1_name
		<< " || " << "SUBI3 " << srcC_name << ", " << srcD_name << ", " << dst2_name;
		return true;
	}
#line 98137 "isa_tms320.tcc"
}
//    srcA * srcB -> dst1
// ||
//    srcD + srcC -> dst2
template <
#line 45 "isa/tms320.isa"
class
#line 98145 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98152 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98155 "isa_tms320.tcc"
>
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
void
#line 98159 "isa_tms320.tcc"
OpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 98163 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98167 "isa_tms320.tcc"
>::execute(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
CPU<CONFIG, DEBUG> &
#line 98171 "isa_tms320.tcc"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/actions_dec.isa"
cpu
#line 98174 "isa_tms320.tcc"
)
{
#line 3778 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/tms320/isa/parallel.isa"
	{
		// Check whether 'src3' and 'src4' are valid registers
		if(unlikely(!cpu.HasReg(src3) || !cpu.HasReg(src4)))
		{
			throw BogusOpcodeException<CONFIG, DEBUG>(this);
		}

		// Read 'src1' register operand
		uint32_t src1_value = cpu.GetReg(src1);

		// Read 'src2' register operand
		uint32_t src2_value = cpu.GetReg(src2);

		// Read 'src3' register operand
		uint32_t src3_value = cpu.GetReg(src3);

		// Read 'src4' register operand
		uint32_t src4_value = cpu.GetReg(src4);

		// Map 'src1', 'src2', 'src3', and 'src4' to 'srcA', 'srcB', 'srcC', and 'srcD'
		// depending on the parallel addressing mode used
		uint32_t srcA_value;
		uint32_t srcB_value;
		uint32_t srcC_value;
		uint32_t srcD_value;

		switch(p)
		{
			case 0: // 00
			srcA_value = src3_value;
			srcB_value = src4_value;
			srcC_value = src2_value;
			srcD_value = src1_value;
			break;
			case 1: // 01
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src4_value;
			srcD_value = src2_value;
			break;
			case 2: // 10
			srcA_value = src1_value;
			srcB_value = src2_value;
			srcC_value = src3_value;
			srcD_value = src4_value;
			break;
			case 3: // 11
			srcA_value = src3_value;
			srcB_value = src1_value;
			srcC_value = src2_value;
			srcD_value = src4_value;
			break;
		}

		// Compute the 32-bit result and overflow of MPYI3
		// Source operand values are sign extended from 24 bits to 64 bits before the actual computation
		int64_t mpyi3_result64 = SignExtend((uint64_t)(srcA_value & 0xffffff), 24) * SignExtend((uint64_t)(srcB_value & 0xffffff), 24); // Only 48 bits are useful
		int32_t lo32 = (int32_t) mpyi3_result64;          // the 32 LSBs of the result
		int32_t hi32 = (int32_t) (mpyi3_result64 >> 32);  // the 32 MSBs of the result
		// An overflow occurs if any of the 32-bit MSB of the result differ from MSB of the 32-bit output value
		// An arithmetic shift of 31 bits is used to duplicate 32 times the MSB of lo32
		uint8_t mpyi3_overflow = ((lo32 >> 31) != hi32);
		uint32_t mpyi3_result;

		if(cpu.GetST_OVM() && mpyi3_overflow)
		mpyi3_result = (mpyi3_result64 < 0) ? 0x80000000 : 0x7fffffff; // Saturate the result
		else
		mpyi3_result = lo32;                                     // No saturation

		// Compute the result of SUBI3
		uint32_t subi3_result;      // the 32-bit result
		uint8_t subi3_borrow_out;   // the borrow out (0 or 1)
		uint8_t subi3_overflow;     // the overflow (0 or 1)

		// Depending on overflow mode do signed saturation or not
		if(cpu.GetST_OVM())
		SignedSatSub32(subi3_result, subi3_borrow_out, subi3_overflow, srcD_value, srcC_value, 0);
		else
		Sub32(subi3_result, subi3_borrow_out, subi3_overflow, srcD_value, srcC_value, 0);

		// Summarize overflow bit of MPYI3 and SUBI3
		uint8_t overflow = mpyi3_overflow | subi3_overflow;

		// Write back 'dst1' register operand
		unsigned int dst1 = d1;
		cpu.SetReg(dst1, mpyi3_result);

		// Write back 'dst2' register operand
		unsigned int dst2 = d2 + 2;
		cpu.SetReg(2 + dst2, subi3_result);

		// FIXME: Don't known how to generate the underflow flag

		// Generate flags (into ST)
		cpu.GenFlags(
		0,
		M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
		M_ST_LV | M_ST_UF | M_ST_V,  // or mask
		0,
		overflow
		);
	}
#line 98280 "isa_tms320.tcc"
}

template <
#line 45 "isa/tms320.isa"
class
#line 98286 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98289 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98293 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98296 "isa_tms320.tcc"
>
static Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98301 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98305 "isa_tms320.tcc"
> *DecodeOpMPYI3_SUBI3_ext(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 98311 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 98315 "isa_tms320.tcc"
	>(code, addr);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98322 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98325 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98329 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98332 "isa_tms320.tcc"
>
OpLDE_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 98337 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98341 "isa_tms320.tcc"
>::OpLDE_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98345 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98349 "isa_tms320.tcc"
>(code, addr, "LDE_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98359 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98362 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98366 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98369 "isa_tms320.tcc"
>
OpLDE_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 98374 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98378 "isa_tms320.tcc"
>::OpLDE_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98382 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98386 "isa_tms320.tcc"
>(code, addr, "LDE_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98396 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98399 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98403 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98406 "isa_tms320.tcc"
>
OpLDE_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 98411 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98415 "isa_tms320.tcc"
>::OpLDE_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98419 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98423 "isa_tms320.tcc"
>(code, addr, "LDE_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98435 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98438 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98442 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98445 "isa_tms320.tcc"
>
OpLDE_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 98450 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98454 "isa_tms320.tcc"
>::OpLDE_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98458 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98462 "isa_tms320.tcc"
>(code, addr, "LDE_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98472 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98475 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98479 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98482 "isa_tms320.tcc"
>
OpLDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 98487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98491 "isa_tms320.tcc"
>::OpLDF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98495 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98499 "isa_tms320.tcc"
>(code, addr, "LDF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98509 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98512 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98516 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98519 "isa_tms320.tcc"
>
OpLDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 98524 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98528 "isa_tms320.tcc"
>::OpLDF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98532 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98536 "isa_tms320.tcc"
>(code, addr, "LDF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98546 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98549 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98553 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98556 "isa_tms320.tcc"
>
OpLDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 98561 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98565 "isa_tms320.tcc"
>::OpLDF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98569 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98573 "isa_tms320.tcc"
>(code, addr, "LDF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98585 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98588 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98592 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98595 "isa_tms320.tcc"
>
OpLDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 98600 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98604 "isa_tms320.tcc"
>::OpLDF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98608 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98612 "isa_tms320.tcc"
>(code, addr, "LDF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98622 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98625 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98629 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98632 "isa_tms320.tcc"
>
OpLDFcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 98637 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98641 "isa_tms320.tcc"
>::OpLDFcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98645 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98649 "isa_tms320.tcc"
>(code, addr, "LDFcond_reg")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98660 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98670 "isa_tms320.tcc"
>
OpLDFcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 98675 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98679 "isa_tms320.tcc"
>::OpLDFcond_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98683 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98687 "isa_tms320.tcc"
>(code, addr, "LDFcond_dir")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98698 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98701 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98705 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98708 "isa_tms320.tcc"
>
OpLDFcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 98713 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98717 "isa_tms320.tcc"
>::OpLDFcond_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98721 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98725 "isa_tms320.tcc"
>(code, addr, "LDFcond_indir")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98738 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98741 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98745 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98748 "isa_tms320.tcc"
>
OpLDFcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 98753 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98757 "isa_tms320.tcc"
>::OpLDFcond_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98761 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98765 "isa_tms320.tcc"
>(code, addr, "LDFcond_imm")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98776 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98779 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98783 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98786 "isa_tms320.tcc"
>
OpLDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 98791 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98795 "isa_tms320.tcc"
>::OpLDI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98799 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98803 "isa_tms320.tcc"
>(code, addr, "LDI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98813 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98816 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98820 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98823 "isa_tms320.tcc"
>
OpLDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 98828 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98832 "isa_tms320.tcc"
>::OpLDI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98836 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98840 "isa_tms320.tcc"
>(code, addr, "LDI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98850 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98853 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98857 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98860 "isa_tms320.tcc"
>
OpLDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 98865 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98869 "isa_tms320.tcc"
>::OpLDI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98873 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98877 "isa_tms320.tcc"
>(code, addr, "LDI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98889 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98896 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98899 "isa_tms320.tcc"
>
OpLDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 98904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98908 "isa_tms320.tcc"
>::OpLDI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98912 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98916 "isa_tms320.tcc"
>(code, addr, "LDI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98926 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98929 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98933 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98936 "isa_tms320.tcc"
>
OpLDIcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 98941 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98945 "isa_tms320.tcc"
>::OpLDIcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98949 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98953 "isa_tms320.tcc"
>(code, addr, "LDIcond_reg")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 98964 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 98967 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 98971 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 98974 "isa_tms320.tcc"
>
OpLDIcond_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 98979 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98983 "isa_tms320.tcc"
>::OpLDIcond_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 98987 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 98991 "isa_tms320.tcc"
>(code, addr, "LDIcond_dir")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99002 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99005 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99009 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99012 "isa_tms320.tcc"
>
OpLDIcond_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99017 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99021 "isa_tms320.tcc"
>::OpLDIcond_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99025 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99029 "isa_tms320.tcc"
>(code, addr, "LDIcond_indir")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99042 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99045 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99049 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99052 "isa_tms320.tcc"
>
OpLDIcond_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 99057 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99061 "isa_tms320.tcc"
>::OpLDIcond_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99065 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99069 "isa_tms320.tcc"
>(code, addr, "LDIcond_imm")
{
	cond = ((code >> 23) & 0x1f);
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99080 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99090 "isa_tms320.tcc"
>
OpLDM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 99095 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99099 "isa_tms320.tcc"
>::OpLDM_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99103 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99107 "isa_tms320.tcc"
>(code, addr, "LDM_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99117 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99120 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99124 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99127 "isa_tms320.tcc"
>
OpLDM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99132 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99136 "isa_tms320.tcc"
>::OpLDM_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99144 "isa_tms320.tcc"
>(code, addr, "LDM_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99154 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99157 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99161 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99164 "isa_tms320.tcc"
>
OpLDM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99169 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99173 "isa_tms320.tcc"
>::OpLDM_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99177 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99181 "isa_tms320.tcc"
>(code, addr, "LDM_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99193 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99196 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99200 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99203 "isa_tms320.tcc"
>
OpLDM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 99208 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99212 "isa_tms320.tcc"
>::OpLDM_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99216 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99220 "isa_tms320.tcc"
>(code, addr, "LDM_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xfff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99233 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99237 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99240 "isa_tms320.tcc"
>
OpLDP<
#line 45 "isa/tms320.isa"
CONFIG
#line 99245 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99249 "isa_tms320.tcc"
>::OpLDP(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99253 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99257 "isa_tms320.tcc"
>(code, addr, "LDP")
{
	src = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99266 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99269 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99273 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99276 "isa_tms320.tcc"
>
OpPOP<
#line 45 "isa/tms320.isa"
CONFIG
#line 99281 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99285 "isa_tms320.tcc"
>::OpPOP(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99289 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99293 "isa_tms320.tcc"
>(code, addr, "POP")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99302 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99305 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99309 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99312 "isa_tms320.tcc"
>
OpPOPF<
#line 45 "isa/tms320.isa"
CONFIG
#line 99317 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99321 "isa_tms320.tcc"
>::OpPOPF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99325 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99329 "isa_tms320.tcc"
>(code, addr, "POPF")
{
	dst = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99338 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99341 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99345 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99348 "isa_tms320.tcc"
>
OpPUSH<
#line 45 "isa/tms320.isa"
CONFIG
#line 99353 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99357 "isa_tms320.tcc"
>::OpPUSH(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99361 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99365 "isa_tms320.tcc"
>(code, addr, "PUSH")
{
	src = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99374 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99377 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99381 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99384 "isa_tms320.tcc"
>
OpPUSHF<
#line 45 "isa/tms320.isa"
CONFIG
#line 99389 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99393 "isa_tms320.tcc"
>::OpPUSHF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99397 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99401 "isa_tms320.tcc"
>(code, addr, "PUSHF")
{
	src = ((code >> 16) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99410 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99413 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99417 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99420 "isa_tms320.tcc"
>
OpSTF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99425 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99429 "isa_tms320.tcc"
>::OpSTF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99433 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99437 "isa_tms320.tcc"
>(code, addr, "STF_dir")
{
	src = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99450 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99454 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99457 "isa_tms320.tcc"
>
OpSTF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99462 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99466 "isa_tms320.tcc"
>::OpSTF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99470 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99474 "isa_tms320.tcc"
>(code, addr, "STF_indir")
{
	src = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99486 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99489 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99493 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99496 "isa_tms320.tcc"
>
OpSTI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99501 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99505 "isa_tms320.tcc"
>::OpSTI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99509 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99513 "isa_tms320.tcc"
>(code, addr, "STI_dir")
{
	src = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99523 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99526 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99530 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99533 "isa_tms320.tcc"
>
OpSTI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99538 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99542 "isa_tms320.tcc"
>::OpSTI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99546 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99550 "isa_tms320.tcc"
>(code, addr, "STI_indir")
{
	src = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99562 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99565 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99569 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99572 "isa_tms320.tcc"
>
OpABSF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 99577 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99581 "isa_tms320.tcc"
>::OpABSF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99585 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99589 "isa_tms320.tcc"
>(code, addr, "ABSF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99599 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99602 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99606 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99609 "isa_tms320.tcc"
>
OpABSF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99618 "isa_tms320.tcc"
>::OpABSF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99622 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99626 "isa_tms320.tcc"
>(code, addr, "ABSF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99636 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99639 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99643 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99646 "isa_tms320.tcc"
>
OpABSF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99651 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99655 "isa_tms320.tcc"
>::OpABSF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99659 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99663 "isa_tms320.tcc"
>(code, addr, "ABSF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99675 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99678 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99682 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99685 "isa_tms320.tcc"
>
OpABSF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 99690 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99694 "isa_tms320.tcc"
>::OpABSF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99698 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99702 "isa_tms320.tcc"
>(code, addr, "ABSF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99712 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99719 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99722 "isa_tms320.tcc"
>
OpABSI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 99727 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99731 "isa_tms320.tcc"
>::OpABSI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99735 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99739 "isa_tms320.tcc"
>(code, addr, "ABSI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99749 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99752 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99756 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99759 "isa_tms320.tcc"
>
OpABSI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99768 "isa_tms320.tcc"
>::OpABSI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99772 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99776 "isa_tms320.tcc"
>(code, addr, "ABSI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99786 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99789 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99793 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99796 "isa_tms320.tcc"
>
OpABSI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99801 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99805 "isa_tms320.tcc"
>::OpABSI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99809 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99813 "isa_tms320.tcc"
>(code, addr, "ABSI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99825 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99828 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99832 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99835 "isa_tms320.tcc"
>
OpABSI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 99840 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99844 "isa_tms320.tcc"
>::OpABSI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99852 "isa_tms320.tcc"
>(code, addr, "ABSI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99862 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99865 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99869 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99872 "isa_tms320.tcc"
>
OpADDC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 99877 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99881 "isa_tms320.tcc"
>::OpADDC_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99885 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99889 "isa_tms320.tcc"
>(code, addr, "ADDC_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99899 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99902 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99906 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99909 "isa_tms320.tcc"
>
OpADDC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99914 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99918 "isa_tms320.tcc"
>::OpADDC_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99922 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99926 "isa_tms320.tcc"
>(code, addr, "ADDC_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99936 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99939 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99943 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99946 "isa_tms320.tcc"
>
OpADDC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 99951 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99955 "isa_tms320.tcc"
>::OpADDC_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99959 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99963 "isa_tms320.tcc"
>(code, addr, "ADDC_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 99975 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 99978 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 99982 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 99985 "isa_tms320.tcc"
>
OpADDC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 99990 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 99994 "isa_tms320.tcc"
>::OpADDC_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 99998 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100002 "isa_tms320.tcc"
>(code, addr, "ADDC_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100012 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100015 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100022 "isa_tms320.tcc"
>
OpADDF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 100027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100031 "isa_tms320.tcc"
>::OpADDF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100035 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100039 "isa_tms320.tcc"
>(code, addr, "ADDF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100049 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100052 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100056 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100059 "isa_tms320.tcc"
>
OpADDF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100064 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100068 "isa_tms320.tcc"
>::OpADDF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100072 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100076 "isa_tms320.tcc"
>(code, addr, "ADDF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100086 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100089 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100093 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100096 "isa_tms320.tcc"
>
OpADDF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100101 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100105 "isa_tms320.tcc"
>::OpADDF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100109 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100113 "isa_tms320.tcc"
>(code, addr, "ADDF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100125 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100128 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100132 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100135 "isa_tms320.tcc"
>
OpADDF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 100140 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100144 "isa_tms320.tcc"
>::OpADDF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100148 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100152 "isa_tms320.tcc"
>(code, addr, "ADDF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100162 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100165 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100169 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100172 "isa_tms320.tcc"
>
OpADDI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 100177 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100181 "isa_tms320.tcc"
>::OpADDI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100185 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100189 "isa_tms320.tcc"
>(code, addr, "ADDI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100199 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100202 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100206 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100209 "isa_tms320.tcc"
>
OpADDI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100214 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100218 "isa_tms320.tcc"
>::OpADDI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100222 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100226 "isa_tms320.tcc"
>(code, addr, "ADDI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100236 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100239 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100243 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100246 "isa_tms320.tcc"
>
OpADDI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100251 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100255 "isa_tms320.tcc"
>::OpADDI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100259 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100263 "isa_tms320.tcc"
>(code, addr, "ADDI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100275 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100278 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100282 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100285 "isa_tms320.tcc"
>
OpADDI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 100290 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100294 "isa_tms320.tcc"
>::OpADDI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100298 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100302 "isa_tms320.tcc"
>(code, addr, "ADDI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100312 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100315 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100319 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100322 "isa_tms320.tcc"
>
OpAND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 100327 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100331 "isa_tms320.tcc"
>::OpAND_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100335 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100339 "isa_tms320.tcc"
>(code, addr, "AND_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100349 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100352 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100356 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100359 "isa_tms320.tcc"
>
OpAND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100364 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100368 "isa_tms320.tcc"
>::OpAND_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100372 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100376 "isa_tms320.tcc"
>(code, addr, "AND_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100386 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100389 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100393 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100396 "isa_tms320.tcc"
>
OpAND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100401 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100405 "isa_tms320.tcc"
>::OpAND_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100409 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100413 "isa_tms320.tcc"
>(code, addr, "AND_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100425 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100428 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100432 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100435 "isa_tms320.tcc"
>
OpAND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 100440 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100444 "isa_tms320.tcc"
>::OpAND_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100448 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100452 "isa_tms320.tcc"
>(code, addr, "AND_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100462 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100465 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100469 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100472 "isa_tms320.tcc"
>
OpANDN_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 100477 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100481 "isa_tms320.tcc"
>::OpANDN_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100485 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100489 "isa_tms320.tcc"
>(code, addr, "ANDN_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100502 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100509 "isa_tms320.tcc"
>
OpANDN_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100514 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100518 "isa_tms320.tcc"
>::OpANDN_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100522 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100526 "isa_tms320.tcc"
>(code, addr, "ANDN_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100536 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100539 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100543 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100546 "isa_tms320.tcc"
>
OpANDN_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100551 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100555 "isa_tms320.tcc"
>::OpANDN_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100559 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100563 "isa_tms320.tcc"
>(code, addr, "ANDN_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100575 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100578 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100582 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100585 "isa_tms320.tcc"
>
OpANDN_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 100590 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100594 "isa_tms320.tcc"
>::OpANDN_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100598 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100602 "isa_tms320.tcc"
>(code, addr, "ANDN_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100612 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100615 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100619 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100622 "isa_tms320.tcc"
>
OpASH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 100627 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100631 "isa_tms320.tcc"
>::OpASH_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100635 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100639 "isa_tms320.tcc"
>(code, addr, "ASH_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100649 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100652 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100656 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100659 "isa_tms320.tcc"
>
OpASH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100664 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100668 "isa_tms320.tcc"
>::OpASH_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100672 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100676 "isa_tms320.tcc"
>(code, addr, "ASH_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100686 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100689 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100693 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100696 "isa_tms320.tcc"
>
OpASH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100701 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100705 "isa_tms320.tcc"
>::OpASH_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100709 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100713 "isa_tms320.tcc"
>(code, addr, "ASH_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100725 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100728 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100732 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100735 "isa_tms320.tcc"
>
OpASH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 100740 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100744 "isa_tms320.tcc"
>::OpASH_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100748 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100752 "isa_tms320.tcc"
>(code, addr, "ASH_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100762 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100765 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100769 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100772 "isa_tms320.tcc"
>
OpCMPF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 100777 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100781 "isa_tms320.tcc"
>::OpCMPF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100785 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100789 "isa_tms320.tcc"
>(code, addr, "CMPF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100799 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100802 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100806 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100809 "isa_tms320.tcc"
>
OpCMPF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100814 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100818 "isa_tms320.tcc"
>::OpCMPF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100822 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100826 "isa_tms320.tcc"
>(code, addr, "CMPF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100836 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100839 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100843 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100846 "isa_tms320.tcc"
>
OpCMPF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100851 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100855 "isa_tms320.tcc"
>::OpCMPF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100859 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100863 "isa_tms320.tcc"
>(code, addr, "CMPF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100875 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100878 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100882 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100885 "isa_tms320.tcc"
>
OpCMPF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 100890 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100894 "isa_tms320.tcc"
>::OpCMPF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100898 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100902 "isa_tms320.tcc"
>(code, addr, "CMPF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100912 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100915 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100919 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100922 "isa_tms320.tcc"
>
OpCMPI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 100927 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100931 "isa_tms320.tcc"
>::OpCMPI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100935 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100939 "isa_tms320.tcc"
>(code, addr, "CMPI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100949 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100952 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100956 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100959 "isa_tms320.tcc"
>
OpCMPI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 100964 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100968 "isa_tms320.tcc"
>::OpCMPI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 100972 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 100976 "isa_tms320.tcc"
>(code, addr, "CMPI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 100986 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 100989 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 100993 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 100996 "isa_tms320.tcc"
>
OpCMPI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101001 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101005 "isa_tms320.tcc"
>::OpCMPI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101009 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101013 "isa_tms320.tcc"
>(code, addr, "CMPI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101025 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101028 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101032 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101035 "isa_tms320.tcc"
>
OpCMPI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101040 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101044 "isa_tms320.tcc"
>::OpCMPI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101048 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101052 "isa_tms320.tcc"
>(code, addr, "CMPI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101062 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101065 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101069 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101072 "isa_tms320.tcc"
>
OpFIX_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101077 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101081 "isa_tms320.tcc"
>::OpFIX_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101085 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101089 "isa_tms320.tcc"
>(code, addr, "FIX_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101099 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101106 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101109 "isa_tms320.tcc"
>
OpFIX_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101118 "isa_tms320.tcc"
>::OpFIX_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101122 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101126 "isa_tms320.tcc"
>(code, addr, "FIX_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101136 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101139 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101143 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101146 "isa_tms320.tcc"
>
OpFIX_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101151 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101155 "isa_tms320.tcc"
>::OpFIX_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101159 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101163 "isa_tms320.tcc"
>(code, addr, "FIX_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101178 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101182 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101185 "isa_tms320.tcc"
>
OpFIX_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101190 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101194 "isa_tms320.tcc"
>::OpFIX_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101198 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101202 "isa_tms320.tcc"
>(code, addr, "FIX_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101212 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101215 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101219 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101222 "isa_tms320.tcc"
>
OpFLOAT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101227 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101231 "isa_tms320.tcc"
>::OpFLOAT_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101235 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101239 "isa_tms320.tcc"
>(code, addr, "FLOAT_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101249 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101252 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101256 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101259 "isa_tms320.tcc"
>
OpFLOAT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101264 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101268 "isa_tms320.tcc"
>::OpFLOAT_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101272 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101276 "isa_tms320.tcc"
>(code, addr, "FLOAT_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101286 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101289 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101293 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101296 "isa_tms320.tcc"
>
OpFLOAT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101301 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101305 "isa_tms320.tcc"
>::OpFLOAT_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101309 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101313 "isa_tms320.tcc"
>(code, addr, "FLOAT_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101325 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101328 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101332 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101335 "isa_tms320.tcc"
>
OpFLOAT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101340 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101344 "isa_tms320.tcc"
>::OpFLOAT_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101348 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101352 "isa_tms320.tcc"
>(code, addr, "FLOAT_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101362 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101365 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101369 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101372 "isa_tms320.tcc"
>
OpLSH_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101377 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101381 "isa_tms320.tcc"
>::OpLSH_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101385 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101389 "isa_tms320.tcc"
>(code, addr, "LSH_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101399 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101402 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101406 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101409 "isa_tms320.tcc"
>
OpLSH_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101414 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101418 "isa_tms320.tcc"
>::OpLSH_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101422 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101426 "isa_tms320.tcc"
>(code, addr, "LSH_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101436 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101439 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101443 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101446 "isa_tms320.tcc"
>
OpLSH_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101451 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101455 "isa_tms320.tcc"
>::OpLSH_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101459 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101463 "isa_tms320.tcc"
>(code, addr, "LSH_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101475 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101478 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101482 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101485 "isa_tms320.tcc"
>
OpLSH_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101490 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101494 "isa_tms320.tcc"
>::OpLSH_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101498 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101502 "isa_tms320.tcc"
>(code, addr, "LSH_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0x7f) << 25) >> 25);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101512 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101519 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101522 "isa_tms320.tcc"
>
OpMPYF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101531 "isa_tms320.tcc"
>::OpMPYF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101539 "isa_tms320.tcc"
>(code, addr, "MPYF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101549 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101552 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101556 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101559 "isa_tms320.tcc"
>
OpMPYF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101564 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101568 "isa_tms320.tcc"
>::OpMPYF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101572 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101576 "isa_tms320.tcc"
>(code, addr, "MPYF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101589 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101593 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101596 "isa_tms320.tcc"
>
OpMPYF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101601 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101605 "isa_tms320.tcc"
>::OpMPYF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101609 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101613 "isa_tms320.tcc"
>(code, addr, "MPYF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101625 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101628 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101632 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101635 "isa_tms320.tcc"
>
OpMPYF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101640 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101644 "isa_tms320.tcc"
>::OpMPYF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101648 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101652 "isa_tms320.tcc"
>(code, addr, "MPYF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101662 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101665 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101669 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101672 "isa_tms320.tcc"
>
OpMPYI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101677 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101681 "isa_tms320.tcc"
>::OpMPYI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101685 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101689 "isa_tms320.tcc"
>(code, addr, "MPYI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101699 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101702 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101706 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101709 "isa_tms320.tcc"
>
OpMPYI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101714 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101718 "isa_tms320.tcc"
>::OpMPYI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101722 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101726 "isa_tms320.tcc"
>(code, addr, "MPYI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101736 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101739 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101743 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101746 "isa_tms320.tcc"
>
OpMPYI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101751 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101755 "isa_tms320.tcc"
>::OpMPYI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101759 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101763 "isa_tms320.tcc"
>(code, addr, "MPYI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101775 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101778 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101782 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101785 "isa_tms320.tcc"
>
OpMPYI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101790 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101794 "isa_tms320.tcc"
>::OpMPYI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101798 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101802 "isa_tms320.tcc"
>(code, addr, "MPYI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101812 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101815 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101819 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101822 "isa_tms320.tcc"
>
OpNEGB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101827 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101831 "isa_tms320.tcc"
>::OpNEGB_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101835 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101839 "isa_tms320.tcc"
>(code, addr, "NEGB_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101849 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101852 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101856 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101859 "isa_tms320.tcc"
>
OpNEGB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101864 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101868 "isa_tms320.tcc"
>::OpNEGB_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101876 "isa_tms320.tcc"
>(code, addr, "NEGB_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101886 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101889 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101893 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101896 "isa_tms320.tcc"
>
OpNEGB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 101901 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101905 "isa_tms320.tcc"
>::OpNEGB_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101909 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101913 "isa_tms320.tcc"
>(code, addr, "NEGB_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101932 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101935 "isa_tms320.tcc"
>
OpNEGB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 101940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101944 "isa_tms320.tcc"
>::OpNEGB_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101948 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101952 "isa_tms320.tcc"
>(code, addr, "NEGB_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101962 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 101965 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 101969 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 101972 "isa_tms320.tcc"
>
OpNEGF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 101977 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101981 "isa_tms320.tcc"
>::OpNEGF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 101985 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 101989 "isa_tms320.tcc"
>(code, addr, "NEGF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 101999 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102002 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102006 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102009 "isa_tms320.tcc"
>
OpNEGF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102014 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102018 "isa_tms320.tcc"
>::OpNEGF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102022 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102026 "isa_tms320.tcc"
>(code, addr, "NEGF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102036 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102039 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102043 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102046 "isa_tms320.tcc"
>
OpNEGF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102051 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102055 "isa_tms320.tcc"
>::OpNEGF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102059 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102063 "isa_tms320.tcc"
>(code, addr, "NEGF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102075 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102078 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102082 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102085 "isa_tms320.tcc"
>
OpNEGF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102094 "isa_tms320.tcc"
>::OpNEGF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102098 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102102 "isa_tms320.tcc"
>(code, addr, "NEGF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102112 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102115 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102119 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102122 "isa_tms320.tcc"
>
OpNEGI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102127 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102131 "isa_tms320.tcc"
>::OpNEGI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102135 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102139 "isa_tms320.tcc"
>(code, addr, "NEGI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102149 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102152 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102156 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102159 "isa_tms320.tcc"
>
OpNEGI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102164 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102168 "isa_tms320.tcc"
>::OpNEGI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102172 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102176 "isa_tms320.tcc"
>(code, addr, "NEGI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102186 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102189 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102193 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102196 "isa_tms320.tcc"
>
OpNEGI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102201 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102205 "isa_tms320.tcc"
>::OpNEGI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102209 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102213 "isa_tms320.tcc"
>(code, addr, "NEGI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102225 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102228 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102232 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102235 "isa_tms320.tcc"
>
OpNEGI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102240 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102244 "isa_tms320.tcc"
>::OpNEGI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102248 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102252 "isa_tms320.tcc"
>(code, addr, "NEGI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102262 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102265 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102269 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102272 "isa_tms320.tcc"
>
OpNORM_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102277 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102281 "isa_tms320.tcc"
>::OpNORM_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102285 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102289 "isa_tms320.tcc"
>(code, addr, "NORM_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102299 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102302 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102306 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102309 "isa_tms320.tcc"
>
OpNORM_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102314 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102318 "isa_tms320.tcc"
>::OpNORM_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102322 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102326 "isa_tms320.tcc"
>(code, addr, "NORM_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102336 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102339 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102343 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102346 "isa_tms320.tcc"
>
OpNORM_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102351 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102355 "isa_tms320.tcc"
>::OpNORM_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102359 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102363 "isa_tms320.tcc"
>(code, addr, "NORM_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102375 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102382 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102385 "isa_tms320.tcc"
>
OpNORM_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102390 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102394 "isa_tms320.tcc"
>::OpNORM_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102398 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102402 "isa_tms320.tcc"
>(code, addr, "NORM_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102412 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102415 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102419 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102422 "isa_tms320.tcc"
>
OpNOT_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102427 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102431 "isa_tms320.tcc"
>::OpNOT_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102435 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102439 "isa_tms320.tcc"
>(code, addr, "NOT_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102449 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102452 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102456 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102459 "isa_tms320.tcc"
>
OpNOT_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102464 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102468 "isa_tms320.tcc"
>::OpNOT_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102476 "isa_tms320.tcc"
>(code, addr, "NOT_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102486 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102489 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102493 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102496 "isa_tms320.tcc"
>
OpNOT_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102501 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102505 "isa_tms320.tcc"
>::OpNOT_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102509 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102513 "isa_tms320.tcc"
>(code, addr, "NOT_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102525 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102528 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102532 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102535 "isa_tms320.tcc"
>
OpNOT_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102540 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102544 "isa_tms320.tcc"
>::OpNOT_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102548 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102552 "isa_tms320.tcc"
>(code, addr, "NOT_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102562 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102565 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102569 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102572 "isa_tms320.tcc"
>
OpOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102577 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102581 "isa_tms320.tcc"
>::OpOR_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102585 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102589 "isa_tms320.tcc"
>(code, addr, "OR_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102599 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102602 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102606 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102609 "isa_tms320.tcc"
>
OpOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102614 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102618 "isa_tms320.tcc"
>::OpOR_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102622 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102626 "isa_tms320.tcc"
>(code, addr, "OR_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102636 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102639 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102643 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102646 "isa_tms320.tcc"
>
OpOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102651 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102655 "isa_tms320.tcc"
>::OpOR_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102659 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102663 "isa_tms320.tcc"
>(code, addr, "OR_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102675 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102678 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102682 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102685 "isa_tms320.tcc"
>
OpOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102690 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102694 "isa_tms320.tcc"
>::OpOR_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102698 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102702 "isa_tms320.tcc"
>(code, addr, "OR_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102712 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102719 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102722 "isa_tms320.tcc"
>
OpRND_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 102727 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102731 "isa_tms320.tcc"
>::OpRND_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102735 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102739 "isa_tms320.tcc"
>(code, addr, "RND_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102749 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102752 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102756 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102759 "isa_tms320.tcc"
>
OpRND_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102768 "isa_tms320.tcc"
>::OpRND_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102772 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102776 "isa_tms320.tcc"
>(code, addr, "RND_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102786 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102789 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102793 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102796 "isa_tms320.tcc"
>
OpRND_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 102801 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102805 "isa_tms320.tcc"
>::OpRND_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102809 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102813 "isa_tms320.tcc"
>(code, addr, "RND_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102825 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102828 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102832 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102835 "isa_tms320.tcc"
>
OpRND_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 102840 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102844 "isa_tms320.tcc"
>::OpRND_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102848 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102852 "isa_tms320.tcc"
>(code, addr, "RND_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102862 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102865 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102869 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102872 "isa_tms320.tcc"
>
OpROL<
#line 45 "isa/tms320.isa"
CONFIG
#line 102877 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102881 "isa_tms320.tcc"
>::OpROL(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102885 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102889 "isa_tms320.tcc"
>(code, addr, "ROL")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102898 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102901 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102905 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102908 "isa_tms320.tcc"
>
OpROLC<
#line 45 "isa/tms320.isa"
CONFIG
#line 102913 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102917 "isa_tms320.tcc"
>::OpROLC(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102925 "isa_tms320.tcc"
>(code, addr, "ROLC")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102934 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102937 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102941 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102944 "isa_tms320.tcc"
>
OpROR<
#line 45 "isa/tms320.isa"
CONFIG
#line 102949 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102953 "isa_tms320.tcc"
>::OpROR(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102957 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102961 "isa_tms320.tcc"
>(code, addr, "ROR")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 102970 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 102973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 102977 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 102980 "isa_tms320.tcc"
>
OpRORC<
#line 45 "isa/tms320.isa"
CONFIG
#line 102985 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102989 "isa_tms320.tcc"
>::OpRORC(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 102993 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 102997 "isa_tms320.tcc"
>(code, addr, "RORC")
{
	dst = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103006 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103009 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103013 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103016 "isa_tms320.tcc"
>
OpSUBB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103021 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103025 "isa_tms320.tcc"
>::OpSUBB_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103029 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103033 "isa_tms320.tcc"
>(code, addr, "SUBB_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103043 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103046 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103050 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103053 "isa_tms320.tcc"
>
OpSUBB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103058 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103062 "isa_tms320.tcc"
>::OpSUBB_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103066 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103070 "isa_tms320.tcc"
>(code, addr, "SUBB_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103080 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103083 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103090 "isa_tms320.tcc"
>
OpSUBB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103095 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103099 "isa_tms320.tcc"
>::OpSUBB_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103103 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103107 "isa_tms320.tcc"
>(code, addr, "SUBB_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103119 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103122 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103126 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103129 "isa_tms320.tcc"
>
OpSUBB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103134 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103138 "isa_tms320.tcc"
>::OpSUBB_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103142 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103146 "isa_tms320.tcc"
>(code, addr, "SUBB_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103156 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103159 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103163 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103166 "isa_tms320.tcc"
>
OpSUBC_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103175 "isa_tms320.tcc"
>::OpSUBC_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103179 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103183 "isa_tms320.tcc"
>(code, addr, "SUBC_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103193 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103196 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103200 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103203 "isa_tms320.tcc"
>
OpSUBC_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103208 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103212 "isa_tms320.tcc"
>::OpSUBC_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103216 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103220 "isa_tms320.tcc"
>(code, addr, "SUBC_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103230 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103233 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103237 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103240 "isa_tms320.tcc"
>
OpSUBC_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103245 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103249 "isa_tms320.tcc"
>::OpSUBC_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103253 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103257 "isa_tms320.tcc"
>(code, addr, "SUBC_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103269 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103272 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103279 "isa_tms320.tcc"
>
OpSUBC_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103284 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103288 "isa_tms320.tcc"
>::OpSUBC_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103292 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103296 "isa_tms320.tcc"
>(code, addr, "SUBC_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103306 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103309 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103313 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103316 "isa_tms320.tcc"
>
OpSUBF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103321 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103325 "isa_tms320.tcc"
>::OpSUBF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103329 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103333 "isa_tms320.tcc"
>(code, addr, "SUBF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103343 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103346 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103350 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103353 "isa_tms320.tcc"
>
OpSUBF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103358 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103362 "isa_tms320.tcc"
>::OpSUBF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103366 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103370 "isa_tms320.tcc"
>(code, addr, "SUBF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103380 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103383 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103387 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103390 "isa_tms320.tcc"
>
OpSUBF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103395 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103399 "isa_tms320.tcc"
>::OpSUBF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103403 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103407 "isa_tms320.tcc"
>(code, addr, "SUBF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103419 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103422 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103426 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103429 "isa_tms320.tcc"
>
OpSUBF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103434 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103438 "isa_tms320.tcc"
>::OpSUBF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103442 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103446 "isa_tms320.tcc"
>(code, addr, "SUBF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103456 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103459 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103463 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103466 "isa_tms320.tcc"
>
OpSUBI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103471 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103475 "isa_tms320.tcc"
>::OpSUBI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103479 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103483 "isa_tms320.tcc"
>(code, addr, "SUBI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103493 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103500 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103503 "isa_tms320.tcc"
>
OpSUBI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103508 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103512 "isa_tms320.tcc"
>::OpSUBI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103516 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103520 "isa_tms320.tcc"
>(code, addr, "SUBI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103530 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103533 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103537 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103540 "isa_tms320.tcc"
>
OpSUBI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103545 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103549 "isa_tms320.tcc"
>::OpSUBI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103553 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103557 "isa_tms320.tcc"
>(code, addr, "SUBI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103569 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103572 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103576 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103579 "isa_tms320.tcc"
>
OpSUBI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103584 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103588 "isa_tms320.tcc"
>::OpSUBI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103596 "isa_tms320.tcc"
>(code, addr, "SUBI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103606 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103609 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103613 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103616 "isa_tms320.tcc"
>
OpSUBRB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103621 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103625 "isa_tms320.tcc"
>::OpSUBRB_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103629 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103633 "isa_tms320.tcc"
>(code, addr, "SUBRB_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103643 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103646 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103650 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103653 "isa_tms320.tcc"
>
OpSUBRB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103662 "isa_tms320.tcc"
>::OpSUBRB_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103666 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103670 "isa_tms320.tcc"
>(code, addr, "SUBRB_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103680 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103683 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103687 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103690 "isa_tms320.tcc"
>
OpSUBRB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103695 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103699 "isa_tms320.tcc"
>::OpSUBRB_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103703 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103707 "isa_tms320.tcc"
>(code, addr, "SUBRB_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103719 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103722 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103726 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103729 "isa_tms320.tcc"
>
OpSUBRB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103734 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103738 "isa_tms320.tcc"
>::OpSUBRB_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103742 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103746 "isa_tms320.tcc"
>(code, addr, "SUBRB_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103756 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103759 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103766 "isa_tms320.tcc"
>
OpSUBRF_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103771 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103775 "isa_tms320.tcc"
>::OpSUBRF_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103779 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103783 "isa_tms320.tcc"
>(code, addr, "SUBRF_reg")
{
	dst = ((code >> 16) & 0x7);
	src = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103793 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103796 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103800 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103803 "isa_tms320.tcc"
>
OpSUBRF_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103812 "isa_tms320.tcc"
>::OpSUBRF_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103816 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103820 "isa_tms320.tcc"
>(code, addr, "SUBRF_dir")
{
	dst = ((code >> 16) & 0x7);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103830 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103833 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103837 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103840 "isa_tms320.tcc"
>
OpSUBRF_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103845 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103849 "isa_tms320.tcc"
>::OpSUBRF_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103853 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103857 "isa_tms320.tcc"
>(code, addr, "SUBRF_indir")
{
	dst = ((code >> 16) & 0x7);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103869 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103872 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103876 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103879 "isa_tms320.tcc"
>
OpSUBRF_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 103884 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103888 "isa_tms320.tcc"
>::OpSUBRF_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103892 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103896 "isa_tms320.tcc"
>(code, addr, "SUBRF_imm")
{
	dst = ((code >> 16) & 0x7);
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103906 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103909 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103913 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103916 "isa_tms320.tcc"
>
OpSUBRI_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 103921 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103925 "isa_tms320.tcc"
>::OpSUBRI_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103929 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103933 "isa_tms320.tcc"
>(code, addr, "SUBRI_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103943 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103946 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103950 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103953 "isa_tms320.tcc"
>
OpSUBRI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103958 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103962 "isa_tms320.tcc"
>::OpSUBRI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 103966 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103970 "isa_tms320.tcc"
>(code, addr, "SUBRI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 103980 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 103983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 103987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 103990 "isa_tms320.tcc"
>
OpSUBRI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 103995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 103999 "isa_tms320.tcc"
>::OpSUBRI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104007 "isa_tms320.tcc"
>(code, addr, "SUBRI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104019 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104022 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104026 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104029 "isa_tms320.tcc"
>
OpSUBRI_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 104034 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104038 "isa_tms320.tcc"
>::OpSUBRI_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104042 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104046 "isa_tms320.tcc"
>(code, addr, "SUBRI_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104056 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104059 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104063 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104066 "isa_tms320.tcc"
>
OpTSTB_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104071 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104075 "isa_tms320.tcc"
>::OpTSTB_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104079 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104083 "isa_tms320.tcc"
>(code, addr, "TSTB_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104093 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104096 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104100 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104103 "isa_tms320.tcc"
>
OpTSTB_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104108 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104112 "isa_tms320.tcc"
>::OpTSTB_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104116 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104120 "isa_tms320.tcc"
>(code, addr, "TSTB_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104130 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104133 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104137 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104140 "isa_tms320.tcc"
>
OpTSTB_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104145 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104149 "isa_tms320.tcc"
>::OpTSTB_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104153 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104157 "isa_tms320.tcc"
>(code, addr, "TSTB_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104169 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104172 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104176 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104179 "isa_tms320.tcc"
>
OpTSTB_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 104184 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104188 "isa_tms320.tcc"
>::OpTSTB_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104192 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104196 "isa_tms320.tcc"
>(code, addr, "TSTB_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104206 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104209 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104213 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104216 "isa_tms320.tcc"
>
OpXOR_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104221 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104225 "isa_tms320.tcc"
>::OpXOR_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104229 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104233 "isa_tms320.tcc"
>(code, addr, "XOR_reg")
{
	dst = ((code >> 16) & 0x1f);
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104243 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104246 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104250 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104253 "isa_tms320.tcc"
>
OpXOR_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104258 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104262 "isa_tms320.tcc"
>::OpXOR_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104266 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104270 "isa_tms320.tcc"
>(code, addr, "XOR_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104280 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104283 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104287 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104290 "isa_tms320.tcc"
>
OpXOR_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104295 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104299 "isa_tms320.tcc"
>::OpXOR_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104303 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104307 "isa_tms320.tcc"
>(code, addr, "XOR_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104319 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104322 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104326 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104329 "isa_tms320.tcc"
>
OpXOR_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 104334 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104338 "isa_tms320.tcc"
>::OpXOR_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104342 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104346 "isa_tms320.tcc"
>(code, addr, "XOR_imm")
{
	dst = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104356 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104359 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104363 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104366 "isa_tms320.tcc"
>
OpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104371 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104375 "isa_tms320.tcc"
>::OpADDC3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104383 "isa_tms320.tcc"
>(code, addr, "ADDC3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104394 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104397 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104401 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104404 "isa_tms320.tcc"
>
OpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104409 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104413 "isa_tms320.tcc"
>::OpADDC3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104417 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104421 "isa_tms320.tcc"
>(code, addr, "ADDC3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104433 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104436 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104443 "isa_tms320.tcc"
>
OpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104448 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104452 "isa_tms320.tcc"
>::OpADDC3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104456 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104460 "isa_tms320.tcc"
>(code, addr, "ADDC3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104472 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104475 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104479 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104482 "isa_tms320.tcc"
>
OpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104491 "isa_tms320.tcc"
>::OpADDC3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104495 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104499 "isa_tms320.tcc"
>(code, addr, "ADDC3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104512 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104519 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104522 "isa_tms320.tcc"
>
OpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104531 "isa_tms320.tcc"
>::OpADDF3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104539 "isa_tms320.tcc"
>(code, addr, "ADDF3_reg_reg")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104550 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104553 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104557 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104560 "isa_tms320.tcc"
>
OpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104565 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104569 "isa_tms320.tcc"
>::OpADDF3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104573 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104577 "isa_tms320.tcc"
>(code, addr, "ADDF3_indir_reg")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104589 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104599 "isa_tms320.tcc"
>
OpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104604 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104608 "isa_tms320.tcc"
>::OpADDF3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104612 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104616 "isa_tms320.tcc"
>(code, addr, "ADDF3_reg_indir")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104628 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104631 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104635 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104638 "isa_tms320.tcc"
>
OpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104647 "isa_tms320.tcc"
>::OpADDF3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104651 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104655 "isa_tms320.tcc"
>(code, addr, "ADDF3_indir_indir")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104668 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104671 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104675 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104678 "isa_tms320.tcc"
>
OpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104683 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104687 "isa_tms320.tcc"
>::OpADDI3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104691 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104695 "isa_tms320.tcc"
>(code, addr, "ADDI3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104706 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104709 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104713 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104716 "isa_tms320.tcc"
>
OpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104721 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104725 "isa_tms320.tcc"
>::OpADDI3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104729 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104733 "isa_tms320.tcc"
>(code, addr, "ADDI3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104745 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104748 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104752 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104755 "isa_tms320.tcc"
>
OpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104760 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104764 "isa_tms320.tcc"
>::OpADDI3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104768 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104772 "isa_tms320.tcc"
>(code, addr, "ADDI3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104784 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104787 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104791 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104794 "isa_tms320.tcc"
>
OpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104799 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104803 "isa_tms320.tcc"
>::OpADDI3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104807 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104811 "isa_tms320.tcc"
>(code, addr, "ADDI3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104824 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104827 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104831 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104834 "isa_tms320.tcc"
>
OpAND3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104839 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104843 "isa_tms320.tcc"
>::OpAND3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104851 "isa_tms320.tcc"
>(code, addr, "AND3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104862 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104865 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104869 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104872 "isa_tms320.tcc"
>
OpAND3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104877 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104881 "isa_tms320.tcc"
>::OpAND3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104885 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104889 "isa_tms320.tcc"
>(code, addr, "AND3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104901 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104904 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104908 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104911 "isa_tms320.tcc"
>
OpAND3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104916 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104920 "isa_tms320.tcc"
>::OpAND3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104924 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104928 "isa_tms320.tcc"
>(code, addr, "AND3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104940 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104943 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104947 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104950 "isa_tms320.tcc"
>
OpAND3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 104955 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104959 "isa_tms320.tcc"
>::OpAND3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 104963 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104967 "isa_tms320.tcc"
>(code, addr, "AND3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 104980 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 104983 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 104987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 104990 "isa_tms320.tcc"
>
OpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 104995 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 104999 "isa_tms320.tcc"
>::OpANDN3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105003 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105007 "isa_tms320.tcc"
>(code, addr, "ANDN3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105018 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105021 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105025 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105028 "isa_tms320.tcc"
>
OpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105033 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105037 "isa_tms320.tcc"
>::OpANDN3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105041 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105045 "isa_tms320.tcc"
>(code, addr, "ANDN3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105057 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105060 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105064 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105067 "isa_tms320.tcc"
>
OpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105072 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105076 "isa_tms320.tcc"
>::OpANDN3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105080 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105084 "isa_tms320.tcc"
>(code, addr, "ANDN3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105096 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105099 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105103 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105106 "isa_tms320.tcc"
>
OpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105111 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105115 "isa_tms320.tcc"
>::OpANDN3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105119 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105123 "isa_tms320.tcc"
>(code, addr, "ANDN3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105136 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105139 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105143 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105146 "isa_tms320.tcc"
>
OpASH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105151 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105155 "isa_tms320.tcc"
>::OpASH3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105159 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105163 "isa_tms320.tcc"
>(code, addr, "ASH3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105174 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105177 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105181 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105184 "isa_tms320.tcc"
>
OpASH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105189 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105193 "isa_tms320.tcc"
>::OpASH3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105201 "isa_tms320.tcc"
>(code, addr, "ASH3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105213 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105216 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105220 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105223 "isa_tms320.tcc"
>
OpASH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105228 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105232 "isa_tms320.tcc"
>::OpASH3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105236 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105240 "isa_tms320.tcc"
>(code, addr, "ASH3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105252 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105255 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105259 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105262 "isa_tms320.tcc"
>
OpASH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105271 "isa_tms320.tcc"
>::OpASH3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105275 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105279 "isa_tms320.tcc"
>(code, addr, "ASH3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105292 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105295 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105299 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105302 "isa_tms320.tcc"
>
OpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105307 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105311 "isa_tms320.tcc"
>::OpCMPF3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105315 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105319 "isa_tms320.tcc"
>(code, addr, "CMPF3_reg_reg")
{
	src1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105329 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105332 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105336 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105339 "isa_tms320.tcc"
>
OpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105344 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105348 "isa_tms320.tcc"
>::OpCMPF3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105352 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105356 "isa_tms320.tcc"
>(code, addr, "CMPF3_indir_reg")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105367 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105370 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105374 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105377 "isa_tms320.tcc"
>
OpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105382 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105386 "isa_tms320.tcc"
>::OpCMPF3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105390 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105394 "isa_tms320.tcc"
>(code, addr, "CMPF3_reg_indir")
{
	src1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105405 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105408 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105412 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105415 "isa_tms320.tcc"
>
OpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105420 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105424 "isa_tms320.tcc"
>::OpCMPF3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105428 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105432 "isa_tms320.tcc"
>(code, addr, "CMPF3_indir_indir")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105444 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105447 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105451 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105454 "isa_tms320.tcc"
>
OpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105459 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105463 "isa_tms320.tcc"
>::OpCMPI3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105467 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105471 "isa_tms320.tcc"
>(code, addr, "CMPI3_reg_reg")
{
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105481 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105484 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105488 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105491 "isa_tms320.tcc"
>
OpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105496 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105500 "isa_tms320.tcc"
>::OpCMPI3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105504 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105508 "isa_tms320.tcc"
>(code, addr, "CMPI3_indir_reg")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105519 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105522 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105526 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105529 "isa_tms320.tcc"
>
OpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105534 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105538 "isa_tms320.tcc"
>::OpCMPI3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105542 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105546 "isa_tms320.tcc"
>(code, addr, "CMPI3_reg_indir")
{
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105557 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105560 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105564 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105567 "isa_tms320.tcc"
>
OpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105572 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105576 "isa_tms320.tcc"
>::OpCMPI3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105580 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105584 "isa_tms320.tcc"
>(code, addr, "CMPI3_indir_indir")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105596 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105599 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105603 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105606 "isa_tms320.tcc"
>
OpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105611 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105615 "isa_tms320.tcc"
>::OpLSH3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105619 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105623 "isa_tms320.tcc"
>(code, addr, "LSH3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105634 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105637 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105641 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105644 "isa_tms320.tcc"
>
OpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105649 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105653 "isa_tms320.tcc"
>::OpLSH3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105657 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105661 "isa_tms320.tcc"
>(code, addr, "LSH3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105673 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105676 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105680 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105683 "isa_tms320.tcc"
>
OpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105688 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105692 "isa_tms320.tcc"
>::OpLSH3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105696 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105700 "isa_tms320.tcc"
>(code, addr, "LSH3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105712 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105715 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105719 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105722 "isa_tms320.tcc"
>
OpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105727 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105731 "isa_tms320.tcc"
>::OpLSH3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105735 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105739 "isa_tms320.tcc"
>(code, addr, "LSH3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105752 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105755 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105759 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105762 "isa_tms320.tcc"
>
OpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105767 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105771 "isa_tms320.tcc"
>::OpMPYF3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105775 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105779 "isa_tms320.tcc"
>(code, addr, "MPYF3_reg_reg")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105790 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105793 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105797 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105800 "isa_tms320.tcc"
>
OpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105805 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105809 "isa_tms320.tcc"
>::OpMPYF3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105813 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105817 "isa_tms320.tcc"
>(code, addr, "MPYF3_indir_reg")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105829 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105832 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105836 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105839 "isa_tms320.tcc"
>
OpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105844 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105848 "isa_tms320.tcc"
>::OpMPYF3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105852 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105856 "isa_tms320.tcc"
>(code, addr, "MPYF3_reg_indir")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105868 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105871 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105875 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105878 "isa_tms320.tcc"
>
OpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 105883 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105887 "isa_tms320.tcc"
>::OpMPYF3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105891 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105895 "isa_tms320.tcc"
>(code, addr, "MPYF3_indir_indir")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105908 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105911 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105915 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105918 "isa_tms320.tcc"
>
OpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105923 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105927 "isa_tms320.tcc"
>::OpMPYI3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105931 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105935 "isa_tms320.tcc"
>(code, addr, "MPYI3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105946 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105949 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105953 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105956 "isa_tms320.tcc"
>
OpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 105961 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105965 "isa_tms320.tcc"
>::OpMPYI3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 105969 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 105973 "isa_tms320.tcc"
>(code, addr, "MPYI3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 105985 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 105988 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 105992 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 105995 "isa_tms320.tcc"
>
OpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106000 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106004 "isa_tms320.tcc"
>::OpMPYI3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106008 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106012 "isa_tms320.tcc"
>(code, addr, "MPYI3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106024 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106027 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106031 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106034 "isa_tms320.tcc"
>
OpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106039 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106043 "isa_tms320.tcc"
>::OpMPYI3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106047 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106051 "isa_tms320.tcc"
>(code, addr, "MPYI3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106064 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106067 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106071 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106074 "isa_tms320.tcc"
>
OpOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106079 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106083 "isa_tms320.tcc"
>::OpOR3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106087 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106091 "isa_tms320.tcc"
>(code, addr, "OR3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106102 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106105 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106109 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106112 "isa_tms320.tcc"
>
OpOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106117 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106121 "isa_tms320.tcc"
>::OpOR3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106125 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106129 "isa_tms320.tcc"
>(code, addr, "OR3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106141 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106144 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106148 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106151 "isa_tms320.tcc"
>
OpOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106156 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106160 "isa_tms320.tcc"
>::OpOR3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106164 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106168 "isa_tms320.tcc"
>(code, addr, "OR3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106180 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106183 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106187 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106190 "isa_tms320.tcc"
>
OpOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106195 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106199 "isa_tms320.tcc"
>::OpOR3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106203 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106207 "isa_tms320.tcc"
>(code, addr, "OR3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106220 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106223 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106227 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106230 "isa_tms320.tcc"
>
OpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106235 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106239 "isa_tms320.tcc"
>::OpSUBB3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106243 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106247 "isa_tms320.tcc"
>(code, addr, "SUBB3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106258 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106261 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106265 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106268 "isa_tms320.tcc"
>
OpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106273 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106277 "isa_tms320.tcc"
>::OpSUBB3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106281 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106285 "isa_tms320.tcc"
>(code, addr, "SUBB3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106297 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106300 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106304 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106307 "isa_tms320.tcc"
>
OpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106312 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106316 "isa_tms320.tcc"
>::OpSUBB3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106320 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106324 "isa_tms320.tcc"
>(code, addr, "SUBB3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106336 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106339 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106343 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106346 "isa_tms320.tcc"
>
OpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106351 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106355 "isa_tms320.tcc"
>::OpSUBB3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106359 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106363 "isa_tms320.tcc"
>(code, addr, "SUBB3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106383 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106386 "isa_tms320.tcc"
>
OpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106395 "isa_tms320.tcc"
>::OpSUBF3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106399 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106403 "isa_tms320.tcc"
>(code, addr, "SUBF3_reg_reg")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106414 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106417 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106421 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106424 "isa_tms320.tcc"
>
OpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106429 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106433 "isa_tms320.tcc"
>::OpSUBF3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106437 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106441 "isa_tms320.tcc"
>(code, addr, "SUBF3_indir_reg")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106453 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106456 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106460 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106463 "isa_tms320.tcc"
>
OpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106468 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106472 "isa_tms320.tcc"
>::OpSUBF3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106476 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106480 "isa_tms320.tcc"
>(code, addr, "SUBF3_reg_indir")
{
	dst = ((code >> 16) & 0x7);
	src1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106492 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106495 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106499 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106502 "isa_tms320.tcc"
>
OpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106507 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106511 "isa_tms320.tcc"
>::OpSUBF3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106519 "isa_tms320.tcc"
>(code, addr, "SUBF3_indir_indir")
{
	dst = ((code >> 16) & 0x7);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106532 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106539 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106542 "isa_tms320.tcc"
>
OpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106547 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106551 "isa_tms320.tcc"
>::OpSUBI3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106555 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106559 "isa_tms320.tcc"
>(code, addr, "SUBI3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106570 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106573 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106577 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106580 "isa_tms320.tcc"
>
OpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106585 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106589 "isa_tms320.tcc"
>::OpSUBI3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106593 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106597 "isa_tms320.tcc"
>(code, addr, "SUBI3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106609 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106612 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106616 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106619 "isa_tms320.tcc"
>
OpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106624 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106628 "isa_tms320.tcc"
>::OpSUBI3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106632 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106636 "isa_tms320.tcc"
>(code, addr, "SUBI3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106648 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106651 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106658 "isa_tms320.tcc"
>
OpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106667 "isa_tms320.tcc"
>::OpSUBI3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106671 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106675 "isa_tms320.tcc"
>(code, addr, "SUBI3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106688 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106691 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106695 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106698 "isa_tms320.tcc"
>
OpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106703 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106707 "isa_tms320.tcc"
>::OpTSTB3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106711 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106715 "isa_tms320.tcc"
>(code, addr, "TSTB3_reg_reg")
{
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106725 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106728 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106732 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106735 "isa_tms320.tcc"
>
OpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106740 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106744 "isa_tms320.tcc"
>::OpTSTB3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106748 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106752 "isa_tms320.tcc"
>(code, addr, "TSTB3_indir_reg")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106763 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106766 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106770 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106773 "isa_tms320.tcc"
>
OpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106778 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106782 "isa_tms320.tcc"
>::OpTSTB3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106786 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106790 "isa_tms320.tcc"
>(code, addr, "TSTB3_reg_indir")
{
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106801 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106811 "isa_tms320.tcc"
>
OpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106816 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106820 "isa_tms320.tcc"
>::OpTSTB3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106824 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106828 "isa_tms320.tcc"
>(code, addr, "TSTB3_indir_indir")
{
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106840 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106843 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106847 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106850 "isa_tms320.tcc"
>
OpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106855 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106859 "isa_tms320.tcc"
>::OpXOR3_reg_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106863 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106867 "isa_tms320.tcc"
>(code, addr, "XOR3_reg_reg")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106878 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106881 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106885 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106888 "isa_tms320.tcc"
>
OpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 106893 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106897 "isa_tms320.tcc"
>::OpXOR3_indir_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106901 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106905 "isa_tms320.tcc"
>(code, addr, "XOR3_indir_reg")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106917 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106920 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106924 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106927 "isa_tms320.tcc"
>
OpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106932 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106936 "isa_tms320.tcc"
>::OpXOR3_reg_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106944 "isa_tms320.tcc"
>(code, addr, "XOR3_reg_indir")
{
	dst = ((code >> 16) & 0x1f);
	src1 = ((code >> 8) & 0x1f);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106956 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106959 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 106963 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 106966 "isa_tms320.tcc"
>
OpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 106971 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106975 "isa_tms320.tcc"
>::OpXOR3_indir_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 106979 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 106983 "isa_tms320.tcc"
>(code, addr, "XOR3_indir_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod1 = ((code >> 11) & 0x1f);
	ar1 = ((code >> 8) & 0x7);
	mod2 = ((code >> 3) & 0x1f);
	ar2 = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 106996 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 106999 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107003 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107006 "isa_tms320.tcc"
>
OpBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107011 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107015 "isa_tms320.tcc"
>::OpBcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107019 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107023 "isa_tms320.tcc"
>(code, addr, "Bcond_reg")
{
	cond = ((code >> 16) & 0x1f);
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107033 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107036 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107040 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107043 "isa_tms320.tcc"
>
OpBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 107048 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107052 "isa_tms320.tcc"
>::OpBcond_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107056 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107060 "isa_tms320.tcc"
>(code, addr, "Bcond_disp")
{
	cond = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107070 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107073 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107077 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107080 "isa_tms320.tcc"
>
OpBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107085 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107089 "isa_tms320.tcc"
>::OpBcondD_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107093 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107097 "isa_tms320.tcc"
>(code, addr, "BcondD_reg")
{
	cond = ((code >> 16) & 0x1f);
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107107 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107110 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107114 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107117 "isa_tms320.tcc"
>
OpBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 107122 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107126 "isa_tms320.tcc"
>::OpBcondD_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107130 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107134 "isa_tms320.tcc"
>(code, addr, "BcondD_disp")
{
	cond = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107144 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107147 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107151 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107154 "isa_tms320.tcc"
>
OpBR<
#line 45 "isa/tms320.isa"
CONFIG
#line 107159 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107163 "isa_tms320.tcc"
>::OpBR(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107167 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107171 "isa_tms320.tcc"
>(code, addr, "BR")
{
	src = ((code >> 0) & 0xffffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107180 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107183 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107187 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107190 "isa_tms320.tcc"
>
OpBRD<
#line 45 "isa/tms320.isa"
CONFIG
#line 107195 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107199 "isa_tms320.tcc"
>::OpBRD(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107203 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107207 "isa_tms320.tcc"
>(code, addr, "BRD")
{
	src = ((code >> 0) & 0xffffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107219 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107223 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107226 "isa_tms320.tcc"
>
OpCALL<
#line 45 "isa/tms320.isa"
CONFIG
#line 107231 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107235 "isa_tms320.tcc"
>::OpCALL(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107239 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107243 "isa_tms320.tcc"
>(code, addr, "CALL")
{
	src = ((code >> 0) & 0xffffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107252 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107255 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107259 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107262 "isa_tms320.tcc"
>
OpCALLcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107271 "isa_tms320.tcc"
>::OpCALLcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107275 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107279 "isa_tms320.tcc"
>(code, addr, "CALLcond_reg")
{
	cond = ((code >> 16) & 0x1f);
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107289 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107292 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107296 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107299 "isa_tms320.tcc"
>
OpCALLcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 107304 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107308 "isa_tms320.tcc"
>::OpCALLcond_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107312 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107316 "isa_tms320.tcc"
>(code, addr, "CALLcond_disp")
{
	cond = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107326 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107329 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107333 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107336 "isa_tms320.tcc"
>
OpDBcond_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107341 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107345 "isa_tms320.tcc"
>::OpDBcond_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107349 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107353 "isa_tms320.tcc"
>(code, addr, "DBcond_reg")
{
	ar = ((code >> 22) & 0x7);
	cond = ((code >> 16) & 0x1f);
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107364 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107367 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107371 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107374 "isa_tms320.tcc"
>
OpDBcond_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 107379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107383 "isa_tms320.tcc"
>::OpDBcond_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107387 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107391 "isa_tms320.tcc"
>(code, addr, "DBcond_disp")
{
	ar = ((code >> 22) & 0x7);
	cond = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107402 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107405 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107409 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107412 "isa_tms320.tcc"
>
OpDBcondD_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107417 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107421 "isa_tms320.tcc"
>::OpDBcondD_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107425 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107429 "isa_tms320.tcc"
>(code, addr, "DBcondD_reg")
{
	ar = ((code >> 22) & 0x7);
	cond = ((code >> 16) & 0x1f);
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107440 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107443 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107447 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107450 "isa_tms320.tcc"
>
OpDBcondD_disp<
#line 45 "isa/tms320.isa"
CONFIG
#line 107455 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107459 "isa_tms320.tcc"
>::OpDBcondD_disp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107463 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107467 "isa_tms320.tcc"
>(code, addr, "DBcondD_disp")
{
	ar = ((code >> 22) & 0x7);
	cond = ((code >> 16) & 0x1f);
	imm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107478 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107481 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107485 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107488 "isa_tms320.tcc"
>
OpIACK_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107493 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107497 "isa_tms320.tcc"
>::OpIACK_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107501 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107505 "isa_tms320.tcc"
>(code, addr, "IACK_dir")
{
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107514 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107517 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107521 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107524 "isa_tms320.tcc"
>
OpIACK_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107529 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107533 "isa_tms320.tcc"
>::OpIACK_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107537 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107541 "isa_tms320.tcc"
>(code, addr, "IACK_indir")
{
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107552 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107555 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107559 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107562 "isa_tms320.tcc"
>
OpIDLE<
#line 45 "isa/tms320.isa"
CONFIG
#line 107567 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107571 "isa_tms320.tcc"
>::OpIDLE(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107575 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107579 "isa_tms320.tcc"
>(code, addr, "IDLE")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 107587 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107590 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107594 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107597 "isa_tms320.tcc"
>
OpNOP_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107602 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107606 "isa_tms320.tcc"
>::OpNOP_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107610 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107614 "isa_tms320.tcc"
>(code, addr, "NOP_reg")
{
	reg = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107623 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107626 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107630 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107633 "isa_tms320.tcc"
>
OpNOP_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107642 "isa_tms320.tcc"
>::OpNOP_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107646 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107650 "isa_tms320.tcc"
>(code, addr, "NOP_indir")
{
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107661 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107664 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107668 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107671 "isa_tms320.tcc"
>
OpRETIcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 107676 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107680 "isa_tms320.tcc"
>::OpRETIcond(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107684 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107688 "isa_tms320.tcc"
>(code, addr, "RETIcond")
{
	cond = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107697 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107700 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107704 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107707 "isa_tms320.tcc"
>
OpRETScond<
#line 45 "isa/tms320.isa"
CONFIG
#line 107712 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107716 "isa_tms320.tcc"
>::OpRETScond(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107720 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107724 "isa_tms320.tcc"
>(code, addr, "RETScond")
{
	cond = ((code >> 16) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107733 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107736 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107740 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107743 "isa_tms320.tcc"
>
OpRPTB<
#line 45 "isa/tms320.isa"
CONFIG
#line 107748 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107752 "isa_tms320.tcc"
>::OpRPTB(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107756 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107760 "isa_tms320.tcc"
>(code, addr, "RPTB")
{
	src = ((code >> 0) & 0xffffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107769 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107772 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107776 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107779 "isa_tms320.tcc"
>
OpRPTS_reg<
#line 45 "isa/tms320.isa"
CONFIG
#line 107784 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107788 "isa_tms320.tcc"
>::OpRPTS_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107792 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107796 "isa_tms320.tcc"
>(code, addr, "RPTS_reg")
{
	src = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107805 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107808 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107812 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107815 "isa_tms320.tcc"
>
OpRPTS_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107820 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107824 "isa_tms320.tcc"
>::OpRPTS_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107828 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107832 "isa_tms320.tcc"
>(code, addr, "RPTS_dir")
{
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107841 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107844 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107848 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107851 "isa_tms320.tcc"
>
OpRPTS_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 107856 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107860 "isa_tms320.tcc"
>::OpRPTS_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107864 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107868 "isa_tms320.tcc"
>(code, addr, "RPTS_indir")
{
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107879 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107882 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107886 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107889 "isa_tms320.tcc"
>
OpRPTS_imm<
#line 45 "isa/tms320.isa"
CONFIG
#line 107894 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107898 "isa_tms320.tcc"
>::OpRPTS_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107902 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107906 "isa_tms320.tcc"
>(code, addr, "RPTS_imm")
{
	imm = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107915 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107918 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107922 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107925 "isa_tms320.tcc"
>
OpSWI<
#line 45 "isa/tms320.isa"
CONFIG
#line 107930 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107934 "isa_tms320.tcc"
>::OpSWI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107938 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107942 "isa_tms320.tcc"
>(code, addr, "SWI")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 107950 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107953 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107957 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107960 "isa_tms320.tcc"
>
OpTRAPcond<
#line 45 "isa/tms320.isa"
CONFIG
#line 107965 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107969 "isa_tms320.tcc"
>::OpTRAPcond(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 107973 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 107977 "isa_tms320.tcc"
>(code, addr, "TRAPcond")
{
	cond = ((code >> 16) & 0x1f);
	n = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 107987 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 107990 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 107994 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 107997 "isa_tms320.tcc"
>
OpIDLE2<
#line 45 "isa/tms320.isa"
CONFIG
#line 108002 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108006 "isa_tms320.tcc"
>::OpIDLE2(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108010 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108014 "isa_tms320.tcc"
>(code, addr, "IDLE2")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 108022 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108025 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108029 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108032 "isa_tms320.tcc"
>
OpLOPOWER<
#line 45 "isa/tms320.isa"
CONFIG
#line 108037 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108041 "isa_tms320.tcc"
>::OpLOPOWER(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108045 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108049 "isa_tms320.tcc"
>(code, addr, "LOPOWER")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 108057 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108060 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108064 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108067 "isa_tms320.tcc"
>
OpMAXSPEED<
#line 45 "isa/tms320.isa"
CONFIG
#line 108072 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108076 "isa_tms320.tcc"
>::OpMAXSPEED(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108080 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108084 "isa_tms320.tcc"
>(code, addr, "MAXSPEED")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 108092 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108095 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108099 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108102 "isa_tms320.tcc"
>
OpLDFI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108107 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108111 "isa_tms320.tcc"
>::OpLDFI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108115 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108119 "isa_tms320.tcc"
>(code, addr, "LDFI_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108129 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108132 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108136 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108139 "isa_tms320.tcc"
>
OpLDFI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108144 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108148 "isa_tms320.tcc"
>::OpLDFI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108152 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108156 "isa_tms320.tcc"
>(code, addr, "LDFI_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108178 "isa_tms320.tcc"
>
OpLDII_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108183 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108187 "isa_tms320.tcc"
>::OpLDII_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108191 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108195 "isa_tms320.tcc"
>(code, addr, "LDII_dir")
{
	dst = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108205 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108208 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108212 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108215 "isa_tms320.tcc"
>
OpLDII_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108220 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108224 "isa_tms320.tcc"
>::OpLDII_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108228 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108232 "isa_tms320.tcc"
>(code, addr, "LDII_indir")
{
	dst = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108244 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108247 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108251 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108254 "isa_tms320.tcc"
>
OpSIGI<
#line 45 "isa/tms320.isa"
CONFIG
#line 108259 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108263 "isa_tms320.tcc"
>::OpSIGI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108267 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108271 "isa_tms320.tcc"
>(code, addr, "SIGI")
{
}

template <
#line 45 "isa/tms320.isa"
class
#line 108279 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108282 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108286 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108289 "isa_tms320.tcc"
>
OpSTFI_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108294 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108298 "isa_tms320.tcc"
>::OpSTFI_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108302 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108306 "isa_tms320.tcc"
>(code, addr, "STFI_dir")
{
	src = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108316 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108319 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108323 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108326 "isa_tms320.tcc"
>
OpSTFI_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108331 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108335 "isa_tms320.tcc"
>::OpSTFI_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108339 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108343 "isa_tms320.tcc"
>(code, addr, "STFI_indir")
{
	src = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108355 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108358 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108362 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108365 "isa_tms320.tcc"
>
OpSTII_dir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108370 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108374 "isa_tms320.tcc"
>::OpSTII_dir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108378 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108382 "isa_tms320.tcc"
>(code, addr, "STII_dir")
{
	src = ((code >> 16) & 0x1f);
	direct = ((code >> 0) & 0xffff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108392 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108395 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108399 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108402 "isa_tms320.tcc"
>
OpSTII_indir<
#line 45 "isa/tms320.isa"
CONFIG
#line 108407 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108411 "isa_tms320.tcc"
>::OpSTII_indir(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108415 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108419 "isa_tms320.tcc"
>(code, addr, "STII_indir")
{
	src = ((code >> 16) & 0x1f);
	mod = ((code >> 11) & 0x1f);
	ar = ((code >> 8) & 0x7);
	disp = ((code >> 0) & 0xff);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108431 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108434 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108438 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108441 "isa_tms320.tcc"
>
OpABSF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 108446 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108450 "isa_tms320.tcc"
>::OpABSF_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108454 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108458 "isa_tms320.tcc"
>(code, addr, "ABSF_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108472 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108475 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108479 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108482 "isa_tms320.tcc"
>
OpABSF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 108487 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108491 "isa_tms320.tcc"
>::OpABSF_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108495 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108499 "isa_tms320.tcc"
>(code, addr, "ABSF_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108512 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108515 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108519 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108522 "isa_tms320.tcc"
>
OpABSI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 108527 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108531 "isa_tms320.tcc"
>::OpABSI_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108535 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108539 "isa_tms320.tcc"
>(code, addr, "ABSI_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108553 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108556 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108560 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108563 "isa_tms320.tcc"
>
OpABSI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 108568 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108572 "isa_tms320.tcc"
>::OpABSI_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108576 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108580 "isa_tms320.tcc"
>(code, addr, "ABSI_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108593 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108596 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108600 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108603 "isa_tms320.tcc"
>
OpADDF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 108608 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108612 "isa_tms320.tcc"
>::OpADDF3_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108616 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108620 "isa_tms320.tcc"
>(code, addr, "ADDF3_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108635 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108638 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108642 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108645 "isa_tms320.tcc"
>
OpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 108650 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108654 "isa_tms320.tcc"
>::OpADDF3_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108662 "isa_tms320.tcc"
>(code, addr, "ADDF3_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108676 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108679 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108683 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108686 "isa_tms320.tcc"
>
OpADDI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 108691 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108695 "isa_tms320.tcc"
>::OpADDI3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108699 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108703 "isa_tms320.tcc"
>(code, addr, "ADDI3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108718 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108721 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108725 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108728 "isa_tms320.tcc"
>
OpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 108733 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108737 "isa_tms320.tcc"
>::OpADDI3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108741 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108745 "isa_tms320.tcc"
>(code, addr, "ADDI3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108759 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108762 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108766 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108769 "isa_tms320.tcc"
>
OpAND3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 108774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108778 "isa_tms320.tcc"
>::OpAND3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108782 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108786 "isa_tms320.tcc"
>(code, addr, "AND3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108801 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108811 "isa_tms320.tcc"
>
OpAND3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 108816 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108820 "isa_tms320.tcc"
>::OpAND3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108824 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108828 "isa_tms320.tcc"
>(code, addr, "AND3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108842 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108845 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108849 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108852 "isa_tms320.tcc"
>
OpASH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 108857 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108861 "isa_tms320.tcc"
>::OpASH3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108865 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108869 "isa_tms320.tcc"
>(code, addr, "ASH3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	count = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108884 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108887 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108891 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108894 "isa_tms320.tcc"
>
OpASH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 108899 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108903 "isa_tms320.tcc"
>::OpASH3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108907 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108911 "isa_tms320.tcc"
>(code, addr, "ASH3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	count = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108925 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108932 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108935 "isa_tms320.tcc"
>
OpFIX_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 108940 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108944 "isa_tms320.tcc"
>::OpFIX_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108948 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108952 "isa_tms320.tcc"
>(code, addr, "FIX_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 108966 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 108969 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 108973 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 108976 "isa_tms320.tcc"
>
OpFIX_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 108981 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108985 "isa_tms320.tcc"
>::OpFIX_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 108989 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 108993 "isa_tms320.tcc"
>(code, addr, "FIX_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109006 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109009 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109013 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109016 "isa_tms320.tcc"
>
OpFLOAT_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 109021 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109025 "isa_tms320.tcc"
>::OpFLOAT_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109029 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109033 "isa_tms320.tcc"
>(code, addr, "FLOAT_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109047 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109050 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109054 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109057 "isa_tms320.tcc"
>
OpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109062 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109066 "isa_tms320.tcc"
>::OpFLOAT_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109070 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109074 "isa_tms320.tcc"
>(code, addr, "FLOAT_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109087 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109090 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109094 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109097 "isa_tms320.tcc"
>
OpLDF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 109102 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109106 "isa_tms320.tcc"
>::OpLDF_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109110 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109114 "isa_tms320.tcc"
>(code, addr, "LDF_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109128 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109131 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109135 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109138 "isa_tms320.tcc"
>
OpLDF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109143 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109147 "isa_tms320.tcc"
>::OpLDF_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109151 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109155 "isa_tms320.tcc"
>(code, addr, "LDF_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109168 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109171 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109175 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109178 "isa_tms320.tcc"
>
OpLDI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 109183 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109187 "isa_tms320.tcc"
>::OpLDI_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109191 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109195 "isa_tms320.tcc"
>(code, addr, "LDI_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109209 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109212 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109216 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109219 "isa_tms320.tcc"
>
OpLDI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109224 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109228 "isa_tms320.tcc"
>::OpLDI_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109232 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109236 "isa_tms320.tcc"
>(code, addr, "LDI_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109249 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109252 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109256 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109259 "isa_tms320.tcc"
>
OpLSH3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 109264 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109268 "isa_tms320.tcc"
>::OpLSH3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109272 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109276 "isa_tms320.tcc"
>(code, addr, "LSH3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	count = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109291 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109294 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109298 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109301 "isa_tms320.tcc"
>
OpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109306 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109310 "isa_tms320.tcc"
>::OpLSH3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109314 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109318 "isa_tms320.tcc"
>(code, addr, "LSH3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	count = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109332 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109335 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109339 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109342 "isa_tms320.tcc"
>
OpMPYF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 109347 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109351 "isa_tms320.tcc"
>::OpMPYF3_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109355 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109359 "isa_tms320.tcc"
>(code, addr, "MPYF3_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109374 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109377 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109381 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109384 "isa_tms320.tcc"
>
OpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109389 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109393 "isa_tms320.tcc"
>::OpMPYF3_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109397 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109401 "isa_tms320.tcc"
>(code, addr, "MPYF3_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109415 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109418 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109422 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109425 "isa_tms320.tcc"
>
OpMPYI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 109430 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109434 "isa_tms320.tcc"
>::OpMPYI3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109438 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109442 "isa_tms320.tcc"
>(code, addr, "MPYI3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109457 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109460 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109464 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109467 "isa_tms320.tcc"
>
OpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109472 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109476 "isa_tms320.tcc"
>::OpMPYI3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109480 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109484 "isa_tms320.tcc"
>(code, addr, "MPYI3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109498 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109501 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109505 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109508 "isa_tms320.tcc"
>
OpNEGF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 109513 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109517 "isa_tms320.tcc"
>::OpNEGF_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109521 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109525 "isa_tms320.tcc"
>(code, addr, "NEGF_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109539 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109542 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109546 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109549 "isa_tms320.tcc"
>
OpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109554 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109558 "isa_tms320.tcc"
>::OpNEGF_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109562 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109566 "isa_tms320.tcc"
>(code, addr, "NEGF_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109579 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109582 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109586 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109589 "isa_tms320.tcc"
>
OpNEGI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 109594 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109598 "isa_tms320.tcc"
>::OpNEGI_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109602 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109606 "isa_tms320.tcc"
>(code, addr, "NEGI_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109620 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109623 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109627 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109630 "isa_tms320.tcc"
>
OpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109635 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109639 "isa_tms320.tcc"
>::OpNEGI_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109643 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109647 "isa_tms320.tcc"
>(code, addr, "NEGI_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109660 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109663 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109667 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109670 "isa_tms320.tcc"
>
OpNOT_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 109675 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109679 "isa_tms320.tcc"
>::OpNOT_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109683 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109687 "isa_tms320.tcc"
>(code, addr, "NOT_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109701 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109704 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109708 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109711 "isa_tms320.tcc"
>
OpNOT_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109716 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109720 "isa_tms320.tcc"
>::OpNOT_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109724 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109728 "isa_tms320.tcc"
>(code, addr, "NOT_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109741 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109748 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109751 "isa_tms320.tcc"
>
OpOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 109756 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109760 "isa_tms320.tcc"
>::OpOR3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109764 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109768 "isa_tms320.tcc"
>(code, addr, "OR3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109783 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109786 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109790 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109793 "isa_tms320.tcc"
>
OpOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109798 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109802 "isa_tms320.tcc"
>::OpOR3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109806 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109810 "isa_tms320.tcc"
>(code, addr, "OR3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109824 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109827 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109831 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109834 "isa_tms320.tcc"
>
OpSTF_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 109839 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109843 "isa_tms320.tcc"
>::OpSTF_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109847 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109851 "isa_tms320.tcc"
>(code, addr, "STF_STF")
{
	src2 = ((code >> 22) & 0x7);
	src1 = ((code >> 16) & 0x7);
	d1_mod = ((code >> 11) & 0x1f);
	d1_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109865 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109868 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109872 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109875 "isa_tms320.tcc"
>
OpSTF_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109880 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109884 "isa_tms320.tcc"
>::OpSTF_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109888 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109892 "isa_tms320.tcc"
>(code, addr, "STF_STF_ext")
{
	src2 = ((code >> 22) & 0x7);
	src1 = ((code >> 16) & 0x7);
	d1_mod = ((code >> 11) & 0x1f);
	d1_ar = ((code >> 8) & 0x7);
	dst2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109905 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109908 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109912 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109915 "isa_tms320.tcc"
>
OpSTI_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 109920 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109924 "isa_tms320.tcc"
>::OpSTI_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109928 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109932 "isa_tms320.tcc"
>(code, addr, "STI_STI")
{
	src2 = ((code >> 22) & 0x7);
	src1 = ((code >> 16) & 0x7);
	d1_mod = ((code >> 11) & 0x1f);
	d1_ar = ((code >> 8) & 0x7);
	d2_mod = ((code >> 3) & 0x1f);
	d2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109946 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109949 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109953 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109956 "isa_tms320.tcc"
>
OpSTI_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 109961 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109965 "isa_tms320.tcc"
>::OpSTI_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 109969 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 109973 "isa_tms320.tcc"
>(code, addr, "STI_STI_ext")
{
	src2 = ((code >> 22) & 0x7);
	src1 = ((code >> 16) & 0x7);
	d1_mod = ((code >> 11) & 0x1f);
	d1_ar = ((code >> 8) & 0x7);
	dst2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 109986 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 109989 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 109993 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 109996 "isa_tms320.tcc"
>
OpSUBF3_STF<
#line 45 "isa/tms320.isa"
CONFIG
#line 110001 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110005 "isa_tms320.tcc"
>::OpSUBF3_STF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110009 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110013 "isa_tms320.tcc"
>(code, addr, "SUBF3_STF")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110028 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110031 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110035 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110038 "isa_tms320.tcc"
>
OpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110043 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110047 "isa_tms320.tcc"
>::OpSUBF3_STF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110051 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110055 "isa_tms320.tcc"
>(code, addr, "SUBF3_STF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110069 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110072 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110076 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110079 "isa_tms320.tcc"
>
OpSUBI3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 110084 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110088 "isa_tms320.tcc"
>::OpSUBI3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110092 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110096 "isa_tms320.tcc"
>(code, addr, "SUBI3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110111 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110114 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110118 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110121 "isa_tms320.tcc"
>
OpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110126 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110130 "isa_tms320.tcc"
>::OpSUBI3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110134 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110138 "isa_tms320.tcc"
>(code, addr, "SUBI3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110152 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110155 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110159 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110162 "isa_tms320.tcc"
>
OpXOR3_STI<
#line 45 "isa/tms320.isa"
CONFIG
#line 110167 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110171 "isa_tms320.tcc"
>::OpXOR3_STI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110175 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110179 "isa_tms320.tcc"
>(code, addr, "XOR3_STI")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110194 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110197 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110201 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110204 "isa_tms320.tcc"
>
OpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110209 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110213 "isa_tms320.tcc"
>::OpXOR3_STI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110217 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110221 "isa_tms320.tcc"
>(code, addr, "XOR3_STI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	src1 = ((code >> 19) & 0x7);
	src3 = ((code >> 16) & 0x7);
	d2_mod = ((code >> 11) & 0x1f);
	d2_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110235 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110238 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110242 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110245 "isa_tms320.tcc"
>
OpLDF_LDF<
#line 45 "isa/tms320.isa"
CONFIG
#line 110250 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110254 "isa_tms320.tcc"
>::OpLDF_LDF(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110258 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110262 "isa_tms320.tcc"
>(code, addr, "LDF_LDF")
{
	dst1 = ((code >> 22) & 0x7);
	dst2 = ((code >> 19) & 0x7);
	s1_mod = ((code >> 11) & 0x1f);
	s1_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110276 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110279 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110283 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110286 "isa_tms320.tcc"
>
OpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110291 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110295 "isa_tms320.tcc"
>::OpLDF_LDF_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110299 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110303 "isa_tms320.tcc"
>(code, addr, "LDF_LDF_ext")
{
	dst1 = ((code >> 22) & 0x7);
	dst2 = ((code >> 19) & 0x7);
	s1_mod = ((code >> 11) & 0x1f);
	s1_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110316 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110319 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110323 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110326 "isa_tms320.tcc"
>
OpLDI_LDI<
#line 45 "isa/tms320.isa"
CONFIG
#line 110331 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110335 "isa_tms320.tcc"
>::OpLDI_LDI(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110339 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110343 "isa_tms320.tcc"
>(code, addr, "LDI_LDI")
{
	dst1 = ((code >> 22) & 0x7);
	dst2 = ((code >> 19) & 0x7);
	s1_mod = ((code >> 11) & 0x1f);
	s1_ar = ((code >> 8) & 0x7);
	s2_mod = ((code >> 3) & 0x1f);
	s2_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110357 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110360 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110364 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110367 "isa_tms320.tcc"
>
OpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110372 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110376 "isa_tms320.tcc"
>::OpLDI_LDI_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110380 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110384 "isa_tms320.tcc"
>(code, addr, "LDI_LDI_ext")
{
	dst1 = ((code >> 22) & 0x7);
	dst2 = ((code >> 19) & 0x7);
	s1_mod = ((code >> 11) & 0x1f);
	s1_ar = ((code >> 8) & 0x7);
	src2 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110397 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110400 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110404 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110407 "isa_tms320.tcc"
>
OpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 110412 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110416 "isa_tms320.tcc"
>::OpMPYF3_ADDF3(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110420 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110424 "isa_tms320.tcc"
>(code, addr, "MPYF3_ADDF3")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	s3_mod = ((code >> 11) & 0x1f);
	s3_ar = ((code >> 8) & 0x7);
	s4_mod = ((code >> 3) & 0x1f);
	s4_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110441 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110444 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110448 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110451 "isa_tms320.tcc"
>
OpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110456 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110460 "isa_tms320.tcc"
>::OpMPYF3_ADDF3_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110464 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110468 "isa_tms320.tcc"
>(code, addr, "MPYF3_ADDF3_ext")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	src3 = ((code >> 8) & 0x1f);
	src4 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110483 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110486 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110490 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110493 "isa_tms320.tcc"
>
OpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
CONFIG
#line 110498 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110502 "isa_tms320.tcc"
>::OpMPYF3_SUBF3(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110506 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110510 "isa_tms320.tcc"
>(code, addr, "MPYF3_SUBF3")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	s3_mod = ((code >> 11) & 0x1f);
	s3_ar = ((code >> 8) & 0x7);
	s4_mod = ((code >> 3) & 0x1f);
	s4_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110527 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110530 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110534 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110537 "isa_tms320.tcc"
>
OpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110542 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110546 "isa_tms320.tcc"
>::OpMPYF3_SUBF3_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110550 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110554 "isa_tms320.tcc"
>(code, addr, "MPYF3_SUBF3_ext")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	src3 = ((code >> 8) & 0x1f);
	src4 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110569 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110572 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110576 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110579 "isa_tms320.tcc"
>
OpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 110584 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110588 "isa_tms320.tcc"
>::OpMPYI3_ADDI3(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110592 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110596 "isa_tms320.tcc"
>(code, addr, "MPYI3_ADDI3")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	s3_mod = ((code >> 11) & 0x1f);
	s3_ar = ((code >> 8) & 0x7);
	s4_mod = ((code >> 3) & 0x1f);
	s4_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110613 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110616 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110620 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110623 "isa_tms320.tcc"
>
OpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110628 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110632 "isa_tms320.tcc"
>::OpMPYI3_ADDI3_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110636 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110640 "isa_tms320.tcc"
>(code, addr, "MPYI3_ADDI3_ext")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	src3 = ((code >> 8) & 0x1f);
	src4 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110655 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110658 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110662 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110665 "isa_tms320.tcc"
>
OpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
CONFIG
#line 110670 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110674 "isa_tms320.tcc"
>::OpMPYI3_SUBI3(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110678 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110682 "isa_tms320.tcc"
>(code, addr, "MPYI3_SUBI3")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	s3_mod = ((code >> 11) & 0x1f);
	s3_ar = ((code >> 8) & 0x7);
	s4_mod = ((code >> 3) & 0x1f);
	s4_ar = ((code >> 0) & 0x7);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110699 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110702 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110706 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110709 "isa_tms320.tcc"
>
OpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
CONFIG
#line 110714 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110718 "isa_tms320.tcc"
>::OpMPYI3_SUBI3_ext(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110722 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110726 "isa_tms320.tcc"
>(code, addr, "MPYI3_SUBI3_ext")
{
	p = ((code >> 24) & 0x3);
	d1 = ((code >> 23) & 0x1);
	d2 = ((code >> 22) & 0x1);
	src1 = ((code >> 19) & 0x7);
	src2 = ((code >> 16) & 0x7);
	src3 = ((code >> 8) & 0x1f);
	src4 = ((code >> 0) & 0x1f);
}

template <
#line 45 "isa/tms320.isa"
class
#line 110741 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110744 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110748 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110751 "isa_tms320.tcc"
>
DecodeMapPage<
#line 45 "isa/tms320.isa"
CONFIG
#line 110756 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110760 "isa_tms320.tcc"
>::DecodeMapPage(typename CONFIG::address_t key)
{
	this->key = key;
	memset(operation, 0, sizeof(operation));
	next = 0;
}

template <
#line 45 "isa/tms320.isa"
class
#line 110771 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110774 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110778 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110781 "isa_tms320.tcc"
>
DecodeMapPage<
#line 45 "isa/tms320.isa"
CONFIG
#line 110786 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110790 "isa_tms320.tcc"
>::~DecodeMapPage()
{
	unsigned int idx;
	for(idx = 0; idx < NUM_OPERATIONS_PER_PAGE; idx++)
	delete operation[idx];
}

template <
#line 45 "isa/tms320.isa"
class
#line 110801 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110804 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110808 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110811 "isa_tms320.tcc"
>
DecodeTableEntry<
#line 45 "isa/tms320.isa"
CONFIG
#line 110816 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110820 "isa_tms320.tcc"
>::DecodeTableEntry(CodeType opcode, CodeType opcode_mask, Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 110824 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110828 "isa_tms320.tcc"
> *(*decode)(CodeType, typename CONFIG::address_t))
{
	this->opcode = opcode;
	this->opcode_mask = opcode_mask;
	this->decode = decode;
}

template <
#line 45 "isa/tms320.isa"
class
#line 110839 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 110842 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 110846 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 110849 "isa_tms320.tcc"
>
Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 110854 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 110858 "isa_tms320.tcc"
>::Decoder()
: is_little_endian( true ), mru_page( 0 )
{
	memset(decode_hash_table, 0, sizeof(decode_hash_table));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 110866 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 110870 "isa_tms320.tcc"
	>(0x8c00e0e0UL, 0xfc00e0e0UL, DecodeOpMPYI3_SUBI3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 110874 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 110878 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 110883 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 110887 "isa_tms320.tcc"
	>(0x8c000000UL, 0xfc000000UL, DecodeOpMPYI3_SUBI3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 110891 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 110895 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 110900 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 110904 "isa_tms320.tcc"
	>(0x8800e0e0UL, 0xfc00e0e0UL, DecodeOpMPYI3_ADDI3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 110908 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 110912 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 110917 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 110921 "isa_tms320.tcc"
	>(0x88000000UL, 0xfc000000UL, DecodeOpMPYI3_ADDI3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 110925 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 110929 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 110934 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 110938 "isa_tms320.tcc"
	>(0x8400e0e0UL, 0xfc00e0e0UL, DecodeOpMPYF3_SUBF3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 110942 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 110946 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 110951 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 110955 "isa_tms320.tcc"
	>(0x84000000UL, 0xfc000000UL, DecodeOpMPYF3_SUBF3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 110959 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 110963 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 110968 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 110972 "isa_tms320.tcc"
	>(0x8000e0e0UL, 0xfc00e0e0UL, DecodeOpMPYF3_ADDF3_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 110976 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 110980 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 110985 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 110989 "isa_tms320.tcc"
	>(0x80000000UL, 0xfc000000UL, DecodeOpMPYF3_ADDF3<
#line 45 "isa/tms320.isa"
	CONFIG
#line 110993 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 110997 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111002 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111006 "isa_tms320.tcc"
	>(0xc60000e0UL, 0xfe0700e0UL, DecodeOpLDI_LDI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111010 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111014 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111019 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111023 "isa_tms320.tcc"
	>(0xc6000000UL, 0xfe070000UL, DecodeOpLDI_LDI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111027 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111031 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111036 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111040 "isa_tms320.tcc"
	>(0xc40000e0UL, 0xfe0700e0UL, DecodeOpLDF_LDF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111044 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111048 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111053 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111057 "isa_tms320.tcc"
	>(0xc4000000UL, 0xfe070000UL, DecodeOpLDF_LDF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111061 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111065 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111070 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111074 "isa_tms320.tcc"
	>(0xee0000e0UL, 0xfe0000e0UL, DecodeOpXOR3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111078 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111082 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111087 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111091 "isa_tms320.tcc"
	>(0xee000000UL, 0xfe000000UL, DecodeOpXOR3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111095 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111099 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111104 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111108 "isa_tms320.tcc"
	>(0xec0000e0UL, 0xfe0000e0UL, DecodeOpSUBI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111112 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111116 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111121 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111125 "isa_tms320.tcc"
	>(0xec000000UL, 0xfe000000UL, DecodeOpSUBI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111129 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111133 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111138 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111142 "isa_tms320.tcc"
	>(0xea0000e0UL, 0xfe0000e0UL, DecodeOpSUBF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111146 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111150 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111155 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111159 "isa_tms320.tcc"
	>(0xea000000UL, 0xfe000000UL, DecodeOpSUBF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111163 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111167 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111172 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111176 "isa_tms320.tcc"
	>(0xc20000e0UL, 0xfe3800e0UL, DecodeOpSTI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111180 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111184 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111189 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111193 "isa_tms320.tcc"
	>(0xc2000000UL, 0xfe380000UL, DecodeOpSTI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111197 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111201 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111206 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111210 "isa_tms320.tcc"
	>(0xc00000e0UL, 0xfe3800e0UL, DecodeOpSTF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111214 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111218 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111223 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111227 "isa_tms320.tcc"
	>(0xc0000000UL, 0xfe380000UL, DecodeOpSTF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111231 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111235 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111240 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111244 "isa_tms320.tcc"
	>(0xe80000e0UL, 0xfe0000e0UL, DecodeOpOR3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111248 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111252 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111257 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111261 "isa_tms320.tcc"
	>(0xe8000000UL, 0xfe000000UL, DecodeOpOR3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111265 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111269 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111274 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111278 "isa_tms320.tcc"
	>(0xe60000e0UL, 0xfe3800e0UL, DecodeOpNOT_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111282 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111286 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111291 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111295 "isa_tms320.tcc"
	>(0xe6000000UL, 0xfe380000UL, DecodeOpNOT_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111299 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111303 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111308 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111312 "isa_tms320.tcc"
	>(0xe40000e0UL, 0xfe3800e0UL, DecodeOpNEGI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111316 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111320 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111325 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111329 "isa_tms320.tcc"
	>(0xe4000000UL, 0xfe380000UL, DecodeOpNEGI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111333 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111337 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111342 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111346 "isa_tms320.tcc"
	>(0xe20000e0UL, 0xfe3800e0UL, DecodeOpNEGF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111350 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111354 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111359 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111363 "isa_tms320.tcc"
	>(0xe2000000UL, 0xfe380000UL, DecodeOpNEGF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111367 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111371 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111376 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111380 "isa_tms320.tcc"
	>(0xe00000e0UL, 0xfe0000e0UL, DecodeOpMPYI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111384 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111388 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111393 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111397 "isa_tms320.tcc"
	>(0xe0000000UL, 0xfe000000UL, DecodeOpMPYI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111401 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111405 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111410 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111414 "isa_tms320.tcc"
	>(0xde0000e0UL, 0xfe0000e0UL, DecodeOpMPYF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111418 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111422 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111427 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111431 "isa_tms320.tcc"
	>(0xde000000UL, 0xfe000000UL, DecodeOpMPYF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111435 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111439 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111444 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111448 "isa_tms320.tcc"
	>(0xdc0000e0UL, 0xfe0000e0UL, DecodeOpLSH3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111452 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111456 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111461 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111465 "isa_tms320.tcc"
	>(0xdc000000UL, 0xfe000000UL, DecodeOpLSH3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111469 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111473 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111478 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111482 "isa_tms320.tcc"
	>(0xda0000e0UL, 0xfe3800e0UL, DecodeOpLDI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111486 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111490 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111495 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111499 "isa_tms320.tcc"
	>(0xda000000UL, 0xfe380000UL, DecodeOpLDI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111503 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111507 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111512 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111516 "isa_tms320.tcc"
	>(0xd80000e0UL, 0xfe3800e0UL, DecodeOpLDF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111520 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111524 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111529 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111533 "isa_tms320.tcc"
	>(0xd8000000UL, 0xfe380000UL, DecodeOpLDF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111537 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111541 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111546 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111550 "isa_tms320.tcc"
	>(0xd60000e0UL, 0xfe3800e0UL, DecodeOpFLOAT_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111554 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111558 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111563 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111567 "isa_tms320.tcc"
	>(0xd6000000UL, 0xfe380000UL, DecodeOpFLOAT_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111571 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111575 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111580 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111584 "isa_tms320.tcc"
	>(0xd40000e0UL, 0xfe3800e0UL, DecodeOpFIX_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111588 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111592 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111597 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111601 "isa_tms320.tcc"
	>(0xd4000000UL, 0xfe380000UL, DecodeOpFIX_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111605 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111609 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111614 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111618 "isa_tms320.tcc"
	>(0xd20000e0UL, 0xfe0000e0UL, DecodeOpASH3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111622 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111626 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111631 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111635 "isa_tms320.tcc"
	>(0xd2000000UL, 0xfe000000UL, DecodeOpASH3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111639 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111643 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111648 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111652 "isa_tms320.tcc"
	>(0xd00000e0UL, 0xfe0000e0UL, DecodeOpAND3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111656 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111660 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111665 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111669 "isa_tms320.tcc"
	>(0xd0000000UL, 0xfe000000UL, DecodeOpAND3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111673 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111677 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111682 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111686 "isa_tms320.tcc"
	>(0xce0000e0UL, 0xfe0000e0UL, DecodeOpADDI3_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111690 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111694 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111699 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111703 "isa_tms320.tcc"
	>(0xce000000UL, 0xfe000000UL, DecodeOpADDI3_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111707 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111711 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111716 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111720 "isa_tms320.tcc"
	>(0xcc0000e0UL, 0xfe0000e0UL, DecodeOpADDF3_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111724 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111728 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111733 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111737 "isa_tms320.tcc"
	>(0xcc000000UL, 0xfe000000UL, DecodeOpADDF3_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111741 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111745 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111750 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111754 "isa_tms320.tcc"
	>(0xca0000e0UL, 0xfe3800e0UL, DecodeOpABSI_STI_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111758 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111762 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111767 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111771 "isa_tms320.tcc"
	>(0xca000000UL, 0xfe380000UL, DecodeOpABSI_STI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111775 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111779 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111784 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111788 "isa_tms320.tcc"
	>(0xc80000e0UL, 0xfe3800e0UL, DecodeOpABSF_STF_ext<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111792 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111796 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111801 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111805 "isa_tms320.tcc"
	>(0xc8000000UL, 0xfe380000UL, DecodeOpABSF_STF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111809 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111813 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111818 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111822 "isa_tms320.tcc"
	>(0x15c00000UL, 0xffe00000UL, DecodeOpSTII_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111826 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111830 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111835 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111839 "isa_tms320.tcc"
	>(0x15a00000UL, 0xffe00000UL, DecodeOpSTII_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111843 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111847 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111852 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111856 "isa_tms320.tcc"
	>(0x14c00000UL, 0xffe00000UL, DecodeOpSTFI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111860 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111864 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111869 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111873 "isa_tms320.tcc"
	>(0x14a00000UL, 0xffe00000UL, DecodeOpSTFI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111877 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111881 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111886 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111890 "isa_tms320.tcc"
	>(0x16000000UL, 0xffffffffUL, DecodeOpSIGI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111894 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111898 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111903 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111907 "isa_tms320.tcc"
	>(0x8c00000UL, 0xffe00000UL, DecodeOpLDII_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111911 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111915 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111920 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111924 "isa_tms320.tcc"
	>(0x8a00000UL, 0xffe00000UL, DecodeOpLDII_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111928 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111932 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111937 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111941 "isa_tms320.tcc"
	>(0x7c00000UL, 0xffe00000UL, DecodeOpLDFI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111945 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111949 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111954 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111958 "isa_tms320.tcc"
	>(0x7a00000UL, 0xffe00000UL, DecodeOpLDFI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111962 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111966 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111971 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111975 "isa_tms320.tcc"
	>(0x10800000UL, 0xffffffffUL, DecodeOpMAXSPEED<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111979 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111983 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111988 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 111992 "isa_tms320.tcc"
	>(0x10800001UL, 0xffffffffUL, DecodeOpLOPOWER<
#line 45 "isa/tms320.isa"
	CONFIG
#line 111996 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112000 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112005 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112009 "isa_tms320.tcc"
	>(0x6000001UL, 0xffffffffUL, DecodeOpIDLE2<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112013 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112017 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112022 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112026 "isa_tms320.tcc"
	>(0x74000020UL, 0xffe0ffe0UL, DecodeOpTRAPcond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112030 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112034 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112039 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112043 "isa_tms320.tcc"
	>(0x66000000UL, 0xffffffffUL, DecodeOpSWI<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112047 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112051 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112056 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112060 "isa_tms320.tcc"
	>(0x13fb0000UL, 0xffff0000UL, DecodeOpRPTS_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112064 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112068 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112073 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112077 "isa_tms320.tcc"
	>(0x13db0000UL, 0xffff0000UL, DecodeOpRPTS_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112081 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112085 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112090 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112094 "isa_tms320.tcc"
	>(0x13bb0000UL, 0xffff0000UL, DecodeOpRPTS_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112098 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112102 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112107 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112111 "isa_tms320.tcc"
	>(0x139b0000UL, 0xffffffe0UL, DecodeOpRPTS_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112115 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112119 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112124 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112128 "isa_tms320.tcc"
	>(0x64000000UL, 0xff000000UL, DecodeOpRPTB<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112132 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112136 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112141 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112145 "isa_tms320.tcc"
	>(0x78800000UL, 0xffe0ffffUL, DecodeOpRETScond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112149 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112153 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112158 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112162 "isa_tms320.tcc"
	>(0x78000000UL, 0xffe0ffffUL, DecodeOpRETIcond<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112166 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112170 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112175 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112179 "isa_tms320.tcc"
	>(0xcc00000UL, 0xffff0000UL, DecodeOpNOP_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112183 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112187 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112192 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112196 "isa_tms320.tcc"
	>(0xc800000UL, 0xffffffe0UL, DecodeOpNOP_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112200 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112204 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112209 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112213 "isa_tms320.tcc"
	>(0x6000000UL, 0xffffffffUL, DecodeOpIDLE<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112217 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112221 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112226 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112230 "isa_tms320.tcc"
	>(0x1b400000UL, 0xffff0000UL, DecodeOpIACK_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112234 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112238 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112243 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112247 "isa_tms320.tcc"
	>(0x1b200000UL, 0xffff0000UL, DecodeOpIACK_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112251 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112255 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112260 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112264 "isa_tms320.tcc"
	>(0x6e200000UL, 0xfe200000UL, DecodeOpDBcondD_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112268 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112272 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112277 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112281 "isa_tms320.tcc"
	>(0x6c200000UL, 0xfe20ffe0UL, DecodeOpDBcondD_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112285 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112289 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112294 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112298 "isa_tms320.tcc"
	>(0x6e000000UL, 0xfe200000UL, DecodeOpDBcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112302 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112306 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112311 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112315 "isa_tms320.tcc"
	>(0x6c000000UL, 0xfe20ffe0UL, DecodeOpDBcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112319 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112323 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112328 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112332 "isa_tms320.tcc"
	>(0x72000000UL, 0xffe00000UL, DecodeOpCALLcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112336 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112340 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112345 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112349 "isa_tms320.tcc"
	>(0x70000000UL, 0xffe0ffe0UL, DecodeOpCALLcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112353 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112357 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112362 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112366 "isa_tms320.tcc"
	>(0x62000000UL, 0xff000000UL, DecodeOpCALL<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112370 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112374 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112379 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112383 "isa_tms320.tcc"
	>(0x61000000UL, 0xff000000UL, DecodeOpBRD<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112387 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112391 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112396 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112400 "isa_tms320.tcc"
	>(0x60000000UL, 0xff000000UL, DecodeOpBR<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112404 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112408 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112413 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112417 "isa_tms320.tcc"
	>(0x6a200000UL, 0xffe00000UL, DecodeOpBcondD_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112421 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112425 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112430 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112434 "isa_tms320.tcc"
	>(0x68200000UL, 0xffe0ffe0UL, DecodeOpBcondD_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112438 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112442 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112447 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112451 "isa_tms320.tcc"
	>(0x6a000000UL, 0xffe00000UL, DecodeOpBcond_disp<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112455 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112459 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112464 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112468 "isa_tms320.tcc"
	>(0x68000000UL, 0xffe0ffe0UL, DecodeOpBcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112472 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112476 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112481 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112485 "isa_tms320.tcc"
	>(0x28600000UL, 0xffe00000UL, DecodeOpXOR3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112489 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112493 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112498 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112502 "isa_tms320.tcc"
	>(0x28400000UL, 0xffe0e000UL, DecodeOpXOR3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112506 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112510 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112515 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112519 "isa_tms320.tcc"
	>(0x28200000UL, 0xffe000e0UL, DecodeOpXOR3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112523 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112527 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112532 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112536 "isa_tms320.tcc"
	>(0x28000000UL, 0xffe0e0e0UL, DecodeOpXOR3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112540 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112544 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112549 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112553 "isa_tms320.tcc"
	>(0x27e00000UL, 0xffff0000UL, DecodeOpTSTB3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112557 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112561 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112566 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112570 "isa_tms320.tcc"
	>(0x27c00000UL, 0xffffe000UL, DecodeOpTSTB3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112574 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112578 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112583 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112587 "isa_tms320.tcc"
	>(0x27a00000UL, 0xffff00e0UL, DecodeOpTSTB3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112591 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112595 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112600 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112604 "isa_tms320.tcc"
	>(0x27800000UL, 0xffffe0e0UL, DecodeOpTSTB3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112608 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112612 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112617 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112621 "isa_tms320.tcc"
	>(0x27600000UL, 0xffe00000UL, DecodeOpSUBI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112625 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112629 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112634 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112638 "isa_tms320.tcc"
	>(0x27400000UL, 0xffe0e000UL, DecodeOpSUBI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112642 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112646 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112651 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112655 "isa_tms320.tcc"
	>(0x27200000UL, 0xffe000e0UL, DecodeOpSUBI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112659 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112663 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112668 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112672 "isa_tms320.tcc"
	>(0x27000000UL, 0xffe0e0e0UL, DecodeOpSUBI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112676 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112680 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112685 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112689 "isa_tms320.tcc"
	>(0x26e00000UL, 0xfff80000UL, DecodeOpSUBF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112693 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112697 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112702 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112706 "isa_tms320.tcc"
	>(0x26c00000UL, 0xfff8f800UL, DecodeOpSUBF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112710 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112714 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112719 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112723 "isa_tms320.tcc"
	>(0x26a00000UL, 0xfff800f8UL, DecodeOpSUBF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112727 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112731 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112736 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112740 "isa_tms320.tcc"
	>(0x26800000UL, 0xfff8f8f8UL, DecodeOpSUBF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112744 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112748 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112753 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112757 "isa_tms320.tcc"
	>(0x26600000UL, 0xffe00000UL, DecodeOpSUBB3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112761 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112765 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112770 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112774 "isa_tms320.tcc"
	>(0x26400000UL, 0xffe0e000UL, DecodeOpSUBB3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112778 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112782 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112787 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112791 "isa_tms320.tcc"
	>(0x26200000UL, 0xffe000e0UL, DecodeOpSUBB3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112795 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112799 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112804 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112808 "isa_tms320.tcc"
	>(0x26000000UL, 0xffe0e0e0UL, DecodeOpSUBB3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112812 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112816 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112821 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112825 "isa_tms320.tcc"
	>(0x25e00000UL, 0xffe00000UL, DecodeOpOR3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112829 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112833 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112838 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112842 "isa_tms320.tcc"
	>(0x25c00000UL, 0xffe0e000UL, DecodeOpOR3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112846 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112850 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112855 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112859 "isa_tms320.tcc"
	>(0x25a00000UL, 0xffe000e0UL, DecodeOpOR3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112863 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112867 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112872 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112876 "isa_tms320.tcc"
	>(0x25800000UL, 0xffe0e0e0UL, DecodeOpOR3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112880 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112884 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112889 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112893 "isa_tms320.tcc"
	>(0x25600000UL, 0xffe00000UL, DecodeOpMPYI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112897 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112901 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112906 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112910 "isa_tms320.tcc"
	>(0x25400000UL, 0xffe0e000UL, DecodeOpMPYI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112914 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112918 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112923 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112927 "isa_tms320.tcc"
	>(0x25200000UL, 0xffe000e0UL, DecodeOpMPYI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112931 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112935 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112940 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112944 "isa_tms320.tcc"
	>(0x25000000UL, 0xffe0e0e0UL, DecodeOpMPYI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112948 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112952 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112957 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112961 "isa_tms320.tcc"
	>(0x24e00000UL, 0xfff80000UL, DecodeOpMPYF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112965 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112969 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112974 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112978 "isa_tms320.tcc"
	>(0x24c00000UL, 0xfff8f800UL, DecodeOpMPYF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112982 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112986 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112991 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 112995 "isa_tms320.tcc"
	>(0x24a00000UL, 0xfff800f8UL, DecodeOpMPYF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 112999 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113003 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113008 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113012 "isa_tms320.tcc"
	>(0x24800000UL, 0xfff8f8f8UL, DecodeOpMPYF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113016 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113020 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113025 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113029 "isa_tms320.tcc"
	>(0x24600000UL, 0xffe00000UL, DecodeOpLSH3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113033 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113037 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113042 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113046 "isa_tms320.tcc"
	>(0x24400000UL, 0xffe0e000UL, DecodeOpLSH3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113050 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113054 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113059 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113063 "isa_tms320.tcc"
	>(0x24200000UL, 0xffe000e0UL, DecodeOpLSH3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113067 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113071 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113076 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113080 "isa_tms320.tcc"
	>(0x24000000UL, 0xffe0e0e0UL, DecodeOpLSH3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113084 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113088 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113093 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113097 "isa_tms320.tcc"
	>(0x23e00000UL, 0xffff0000UL, DecodeOpCMPI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113101 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113105 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113110 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113114 "isa_tms320.tcc"
	>(0x23c00000UL, 0xffffe000UL, DecodeOpCMPI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113118 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113122 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113127 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113131 "isa_tms320.tcc"
	>(0x23a00000UL, 0xffff00e0UL, DecodeOpCMPI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113135 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113139 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113144 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113148 "isa_tms320.tcc"
	>(0x23800000UL, 0xffffe0e0UL, DecodeOpCMPI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113152 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113156 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113161 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113165 "isa_tms320.tcc"
	>(0x23600000UL, 0xffff0000UL, DecodeOpCMPF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113169 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113173 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113178 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113182 "isa_tms320.tcc"
	>(0x23400000UL, 0xfffff800UL, DecodeOpCMPF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113186 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113190 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113195 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113199 "isa_tms320.tcc"
	>(0x23200000UL, 0xffff00f8UL, DecodeOpCMPF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113203 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113207 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113212 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113216 "isa_tms320.tcc"
	>(0x23000000UL, 0xfffff8f8UL, DecodeOpCMPF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113220 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113224 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113229 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113233 "isa_tms320.tcc"
	>(0x22e00000UL, 0xffe00000UL, DecodeOpASH3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113237 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113241 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113246 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113250 "isa_tms320.tcc"
	>(0x22c00000UL, 0xffe0e000UL, DecodeOpASH3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113254 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113258 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113263 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113267 "isa_tms320.tcc"
	>(0x22a00000UL, 0xffe000e0UL, DecodeOpASH3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113271 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113275 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113280 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113284 "isa_tms320.tcc"
	>(0x22800000UL, 0xffe0e0e0UL, DecodeOpASH3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113288 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113292 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113297 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113301 "isa_tms320.tcc"
	>(0x22600000UL, 0xffe00000UL, DecodeOpANDN3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113305 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113309 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113314 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113318 "isa_tms320.tcc"
	>(0x22400000UL, 0xffe0e000UL, DecodeOpANDN3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113322 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113326 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113331 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113335 "isa_tms320.tcc"
	>(0x22200000UL, 0xffe000e0UL, DecodeOpANDN3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113339 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113343 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113348 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113352 "isa_tms320.tcc"
	>(0x22000000UL, 0xffe0e0e0UL, DecodeOpANDN3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113356 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113360 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113365 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113369 "isa_tms320.tcc"
	>(0x21e00000UL, 0xffe00000UL, DecodeOpAND3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113373 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113377 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113382 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113386 "isa_tms320.tcc"
	>(0x21c00000UL, 0xffe0e000UL, DecodeOpAND3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113390 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113394 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113399 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113403 "isa_tms320.tcc"
	>(0x21a00000UL, 0xffe000e0UL, DecodeOpAND3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113407 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113411 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113416 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113420 "isa_tms320.tcc"
	>(0x21800000UL, 0xffe0e0e0UL, DecodeOpAND3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113424 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113428 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113433 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113437 "isa_tms320.tcc"
	>(0x21600000UL, 0xffe00000UL, DecodeOpADDI3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113441 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113445 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113450 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113454 "isa_tms320.tcc"
	>(0x21400000UL, 0xffe0e000UL, DecodeOpADDI3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113458 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113462 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113467 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113471 "isa_tms320.tcc"
	>(0x21200000UL, 0xffe000e0UL, DecodeOpADDI3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113475 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113479 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113484 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113488 "isa_tms320.tcc"
	>(0x21000000UL, 0xffe0e0e0UL, DecodeOpADDI3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113492 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113496 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113501 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113505 "isa_tms320.tcc"
	>(0x20e00000UL, 0xfff80000UL, DecodeOpADDF3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113509 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113513 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113518 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113522 "isa_tms320.tcc"
	>(0x20c00000UL, 0xfff8f800UL, DecodeOpADDF3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113526 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113530 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113535 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113539 "isa_tms320.tcc"
	>(0x20a00000UL, 0xfff800f8UL, DecodeOpADDF3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113543 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113547 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113552 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113556 "isa_tms320.tcc"
	>(0x20800000UL, 0xfff8f8f8UL, DecodeOpADDF3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113560 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113564 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113569 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113573 "isa_tms320.tcc"
	>(0x20600000UL, 0xffe00000UL, DecodeOpADDC3_indir_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113577 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113581 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113586 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113590 "isa_tms320.tcc"
	>(0x20400000UL, 0xffe0e000UL, DecodeOpADDC3_reg_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113594 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113598 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113603 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113607 "isa_tms320.tcc"
	>(0x20200000UL, 0xffe000e0UL, DecodeOpADDC3_indir_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113611 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113615 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113620 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113624 "isa_tms320.tcc"
	>(0x20000000UL, 0xffe0e0e0UL, DecodeOpADDC3_reg_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113628 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113632 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113637 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113641 "isa_tms320.tcc"
	>(0x1ae00000UL, 0xffe00000UL, DecodeOpXOR_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113645 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113649 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113654 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113658 "isa_tms320.tcc"
	>(0x1ac00000UL, 0xffe00000UL, DecodeOpXOR_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113662 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113666 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113671 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113675 "isa_tms320.tcc"
	>(0x1aa00000UL, 0xffe00000UL, DecodeOpXOR_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113679 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113683 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113688 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113692 "isa_tms320.tcc"
	>(0x1a800000UL, 0xffe0ffe0UL, DecodeOpXOR_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113696 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113700 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113705 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113709 "isa_tms320.tcc"
	>(0x1a600000UL, 0xffe00000UL, DecodeOpTSTB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113713 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113717 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113722 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113726 "isa_tms320.tcc"
	>(0x1a400000UL, 0xffe00000UL, DecodeOpTSTB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113730 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113734 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113739 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113743 "isa_tms320.tcc"
	>(0x1a200000UL, 0xffe00000UL, DecodeOpTSTB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113747 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113751 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113756 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113760 "isa_tms320.tcc"
	>(0x1a000000UL, 0xffe0ffe0UL, DecodeOpTSTB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113764 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113768 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113773 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113777 "isa_tms320.tcc"
	>(0x19e00000UL, 0xffe00000UL, DecodeOpSUBRI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113781 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113785 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113790 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113794 "isa_tms320.tcc"
	>(0x19c00000UL, 0xffe00000UL, DecodeOpSUBRI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113798 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113802 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113807 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113811 "isa_tms320.tcc"
	>(0x19a00000UL, 0xffe00000UL, DecodeOpSUBRI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113815 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113819 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113824 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113828 "isa_tms320.tcc"
	>(0x19800000UL, 0xffe0ffe0UL, DecodeOpSUBRI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113832 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113836 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113841 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113845 "isa_tms320.tcc"
	>(0x19600000UL, 0xfff80000UL, DecodeOpSUBRF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113849 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113853 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113858 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113862 "isa_tms320.tcc"
	>(0x19400000UL, 0xfff80000UL, DecodeOpSUBRF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113866 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113870 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113875 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113879 "isa_tms320.tcc"
	>(0x19200000UL, 0xfff80000UL, DecodeOpSUBRF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113883 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113887 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113892 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113896 "isa_tms320.tcc"
	>(0x19000000UL, 0xfff8fff8UL, DecodeOpSUBRF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113900 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113904 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113909 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113913 "isa_tms320.tcc"
	>(0x18e00000UL, 0xffe00000UL, DecodeOpSUBRB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113917 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113921 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113926 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113930 "isa_tms320.tcc"
	>(0x18c00000UL, 0xffe00000UL, DecodeOpSUBRB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113934 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113938 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113943 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113947 "isa_tms320.tcc"
	>(0x18a00000UL, 0xffe00000UL, DecodeOpSUBRB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113951 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113955 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113960 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113964 "isa_tms320.tcc"
	>(0x18800000UL, 0xffe0ffe0UL, DecodeOpSUBRB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113968 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113972 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113977 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113981 "isa_tms320.tcc"
	>(0x18600000UL, 0xffe00000UL, DecodeOpSUBI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113985 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113989 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 113994 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 113998 "isa_tms320.tcc"
	>(0x18400000UL, 0xffe00000UL, DecodeOpSUBI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114002 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114006 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114011 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114015 "isa_tms320.tcc"
	>(0x18200000UL, 0xffe00000UL, DecodeOpSUBI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114019 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114023 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114028 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114032 "isa_tms320.tcc"
	>(0x18000000UL, 0xffe0ffe0UL, DecodeOpSUBI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114036 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114040 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114045 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114049 "isa_tms320.tcc"
	>(0x17e00000UL, 0xfff80000UL, DecodeOpSUBF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114053 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114057 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114062 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114066 "isa_tms320.tcc"
	>(0x17c00000UL, 0xfff80000UL, DecodeOpSUBF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114070 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114074 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114079 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114083 "isa_tms320.tcc"
	>(0x17a00000UL, 0xfff80000UL, DecodeOpSUBF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114087 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114091 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114096 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114100 "isa_tms320.tcc"
	>(0x17800000UL, 0xfff8fff8UL, DecodeOpSUBF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114104 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114108 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114113 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114117 "isa_tms320.tcc"
	>(0x17600000UL, 0xffe00000UL, DecodeOpSUBC_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114121 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114125 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114130 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114134 "isa_tms320.tcc"
	>(0x17400000UL, 0xffe00000UL, DecodeOpSUBC_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114138 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114142 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114147 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114151 "isa_tms320.tcc"
	>(0x17200000UL, 0xffe00000UL, DecodeOpSUBC_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114155 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114159 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114164 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114168 "isa_tms320.tcc"
	>(0x17000000UL, 0xffe0ffe0UL, DecodeOpSUBC_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114172 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114176 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114181 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114185 "isa_tms320.tcc"
	>(0x16e00000UL, 0xffe00000UL, DecodeOpSUBB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114189 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114193 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114198 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114202 "isa_tms320.tcc"
	>(0x16c00000UL, 0xffe00000UL, DecodeOpSUBB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114206 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114210 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114215 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114219 "isa_tms320.tcc"
	>(0x16a00000UL, 0xffe00000UL, DecodeOpSUBB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114223 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114227 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114232 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114236 "isa_tms320.tcc"
	>(0x16800000UL, 0xffe0ffe0UL, DecodeOpSUBB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114240 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114244 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114249 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114253 "isa_tms320.tcc"
	>(0x1360ffffUL, 0xffe0ffffUL, DecodeOpRORC<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114257 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114261 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114266 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114270 "isa_tms320.tcc"
	>(0x12e0ffffUL, 0xffe0ffffUL, DecodeOpROR<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114274 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114278 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114283 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114287 "isa_tms320.tcc"
	>(0x12600001UL, 0xffe0ffffUL, DecodeOpROLC<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114291 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114295 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114300 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114304 "isa_tms320.tcc"
	>(0x11e00001UL, 0xffe0ffffUL, DecodeOpROL<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114308 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114312 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114317 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114321 "isa_tms320.tcc"
	>(0x11600000UL, 0xfff80000UL, DecodeOpRND_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114325 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114329 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114334 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114338 "isa_tms320.tcc"
	>(0x11400000UL, 0xfff80000UL, DecodeOpRND_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114342 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114346 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114351 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114355 "isa_tms320.tcc"
	>(0x11200000UL, 0xfff80000UL, DecodeOpRND_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114359 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114363 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114368 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114372 "isa_tms320.tcc"
	>(0x11000000UL, 0xfff8fff8UL, DecodeOpRND_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114376 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114380 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114385 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114389 "isa_tms320.tcc"
	>(0x10600000UL, 0xffe00000UL, DecodeOpOR_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114393 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114397 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114402 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114406 "isa_tms320.tcc"
	>(0x10400000UL, 0xffe00000UL, DecodeOpOR_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114410 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114414 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114419 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114423 "isa_tms320.tcc"
	>(0x10200000UL, 0xffe00000UL, DecodeOpOR_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114427 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114431 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114436 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114440 "isa_tms320.tcc"
	>(0x10000000UL, 0xffe0ffe0UL, DecodeOpOR_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114444 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114448 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114453 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114457 "isa_tms320.tcc"
	>(0xde00000UL, 0xffe00000UL, DecodeOpNOT_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114461 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114465 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114470 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114474 "isa_tms320.tcc"
	>(0xdc00000UL, 0xffe00000UL, DecodeOpNOT_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114478 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114482 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114487 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114491 "isa_tms320.tcc"
	>(0xda00000UL, 0xffe00000UL, DecodeOpNOT_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114495 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114499 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114504 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114508 "isa_tms320.tcc"
	>(0xd800000UL, 0xffe0ffe0UL, DecodeOpNOT_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114512 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114516 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114521 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114525 "isa_tms320.tcc"
	>(0xd600000UL, 0xfff80000UL, DecodeOpNORM_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114529 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114533 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114538 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114542 "isa_tms320.tcc"
	>(0xd400000UL, 0xfff80000UL, DecodeOpNORM_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114546 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114550 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114555 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114559 "isa_tms320.tcc"
	>(0xd200000UL, 0xfff80000UL, DecodeOpNORM_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114563 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114567 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114572 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114576 "isa_tms320.tcc"
	>(0xd000000UL, 0xfff8fff8UL, DecodeOpNORM_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114580 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114584 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114589 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114593 "isa_tms320.tcc"
	>(0xc600000UL, 0xffe00000UL, DecodeOpNEGI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114597 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114601 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114606 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114610 "isa_tms320.tcc"
	>(0xc400000UL, 0xffe00000UL, DecodeOpNEGI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114614 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114618 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114623 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114627 "isa_tms320.tcc"
	>(0xc200000UL, 0xffe00000UL, DecodeOpNEGI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114631 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114635 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114640 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114644 "isa_tms320.tcc"
	>(0xc000000UL, 0xffe0ffe0UL, DecodeOpNEGI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114648 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114652 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114657 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114661 "isa_tms320.tcc"
	>(0xbe00000UL, 0xfff80000UL, DecodeOpNEGF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114665 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114669 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114674 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114678 "isa_tms320.tcc"
	>(0xbc00000UL, 0xfff80000UL, DecodeOpNEGF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114682 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114686 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114691 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114695 "isa_tms320.tcc"
	>(0xba00000UL, 0xfff80000UL, DecodeOpNEGF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114699 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114703 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114708 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114712 "isa_tms320.tcc"
	>(0xb800000UL, 0xfff8fff8UL, DecodeOpNEGF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114716 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114720 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114725 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114729 "isa_tms320.tcc"
	>(0xb600000UL, 0xffe00000UL, DecodeOpNEGB_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114733 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114737 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114742 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114746 "isa_tms320.tcc"
	>(0xb400000UL, 0xffe00000UL, DecodeOpNEGB_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114750 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114754 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114759 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114763 "isa_tms320.tcc"
	>(0xb200000UL, 0xffe00000UL, DecodeOpNEGB_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114767 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114771 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114776 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114780 "isa_tms320.tcc"
	>(0xb000000UL, 0xffe0ffe0UL, DecodeOpNEGB_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114784 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114788 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114793 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114797 "isa_tms320.tcc"
	>(0xae00000UL, 0xffe00000UL, DecodeOpMPYI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114801 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114805 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114810 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114814 "isa_tms320.tcc"
	>(0xac00000UL, 0xffe00000UL, DecodeOpMPYI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114818 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114822 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114827 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114831 "isa_tms320.tcc"
	>(0xaa00000UL, 0xffe00000UL, DecodeOpMPYI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114835 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114839 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114844 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114848 "isa_tms320.tcc"
	>(0xa800000UL, 0xffe0ffe0UL, DecodeOpMPYI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114852 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114856 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114861 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114865 "isa_tms320.tcc"
	>(0xa600000UL, 0xfff80000UL, DecodeOpMPYF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114869 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114873 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114878 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114882 "isa_tms320.tcc"
	>(0xa400000UL, 0xfff80000UL, DecodeOpMPYF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114886 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114890 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114895 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114899 "isa_tms320.tcc"
	>(0xa200000UL, 0xfff80000UL, DecodeOpMPYF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114903 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114907 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114912 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114916 "isa_tms320.tcc"
	>(0xa000000UL, 0xfff8fff8UL, DecodeOpMPYF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114920 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114924 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114929 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114933 "isa_tms320.tcc"
	>(0x9e00000UL, 0xffe00000UL, DecodeOpLSH_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114937 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114941 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114946 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114950 "isa_tms320.tcc"
	>(0x9c00000UL, 0xffe00000UL, DecodeOpLSH_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114954 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114958 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114963 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114967 "isa_tms320.tcc"
	>(0x9a00000UL, 0xffe00000UL, DecodeOpLSH_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114971 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114975 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114980 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114984 "isa_tms320.tcc"
	>(0x9800000UL, 0xffe0ffe0UL, DecodeOpLSH_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114988 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 114992 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 114997 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115001 "isa_tms320.tcc"
	>(0x5e00000UL, 0xfff80000UL, DecodeOpFLOAT_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115005 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115009 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115014 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115018 "isa_tms320.tcc"
	>(0x5c00000UL, 0xfff80000UL, DecodeOpFLOAT_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115022 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115026 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115031 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115035 "isa_tms320.tcc"
	>(0x5a00000UL, 0xfff80000UL, DecodeOpFLOAT_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115039 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115043 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115048 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115052 "isa_tms320.tcc"
	>(0x5800000UL, 0xfff8fff8UL, DecodeOpFLOAT_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115056 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115060 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115065 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115069 "isa_tms320.tcc"
	>(0x5600000UL, 0xffe00000UL, DecodeOpFIX_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115073 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115077 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115082 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115086 "isa_tms320.tcc"
	>(0x5400000UL, 0xffe00000UL, DecodeOpFIX_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115090 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115094 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115099 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115103 "isa_tms320.tcc"
	>(0x5200000UL, 0xffe00000UL, DecodeOpFIX_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115107 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115111 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115116 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115120 "isa_tms320.tcc"
	>(0x5000000UL, 0xffe0fff8UL, DecodeOpFIX_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115124 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115128 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115133 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115137 "isa_tms320.tcc"
	>(0x4e00000UL, 0xffe00000UL, DecodeOpCMPI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115141 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115145 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115150 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115154 "isa_tms320.tcc"
	>(0x4c00000UL, 0xffe00000UL, DecodeOpCMPI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115158 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115162 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115167 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115171 "isa_tms320.tcc"
	>(0x4a00000UL, 0xffe00000UL, DecodeOpCMPI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115175 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115179 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115184 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115188 "isa_tms320.tcc"
	>(0x4800000UL, 0xffe0ffe0UL, DecodeOpCMPI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115192 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115196 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115201 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115205 "isa_tms320.tcc"
	>(0x4600000UL, 0xfff80000UL, DecodeOpCMPF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115209 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115213 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115218 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115222 "isa_tms320.tcc"
	>(0x4400000UL, 0xfff80000UL, DecodeOpCMPF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115226 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115230 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115235 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115239 "isa_tms320.tcc"
	>(0x4200000UL, 0xfff80000UL, DecodeOpCMPF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115243 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115247 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115252 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115256 "isa_tms320.tcc"
	>(0x4000000UL, 0xfff8fff8UL, DecodeOpCMPF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115260 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115264 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115269 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115273 "isa_tms320.tcc"
	>(0x3e00000UL, 0xffe00000UL, DecodeOpASH_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115277 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115281 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115286 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115290 "isa_tms320.tcc"
	>(0x3c00000UL, 0xffe00000UL, DecodeOpASH_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115294 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115298 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115303 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115307 "isa_tms320.tcc"
	>(0x3a00000UL, 0xffe00000UL, DecodeOpASH_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115311 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115315 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115320 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115324 "isa_tms320.tcc"
	>(0x3800000UL, 0xffe0ffe0UL, DecodeOpASH_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115328 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115332 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115337 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115341 "isa_tms320.tcc"
	>(0x3600000UL, 0xffe00000UL, DecodeOpANDN_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115345 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115349 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115354 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115358 "isa_tms320.tcc"
	>(0x3400000UL, 0xffe00000UL, DecodeOpANDN_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115362 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115366 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115371 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115375 "isa_tms320.tcc"
	>(0x3200000UL, 0xffe00000UL, DecodeOpANDN_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115379 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115383 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115388 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115392 "isa_tms320.tcc"
	>(0x3000000UL, 0xffe0ffe0UL, DecodeOpANDN_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115396 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115400 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115405 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115409 "isa_tms320.tcc"
	>(0x2e00000UL, 0xffe00000UL, DecodeOpAND_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115413 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115417 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115422 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115426 "isa_tms320.tcc"
	>(0x2c00000UL, 0xffe00000UL, DecodeOpAND_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115430 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115434 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115439 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115443 "isa_tms320.tcc"
	>(0x2a00000UL, 0xffe00000UL, DecodeOpAND_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115447 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115451 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115456 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115460 "isa_tms320.tcc"
	>(0x2800000UL, 0xffe0ffe0UL, DecodeOpAND_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115464 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115468 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115473 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115477 "isa_tms320.tcc"
	>(0x2600000UL, 0xffe00000UL, DecodeOpADDI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115481 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115485 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115490 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115494 "isa_tms320.tcc"
	>(0x2400000UL, 0xffe00000UL, DecodeOpADDI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115498 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115502 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115507 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115511 "isa_tms320.tcc"
	>(0x2200000UL, 0xffe00000UL, DecodeOpADDI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115515 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115519 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115524 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115528 "isa_tms320.tcc"
	>(0x2000000UL, 0xffe0ffe0UL, DecodeOpADDI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115532 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115536 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115541 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115545 "isa_tms320.tcc"
	>(0x1e00000UL, 0xfff80000UL, DecodeOpADDF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115549 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115553 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115558 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115562 "isa_tms320.tcc"
	>(0x1c00000UL, 0xfff80000UL, DecodeOpADDF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115566 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115570 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115575 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115579 "isa_tms320.tcc"
	>(0x1a00000UL, 0xfff80000UL, DecodeOpADDF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115583 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115587 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115592 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115596 "isa_tms320.tcc"
	>(0x1800000UL, 0xfff8fff8UL, DecodeOpADDF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115600 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115604 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115609 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115613 "isa_tms320.tcc"
	>(0x1600000UL, 0xffe00000UL, DecodeOpADDC_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115617 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115621 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115626 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115630 "isa_tms320.tcc"
	>(0x1400000UL, 0xffe00000UL, DecodeOpADDC_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115634 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115638 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115643 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115647 "isa_tms320.tcc"
	>(0x1200000UL, 0xffe00000UL, DecodeOpADDC_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115651 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115655 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115660 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115664 "isa_tms320.tcc"
	>(0x1000000UL, 0xffe0ffe0UL, DecodeOpADDC_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115668 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115672 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115677 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115681 "isa_tms320.tcc"
	>(0xe00000UL, 0xffe00000UL, DecodeOpABSI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115685 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115689 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115694 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115698 "isa_tms320.tcc"
	>(0xc00000UL, 0xffe00000UL, DecodeOpABSI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115702 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115706 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115711 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115715 "isa_tms320.tcc"
	>(0xa00000UL, 0xffe00000UL, DecodeOpABSI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115719 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115723 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115728 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115732 "isa_tms320.tcc"
	>(0x800000UL, 0xffe0ffe0UL, DecodeOpABSI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115736 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115740 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115745 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115749 "isa_tms320.tcc"
	>(0x600000UL, 0xfff80000UL, DecodeOpABSF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115753 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115757 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115762 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115766 "isa_tms320.tcc"
	>(0x400000UL, 0xfff80000UL, DecodeOpABSF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115770 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115774 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115779 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115783 "isa_tms320.tcc"
	>(0x200000UL, 0xfff80000UL, DecodeOpABSF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115787 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115791 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115796 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115800 "isa_tms320.tcc"
	>(0x0UL, 0xfff8fff8UL, DecodeOpABSF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115804 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115808 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115813 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115817 "isa_tms320.tcc"
	>(0x15400000UL, 0xffe00000UL, DecodeOpSTI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115821 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115825 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115830 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115834 "isa_tms320.tcc"
	>(0x15200000UL, 0xffe00000UL, DecodeOpSTI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115838 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115842 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115847 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115851 "isa_tms320.tcc"
	>(0x14400000UL, 0xfff80000UL, DecodeOpSTF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115855 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115859 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115864 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115868 "isa_tms320.tcc"
	>(0x14200000UL, 0xffe00000UL, DecodeOpSTF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115872 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115876 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115881 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115885 "isa_tms320.tcc"
	>(0xfa00000UL, 0xfff8ffffUL, DecodeOpPUSHF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115889 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115893 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115898 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115902 "isa_tms320.tcc"
	>(0xf200000UL, 0xffe0ffffUL, DecodeOpPUSH<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115906 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115910 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115915 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115919 "isa_tms320.tcc"
	>(0xea00000UL, 0xfff8ffffUL, DecodeOpPOPF<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115923 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115927 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115932 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115936 "isa_tms320.tcc"
	>(0xe200000UL, 0xffe0ffffUL, DecodeOpPOP<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115940 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115944 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115949 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115953 "isa_tms320.tcc"
	>(0x8700000UL, 0xffffff00UL, DecodeOpLDP<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115957 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115961 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115966 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115970 "isa_tms320.tcc"
	>(0x9600000UL, 0xfff8f000UL, DecodeOpLDM_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115974 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115978 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115983 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115987 "isa_tms320.tcc"
	>(0x9400000UL, 0xfff80000UL, DecodeOpLDM_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 115991 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 115995 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116000 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116004 "isa_tms320.tcc"
	>(0x9200000UL, 0xfff80000UL, DecodeOpLDM_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116008 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116012 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116017 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116021 "isa_tms320.tcc"
	>(0x9000000UL, 0xfff8ffe0UL, DecodeOpLDM_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116025 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116029 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116034 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116038 "isa_tms320.tcc"
	>(0x50600000UL, 0xf0600000UL, DecodeOpLDIcond_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116042 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116046 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116051 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116055 "isa_tms320.tcc"
	>(0x50400000UL, 0xf0600000UL, DecodeOpLDIcond_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116059 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116063 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116068 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116072 "isa_tms320.tcc"
	>(0x50200000UL, 0xf0600000UL, DecodeOpLDIcond_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116076 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116080 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116085 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116089 "isa_tms320.tcc"
	>(0x50000000UL, 0xf060ffe0UL, DecodeOpLDIcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116093 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116097 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116102 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116106 "isa_tms320.tcc"
	>(0x8600000UL, 0xffe00000UL, DecodeOpLDI_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116110 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116114 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116119 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116123 "isa_tms320.tcc"
	>(0x8400000UL, 0xffe00000UL, DecodeOpLDI_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116127 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116131 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116136 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116140 "isa_tms320.tcc"
	>(0x8200000UL, 0xffe00000UL, DecodeOpLDI_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116144 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116148 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116153 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116157 "isa_tms320.tcc"
	>(0x8000000UL, 0xffe0ffe0UL, DecodeOpLDI_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116161 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116165 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116170 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116174 "isa_tms320.tcc"
	>(0x40600000UL, 0xf0780000UL, DecodeOpLDFcond_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116178 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116182 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116187 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116191 "isa_tms320.tcc"
	>(0x40400000UL, 0xf0780000UL, DecodeOpLDFcond_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116195 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116199 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116204 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116208 "isa_tms320.tcc"
	>(0x40200000UL, 0xf0780000UL, DecodeOpLDFcond_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116212 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116216 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116221 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116225 "isa_tms320.tcc"
	>(0x40000000UL, 0xf078ffe0UL, DecodeOpLDFcond_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116229 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116233 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116238 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116242 "isa_tms320.tcc"
	>(0x7600000UL, 0xfff80000UL, DecodeOpLDF_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116246 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116250 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116255 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116259 "isa_tms320.tcc"
	>(0x7400000UL, 0xfff80000UL, DecodeOpLDF_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116263 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116267 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116272 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116276 "isa_tms320.tcc"
	>(0x7200000UL, 0xfff80000UL, DecodeOpLDF_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116280 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116284 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116289 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116293 "isa_tms320.tcc"
	>(0x7000000UL, 0xfff8ffe0UL, DecodeOpLDF_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116297 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116301 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116306 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116310 "isa_tms320.tcc"
	>(0x6e00000UL, 0xfff80000UL, DecodeOpLDE_imm<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116314 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116318 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116323 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116327 "isa_tms320.tcc"
	>(0x6c00000UL, 0xfff80000UL, DecodeOpLDE_indir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116331 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116335 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116340 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116344 "isa_tms320.tcc"
	>(0x6a00000UL, 0xfff80000UL, DecodeOpLDE_dir<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116348 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116352 "isa_tms320.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116357 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116361 "isa_tms320.tcc"
	>(0x6800000UL, 0xfff8ffe0UL, DecodeOpLDE_reg<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116365 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116369 "isa_tms320.tcc"
	>));
}

template <
#line 45 "isa/tms320.isa"
class
#line 116376 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 116379 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 116383 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 116386 "isa_tms320.tcc"
>
Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 116391 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 116395 "isa_tms320.tcc"
>::~Decoder()
{
	InvalidateDecodingCache();
}

template <
#line 45 "isa/tms320.isa"
class
#line 116404 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 116407 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 116411 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 116414 "isa_tms320.tcc"
>
void Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 116419 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 116423 "isa_tms320.tcc"
>::Fetch(void *, typename CONFIG::address_t, uint32_t)
{
	assert( ! "Calling unimplemented virtual method Fetch" );
}

template <
#line 45 "isa/tms320.isa"
class
#line 116432 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 116435 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 116439 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 116442 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 116447 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 116451 "isa_tms320.tcc"
> *Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 116455 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 116459 "isa_tms320.tcc"
>::NCDecode(typename CONFIG::address_t addr)
{
	Operation<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116465 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116469 "isa_tms320.tcc"
	> *operation;
	CodeType code;
	Fetch(&code, addr, sizeof(code));
#if BYTE_ORDER == LITTLE_ENDIAN
	if(!is_little_endian)
#else
	if(is_little_endian)
#endif
	{
		code = ((code & 0xff000000UL) >> 24) | ((code & 0x00ff0000UL) >> 8) | ((code & 0x0000ff00UL) << 8) | ((code & 0x000000ffUL) << 24);
	}
	unsigned int count = decode_table.size();
	unsigned int idx;
	for(idx = 0; idx < count; idx++)
	{
		if((code & decode_table[idx].opcode_mask) == decode_table[idx].opcode)
		{
			operation = decode_table[idx].decode(code, addr);
			return operation;
		}
	}
	operation = new Operation<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116494 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116498 "isa_tms320.tcc"
	>(code, addr, "???");
	return operation;
}

template <
#line 45 "isa/tms320.isa"
class
#line 116506 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 116509 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 116513 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 116516 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 116521 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 116525 "isa_tms320.tcc"
> *Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 116529 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 116533 "isa_tms320.tcc"
>::NCDecode(typename CONFIG::address_t addr, CodeType code)
{
	Operation<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116539 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116543 "isa_tms320.tcc"
	> *operation;
	unsigned int count = decode_table.size();
	unsigned int idx;
	for(idx = 0; idx < count; idx++)
	{
		if((code & decode_table[idx].opcode_mask) == decode_table[idx].opcode)
		{
			operation = decode_table[idx].decode(code, addr);
			return operation;
		}
	}
	operation = new Operation<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116558 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116562 "isa_tms320.tcc"
	>(code, addr, "???");
	return operation;
}

template <
#line 45 "isa/tms320.isa"
class
#line 116570 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 116573 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 116577 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 116580 "isa_tms320.tcc"
>
void Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 116585 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 116589 "isa_tms320.tcc"
>::InvalidateDecodingCache()
{
	uint32_t index;
	mru_page = 0;
	for(index = 0; index < NUM_DECODE_HASH_TABLE_ENTRIES; index++)
	{
		DecodeMapPage<
#line 45 "isa/tms320.isa"
		CONFIG
#line 116599 "isa_tms320.tcc"
		,
#line 45 "isa/tms320.isa"
		DEBUG
#line 116603 "isa_tms320.tcc"
		> *page, *next_page;
		page = decode_hash_table[index];
		if(page)
		{
			do
			{
				next_page = page->next;
				delete page;
				page = next_page;
			} while(page);
			decode_hash_table[index] = 0;
		}
	}
}

template <
#line 45 "isa/tms320.isa"
class
#line 116622 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 116625 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 116629 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 116632 "isa_tms320.tcc"
>
void Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 116637 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 116641 "isa_tms320.tcc"
>::InvalidateDecodingCacheEntry(typename CONFIG::address_t addr)
{
	typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
	if(mru_page && mru_page->key == page_key) mru_page = 0;
	uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
	DecodeMapPage<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116650 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116654 "isa_tms320.tcc"
	> *prev, *cur;
	cur = decode_hash_table[index];
	if(cur)
	{
		if(cur->key == page_key)
		{
			decode_hash_table[index] = cur->next;
			delete cur;
			return;
		}
		prev = cur;
		cur = cur->next;
		if(cur)
		{
			do
			{
				if(cur->key == page_key)
				{
					prev->next = cur->next;
					cur->next = 0;
					delete cur;
					return;
				}
				prev = cur;
			} while((cur = cur->next) != 0);
		}
	}
}

template <
#line 45 "isa/tms320.isa"
class
#line 116687 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 116690 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 116694 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 116697 "isa_tms320.tcc"
>
inline DecodeMapPage<
#line 45 "isa/tms320.isa"
CONFIG
#line 116702 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 116706 "isa_tms320.tcc"
> *Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 116710 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 116714 "isa_tms320.tcc"
>::FindPage(typename CONFIG::address_t page_key)
{
	if(mru_page && mru_page->key == page_key) return mru_page;
	uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
	DecodeMapPage<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116722 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116726 "isa_tms320.tcc"
	> *prev, *cur;
	cur = decode_hash_table[index];
	if(cur)
	{
		if(cur->key == page_key)
		{
			mru_page = cur;
			return cur;
		}
		prev = cur;
		cur = cur->next;
		if(cur)
		{
			do
			{
				if(cur->key == page_key)
				{
					prev->next = cur->next;
					cur->next= decode_hash_table[index];
					decode_hash_table[index] = cur;
					mru_page = cur;
					return cur;
				}
				prev = cur;
			} while((cur = cur->next) != 0);
		}
	}
	return 0;
}

template <
#line 45 "isa/tms320.isa"
class
#line 116760 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 116763 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 116767 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 116770 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 116775 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 116779 "isa_tms320.tcc"
> *Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 116783 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 116787 "isa_tms320.tcc"
>::Decode(typename CONFIG::address_t addr)
{
	Operation<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116793 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116797 "isa_tms320.tcc"
	> *operation;
	typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
	DecodeMapPage<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116803 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116807 "isa_tms320.tcc"
	> *page;
	page = FindPage(page_key);
	if(!page)
	{
		page = new DecodeMapPage<
#line 45 "isa/tms320.isa"
		CONFIG
#line 116815 "isa_tms320.tcc"
		,
#line 45 "isa/tms320.isa"
		DEBUG
#line 116819 "isa_tms320.tcc"
		>(page_key);
		uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
		page->next = decode_hash_table[index];
		decode_hash_table[index] = page;
		mru_page = page;
	}
	operation = page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)];
	if(operation)
	{
		return operation;
	}
	operation = NCDecode(addr);
	page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
	return operation;
}

template <
#line 45 "isa/tms320.isa"
class
#line 116839 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 116842 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 116846 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 116849 "isa_tms320.tcc"
>
Operation<
#line 45 "isa/tms320.isa"
CONFIG
#line 116854 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 116858 "isa_tms320.tcc"
> *Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 116862 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 116866 "isa_tms320.tcc"
>::Decode(typename CONFIG::address_t addr, CodeType insn)
{
	Operation<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116872 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116876 "isa_tms320.tcc"
	> *operation;
	typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
	DecodeMapPage<
#line 45 "isa/tms320.isa"
	CONFIG
#line 116882 "isa_tms320.tcc"
	,
#line 45 "isa/tms320.isa"
	DEBUG
#line 116886 "isa_tms320.tcc"
	> *page;
	page = FindPage(page_key);
	if(!page)
	{
		page = new DecodeMapPage<
#line 45 "isa/tms320.isa"
		CONFIG
#line 116894 "isa_tms320.tcc"
		,
#line 45 "isa/tms320.isa"
		DEBUG
#line 116898 "isa_tms320.tcc"
		> (page_key);
		uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
		page->next = decode_hash_table[index];
		decode_hash_table[index] = page;
		mru_page = page;
	}
	operation = page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)];
	if(operation)
	{
		if(operation->GetEncoding() == insn && operation->GetAddr() == addr)
		return operation;
		delete operation;
	}
	operation = NCDecode(addr, insn);
	page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
	return operation;
}

template <
#line 45 "isa/tms320.isa"
class
#line 116920 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 116923 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 116927 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 116930 "isa_tms320.tcc"
>
void Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 116935 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 116939 "isa_tms320.tcc"
>::SetLittleEndian()
{
	is_little_endian = true;
}

template <
#line 45 "isa/tms320.isa"
class
#line 116948 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
CONFIG
#line 116951 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
bool
#line 116955 "isa_tms320.tcc"
#line 45 "isa/tms320.isa"
DEBUG
#line 116958 "isa_tms320.tcc"
>
void Decoder<
#line 45 "isa/tms320.isa"
CONFIG
#line 116963 "isa_tms320.tcc"
,
#line 45 "isa/tms320.isa"
DEBUG
#line 116967 "isa_tms320.tcc"
>::SetBigEndian()
{
	is_little_endian = false;
}

} } } } } } }
